<?php

class SIG {

	protected $_slimApp;
	protected $_db;
	protected $_env;
	public $_debug;

	/*Contrutor:
	configuração do Slim e flourish
	*/
	public function __construct($options) {

		fSession::setPath(dirname(__FILE__) . '/session');
		fSession::setLength('1 day');
		fSession::open();

		// if (isset($_SESSION['logado'])) {
		// 	if($_SESSION['logado'] != true){
		// 		$_SESSION['start'] = time(); // Taking now logged in time.          
		// 		$_SESSION['expire'] = $_SESSION['start'] + (600000000000 * 600000000000);
		// 	}
		// }

		// $_SESSION['logado'] = false;

		if (array_key_exists('SlimApp', $options)) {
			$this->_slimApp = $options['SlimApp']; 
		}
		if (array_key_exists('env', $options)) {
			$this->_env = $options['env'];
		}

		$this->_debug = true;
	}

	public function gravaLogMysql($table, $msg, $error){
	 	$data = date("Y-m-d");
		$hora_log = date("H-i");
		$hora = date("H:i:s");
		$ip = $_SERVER['REMOTE_ADDR'];

		//Nome do arquivo:
		$arquivo = LOG_MYSQL_PATH . $table . "--".$data."--".$hora_log."--log.txt";
		 
		//Texto a ser impresso no log:
		$texto = "[$hora][$ip]> $msg \n $error \n\n";
		 
		$manipular = fopen("$arquivo", "a+b");
		fwrite($manipular, $texto);
		fclose($manipular);
	}

	public function errorMessage($m,$e){
		$message = $m;
		if ($this->_debug == true) {
			$message = $e->returnMessage();
		}
		return $message;
	}

	/*Conexão do banco:*/
	protected function _getDb() {
		if (!$this->_db) {
			$this->_db = new fDatabase(DB_TYPE, ID_DB_NAME, ID_DB_USER, ID_DB_PASS, ID_DB_HOST);
		}
		return $this->_db;
	}

	public function getIndex() {
		/**/    
		
		// $this->setPass(204, '123mudar');    
		// $userSes = fSession::get('user');
		// var_dump($userSes['user']);    
	}

	public function retira_acentos($texto){
		$array1 = array( "á", "à", "â", "ã", "ä", "é", "è", "ê", "ë", "í", "ì", "î", "ï", "ó", "ò", "ô", "õ", "ö", "ú", "ù", "û", "ü", "ç"
			, "Á", "À", "Â", "Ã", "Ä", "É", "È", "Ê", "Ë", "Í", "Ì", "Î", "Ï", "Ó", "Ò", "Ô", "Õ", "Ö", "Ú", "Ù", "Û", "Ü", "Ç" );
		$array2 = array( "a", "a", "a", "a", "a", "e", "e", "e", "e", "i", "i", "i", "i", "o", "o", "o", "o", "o", "u", "u", "u", "u", "c"
			, "A", "A", "A", "A", "A", "E", "E", "E", "E", "I", "I", "I", "I", "O", "O", "O", "O", "O", "U", "U", "U", "U", "C" );
		return str_replace( $array1, $array2, $texto);
	}

	public function generateRandomPass($length = 10) {
		$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
		$charactersLength = strlen($characters);
		$randomString = '';
		for ($i = 0; $i < $length; $i++) {
			$randomString .= $characters[rand(0, $charactersLength - 1)];
		}
		return $randomString;
	}

	public function keyExists($key, $array, $camp) {
		if (array_key_exists($key, $array)) {
			return $array[$key][$camp];
		}
	}

	private function search_array($array, $key, $value) { 
		// Busca a um valor dentro do array conforme a chave, retorna o registro encontrado
		$results = array(); 

		if (is_array($array)) 
		{ 
			if (isset($array[$key]) && $array[$key] == $value) 
				$results[] = $array; 

			foreach ($array as $subarray) 
				$results = array_merge($results, $this->search_array($subarray, $key, $value)); 
		} 

		return $results; 
	} 

	public function email($emailsender, $emailremetente, $assunto, $mensagemHTML, $comcopia = false, $comcopiaoculta = false){
		//Envio de email
		/* Verifica qual é o sistema operacional do servidor para ajustar o cabeçalho de forma correta. Não alterar */
		if(PHP_OS == "Linux") $quebra_linha = "\n"; //Se for Linux
		elseif(PHP_OS == "WINNT") $quebra_linha = "\r\n"; // Se for Windows
		else die("Este script nao esta preparado para funcionar com o sistema operacional de seu servidor");

		$emailremetente    = trim($emailremetente);
		$emaildestinatario = trim($emailsender);

		/* Montando o cabeçalho da mensagem */
		$headers = "MIME-Version: 1.1".$quebra_linha;
		$headers .= "Content-type: text/html; charset=iso-8859-1".$quebra_linha;
		// Perceba que a linha acima contém "text/html", sem essa linha, a mensagem não chegará formatada.
		$headers .= "From: ".$emailremetente.$quebra_linha;
		$headers .= "Return-Path: " . $emailremetente . $quebra_linha;
		// Esses dois "if's" abaixo são porque o Postfix obriga que se um cabeçalho for especificado, deverá haver um valor.
		// Se não houver um valor, o item não deverá ser especificado.
		if($comcopia) $headers .= "Cc: ".$comcopia.$quebra_linha;
		if($comcopiaoculta) $headers .= "Bcc: ".$comcopiaoculta.$quebra_linha;
		$headers .= "Reply-To: ".$emaildestinatario.$quebra_linha;

		@mail($emaildestinatario, $assunto, $mensagemHTML, $headers, "-r". $emailsender);

	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Paises
	Método: GET
	URL: http://localhost/sig/api/index.php/pais
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getPais($full = false) {

		$pais = fRecordSet::build('Pais');

		if ($full == false) {

			$aPais = array();

			foreach ($pais->getRecords() as $key => $value) {

				$aPais[] = array(
					'id' => $value->getId(),
					'nome' => $value->getPaisNome()
					);
			}

			if (count($aPais) == 0) {
				$aPais[] = array(
					'mensagem' => "Nenhum pais encontrado."
					);
			}

			fJSON::output($aPais);
		}else{
			return $pais;
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Endereço a partir de um CEP
	Método: GET
	URL: http://localhost/sig/api/index.php/cep/<número do cep>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getCep($cep) {
	//$this->acessoApi();

		$aSearch['cep='] = $cep;

		$logradouro = fRecordSet::build('LogLogradouro', $aSearch);


		if (count($logradouro) == 0) {
			$error = -1;
			$mensagem = "Nenhum endereço encontrado para o CEP:" . $cep;

			/*$aLogradouro = array(
				'estado' => '',
				'logradouro' => '',
				'cep' => '',
				'bairro' => '',
				'cidade' => '',
				'idPais' => 33
				);*/
		}else{
			$error = 0;
			$mensagem = "";

			$aSearch = array();
			$aSearch['loc_nu_sequencial='] = $logradouro[0]->getLocNuSequencial();
			$cidade = fRecordSet::build('LogLocalidade', $aSearch);

			$aSearch = array();
			$aSearch['bai_nu_sequencial='] = $logradouro[0]->getBaiNuSequencialIni();
			$bairro = fRecordSet::build('LogBairro', $aSearch);

			$aSearch = array();
			$aSearch['loc_nu_sequencial='] = $logradouro[0]->getLocNuSequencial();
			$cidade = fRecordSet::build('LogLocalidade', $aSearch);

			$aLogradouro = array(
				'estado' => $logradouro[0]->getUfeSg(),
				'logradouro' => $logradouro[0]->getLogNome(),
				'cep' => $logradouro[0]->getCep(),
				'bairro' => $bairro[0]->getBaiNo(),
				'cidade' => $cidade[0]->getLocNo(),
				'idPais' => 33
				);
		}

		$estado = $this->getEstado(true);

		$aEstado = array();

		foreach ($estado as $resultEstado) {

			if ($logradouro->count()>0) {
				if ($resultEstado->getUfeSg() != $logradouro[0]->getUfeSg()) {
					$select = false;
				}else{
					$select = true;
				}
			}else{
				$select = false;
			}

			$cidade = $this->getCidade($resultEstado->getUfeSg(), true);

			$aCidade = array();

			foreach ($cidade as $resultCidade) {

				if ($aLogradouro['cidade'] != $resultCidade->getLocNo()) {
					$select = false;
				}else{
					$select = true;
				}

				$aCidade[] = array(
					'id' => $resultCidade->getLocNuSequencial(),
					'nome' => $resultCidade->getLocNo(),
					'select' => $select
					);
			}

			$aEstado[] = array(
				'uf' => $resultEstado->getUfeSg(),
				'nome' => $resultEstado->getUfeNo(),
				'select' => $select,
				'cidades' => $aCidade,
				);
		}

		$pais = $this->getPais(true);

		$aPais = array();

		foreach ($pais as $resultPais) {

			if ($aLogradouro['idPais'] != $resultPais->getId()) {
				$select = false;
			}else{
				$select = true;
			}

			$aPais[] = array(
				'id' => $resultPais->getId(),
				'nome' => $resultPais->getPaisNome(),
				'select' => $select
				);
		}

		$endereco[] = array(
			'error' => $error,
			'mensagem' => $mensagem,
			'endereco' => $aLogradouro,
			'estados' => $aEstado,
			'cidades' => $aCidade,
			'pais' => $aPais
			);


		fJSON::output($endereco);
	}

	/*
	Módulo:teste
	*/

	public function allteste() {

		ini_set('memory_limit', '1024M');
		ini_set('max_execution_time', 30000);

		$options = array(
			'recordsPerPage' => 5000,        
			);

		$page = 0;

		if (isset($_GET['p'])) {
			$page = $_GET['p'];
		}

	//get the data
		$startIndex = (isset($page)) ? $page * $options['recordsPerPage'] : 0;

		$filters = array();

		$teste = fRecordSet::build('Teste', $filters, array('id' => 'asc'), $options['recordsPerPage'], $page + 1);

		$aTeste = array();

		foreach ($teste->getRecords() as $key => $value) {

			$aTeste['data'][] = array(
				'id'    => $value->getId(),
				'nome'  => $value->getNome(),
				'idade' => $value->getIdade(),
				);
		}
		$aTeste['pagina'] = $page+1;
		$aTeste['startIndex'] = $startIndex;
		$aTeste['registros'] = $teste->count(true);
		fJSON::output($aTeste);

	}


	public function alltesteString() {
		$request = $this->_slimApp->request()->params();

		$aSearch['nome~'] = $request['string'];

		$pessoa = fRecordSet::build('Teste', $aSearch, array('nome' => 'asc')); 

		if ($pessoa->count() > 0) {

			$aPessoa = array(); 

			foreach ($pessoa->getRecords() as $key => $value) {

				$aPessoa[] = array(
					'id'    => $value->getId(),
					'nome'  => $value->getNome(),
					'idade' => $value->getIdade(),                  
					);
			};
		}

		if (count($aPessoa) == 0) {
			$aPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhuma pessoa encontrada."
				);
		}

		$aPessoa = array(
			'error' => "0",
			'pessoa' => $aPessoa
			);


		fJSON::output($aPessoa);

		die;
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Estados
	Método: GET
	URL: http://localhost/sig/api/index.php/estado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getEstado($full = false) {

		$estado = fRecordSet::build('LogFaixaUf');

		if ($full == false) {

			$aEstado = array();

			foreach ($estado->getRecords() as $key => $value) {

				$aEstado[] = array(
					'uf' => $value->getUfeSg(),
					'nome' => $value->getUfeNo()
					);
			}

			if (count($aEstado) == 0) {
				$aEstado[] = array(
					'mensagem' => "Nenhum estado encontrado."
					);
			}

			fJSON::output($aEstado);
		}else{
			return $estado;
		}

	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Cidades a partir de um Estado
	Método: GET
	URL: http://localhost/sig/api/index.php/cidade/<sigla do estado>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getCidade($uf, $full = false) {

		$aSearch = array();
		$aSearch['ufe_sg='] = $uf;

		$cidade = fRecordSet::build('LogLocalidade', $aSearch);

		if ($full == false) {

			$aCidade = array();

			foreach ($cidade->getRecords() as $key => $value) {

				$aCidade[] = array(
					'id' => $value->getLocNuSequencial(),
					'nome' => $value->getLocNo()
					);
			}

			if (count($aCidade) == 0) {
				$aCidade[] = array(
					'mensagem' => "Nenhuma cidade encontrada para o Estado:" . $uf
					);
			}

			fJSON::output($aCidade);
		}else{
			return $cidade;
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Estado Civil
	Método: GET
	URL: http://localhost/sig/api/index.php/estadocivil/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getEstadoCivil($estadocivil = "", $full = false) {

		$aSearch = '';

		if ($estadocivil != "") {
			$aSearch = 'WHERE id = '.$estadocivil;
		}

		$strQueryEstadoCivil = "SELECT id,descricao,ativo FROM estado_civil ".$aSearch." ORDER BY descricao ";
		$estadocivil = $this->_getDb()->query($strQueryEstadoCivil);
		$aEstadoCivil = array();

		$status = array('Inativo', 'Ativo');

		foreach ($estadocivil as $key => $value){
			$aEstadoCivil[] = array(
				'estado_civil_id' => $value['id'],
				'estado_civil_descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' =>$status[$value['ativo']]
				);
		}

		$estadocivil = $this->_getDb()->close();

		if (count($aEstadoCivil) == 0) {
			$aEstadoCivil = array('error' => -1, 'mensagem' => "Nenhum estado civil encontrado.");
		} else {
			$aEstadoCivil = array('error' => 0, 'estado_civil' => $aEstadoCivil);
		}

		if ($full == false) {
			fJSON::output($aEstadoCivil);
		}
		else {
			return $aEstadoCivil;
		}		
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipo de Pessoa
	Método: GET
	URL: http://localhost/sig/api/index.php/tipopessoa/<tipopessoa><flagfull>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 15/10/2014
	*/

	public function getTipoPessoa($tipopessoa = "", $full = false) {

		$aSearch = array();
		if ($tipopessoa != "") {
			$aSearch['id='] = $tipopessoa;
		}

		$tipopessoa = fRecordSet::build('TipoPessoa', $aSearch);

		if ($full == false) {

			$aTipoPessoa = array();

			foreach ($tipopessoa->getRecords() as $key => $value) {

				$aTipoPessoa[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao()
					);
			}

			if (count($aTipoPessoa) == 0) {
				$aTipoPessoa[] = array(
					'mensagem' => "Nenhum tipo de pessoa encontrado."
					);
			}

			fJSON::output($aTipoPessoa);
		}else{
			return $tipopessoa[0];
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Motivo de Bloqueio
	Método: GET
	URL: http://localhost/sig/api/index.php/motivobloqueio/<motivobloqueio><flagfull>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 15/10/2014
	*/

	public function getMotivoBloqueio($motivobloqueio = "", $full = false) {

		$aSearch = array();
		if ($motivobloqueio != "") {
			$aSearch['id='] = $motivobloqueio;
		}

		$motivobloqueio = fRecordSet::build('MotivoBloqueio', $aSearch);

		if ($full == false) {

			$aMotivoBloqueio = array();

			foreach ($motivobloqueio->getRecords() as $key => $value) {

				$aMotivoBloqueio[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao()
					);
			}

			if (count($aMotivoBloqueio) == 0) {
				$aMotivoBloqueio[] = array(
					'mensagem' => "Nenhum motivo de bloqueio encontrado."
					);
			}

			fJSON::output($aMotivoBloqueio);
		}else{
			return $motivobloqueio[0];
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipos de Beneficiário
	Método: GET
	URL: http://localhost/sig/api/index.php/tipobeneficiario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getTipoBeneficiario($tipobeneficiario = "", $full = false) {
		$aSearch = array();
		if ($tipobeneficiario != "") {
			$aSearch['id='] = $tipobeneficiario;
		}

		$tipobeneficiario = fRecordSet::build('TipoBeneficiario', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoBeneficiario = array();

			foreach ($tipobeneficiario->getRecords() as $key => $value) {

				$aTipoBeneficiario[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao()
					);
			}

			if (count($aTipoBeneficiario) == 0) {
				$aTipoBeneficiario[] = array(
					'mensagem' => "Nenhum tipo de beneficiário encontrado."
					);
			}

			fJSON::output($aTipoBeneficiario);
		}else{
			return $tipobeneficiario[0];
		}
	}

	/*
	Módulo: Controle de Acesso
	Descrição: Obter Dados do Usuário para Acesso ao Sistema
	Método: GET
	URL: http://localhost/sig/api/index.php/usuario/<usuario>/<senha>/<modulo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/
	public function getUser($login, $senha, $modulo) {
		$this->acessoApi();

		$aSearch = array();
		$aSearch['login='] = $login;

		$usuario = fRecordSet::build('Pessoa', $aSearch);

		if (count($usuario) == 0) {
			$aUsuario[] = array(
				'mensagem' => "O usuário: " . $login . " não foi encontrado."
				);
			fJSON::output($aUsuario);
			die;
		}

	//Obtem Nome do Papel

		$resultEstadoCivil = new EstadoCivil($usuario[0]->getIdEstadoCivil());//Obtem Estado Civil

	//Obtem Nome do Tipo de Pessoa
		$resultTipoPessoa = $this->getTipoPessoa($usuario[0]->getIdTipoPessoa(), true);

	//Obtem Motivo de Bloqueio
		if ($usuario[0]->getIdMotivoBloqueio() != null) {
			$resultMotivoBloqueio = $this->getMotivoBloqueio($usuario[0]->getIdMotivoBloqueio(), true);
			$motivo = $resultMotivoBloqueio->getDescricao();
		}else{
			$motivo = "";
		}

	//Obtem dados do Usuário   
		$aUsuario[] = array(
			'id' => $usuario[0]->getId(),
			'nome' => $usuario[0]->getNome(),
			'id_motivo_bloqueio' => $usuario[0]->getIdMotivoBloqueio(),
			'motivo_bloqueio' => $motivo,
			'id_estado_civil' => $usuario[0]->getIdEstadoCivil(),
			'estado_civil' => $resultEstadoCivil->getDescricao(),
			'id_tipo_pessoa' => $usuario[0]->getIdTipoPessoa(),
			'tipo_pessoa' => $resultTipoPessoa->getDescricao(),
			'apelido' => $usuario[0]->getApelido(),
			'nome_tradicao' => $usuario[0]->getNomeTradicao(),
			'data_nascimento' => $usuario[0]->getDataNascimento(),
			'nacionalidade' => $usuario[0]->getNacionalidade(),
			'sexo' => $usuario[0]->getSexo(),
			'empresa' => $usuario[0]->getEmpresa(),
			'ocupacao' => $usuario[0]->getOcupacao(),
			'login' => $usuario[0]->getLogin(),
			'senha' => $usuario[0]->getSenha(),
			'email' => $usuario[0]->getEmail(),
			'foto' => $usuario[0]->getFoto(),
			'data_associacao' => $usuario[0]->getDataAssociacao(),
			'token' => $usuario[0]->getToken(),
			'ativo' => $usuario[0]->getAtivo(),
			'data_cadastro' => $usuario[0]->getDataCadastro());

	//Verifica se a senha informada no login é a mesma que está no banco de dados
if (sha1($senha)!=$usuario[0]->getSenha()){
	$aUsuarioSenha[] = array(
		'mensagem' => "Usuário ou senha inválidos"
		);
	fJSON::output($aUsuarioSenha);
	die;
}

	//Lista Papeis do Modulo Solicitado pelo usuário
$papelPessoa = $this->getPapelPessoa($usuario[0]->getId(), $modulo, true);

$aPapelPessoa = array();

	//Obtem Nome do Papel
$resultPapel = $this->getPapel($papelPessoa[0]->getIdPapel(), true);

	//Obtem Nome do Modulo
$resultTipoEntidade = $this->getTipoEntidade($papelPessoa[0]->getIdTipoEntidade(), true);

$aPapelPessoa[] = array(
	'id_pessoa' => $papelPessoa[0]->getIdPessoa(),
	'id_papel' => $papelPessoa[0]->getIdPapel(),
	'papel' => $resultPapel->getNome(),
	'id_tipo_entidade' => $papelPessoa[0]->getIdTipoEntidade(),
	'entidade' => $resultTipoEntidade->getDescricao()
	);

if (count($aPapelPessoa) == 0) {
	$aPapelPessoa[] = array(
		'mensagem' => "O usuário não possui nenhum papel associado ao módulo selecionado."
		);
	fJSON::output($aPapelPessoa);
	die;
}

	//Busca Atividades do Papel do Usuario Associado ao Módulo selecionado
$aSearch = array();
$aSearch['id_papel='] = $papelPessoa[0]->getIdPapel();

$papelAtividade = fRecordSet::build('PapelAtividade', $aSearch);

$aAtividade = array();

foreach ($papelAtividade as $resultPapelAtividade) {

	$resultAtividade = $this->getAtividade($resultPapelAtividade->getIdAtividade(), true);    

	$aAtividade[] = array(
		'id_atividade' => $resultAtividade->getId(),
		'id_tipo_entidade' => $resultAtividade->getIdTipoEntidade(),
		'id_atividade_parent' => $resultAtividade->getIdAtividadeParent(),
		'nome' => $resultAtividade->getNome(),
		'descricao' => $resultAtividade->getDescricao(),
		'url' => $resultAtividade->getUrl(),
		'ativo' => $resultAtividade->getAtivo(),
		'show_menu' => $resultAtividade->getShowMenu(),
		);
}

if (count($aAtividade) == 0) {
	$aAtividade[] = array(
		'mensagem' => "O usuário não possui nenhuma atividade vinculada ao papel do módulo selecionado."
		);
	fJSON::output($aAtividade);
	die;
}

$usuarioResult = array(
	'usuario' => $aUsuario,
	'papel' => $aPapelPessoa,
	'atividade' => $aAtividade,
	);

fJSON::output($usuarioResult);
}

	/*
	Módulo: Controle de Acesso
	Descrição: Obter Lista de Atividades
	Método: GET
	URL: http://localhost/sig/api/index.php/atividade/<atividade>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 15/10/2014
	*/

	public function getAtividade($atividade = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();

		if($atividade != ""){
			$aSearch['id='] = $atividade;
		}else{
			$aSearch['id_atividade_parent='] = null;
		}

		$atividade = fRecordSet::build('Atividade', $aSearch);

		if ($full == false) {

			$aAtividade = array();

			foreach ($atividade->getRecords() as $key => $value) {

				$aAtividade[] = array(
					'id' => $value->getId(),
					'id_tipo_entidade' => $value->getDescricao(),
					'nome' => $value->getNome(),
					'descricao' => $value->getDescricao(),
					'url' => $value->getUrl(),
					'ativo' => $value->getAtivo(),
					'show_menu' => $value->getShowMenu(),
					'icone' => $value->getIcon()
					);
			}

			if (count($aAtividade) == 0) {
				$aAtividade[] = array(
					'mensagem' => "Nenhuma atividade encontrada."
					);
			}

			fJSON::output($aAtividade);
		}else{
			return $atividade[0];
		}
	}

	/*
	Módulo: Controle de Acesso
	Descrição: Obter Lista de Papeis para um Determinado Usuário
	Método: GET
	URL: http://localhost/sig/api/index.php/papel/<id_pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/10/2014
	*/

	public function getPapelPessoa($id_pessoa, $modulo, $full = false) {
		$this->acessoApi();

		$aSearch = array();
		$aSearch['id_pessoa='] = $id_pessoa;
		$aSearch['id_tipo_entidade='] = $modulo;

		$papelPessoa = fRecordSet::build('PapelPessoa', $aSearch);

		if ($full == false) {

			$aPapelPessoa = array();

			foreach ($papelPessoa->getRecords() as $key => $value) {

				$aPapelPessoa[] = array(
					'id_pessoa' => $value->getIdPessoa(),
					'id_papel' => $value->getIdPapel(),
					'id_tipo_entidade' => $value->getIdTipoEntidade(),
					);
			}

			if (count($aPapelPessoa) == 0) {
				$aPapelPessoa[] = array(
					'mensagem' => "Nenhum papel encontrado para esse usuário no módulo selecionado."
					);
			}

			fJSON::output($aPapelPessoa);
		}else{
			return $papelPessoa;
		}
	}

/*
Módulo: Controle de Acesso
Descrição: Obter Lista de Papeis
Método: GET
URL: http://localhost/sig/api/index.php/papel/<modulo>
Autenticação: Não
Resposta: JSON
Data de Criação: 15/10/2014
Autor: Ricardo Bruno
Versão: 1.0

Data de Alteração: 28/03/2015
Autor: Luciano Almeida
Descrição: Logo acima de "fJSON::output($aPapel);" tinha um "return $papel[0];" impedindo que fosse retornado o "$aPapel" corretamente.
*/
public function getPapel($papel = "", $full = false) {
	$this->acessoApi();

	$aSearch = array();

	if ($papel != "") {
		$aSearch['id='] = $papel;
	}

	$papel = fRecordSet::build('Papel', $aSearch);

	if ($full == false) {
		$aPapel = array();

		foreach ($papel->getRecords() as $key => $value) {
			$aPapel[] = array(
				'id' => $value->getId(),
				'nome' => $value->getNome(),
				'id_tipo_entidade' => $value->getIdTipoEntidade(),
				'descricao' => $value->getDescricao(),
				'ativo' => $value->getAtivo()
				);
		}

		if (count($aPapel) == 0) {
			$aPapel[] = array(
				'mensagem' => "Nenhum papel encontrado."
				);
		}

		fJSON::output($aPapel);
	} else {
		return $papel[0];
	}
}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Papeis
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoentidade/<tipoentidade>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 15/10/2014
	*/

	public function getTipoEntidade($tipoentidade = "", $full = false) {

		$aSearch = array();
		if ($tipoentidade != "") {
			$aSearch['id='] = $tipoentidade;
		}

		$tipoentidade = fRecordSet::build('TipoEntidade', $aSearch);

		if ($full == false) {

			$aTipoEntidade = array();

			foreach ($tipoentidade->getRecords() as $key => $value) {

				$aTipoEntidade[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo()
					);
			}

			if (count($aTipoEntidade) == 0) {
				$aTipoEntidade[] = array(
					'mensagem' => "Nenhum tipo de entidade encontrado."
					);
			}

			fJSON::output($aTipoEntidade);
		}else{
			return $tipoentidade[0];
		}
	}

	/*
	Módulo: Geral
	Descrição: Gerar Login
	Método: GET
	URL: 
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Rafael Frota
	Versão: 1.0
	Data de Alteração: 11/11/2014
	*/

	public function criarLoginNumeral($login, $numeral) {  

		$contador = count($login);        
		$valido = false;

		$aSearch['login='] = $login[0].'.'.$login[$contador-1].$numeral;
		$pessoa = fRecordSet::build('Usuario', $aSearch);            

		if ($pessoa->count() == 0) {
			$loginGen = $aSearch['login='];            
			$valido = true;
		}

		if ($valido == true) {
			return $loginGen;
		}else{
			$this->criarLoginNumeral($login, $numeral++);
		}

	}

	public function criarLogin($login) {

		$newLogin = explode(' ', $login);
		$loginGen = '';
		$contador = count($newLogin);        
		$valido = false;
		$numeral = 2;

		for ($i=1; $i < count($newLogin); $i++) { 
			$aSearch = array();      
			$aSearch['login='] = $newLogin[0].'.'.$newLogin[$contador-1];
			$pessoa = fRecordSet::build('Usuario', $aSearch);                  
			if ($pessoa->count() == 0 && $valido == false) {                
				$loginGen = $aSearch['login='];
				$valido = true;
			}
			$contador--;
		};

		if ($valido == false) {
			$loginGen = $this->criarLoginNumeral($newLogin, $numeral);
		};

		return strtolower($loginGen);
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar uma Nova Pessoa
	Método: POST
	URL: http://localhost/sig/api/index.php/pessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 08/12/2014
	Alterado Por: Ricardo Bruno
	*/

	public function postPessoa($data = array(), $full = false) {
	// $tipoCadastro(1) = Associado Pessoa Física e Jurídica
	// $tipoCadastro(2) = Proprietario de Jazigo
	// $tipoCadastro(3) = Funcionário
	// $tipoCadastro(4) = Donatario
	// $tipoCadastro(5) = Convidado
	// $tipoCadastro(6) = Não-Associado
	// $tipoCadastro(7) = Fornecedor
	// $tipoCadastro(8) = Entidade
	// $tipoCadastro(9) = Padrinho
		$alteraLogin = true;
		
		if(count($data) == 0){
			$data = json_decode(file_get_contents("php://input"));	
		}
		
		$id_documento = '';
		$id_documento_cpf = '';

		if (property_exists($data, 'id')) {
			$pessoa = new Pessoa($data->id);
			$telefone = new Telefone();
			$aSearch = array();
			$aSearch['id_pessoa='] = $data->id;
			$alteraLogin = false;
			$alteracao  = 1;

			if(property_exists($data, 'telefone_comercial') || property_exists($data, 'telefone_residencial') || property_exists($data, 'telefone_celular')){
				$telefonePessoa = fRecordSet::build('Telefone', $aSearch);
				foreach ($telefonePessoa->getRecords() as $key => $value) {
					$telefone = new Telefone($value->getId());
					$telefone->delete();
				}
			}

			$documentoPessoa = fRecordSet::build('Documento', $aSearch);
			foreach ($documentoPessoa->getRecords() as $key => $value) {
				$documento = new Documento($value->getId());
				$documento->delete();
			}

			$entidadePessoa = fRecordSet::build('EntidadePessoa', $aSearch);
			foreach ($entidadePessoa->getRecords() as $key => $value) {
				$entidadePessoa = new EntidadePessoa($value->getId());
				$entidadePessoa->delete();
			}

			$papelPessoa = fRecordSet::build('PapelPessoa', $aSearch);
			foreach ($papelPessoa->getRecords() as $key => $value) {
				$papelPessoa = new PapelPessoa($value->getId());
				$papelPessoa->delete();
			} 

			$campanhaPessoa = fRecordSet::build('CampanhaPessoa', $aSearch);
			foreach ($campanhaPessoa->getRecords() as $key => $value) {
				$campanhaPessoa = new CampanhaPessoa($value->getId());
				$campanhaPessoa->delete();
			}  

			$pessoaTipoEvento = fRecordSet::build('PessoaTipoEvento', $aSearch);
			foreach ($pessoaTipoEvento->getRecords() as $key => $value) {
				$pessoaTipoEvento = new PessoaTipoEvento($value->getId());
				$pessoaTipoEvento->delete();
			}                              

		}else{
			$alteracao = 0;
			$pessoa = new Pessoa();

		}

	//try{

		//******** Grava informações na Tabela de Pessoa
		if (property_exists($data, 'id_estado_civil')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getIdEstadoCivil();
			}
			$this->setAuditoria('Pessoa','Id estado civil', $pessoaAnt, $data->id_estado_civil);
			$pessoa->setIdEstadoCivil($data->id_estado_civil);
		}

		if (property_exists($data, 'id_tipo_pessoa')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getIdTipoPessoa();
			}
			$this->setAuditoria('Pessoa','Id tipo pessoa', $pessoaAnt, $data->id_tipo_pessoa);
			$pessoa->setIdTipoPessoa($data->id_tipo_pessoa);
		}
		if (property_exists($data, 'nome')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getNome();
			}
			$this->setAuditoria('Pessoa','Nome', $pessoaAnt, $data->nome);
			$pessoa->setNome($data->nome);
		}

		if (property_exists($data, 'apelido')){
			$pessoa->setApelido($data->apelido);
		}
		if (property_exists($data, 'nome_tradicao')){
			$pessoa->setNomeTradicao($data->nome_tradicao);
		}

		if (property_exists($data, 'refugiado')){
			if ($data->refugiado == false) {
				$refugiado = 0;
			}else{
				$refugiado = 1;
			}
			$pessoa->setRefugiado($data->refugiado);
		}

		if (property_exists($data, 'data_nascimento')){
			$pessoa->setDataNascimento(implode("-", array_reverse(explode("/", $data->data_nascimento))));
		}

		if (property_exists($data, 'nacionalidade')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getNacionalidade();
			}
			$this->setAuditoria('Pessoa','Nacionalidade', $pessoaAnt, $data->nacionalidade);
			$pessoa->setNacionalidade($data->nacionalidade);
		}

		if (property_exists($data, 'naturalidade')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getNaturalidade();
			}
			$this->setAuditoria('Pessoa','Naturalidade', $pessoaAnt, $data->naturalidade);

			$pessoa->setNaturalidade($data->naturalidade);   
		}

		if (property_exists($data, 'nacionalidade_familia')){
			$pessoa->setNacionalidadeFamilia($data->nacionalidade_familia);
		}
		if (property_exists($data, 'naturalidade_familia')){
			$pessoa->setNaturalidadeFamilia($data->naturalidade_familia);                          
		}
		if (property_exists($data, 'sexo')){
			$pessoa->setSexo($data->sexo);
		}
		if (property_exists($data, 'empresa')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getEmpresa();
			}
			$this->setAuditoria('Pessoa','Empresa', $pessoaAnt, $data->empresa);
			$pessoa->setEmpresa($data->empresa);
		}
		if (property_exists($data, 'ocupacao')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getOcupacao();
			}
			$this->setAuditoria('Pessoa','Ocupação', $pessoaAnt, $data->ocupacao);
			$pessoa->setOcupacao($data->ocupacao);
		}

		if (property_exists($data, 'especializacao')){
			$especializacaoAnt = '';
			if($alteracao == 1){
				$especializacaoAnt = $pessoa->getEspecializacao();
			}
			$this->setAuditoria('Pessoa','Especializacao', $especializacaoAnt, $data->especializacao);
			$pessoa->setEspecializacao($data->especializacao);
		}

		if (property_exists($data, 'renda')){
			$rendaAnt = '';
			if($alteracao == 1){
				$rendaAnt = $pessoa->getRenda();
			}
			$this->setAuditoria('Pessoa','Renda', $rendaAnt, $data->renda);
			$pessoa->setRenda($data->renda);
		}

		if (property_exists($data, 'website')){
			$pessoa->setWebsite($data->website);
		} 

		if (property_exists($data, 'nome_mae')){
			$pessoa->setNomeMae($data->nome_mae);
		} 

		if (property_exists($data, 'nome_pai')){
			$pessoa->setNomePai($data->nome_pai);
		} 

		if (property_exists($data, 'id_religiao')){
			$pessoa->setIdReligiao($data->id_religiao);
		}            

		if (property_exists($data, 'antecedente_criminal')){
			$antecedenteCriminalAnt = '';
			if($alteracao == 1){
				$antecedenteCriminalAnt = $pessoa->getAntecedenteCriminal();
			}
			$this->setAuditoria('Pessoa','AntecedenteCriminal', $antecedenteCriminalAnt, $data->antecedente_criminal);
			$pessoa->setAntecedenteCriminal($data->antecedente_criminal);
		}

		if (property_exists($data, 'tipo_residencia')){
			$tipoResidenciaAnt = '';
			if($alteracao == 1){
				$tipoResidenciaAnt = $pessoa->getTipoResidencia();
			}
			$this->setAuditoria('Pessoa','TipoResidencia', $tipoResidenciaAnt, $data->tipo_residencia);
			$pessoa->setTipoResidencia($data->tipo_residencia);
		}

		if (property_exists($data, 'email')){
			$pessoaAnt = '';
			if($alteracao == 1){
				$pessoaAnt = $pessoa->getEmail();
			}
			$this->setAuditoria('Pessoa','Email', $pessoaAnt, $data->email);
			$pessoa->setEmail($data->email);
		}
		if (property_exists($data, 'data_associacao')){
			$pessoa->setDataAssociacao(implode("-", array_reverse(explode("/", $data->data_associacao))));
		}

		if (property_exists($data, 'data_desligamento')){
			$pessoa->setDataDesligamento(implode("-", array_reverse(explode("/", $data->data_desligamento))));
		}
		if (property_exists($data, 'observacao')){
			$pessoa->setObservacao($data->observacao);
		}
		if (property_exists($data, 'numero_carteirinha')){
			$pessoa->setNumeroCarteirinha($data->numero_carteirinha);
		}
		if (property_exists($data, 'id_fonte_captacao')){
			$pessoa->setIdFonteCaptacao($data->id_fonte_captacao);   
		}
		if (property_exists($data, 'id_pessoa_indicadora')){
			$pessoa->setIdPessoaIndicadora($data->id_pessoa_indicadora);   
		}
		if (property_exists($data, 'id_categoria_naoassociado')){
			$pessoa->setIdCategoriaNaoassociado($data->id_categoria_naoassociado);                 
		}
		if (property_exists($data, 'id_tipo_fornecedor')){
			$pessoa->setIdTipoFornecedor($data->id_tipo_fornecedor);                 
		}
		if(property_exists($data, 'id_departamento_funcionario')){
			$pessoa->setIdDepartamentoFuncionario($data->id_departamento_funcionario);
		}    
		if(property_exists($data, 'id_forma_tratamento')){
			$pessoa->setIdFormaTratamento($data->id_forma_tratamento);
		}    
		if (property_exists($data, 'enviar_convite')){
			$pessoa->setEnviarConvite($data->enviar_convite);                                                  
		}
	if (($data->tipocadastro == 1)) { //Associado
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(1);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
		$pessoa->setAtivo(1);
	}else if ($data->tipocadastro == 2) { //Proprietário Jazigo
		//$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);		
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(1);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
		$pessoa->setAtivo(1);
	}else if ($data->tipocadastro == 3) { //Funcionário
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(1);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
		$pessoa->setAtivo(1);
	}else if ($data->tipocadastro == 4) { //Donatario
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(1);
		$pessoa->setFornecedor(0);
		$pessoa->setAtivo(1);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
	} else if ($data->tipocadastro == 5) { //Convidado
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setAtivo(1);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
	} else if ($data->tipocadastro == 6) { //Não associados
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setAtivo(1);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
	} else if ($data->tipocadastro == 7) { //Fornecedor
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(1);
		$pessoa->setAtivo(1);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
	} else if ($data->tipocadastro == 8) { //Entidade
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(1);
		$pessoa->setPadrinho(0);
	} else if ($data->tipocadastro == 9) { //Padrinho
		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(1);
		$pessoa->setAtivo(1);

	}else if ($data->tipocadastro == 10) { //Responsável Jazigo

		$pessoa->setIdPessoaResponsavelProprietario($data->id_pessoa_responsavel_proprietario);
		$pessoa->setResponsavelProprietario(1);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);		
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
		$pessoa->setAtivo(1);
	}else if ($data->tipocadastro == 11) { //Responsável Aluno

		$pessoa->setIdPessoaResponsavelProprietario(0);
		$pessoa->setResponsavelProprietario(0);
		$pessoa->setAssociado(0);
		$pessoa->setBeneficiario(0);		
		$pessoa->setParentesco(0);
		$pessoa->setFuncionario(0);
		$pessoa->setProprietario(0);
		$pessoa->setDonatario(0);
		$pessoa->setFornecedor(0);
		$pessoa->setEntidade(0);
		$pessoa->setPadrinho(0);
		$pessoa->setResponsavel(1);
		$pessoa->setAtivo(1);
	}

	
	$pessoa->setDataCadastro(date('Y-m-d H:i:s'));
	//echo '<pre>' .print_r($pessoa) .'</pre>';
	//die;
	$pessoa->store();

	$id_pessoa = $pessoa->getId();

	if($data->tipocadastro == 2){
		$pessoa->setIdPessoaResponsavelProprietario($id_pessoa);
		$pessoa->store();
	}

	//******** Fim - Grava informações na Tabela de Pessoa    
	$id_pessoa = $pessoa->getId(); //Recupera o Id da Pessoa Inserida
	
	if ($data->tipocadastro == 3) { //verificar se é um cadastro de funcionário e insere login e senha    
		$aSearch = array();
		$aSearch['id_pessoa='] = $id_pessoa;
		$usuarioNovo = fRecordSet::build('Usuario', $aSearch);
		if(count($usuarioNovo) > 0){
			$usuario = new Usuario($usuarioNovo[0]->getId());
		}else{
			$usuario = new Usuario();
		}
		$userSes = fSession::get('user');
		$login = $usuario->getLogin();

		if ($alteraLogin == true) {
			$login = $this->criarLogin(strtolower($this->retira_acentos($data->nome)));

			$usuario->setLogin($login);      
			$usuario->setIdPessoa($id_pessoa);      
			$usuario->store();

			$this->setPass($id_pessoa,'123mudar');
		}      

		$papelPessoa = new PapelPessoa(); //Grava Papel_Pessoa

		$papelPessoa -> setIdPessoa($id_pessoa);
		$papelPessoa -> setIdPapel($data->id_papel);
		$papelPessoa -> setIdTipoEntidade($userSes['user']['idTipoEntidade']);

		$papelPessoa->store();
	}                

	
		//******** Grava informações na Tabela de Telefone                  
		if (property_exists($data, 'telefone_residencial')) { //Grava Telefone Residencial se houver

			if (strlen($data->telefone_residencial)>0) {
				$telefone = new Telefone();

			//Divide DDD e Numero
				$telefoneResidencial = str_replace("(", "", $data->telefone_residencial);
					$telefoneResidencial = str_replace(")", "", $telefoneResidencial);
					$telefoneResidencial = str_replace(" ", "", $telefoneResidencial);
					$telefoneResidencial = str_replace("-", "", $telefoneResidencial);

					$dddResidencial = substr($telefoneResidencial, 0, 3);
					$numeroResidencial = substr($telefoneResidencial, 3, 9);

			$telefone->setIdTipoTelefone('1'); //Residencial
			$telefone->setIdPessoa($id_pessoa);
			$telefone->setDdd($dddResidencial);
			$telefone->setNumero($numeroResidencial);
			$telefone->setPrincipal('1');
			$telefone->setAtivo('1');
			$telefone->store();          
		}
	}

		if (property_exists($data, 'telefone_comercial')) { //Grava Telefone Comercial se houver
			if (strlen($data->telefone_comercial)>0) {              
				$telefone = new Telefone();

				$telefoneComercial = str_replace("(", "", $data->telefone_comercial);
					$telefoneComercial = str_replace(")", "", $telefoneComercial);
					$telefoneComercial = str_replace(" ", "", $telefoneComercial);
					$telefoneComercial = str_replace("-", "", $telefoneComercial);

					$dddComercial = substr($telefoneComercial, 0, 3);
					$numeroComercial = substr($telefoneComercial, 3, 8);
					if (strlen($telefoneComercial)>11) {
						$ramalComercial = substr($telefoneComercial, 9, 4);
					} else {
						$ramalComercial = '';
					}

			$telefone->setIdTipoTelefone('2'); //Comercial
			$telefone->setIdPessoa($id_pessoa);
			$telefone->setDdd($dddComercial);
			$telefone->setNumero($numeroComercial);
			$telefone->setRamal($ramalComercial);
			$telefone->setPrincipal(0);
			$telefone->setAtivo(1);
			//echo "<pre>XXXXXXXXXXXXX".print_r($telefone)."</pre>";
			$telefone->store();
		}
	}

		if (property_exists($data, 'telefone_celular')) { //Grava Telefone Celular se houver
			if (strlen($data->telefone_celular)>0) {
				$telefone = new Telefone();

				$telefoneCelular = str_replace("(", "", $data->telefone_celular);
					$telefoneCelular = str_replace(")", "", $telefoneCelular);
					$telefoneCelular = str_replace(" ", "", $telefoneCelular);
					$telefoneCelular = str_replace("-", "", $telefoneCelular);

					$dddCelular = substr($telefoneCelular, 0, 3);
					$numeroCelular = substr($telefoneCelular, 3, 9);

			$telefone->setIdTipoTelefone('3'); //Celular
			$telefone->setIdPessoa($id_pessoa);
			$telefone->setDdd($dddCelular);
			$telefone->setNumero($numeroCelular);
			$telefone->setPrincipal(0);
			$telefone->setAtivo(1);

			//echo "<pre>".print_r($telefone)."</pre>";
			//die();

			$telefone->store();

		}
	}
		//******** Fim - Grava informações na Tabela de Telefone
		//******** Grava informações na Tabela de Documento            
		if ($data->id_tipo_pessoa == 1) { //Pessoa Física    
		if (property_exists($data, 'id_tipo_documento')) { //Tipo do Documento de Identificação
			if ($data->id_tipo_documento) {
				$documento = new Documento();

				$aSearch = array();
				$aSearch['id_tipo_documento='] = $data->id_tipo_documento;
				$aSearch['numero='] = $data->numero_documento;

				$documento->setIdTipoDocumento($data->id_tipo_documento);
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($data->numero_documento);
				$documento->setAtivo(1);
				$documento->store();

				$id_documento = $documento->getId();
			}
		}
		
		if (property_exists($data, 'cpf')) { //Grava CPF
			if ($data->cpf != '') {
				$documento = new Documento();

				$cpf = str_replace(".", "", $data->cpf);
				$cpf = str_replace("-", "", $cpf);

			$documento->setIdTipoDocumento('2'); //CPF
			$documento->setIdPessoa($id_pessoa);
			$documento->setNumero($cpf);
			$documento->setAtivo(1);
			$documento->store();                  

			$id_documento_cpf = $documento->getId();
		}
	}

		if (property_exists($data, 'passaporte')) { //Grava Passaporte
			if ($data->passaporte != '') {
				$documento = new Documento();

			$documento->setIdTipoDocumento('4'); //Passaporte
			$documento->setIdPessoa($id_pessoa);
			$documento->setNumero($data->passaporte);
			$documento->setAtivo(1);

			$documento->store();
		}
	}
	}else if ($data->id_tipo_pessoa == 2) { //Pessoa Jurídica    
		if (property_exists($data, 'cnpj')) { //Grava cnpj
			if ($data->cnpj != '') {
				$documento = new Documento();

				$cnpj = str_replace(".", "", $data->cnpj);
				$cnpj = str_replace("-", "", $cnpj);
				$cnpj = str_replace("/", "", $cnpj);

			$documento->setIdTipoDocumento('5'); //CNPJ
			$documento->setIdPessoa($id_pessoa);
			$documento->setNumero($cnpj);
			$documento->setAtivo(1);
			$documento->store();
		}
	}

		if (property_exists($data, 'inscricaoEstadual')) { //Grava Inscrição Estadual
			$documento = new Documento();

		$documento->setIdTipoDocumento('6'); //inscricaoEstadual
		$documento->setIdPessoa($id_pessoa);
		$documento->setNumero($data->inscricaoEstadual);
		$documento->setAtivo(1);
		$documento->store();
	}

		if (property_exists($data, 'inscricaoMunicipal')) { //Grava Inscrição Municipal
			$documento = new Documento();

		$documento->setIdTipoDocumento('7'); //inscricaoMunicipal
		$documento->setIdPessoa($id_pessoa);
		$documento->setNumero($data->inscricaoMunicipal);
		$documento->setAtivo(1);
		$documento->store();
	}                  
}
	//******** Fim - Grava informações na Tabela de Documento
	//******** Grava informações na Tabela de EntidadePessoa 
$entidadePessoa = new EntidadePessoa();
$userSes = fSession::get('user');
$entidadePessoa->setIdPessoa($id_pessoa);
$entidadePessoa->setIdEntidade($userSes['user']['entidadePessoa']);
$entidadePessoa->store();            
	//******** Grava informações na Tabela de EntidadePessoa 
	//******** Grava informações na Tabela de CampanhaPessoa 
if ((property_exists($data, 'id_campanha')) && (strlen($data->id_campanha)>0)) {
	$campanhaPessoa = new CampanhaPessoa();

	$campanhaPessoa->setIdCampanha($data->id_campanha);
	$campanhaPessoa->setIdPessoa($id_pessoa);
	$campanhaPessoa->setIdPessoaIndicador($data->id_pessoa_indicador);
	$campanhaPessoa->store(); 
}           
	//******** Grava informações na Tabela de CampanhaPessoa     
	//******** Grava informações na Tabela de PessoaTipoEvento 
if (property_exists($data, 'tipos_eventoselecionados')) {
	foreach ($data->tipos_eventoselecionados as $key => $value) {
		$pessoaTipoEvento = new PessoaTipoEvento();

		$pessoaTipoEvento->setIdPessoa($id_pessoa);
		$pessoaTipoEvento->setIdTipoEvento($value->id);
		$pessoaTipoEvento->store(); 
	}
}           
	//******** Grava informações na Tabela de PessoaTipoEvento   
if (property_exists($data, 'funcionario')) {
	if ($data->funcionario != 0) {
		$arrMensagem = array('error' => 0, 'id_pessoa' => $id_pessoa, 'login' => $login, 'senha' => '123mudar', 'mensagem' => "Dados pessoais incluídos com sucesso!");
		fJSON::output($arrMensagem);
		die();
	}
}


$arrMensagem = array('error' => 0, 
	'id_pessoa' => $id_pessoa, 
	'id_documento' => $id_documento, 
	'id_documento_cpf' => $id_documento_cpf, 
	'mensagem' => "Dados pessoais gravados com sucesso!");

if($full == false){
	fJSON::output($arrMensagem);
	die();
}else{
	return $arrMensagem;
}

}

/*
Módulo: Mesquita
Descrição: Obter Lista de Endereços de uma Pessoa
Método: GET
URL: http://localhost/sig/api/index.php/endereco/<pessoa>/<id endereco>
Autenticação: Não
Resposta: JSON
Data de Criação: 16/10/2014
Autor: Ricardo Bruno
Versão: 1.0
Data de Alteração: 16/10/2014
*/
public function getEnderecoPessoa($id_pessoa = "", $id_endereco = "", $full = false) {
	$this->acessoApi();
	$aSearch = array();
	//$aSearch['ativo='] = 1;

	if ($id_pessoa != "") {
		$aSearch['id_pessoa='] = $id_pessoa;
	}

	if ($id_endereco != "") {
		$aSearch['id='] = $id_endereco;
	}

	$enderecoPessoa = fRecordSet::build('Endereco', $aSearch);
	$mensagem = array();
	$aEnderecoPessoa = array();

	if ($enderecoPessoa->count() == 0) {
		$mensagem = array(
			'error' => "-1",
			'mensagem' => "Nenhum endereço encontrado.",
			'endereco' => ""
			);
	} else {
		foreach ($enderecoPessoa->getRecords() as $key => $value) {
			$boleanPrincipal = false;

			if ($value->getPrincipal() == 1) {
				$boleanPrincipal = true;
			}

			$resultTipoEndereco = $this->getTipoEndereco(0,$value->getIdTipoEndereco(), true); //Obtem Tipo do Endereço

			$aEnderecoPessoa[] = array(
				'id' => $value->getId(),
				'id_tipo_endereco' => $value->getIdTipoEndereco(),
				'tipo_endereco' => $resultTipoEndereco->getDescricao(),
				'id_pais' => $value->getIdPais(),
				'id_pessoa' => $value->getIdPessoa(),
				'logradouro' => $value->getLogradouro(),
				'numero' => $value->getNumero(),
				'bairro' => $value->getBairro(),
				'complemento' => $value->getComplemento(),
				'cidade' => $value->getCidade(),
				'estado' => $value->getEstado(),
				'cep' => $value->getCodigoPostal(),
				'principal' => $value->getPrincipal(),
				'boleanPrincipal' => $boleanPrincipal,
				'data_cadastro' => $value->getDataCadastro(),
				'observacao' => $value->getObservacao(),
				'ativo' => $value->getAtivo()
				);
		}

		$mensagem = array(
			'error' => "0",
			'mensagem' => "",
			'endereco' => $aEnderecoPessoa,
			);
	}

	if ($full == false) {
		fJSON::output($mensagem);
	}else{
		return $mensagem;
	}
}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Documentos de uma Pessoa
	Método: GET
	URL: http://localhost/sig/api/index.php/documento/<pessoa>/<id documento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 24/03/2015
	Autor: Ricardo S. Nakadomari
	Descrição: Adição do campo de arquivo
	*/

	public function getDocumentoPessoa($id_pessoa = "", $id_documento = "", $full = false, $tipo_documento = "") {

		$this->acessoApi();

		$aSearch = "";
		if ($id_pessoa != "") {
			$aSearch .= ' and id_pessoa = '. $id_pessoa;
		}

		if ($id_documento != "") {
			$aSearch .= ' and id = '. $id_documento;
		}

		if ($tipo_documento != "") {
			$aSearch .= ' and id_tipo_documento ='. $tipo_documento;
		}

		$strQueryDocumentoPessoa = "SELECT * FROM documento WHERE 1 ".$aSearch;
		
		$documentoPessoa = $this->_getDb()->query($strQueryDocumentoPessoa);

		$aDocumentoPessoa = array();

		if ($documentoPessoa->countReturnedRows() == 0) {
			$aDocumentoPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhum documento encontrado."
				);
		}else{

			foreach ($documentoPessoa as $key => $value) {

				$resultTipoDocumento = $this->getTipoDocumento($value['id_tipo_documento'], true); //Obtem Tipo do Documento
				$DocumentoDescricao = '';
				if(!array_key_exists('error', $resultTipoDocumento)){
					$DocumentoDescricao = $resultTipoDocumento[0]['descricao'];
				}
				
				
				$estado_emissor = "";
				$id_orgao_emissor = "";
				$resultOrgaoEmissor = "";
				$dataEmissao = "";
				
				if ($value['data_emissao'] != null) {
					$dataEmissao = date("Y-m-d", strtotime($value['data_emissao'])) . " 00:00:00";
				}

				$orgao_emissor = "";
				if ($value['id_orgao_emissor'] != null) {
					$id_orgao_emissor = $value['id_orgao_emissor'];
					$estado_emissor = $value['estado_emissor'];
					$resultOrgaoEmissor = $this->getOrgaoEmissor('', $value['id_orgao_emissor'], true); //Obtem Tipo do Orgao Emissor					
					$orgao_emissor = (count($resultOrgaoEmissor)>1) ? $resultOrgaoEmissor['orgaoEmissor'][0]['descricao'] : '';
				}

				$dataEntradaPais = '';
				if ($value['data_entrada_pais'] != null) {
					$dataEntradaPais = date("Y-m-d", strtotime($value['data_entrada_pais']));
				}
				
				$aDocumentoPessoa[] = array(
					'id' => $value['id'],
					'id_tipo_documento' => $value['id_tipo_documento'],
					'documento' => $DocumentoDescricao,
					'id_pessoa' => $value['id_pessoa'],
					'numero' => $value['numero'],
					'ativo' => $value['ativo'],
					'arquivo' => $value['arquivo'],
					'estado_emissor' => $estado_emissor,
					'data_entrada_pais' => $dataEntradaPais,
					'id_orgao_emissor' => $id_orgao_emissor,
					'orgao_emissor' => $orgao_emissor,
					'data_emissao' => $dataEmissao,
					'complemento' => '',
					'mensagem' => ""
					);
			}
			
			$documentoPessoa = $this->_getDb()->close();
		}

		if ($full == false) {
			fJSON::output($aDocumentoPessoa);
		}else{
			return $aDocumentoPessoa;
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipos de Documento
	Método: GET
	URL: http://localhost/sig/api/index.php/tipodocumento/<tipodocumento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function getTipoDocumento($id = "", $full = false) {

		$aSearch = "";
		if ($id != "") {
			$aSearch .= ' and id ='. $id;
		}

		$strQueryTipoDocumento = "SELECT * FROM tipo_documento WHERE 1 ".$aSearch;

		$tipodocumento = $this->_getDb()->query($strQueryTipoDocumento);

		$aTipoDocumento = array();

		foreach ($tipodocumento as $key => $value) {

			$aTipoDocumento[] = array(
				'id' => $value['id'],
				'id_tipo_pessoa' => $value['id_tipo_pessoa'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				);
		}

		$tipodocumento = $this->_getDb()->close();

		if (count($aTipoDocumento) == 0) {
			$aTipoDocumento[] = array(
				'error' => "-1",
				'mensagem' => "Nenhum tipo de documento encontrado."
			);
		}

		if ($full == false) {
			fJSON::output($aTipoDocumento);
		}else{
			return $aTipoDocumento;
		}
	}

/*
Módulo: Mesquita
Descrição: Obter Lista de Telefones de uma Pessoa
Método: GET
URL: http://localhost/sig/api/index.php/telefone/<pessoa>/<id telefone>
Autenticação: Não
Resposta: JSON
Data de Criação: 16/10/2014
Autor: Ricardo Bruno
Versão: 1.0
Data de Alteração: 09/03/2015
Autor: Ricardo S. Nakadomari
Alteração: Adicionado item de numero_telefone, que seria o número de telefone completo
Versão: 1.0
*/

public function getTelefonePessoa($id_pessoa = "", $id_telefone = "", $full = false, $id_tipo_telefone = "") {
	$this->acessoApi();

	$aSearch = array();
	$aSearch['ativo='] = 1;
	if ($id_pessoa != "") {
		$aSearch['id_pessoa='] = $id_pessoa;
	}

	if ($id_telefone != "") {
		$aSearch['id='] = $id_telefone;
	}

	if ($id_tipo_telefone != "") {
		$aSearch['id_tipo_telefone='] = $id_tipo_telefone;
	}

	$aTelefonePessoa = array();

	$telefonePessoa = fRecordSet::build('Telefone', $aSearch);

	
	foreach ($telefonePessoa->getRecords() as $key => $value) {

		$resultTipoTelefone = new TipoTelefone($value->getIdTipoTelefone());//Obtem Tipo do Telefone
		$numero_telefone = "";
		if (strlen($value->getNumero()) > 0) {
			$numero_telefone = $value->getDdd() . "" . $value->getNumero();
		}

		$ativobol = false;
		if($value->getAtivo() == 1) $ativobol = true;
		$principalbol = false;
		if($value->getPrincipal() == 1) $principalbol = true;

		$aTelefonePessoa[] = array(
			'id' => $value->getId(),
			'id_tipo_telefone' => $value->getIdTipoTelefone(),
			'tipo_telefone' => $resultTipoTelefone->getDescricao(),
			'id_pessoa' => $value->getIdPessoa(),
			'ddd' => $value->getDdd(),
			'numero' => $value->getNumero(),
			'numero_telefone' => $numero_telefone,
			'ramal' => $value->getRamal(),
			'principal' => $value->getPrincipal(),
			'principalbol' => $principalbol,
			'observacao' => $value->getObservacao(),
			'ativo' => $value->getAtivo(),
			'ativobol' => $ativobol,
			'error' => "0",
			'mensagem' => ""
			);
	}
	
	if (count($aTelefonePessoa) == 0) {
		$aTelefonePessoa[] = array(
			'error' => "-1",
			'mensagem' => "Nenhum telefone encontrado."
			);
	}
	
	if ($full == false) {
		fJSON::output($aTelefonePessoa);
	} else {
		return $aTelefonePessoa;
	}
}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipos de Telefone
	Método: GET
	URL: http://localhost/sig/api/index.php/tipotelefone/<tipotelefone>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function getTipoTelefone($id = "", $full = false) {
		$this->acessoApi();
		
		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE id = '.$id;
		}

		$strQueryTipoTelefone = "SELECT id,descricao,ativo FROM tipo_telefone ".$aSearch." ORDER BY descricao ";
		$tipotelefone = $this->_getDb()->query($strQueryTipoTelefone);
		$aTipoTelefone = array();

		$status = array('Inativo', 'Ativo');

		foreach ($tipotelefone as $key => $value){
			$aTipoTelefone[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' =>$status[$value['ativo']]
				);
		}

		$tipotelefone = $this->_getDb()->close();

		if (count($aTipoTelefone) == 0) {
			$aTipoTelefone = array('error' => -1, 'mensagem' => "Nenhum tipo de telefone encontrado.");
		} else {
			$aTipoTelefone = array('error' => 0, 'tipo_telefone' => $aTipoTelefone);
		}

		if ($full == false) {
			fJSON::output($aTipoTelefone);
		}
		else {
			return $aTipoTelefone;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Contribuição Associativa
	Método: GET
	URL: http://localhost/sig/api/index.php/contribuicao/<pessoa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function getContribuicaoPessoa($id_pessoa = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}

		$contribuicaoPessoa = fRecordSet::build('Contribuicao', $aSearch);

		$aContribuicaoPessoa = array();

		$aIsento = array('Não', 'Sim');
		$aBoleto = array('Boleto Bancário via Banco', 'Boleto Bancário via E-mail');


		if ($contribuicaoPessoa->count() == 0) {
			$aContribuicaoPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhum contribuição encontrada."
				);
		}else{
			foreach ($contribuicaoPessoa->getRecords() as $key => $value) {
				$aSearch = array();
				$aSearch['id='] = $value->getIdPessoa();
				$pessoa = fRecordSet::build('Pessoa', $aSearch);

				if($value->getIsento() == 0){
					$boleto_show = $aBoleto[$value->getCarteira()];
					$valor_show = number_format($value->getValor(), 2, ',', '.');
				}else{
					$boleto_show = '';
					$valor_show = '';
				}

				$aContribuicaoPessoa[] = array(
					'error' => "0",
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'pessoa' => $pessoa[0]->getNome(),
					'dia' => $value->getDia(),
					'valor' => $valor_show,
					'isento' => $value->getIsento(),
					'isento_show' => $aIsento[$value->getIsento()],
					'carteira' => $value->getCarteira(),
					'carteira_show' => $boleto_show,
					'numero_meses' => $value->getNumeroMeses()
					);
			}
		}

		if ($full == false) {
			fJSON::output($aContribuicaoPessoa);
		}else{
			return $aContribuicaoPessoa;
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Pessoas atraves de query
	Método: GET
	URL: http://localhost/sig/api/index.php/pessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/09/2015
	Autor: Fábio Haydn
	*/
	public function getPessoasString() {

		$request = $this->_slimApp->request()->params();

		$consulta = " SELECT @S FROM @F @J @C @G @O";

		$campos = array("COALESCE(p.id,'') id"																	 , 
						"'Dados' tipo"																 , 
						"COALESCE(p.nome,'') nome"																 , 
						"COALESCE(p.apelido,'') apelido"														 , 
						"COALESCE(p.nome_tradicao,'') nome_tradicao"											 , 
						"COALESCE(DATE_FORMAT(p.data_nascimento,'%d/%m/%Y'),'') data_nascimento"				 ,
						"COALESCE(DATE_FORMAT(p.data_associacao,'%d/%m/%Y'),'') data_associacao"				 ,
						"COALESCE(DATE_FORMAT(p.data_cadastro,'%d/%m/%Y'),'') data_cadastro"					 ,
						"COALESCE(p.nacionalidade,'') nacionalidade"											 , 
						"COALESCE(p.sexo,'') sexo"																 , 
						"COALESCE(p.empresa,'') empresa"														 , 
						"COALESCE(p.ocupacao,'') ocupacao"														 , 
						"COALESCE(p.email,'') email"															 , 
						"COALESCE(p.foto,'') foto"																 ,  
						"COALESCE(p.associado,'') associado"													 , 
						"COALESCE(p.ativo,'') ativo"															 , 
						"COALESCE(p.donatario,'') donatario"													 , 
						"COALESCE(p.fornecedor,'') fornecedor"													 ,
						"CASE WHEN d.id_tipo_documento = 1 THEN d.numero ELSE '' END rg"						 ,
						"CASE WHEN d.id_tipo_documento = 2 THEN d.numero ELSE '' END cpf"						 ,
						"CASE WHEN d.id_tipo_documento = 3 THEN d.numero ELSE '' END rne"						 ,
						"CASE WHEN d.id_tipo_documento = 4 THEN d.numero ELSE '' END passaporte"				 ,
						"CASE WHEN d.id_tipo_documento = 7 THEN d.numero ELSE '' END identificacao_internacional",
						"COALESCE(u.token,'') token"															 , 
						"COALESCE(u.login,'') login"															 , 
						"COALESCE(u.senha,'') senha");

		$tabela   = "pessoa p";
		$join 	  = "LEFT JOIN documento d ON p.id = d.id_pessoa ";
		$join 	 .= "LEFT JOIN usuario u ON p.id = u.id_pessoa";				
		$condicao = "@W";
		$grupo 	  = "GROUP BY p.id";
		$ordem 	  = "ORDER BY p.nome";		

		$nome = $request['string'];

		$condicao .= ($nome!="") ? " p.nome like '%".$nome."%' " : "";
		
		
		if (array_key_exists('todos', $request)) {

			if($request['todos']!=1){

				if(array_key_exists('associado',$request)){ $condicao.= ($request['associado']==1) ? '@E associado=1 ' 	 : ''; 
															$condicao.= ($request['associado']==5) ? '@E proprietario=1 ': ''; }			
			
				$condicao.= (array_key_exists('fornecedor', 				$request)) 	? '@E fornecedor=1 ' 			  : '';
				$condicao.= (array_key_exists('aluno', 						$request)) 	? '@E aluno=1 ' 				  : '';
				$condicao.= (array_key_exists('responsavel_proprietario', 	$request)) 	? '@E (p.responsavel_proprietario=1 OR p.proprietario=1)': '';
			}
		}		

		$sqlq = $consulta;

		$cond = (strlen($condicao)>2) ? 'WHERE' : "";

		$condicao = str_replace("@W@E", 'WHERE'   			 , $condicao);		
		$condicao = str_replace("@W"  , $cond     			 , $condicao);
		$condicao = str_replace("@E"  , 'AND' 	  			 , $condicao);		
		$sqlq 	  = str_replace("@C"  , $condicao 			 , $sqlq);
		$sqlq 	  = str_replace("@W"  , $condicao   		 , $sqlq);

		$sqlq 	  = str_replace("@S", implode("," , $campos) , $sqlq);
		$sqlq 	  = str_replace("@F", $tabela 	  			 , $sqlq);
		$sqlq 	  = str_replace("@J", $join 	  			 , $sqlq);
		$sqlq 	  = str_replace("@G", $grupo 	  			 , $sqlq);
		$sqlq 	  = str_replace("@O", $ordem 	  			 , $sqlq);

		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'pessoa' => $retorno );
		fJSON::output($retorno);		
	}


	/*
	Módulo: Geral
	Descrição: Obter Lista de Pessoas
	Método: GET
	URL: http://localhost/sig/api/index.php/pessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 08/12/2014
	Alterado por: Ricardo Bruno
	*/
	public function getPessoa($id_pessoa = "", $full = false, $tipo_documento = '') {
		$this->acessoApi();

		$aSearch = "";
		if ($id_pessoa != ""){
			$aSearch = ' and id = ' . $id_pessoa;
		}
		
		$strQuerypessoa = "SELECT * FROM pessoa WHERE 1 ".$aSearch." order by nome asc";

		$pessoa = $this->_getDb()->query($strQuerypessoa);

	
		$aPessoa = array();

		foreach ($pessoa as $key => $value) {
			$token = '';
			$login = '';
			$senha = '';
			$ativobol = false;
			$tipo = '';
			$motivo = '';
			$cidade = '';
			$estado = '';
			$id_papel = '';
			$dataCadastro = '';
			$dataAssociacao = '';
			$dataNascimento = '';
			$dataDesligamento = '';
			$tipo_fornecedor_descricao = '';
			$forma_tratamento_descricao = '';
			$contribuicaovalor = 'Isento';
			$motivo = '';

			$resultUsuario = $this->getUsuario(0, $value['id'], true);
			$religiao = new Religiao($value['id_religiao']);
			$resultSocios = $this->getSocioPessoa($value['id'], true);
			$telefones = $this->getTelefonePessoa($value['id'], false, true);
			$resultTipoEvento = $this->getTipoEventoPessoa($value['id'], "",true);
			$resultPessoaContato = $this->getPessoaContato($value['id'], true);
			$resultCampanhaPessoa = $this->getCampanhaPessoa($value['id'], true);
			$resultEnderecoPessoa = $this->getEnderecoPessoa($value['id'], "", true);
			$resultTipoPessoa = $this->getTipoPessoa($value['id_tipo_pessoa'], true); //Obtem Nome do Tipo de Pessoa
			$resultBeneficiarios = $this->getBeneficiarioPessoa($value['id'], true);
			$resultContribuicaoPessoa = $this->getContribuicaoPessoa($value['id'], true); //Lista Contribuicao da Pessoa
			$resultEstadoCivil = new EstadoCivil($value['id_estado_civil']);//Obtem Estado Civil
			$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value['id'], "", true, 1); //Lista Documentos da Pessoa
			$resultDocumentoPessoaIM = $this->getDocumentoPessoa($value['id'], "", true, 7);
			$resultDocumentoPessoaIE = $this->getDocumentoPessoa($value['id'], "", true, 6); //Lista Documentos da Pessoa
			$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value['id'], "", true, 2); //Lista Documentos da Pessoa
			$resultDocumentoPessoaRNE = $this->getDocumentoPessoa($value['id'], "", true, 3); //Lista Documentos da Pessoa
			$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value['id'], "", true, 5); //Lista Documentos da Pessoa
			$resultDocumentoPessoaPassaporte = $this->getDocumentoPessoa($value['id'], "", true, 4); //Lista Documentos da Pessoa
			$resultDocumentoPessoaIdentificacaoInternacional = $this->getDocumentoPessoa($value['id'], "", true, 7);
			$categorianaoassociado = new CategoriaNaoassociado($value['id_categoria_naoassociado']);

			$tipo_fornecedor = '';

			if ($value['id_tipo_fornecedor']) {				
				$strQueryTipoFornecedor = "SELECT * FROM tipo_fornecedor WHERE id= ".$value['id_tipo_fornecedor'];
				$tipo_fornecedor = $this->_getDb()->query($strQueryTipoFornecedor);
			}

			$forma_tratamento = '';

			if ($value['id_forma_tratamento']) {				
				$strQueryFormaTratamento = "SELECT * FROM forma_tratamento WHERE id= ".$value['id_forma_tratamento'];
				$forma_tratamento = $this->_getDb()->query($strQueryFormaTratamento);
			}

			if($resultUsuario['error'] == 0){
				$token = $resultUsuario['usuario']['0']['token'];
				$login = $resultUsuario['usuario']['0']['login'];
				$senha = $resultUsuario['usuario']['0']['senha'];
			}

			if ($value['id_motivo_bloqueio'] != null) {
				$resultMotivoBloqueio = $this->getMotivoBloqueio($value['id_motivo_bloqueio'], true); //Obtem Motivo de Bloqueio
				$motivo = $resultMotivoBloqueio->getDescricao();
			}
			if ($resultEnderecoPessoa['error'] == 0) {
				$cidade = $resultEnderecoPessoa['endereco']['0']['cidade'];
				$estado = $resultEnderecoPessoa['endereco']['0']['estado'];
			}
			if (strlen($resultDocumentoPessoaRG[0]["mensagem"]) > 0) {
				$rg = "";
			} else {
				$rg = $resultDocumentoPessoaRG[0]["numero"];
			}
			if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
				$cpf = "";
				$cpf_formatado = "";
			} else {
				$cpf_formatado = self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');              
				$cpf = $resultDocumentoPessoaCPF[0]["numero"];
			}
			if (strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
				$cnpj = "";
				$cnpj_formatado = "";
			} else {
				$cnpj_formatado = self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
				$cnpj = $resultDocumentoPessoaCnpj[0]["numero"];
			}
			if (strlen($cpf_formatado)==0) {
				$cpf_formatado = $cnpj_formatado;
			}
			if (strlen($resultDocumentoPessoaRNE[0]["mensagem"]) > 0) {
				$rne = "";
			} else {
				$rne = $resultDocumentoPessoaRNE[0]["numero"];
			}
			if (strlen($resultDocumentoPessoaPassaporte[0]["mensagem"]) > 0) {
				$passaporte = "";
			} else {
				$passaporte = $resultDocumentoPessoaPassaporte[0]["numero"];
			}
			if (strlen($resultDocumentoPessoaIE[0]["mensagem"]) > 0) {
				$inscricaoEstadual = "";
			} else {
				$inscricaoEstadual = $resultDocumentoPessoaIE[0]["numero"];
			}
			if (strlen($resultDocumentoPessoaIdentificacaoInternacional[0]["mensagem"]) > 0) {
				$identificacao_internacional = "";
			} else {
				$identificacao_internacional = $resultDocumentoPessoaIdentificacaoInternacional[0]["numero"];
				if (is_null($identificacao_internacional)) {
					$identificacao_internacional = "";
				}
			}
			if (strlen($resultDocumentoPessoaIM[0]["mensagem"]) > 0) {
				$inscricaoMunicipal = "";
			} else {
				$inscricaoMunicipal = $resultDocumentoPessoaIM[0]["numero"];
			}
			if($resultContribuicaoPessoa[0]['error'] != -1){
				$contribuicaovalor = $resultContribuicaoPessoa[0]['valor'];
			}
			if ($value['data_associacao'] != null) {					
				//$dataAssociacao = date("Y-m-d", strtotime($value['data_associacao']));
				$dataAssociacao = self::formataData($value['data_associacao']);
			}
			if ($value['data_cadastro'] != null) {					
				//$dataCadastro = date("Y-m-d", strtotime($value['data_cadastro']));
				$dataCadastro = self::formataData($value['data_cadastro']);
			}
			if ($value['data_nascimento'] != null) {					
				//$dataNascimento = date("Y-m-d", strtotime($value['data_nascimento']));
				$dataNascimento = self::formataData($value['data_nascimento']);
			}
			if ($value['data_desligamento'] != null) {					
				//$dataDesligamento = date("Y-m-d", strtotime($value['data_desligamento']));
				$dataDesligamento = self::formataData($value['data_desligamento']);
			}
			
			if ($value['associado'] == 1) {
				$tipo = "Associado";
			} else if($value['funcionario'] == 1) {
				$tipo = "Funcionário";
			} else if($value['beneficiario'] == 1) {
				$tipo = "Beneficiário";
			} else if($value['parentesco'] == 1) {
				$tipo = "Parente";
			} else if($value['proprietario'] == 1) {
				$tipo = "Proprietário Jazigo";
			} else if($value['donatario'] == 1) {
				$tipo = "Donatario";
			} else if($value['padrinho']==1) {
				$tipo = "Padrinho";
			} else if($value['fornecedor'] == 1) {
				$tipo = "Fornecedor";
			}
			if($tipo == 'Funcionário'){
				// $aSearchFuncionario = "";
				// $aSearchFuncionario .= ' and id_pessoa = ' . $value['id'];
				
				// $strQueryentidadePessoa = "SELECT * FROM entidade_pessoa WHERE 1 ".$aSearchFuncionario;

				// $entidadePessoa = $this->_getDb()->query($strQueryentidadePessoa);

				// if($entidadePessoa->countReturnedRows() >){
					$aSearchFuncionario = ' and id_pessoa =' . $id_pessoa;
					
					$strQuerypapelPessoa = "SELECT * FROM papel_pessoa WHERE 1 ".$aSearchFuncionario;

					$papelPessoa = $this->_getDb()->query($strQuerypapelPessoa);

					if ($papelPessoa->countReturnedRows()>0) {
						$papelPessoaRow = $papelPessoa->fetchRow();	     
						$papelPessoa = $this->_getDb()->close();
						$id_papel = $papelPessoa['id_papel'];
					}
				// }
			}
			if (strlen($resultCampanhaPessoa[0]["mensagem"]) > 0) {
				$id_campanha = "";
				$id_pessoa_indicador="";
				$pessoa_indicador="";
			} else {
				$id_campanha = $resultCampanhaPessoa[0]["id_campanha"];
				$id_pessoa_indicador = $resultCampanhaPessoa[0]["id_pessoa_indicador"];
				$pessoa_indicador = $resultCampanhaPessoa[0]["pessoa_indicador"];
			} 

			$tipo_fornecedor_descricao = "";
			if($tipo_fornecedor != ''){
				$tipo_fornecedorRow = $tipo_fornecedor->fetchRow();	
				$tipo_fornecedor = $this->_getDb()->close();
				$tipo_fornecedor_descricao = $tipo_fornecedorRow['descricao'];
			}

			$forma_tratamento_descricao = "";
			if($forma_tratamento != ''){
				$forma_tratamentoRow = $forma_tratamento->fetchRow();	
				$forma_tratamento = $this->_getDb()->close();
				$forma_tratamento_descricao = $forma_tratamentoRow['descricao'];
			}
			
			if($value['ativo'] == 1){
				$ativobol = true;          
			}

			// FRH - Nome do responsável pelo Jazigo
			//----------------------------------------------------------------------------------
			$nome_responsavel = '';
			$tmp = $value['id_pessoa_responsavel_proprietario'];
			$sqlq = "SELECT nome FROM pessoa WHERE id = ".$tmp;				
			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $ch => $val){ $nome_responsavel = $val['nome']; }
			$rs = $this->_getDb()->close();
			//----------------------------------------------------------------------------------

			$aPessoa[] = array(
				'id' => $value['id'],
				'id_departamento_funcionario' => $value['id_departamento_funcionario'],
				'nome' => $value['nome'],
				'id_motivo_bloqueio' => $value['id_motivo_bloqueio'],
				'motivo_bloqueio' => $motivo,
				'id_estado_civil' => $value['id_estado_civil'],
				'estado_civil' => $resultEstadoCivil->getDescricao(),
				'id_tipo_pessoa' => $value['id_tipo_pessoa'],
				'tipo_pessoa' => $resultTipoPessoa->getDescricao(),
				'id_forma_tratamento' => $value['id_forma_tratamento'],
				'forma_tratamento' => $forma_tratamento_descricao,
				'apelido' => $value['apelido'],
				'nome_tradicao' => $value['nome_tradicao'],
				'data_nascimento' => $dataNascimento,
				'nacionalidade' => $value['nacionalidade'],
				'naturalidade' => $value['naturalidade'],
				'nacionalidade_familia' => $value['nacionalidade_familia'],
				'naturalidade_familia' => $value['naturalidade_familia'],
				'sexo' => $value['sexo'],
				'empresa' => $value['empresa'],
				'ocupacao' => $value['ocupacao'],
				'login' => $login,
				'senha' => $senha,
				'email' => $value['email'],
				'foto' => $value['foto'],
				'data_associacao' => $dataAssociacao,
				'token' => $token,
				'associado' => $value['associado'],
				'beneficiario' => $value['beneficiario'],
				'parentesco' => $value['parentesco'],
				'funcionario' => $value['funcionario'],
				'proprietario' => $value['proprietario'],
				'donatario' => $value['donatario'],
				'fornecedor' => $value['fornecedor'],
				'padrinho' => $value['padrinho'],
				'ativo' => $value['ativo'],
				'ativobol' => $ativobol,
				'data_cadastro' => $dataCadastro,
				'endereco' => $resultEnderecoPessoa,
				'cidade' => $cidade,
				'estado' => $estado,
				'telefones' => $telefones,
				'rg' => $rg,
				'cpf' => $cpf,
				'cpf_formatado' => $cpf_formatado,
				'rne' => $rne,
				'passaporte' => $passaporte,
				'identificacao_internacional' => $identificacao_internacional,
				'cnpj' => $cnpj,
				'cnpj_formatado' => $cnpj_formatado,
				'inscricaoEstadual' => $inscricaoEstadual,
				'inscricaoMunicipal' => $inscricaoMunicipal,
				'contribuicao' => $resultContribuicaoPessoa,
				'contribuicaovalor' => $contribuicaovalor,
				'beneficiarios' => $resultBeneficiarios,
				'contatos' => $resultPessoaContato,
				'sociosSel' => $resultSocios,
				'data_desligamento' => $dataDesligamento,
				'observacao' => $value['observacao'],
				'numero_carteirinha' => $value['numero_carteirinha'],
				'id_fonte_captacao' => $value['id_fonte_captacao'],
				'id_campanha' => $id_campanha,
				'id_pessoa_indicador' => $id_pessoa_indicador,
				'pessoa_indicador' => $pessoa_indicador,
				'id_categoria_naoassociado' => $value['id_categoria_naoassociado'],
				'enviar_convite' => $value['enviar_convite'],
				'tipos_evento' => $resultTipoEvento,
				'tipo' => $tipo,
				'id_papel' => $id_papel,
				'id_tipo_fornecedor' => $value['id_tipo_fornecedor'],
				'tipo_fornecedor' => $tipo_fornecedor_descricao,
				'categoria_naoassociado' => $categorianaoassociado->getDescricao(),
				'website' => $value['website'],
				'nome_mae' => $value['nome_mae'],
				'nome_pai' => $value['nome_pai'],
				'registro_docente' => $value['registro_docente'],
				'id_religiao' => $value['id_religiao'],
				'religiao' => $religiao->getDescricao(),
				'renda' => $value['renda'],
				'id_pessoa_responsavel_proprietario' => $value['id_pessoa_responsavel_proprietario'],
				'responsavel_proprietario' => $value['responsavel_proprietario'],
				'nome_responsavel' => $nome_responsavel,
				'antecedente_criminal' => $value['antecedente_criminal'],
				'refugiado' => $value['refugiado'],
			);
		}

		$pessoa = $this->_getDb()->close();

		if (count($aPessoa) == 0) {
			$aPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhuma pessoa encontrada."
				);
			fJSON::output($aPessoa);
			die();
		}

		$aPessoa = array(
			'error' => 0,
			'pessoa' => $aPessoa
			);

		if ($full == false) {
			fJSON::output($aPessoa);
		} else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Controle de autenticação do usuário
	Descrição: Verifica o usuário e cria um controle de acesso a aplicação através de um token armazenado no fSession
	Método: get
	URL: http://localhost/sig/api/index.php/autentica
	Autenticação: Não
	Resposta: Não
	Data de Criação: 16/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function autentica() {

		$req = $this->_slimApp->request();

		$trocarsenha = 0;

		$u_login = $req->params('login');
		$u_pwd = $req->params('pwd');
		$u_mod = $req->params('modulo');
		$trocarsenha = $req->params('trocarsenha');    
		$resp_array = array();

		try {

			$sig_dblookup = $this->_getDb()->query('SELECT * FROM usuario WHERE login=%s;', array($u_login));
			$sig_dblookup->tossIfNoRows();
			$sig_dbentry = $sig_dblookup->fetchRow();

			if ($trocarsenha != 1) {
				if ($sig_dbentry['data_expiracao_senha'] <= date("Y-m-d")) {
					$resp_array['error'] = -3;
					$resp_array['errorMsg'] = 'Prazo da senha expirou. Por favor troque a senha!';
					$resp_array['user'] = array();
					fJSON::output($resp_array);
					die();
				}
			}      

			if ($trocarsenha == '1') {  
				$this->setPass($sig_dbentry['id_pessoa'],$u_pwd);
				$this->setDate($sig_dbentry['id_pessoa'],date("Y-m-d", strtotime("+1 month")));
			}

			if ($sig_dbentry['ativo'] == 1) {

				if (!sigId::checkPassword($u_pwd, $sig_dbentry['senha']) && $trocarsenha != '1') {
					$resp_array['error'] = -1;
					$resp_array['errorMsg'] = 'Usuário ou senha inválidos!';
					$resp_array['user'] = array();
				}
				else {          
					fAuthorization::setUserToken(sigId::hashPassword($u_login));

					$resp_array['error'] = 0;

					$resp_array['user']['trocar_senha'] = false;    

					if($u_pwd == '123mudar'){
						$resp_array['user']['trocar_senha'] = true;                        
					}

					if ($resp_array['user']['trocar_senha'] == true) {
						$resp_array['error'] = -2;
						$resp_array['errorMsg'] = 'Este é o seu primeiro acesso. Por favor troque a senha!';
						$resp_array['user'] = array();
						fJSON::output($resp_array);
						die();
					}

					$sig_dbquery = $this->_getDb()->query('SELECT * FROM pessoa WHERE id=%s;', array($sig_dbentry['id_pessoa']));
					$sig_dbquery->tossIfNoRows();
					$sig_dbpessoa = $sig_dbquery->fetchRow();

					$resp_array['user']['id'] = $sig_dbentry['id_pessoa'];
					$resp_array['user']['nome'] = $sig_dbpessoa['nome'];
					$resp_array['user']['apelido'] = $sig_dbpessoa['apelido'];
					$resp_array['user']['nome_tradicao'] = $sig_dbpessoa['nome_tradicao'];
					$resp_array['user']['data_nascimento'] = $sig_dbpessoa['data_nascimento'];
					$resp_array['user']['sexo'] = $sig_dbpessoa['sexo'];
					$resp_array['user']['empresa'] = $sig_dbpessoa['empresa'];
					$resp_array['user']['ocupacao'] = $sig_dbpessoa['ocupacao'];
					$resp_array['user']['email'] = $sig_dbpessoa['email'];
					$resp_array['user']['foto'] = $sig_dbpessoa['foto'];
					$resp_array['user']['ativo'] = $sig_dbentry['ativo'];
					$resp_array['user']['auth_token'] = fAuthorization::getUserToken();
					$resp_array['user']['idTipoEntidade'] = $u_mod;

					$aSearch = "";
					
					$aSearch .= ' and id_pessoa ='. $sig_dbentry['id_pessoa'];
					$aSearch .= ' and id_tipo_entidade ='. $u_mod;
					
					$strQueryPapelPessoa = "SELECT * FROM papel_pessoa WHERE 1 ".$aSearch;

					$papelPessoa = $this->_getDb()->query($strQueryPapelPessoa);

					if ($papelPessoa->countReturnedRows() <= 0) {
						$resp_array['error'] = -1;
						$resp_array['errorMsg'] = 'Usuário não possui permissões para o módulo selecionado!!';
						$resp_array['user'] = array();
						fJSON::output($resp_array);
						die();
					}

					$papelPessoaRow = $papelPessoa->fetchRow();

					$rd = fRecordSet::build('PapelAtividade', array('id_papel=' => $papelPessoaRow['id_papel']));
					if($rd->count() == 0){
						$resp_array['error'] = -1;
						$resp_array['errorMsg'] = 'O usuário não tem permissão de acesso!!';
						$resp_array['user'] = array();
						fJSON::output($resp_array);
						die();
					}

					$papelPessoa = $this->_getDb()->close();

					// $_SESSION['logado'] = false;
					// $_SESSION['start'] = time(); // Taking now logged in time.          
					// $_SESSION['expire'] = $_SESSION['start'] + (6000000 * 6000000);

					$aSearch = "";
					$aSearch .= ' where id_papel = '. $papelPessoaRow['id_papel'];

					$strQueryPapelAtividade = "SELECT * FROM papel_atividade ".$aSearch;

					$papelAtividade = $this->_getDb()->query($strQueryPapelAtividade);

					$resp_array['user']['id_papel'] = $papelPessoaRow['id_papel'];
					
					$aAtividadesParent = array();
					/*Pega as atividades que são grupos, os pais*/

					$aAtividades = array();
					/*Pega as atividades que estão agrupadas, os filhos*/

					foreach ($papelAtividade as $rAtividade) {
						$aSearch = "";
						$aSearch .=' and id = '. $rAtividade['id_atividade'];
						$aSearch .=' and id_atividade_parent is null ';
						$aSearch .=' and show_menu != '. 2;

						$strQueryAtividade = "SELECT * FROM atividade where 1 ".$aSearch;

						$atividade = $this->_getDb()->query($strQueryAtividade);

						if ($atividade->countReturnedRows() > 0) {       
							$atividadeRow = $atividade->fetchRow();	       
							$aAtividadesParent[] = array(
								'id_modulo' => $atividadeRow['id'],
								'nome' => $atividadeRow['nome'],
								'descricao' => $atividadeRow['descricao'],
								'show_menu' => $atividadeRow['show_menu'],
								'icone' => $atividadeRow['icon'],
								);              
						}
											
						$aSearch2 = "";
						$aSearch2 .=' and id = '. $rAtividade['id_atividade'];
						$aSearch2 .=' and id_atividade_parent is not null ';
						
						$strQueryAtividade2 = "SELECT * FROM atividade where 1 ".$aSearch2;

						$atividade2 = $this->_getDb()->query($strQueryAtividade2);

						if ($atividade2->countReturnedRows() > 0) {       
							$atividadeRow = $atividade2->fetchRow();	     
							$aAtividades[] = array(
								'id_modulo' => $atividadeRow['id'],
								'id_parent' => $atividadeRow['id_atividade_parent'],
								'nome' => $atividadeRow['nome'],
								'descricao' => $atividadeRow['descricao'],
								'url' => $atividadeRow['url'],
								'show_menu' => $atividadeRow['show_menu'],
								'icone' => $atividadeRow['icon'],
								);              
						}
					};

					$papelAtividade = $this->_getDb()->close();
					$atividade = $this->_getDb()->close();
					$atividade2 = $this->_getDb()->close();

					$sortArray = Array();

					foreach($aAtividades as $arrayRe){
						foreach($arrayRe as $key=>$value){
							if(!isset($sortArray[$key])){
								$sortArray[$key] = array();
							}
							$sortArray[$key][] = $value;
						}
					}

					$orderby = "nome"; //change this to whatever key you want from the array
					@array_multisort($sortArray[$orderby],SORT_ASC,$aAtividades);
					
					/*Colocar as atividades filhos dentro das atidividades pai*/
					foreach ($aAtividades as $key => $value) {              
						foreach ($aAtividades as $key2 => $value2) {              
							if ($value2['id_parent'] == $value['id_modulo']) {                  
								$aAtividades[$key]['children'][] = array(
									'id_modulo' => $value2['id_modulo'],
									'id_parent' => $value2['id_parent'],
									'nome' => $value2['nome'],
									'descricao' => $value2['descricao'],
									'url' => $value2['url'],
									'show_menu' => $value2['show_menu'],
									);
							}
						}
					}
					
					/*Colocar as atividades filhos dentro das atidividades pai*/
					foreach ($aAtividadesParent as $key3 => $value) {              
						foreach ($aAtividades as $key4 => $value4) {  
							if (array_key_exists("children", $value4)) {
								$children = $value4['children'];
							}else{
								$children = array();
							}            

							if ($value4['id_parent'] == $value['id_modulo']) {                                
								$aAtividadesParent[$key3]['children'][] = array(
									'id_modulo' => $value4['id_modulo'],
									'id_parent' => $value4['id_parent'],
									'nome' => $value4['nome'],
									'descricao' => $value4['descricao'],
									'url' => $value4['url'],
									'show_menu' => $value4['show_menu'],                  
									'children' => $children,
									);
							}
						}
					}

					$resp_array['user']['modulo'] = $aAtividadesParent;

					$aSearch = "";
					$aSearch .=' and id_pessoa = '. $sig_dbentry['id_pessoa'];
					
					$strQueryEntidadePessoa = "SELECT * FROM entidade_pessoa where 1 ".$aSearch;

					$entidadePessoa = $this->_getDb()->query($strQueryEntidadePessoa);

					$entidadePessoaRow = $entidadePessoa->fetchRow();	     
					$entidadePessoa = $this->_getDb()->close();

					$resp_array['user']['entidadePessoa'] = $entidadePessoaRow['id_entidade'];

					fSession::set('user', $resp_array);
					
					$user = fRecordSet::build('Usuario', array('id_pessoa=' => $sig_dbentry['id_pessoa'])); 

					if(count($user) > 0){
						$user[0]->setToken($resp_array['user']['auth_token']);
						$user[0]->store();
					}
				}
			}else{
				$resp_array['error'] = -1;
				$resp_array['errorMsg'] = 'Usuário inativo!';
			}

			$fid_user_id = $sig_dbentry['id_pessoa'];

		}catch (fNoRowsException $e) {
			$resp_array['error'] = -1;
			$resp_array['errorMsg'] = 'Usuário ou senha inválidos!!';
			$resp_array['user'] = array();

			$fid_user_id = null;
			$user_test_mode = 0;
		}      
		fJSON::output($resp_array);
	}

	/*
	Módulo: Controle de acesso aos serviços da API
	Descrição: verifica se o usuário esta logado e compara o seu token para permitir o acesso a api
	dentro de um modelo de segurança ao acesso aos dados
	Método: Não
	URL: Não
	Autenticação: Sim
	Resposta: Não
	Data de Criação: 17/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 17/10/2014
	*/



	/*
	Módulo: Acadêmico
	Descrição: Verifica o login e senha do usuário acadêmico
	Método: Não
	URL: Não
	Autenticação: Sim
	Resposta: Não
	Data de Criação: 17/10/2014
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 15/06/2015
	*/

	/* AUTENTICAÇÃO ACADEMICO */


	public function autenticaUsuario(){
		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');

		$req = $this->_slimApp->request();

		$trocarsenha = 0;

		$dia = date('d');
		$mes = date('m');
		$ano = date('Y');

		$u_login = $req->params('login');
		$u_pwd = $req->params('pwd');
		$trocarsenha = $req->params('trocarsenha');    
		$resp_array = array();

		try {

			$sig_dblookup = $this->_getDb()->query('SELECT * FROM usuario WHERE login=%s;', array($u_login));
			$sig_dblookup->tossIfNoRows();
			$sig_dbentry = $sig_dblookup->fetchRow();

			if ($trocarsenha != 1) {
				if ($sig_dbentry['data_expiracao_senha'] <= date("Y-m-d")) {
					$resp_array['error'] = -3;
					$resp_array['errorMsg'] = 'Prazo da senha expirou. Por favor troque a senha!';
					$resp_array['user'] = array();
					fJSON::output($resp_array);
					die();
				}
			}      

			if ($trocarsenha == '1') {  
				$this->setPass($sig_dbentry['id_pessoa'],$u_pwd);
				$this->setDate($sig_dbentry['id_pessoa'],date("Y-m-d", strtotime("+1 month")));
			}

			if ($sig_dbentry['ativo'] == 1) {

				if (!sigId::checkPassword($u_pwd, $sig_dbentry['senha']) && $trocarsenha != '1') {
					$resp_array['error'] = -1;
					$resp_array['errorMsg'] = 'Usuário ou senha inválidos!';
					$resp_array['user'] = array();
				}
				else {          
					fAuthorization::setUserToken(sigId::hashPassword($u_login));

					$resp_array['error'] = 0;

					$resp_array['user']['trocar_senha'] = false;    

					if($u_pwd == '123mudar'){
						$resp_array['user']['trocar_senha'] = true;                        
					}

					if ($resp_array['user']['trocar_senha'] == true) {
						$resp_array['error'] = -2;
						$resp_array['errorMsg'] = 'Este é o seu primeiro acesso. Por favor troque a senha!';
						$resp_array['user'] = array();
						fJSON::output($resp_array);
						die();
					}

					$sig_dbquery = $this->_getDb()->query('SELECT * FROM pessoa WHERE id=%s;', array($sig_dbentry['id_pessoa']));
					$sig_dbquery->tossIfNoRows();
					$sig_dbpessoa = $sig_dbquery->fetchRow();

					$tipoUsuario = '';
					$idTipoUsuario = '';

					if($sig_dbpessoa['aluno'] == 1){
						$tipoUsuario = 'aluno';
						/* ID TIPO USUARIO == 1 (ALUNO)*/
						$idTipoUsuario = 1;
					}
					if($sig_dbpessoa['professor'] == 1 && $sig_dbpessoa['funcionario'] == 1){
						$tipoUsuario = 'professor';
						/* ID TIPO USUARIO == 2 (PROFESSOR)*/
						$idTipoUsuario = 2;
					}
					if($sig_dbpessoa['funcionario'] == 1 && $sig_dbpessoa['professor'] != 1){
						$tipoUsuario = 'funcionario';
						/* ID TIPO USUARIO == 3 (FUNCIONARIO)*/
						$idTipoUsuario = 3;
					}

					$resp_array['user']['id'] = $sig_dbentry['id_pessoa'];
					$resp_array['user']['nome'] = $sig_dbpessoa['nome'];
					$resp_array['user']['apelido'] = $sig_dbpessoa['apelido'];
					$resp_array['user']['nome_tradicao'] = $sig_dbpessoa['nome_tradicao'];
					$resp_array['user']['data_nascimento'] = $sig_dbpessoa['data_nascimento'];
					$resp_array['user']['sexo'] = $sig_dbpessoa['sexo'];
					$resp_array['user']['empresa'] = $sig_dbpessoa['empresa'];
					$resp_array['user']['ocupacao'] = $sig_dbpessoa['ocupacao'];
					$resp_array['user']['email'] = $sig_dbpessoa['email'];
					$resp_array['user']['foto'] = $sig_dbpessoa['foto'];
					$resp_array['user']['ativo'] = $sig_dbentry['ativo'];
					$resp_array['user']['tipoUsuario'] = $tipoUsuario;
					$resp_array['user']['idTipoUsuario'] = $idTipoUsuario;
					$resp_array['user']['auth_token'] = fAuthorization::getUserToken();
					$resp_array['user']['idTipoEntidade'] = 3;
					$resp_array['user']['dia'] = $dia;
					$resp_array['user']['mes'] = $mes;
					$resp_array['user']['ano'] = $ano;

					$aSearch = array();
					$aSearch['id_pessoa='] = $sig_dbentry['id_pessoa'];
					$aSearch['id_tipo_entidade='] = 3;

					$papelPessoa = fRecordSet::build('PapelPessoa', $aSearch);


					if (!$papelPessoa->count()) {
						$resp_array['error'] = -1;
						$resp_array['errorMsg'] = 'Usuário não possui permissões para o módulo selecionado!!';
						$resp_array['user'] = array();
						fJSON::output($resp_array);
						die();
					}

					// $_SESSION['logado'] = false;
					// $_SESSION['start'] = time(); // Taking now logged in time.          
					// $_SESSION['expire'] = $_SESSION['start'] + (6000000 * 6000000);

					$aSearch = array();
					$aSearch['id_papel='] = $papelPessoa[0]->getIdPapel();

					$papelAtividade = fRecordSet::build('PapelAtividade', $aSearch);

					$resp_array['user']['id_papel'] = $aSearch['id_papel='];
					
					$aAtividadesParent = array();
					
					/*Pega as atividades que são grupos, os pais*/
					foreach ($papelAtividade as $rAtividade) {
						$aSearch = array();
						$aSearch['id='] = $rAtividade->getIdAtividade();
						$aSearch['id_atividade_parent='] = null;
						$atividade = fRecordSet::build('Atividade', $aSearch);

						if ($atividade->count()) {


							$aAtividadesParent[] = array(
								'id_modulo' => $atividade[0]->getId(),
								'nome' => $atividade[0]->getNome(),
								'descricao' => $atividade[0]->getDescricao(),
								'show_menu' => $atividade[0]->getShowMenu(),
								'icone' => $atividade[0]->getIcon(),
								'url' => $atividade[0]->getUrl(),
								'icone' => $atividade[0]->getIcon()
								);
						}
					};

					$aAtividades = array();
					/*Pega as atividades que estão agrupadas, os filhos*/
					foreach ($papelAtividade as $rAtividade) {
						$aSearch = array();
						$aSearch['id='] = $rAtividade->getIdAtividade();
						$aSearch['id_atividade_parent!'] = null;
						$atividade = fRecordSet::build('Atividade', $aSearch);

						if ($atividade->count()) {              
							$aAtividades[] = array(
								'id_modulo' => $atividade[0]->getId(),
								'id_parent' => $atividade[0]->getIdAtividadeParent(),
								'nome' => $atividade[0]->getNome(),
								'descricao' => $atividade[0]->getDescricao(),
								'url' => $atividade[0]->getUrl(),
								'show_menu' => $atividade[0]->getShowMenu(),
								'icone' => $atividade[0]->getIcon()
								);         
						}
					};
					$sortArray = Array();

					foreach($aAtividades as $arrayRe){
						foreach($arrayRe as $key=>$value){
							if(!isset($sortArray[$key])){
								$sortArray[$key] = array();
							}
							$sortArray[$key][] = $value;
						}
					}

					$orderby = "nome"; //change this to whatever key you want from the array
					@array_multisort($sortArray[$orderby],SORT_ASC,$aAtividades);
					
					/*Colocar as atividades filhos dentro das atidividades pai*/
					foreach ($aAtividades as $key => $value) {
						foreach ($aAtividades as $key2 => $value2) {              
							if ($value2['id_parent'] == $value['id_modulo']) {                  
								$aAtividades[$key]['children'][] = array(
									'id_modulo' => $value2['id_modulo'],
									'id_parent' => $value2['id_parent'],
									'nome' => $value2['nome'],
									'descricao' => $value2['descricao'],
									'url' => $value2['url'],
									'icone' => $value2['icone'],
									'show_menu' => $value2['show_menu']
									);
							}
						}
					}
					
					/*Colocar as atividades filhos dentro das atidividades pai*/
					foreach ($aAtividadesParent as $key3 => $value) {              
						foreach ($aAtividades as $key4 => $value4) {  
							if (array_key_exists("children", $value4)) {
								$children = $value4['children'];
							}else{
								$children = array();
							}            

							if ($value4['id_parent'] == $value['id_modulo']) {                                
								$aAtividadesParent[$key3]['children'][] = array(
									'id_modulo' => $value4['id_modulo'],
									'id_parent' => $value4['id_parent'],
									'nome' => $value4['nome'],
									'descricao' => $value4['descricao'],
									'url' => $value4['url'],
									'show_menu' => $value4['show_menu'],    
									'icone' => $value4['icone']   ,       
									'children' => $children,
									);
							}
						}
					}

					$resp_array['user']['modulo'] = $aAtividadesParent;

					$aSearch = array();
					$aSearch['id_pessoa='] = $sig_dbentry['id_pessoa'];                    

					$entidadePessoa = fRecordSet::build('EntidadePessoa', $aSearch);                    

					$resp_array['user']['entidadePessoa'] = $entidadePessoa[0]->getIdEntidade();

					fSession::set('user', $resp_array);

					
					$user = fRecordSet::build('Usuario', array('id_pessoa=' => $sig_dbentry['id_pessoa'])); 
					if(count($user) > 0){
						$user[0]->setToken($resp_array['user']['auth_token']);
						$user[0]->store();
					}
				}
			}else{
				$resp_array['error'] = -1;
				$resp_array['errorMsg'] = 'Usuário inativo!';
			}

			$fid_user_id = $sig_dbentry['id_pessoa'];

		}catch (fNoRowsException $e) {
			$resp_array['error'] = -1;
			$resp_array['errorMsg'] = 'Usuário ou senha inválidos!!';
			$resp_array['user'] = array();

			$fid_user_id = null;
			$user_test_mode = 0;
		}
		fJSON::output($resp_array);
	}

	/* FIM AUTENTICAÇÃO ACADEMICO */

	public function getUserLogado() {

		// var_dump($_SESSION);

		$user = fSession::get('user');
		// $_SESSION['logado'] = true;

		if ($user == null) {
			fAuthorization::destroyUserInfo();
			
			// fSession::destroy();
			if(isset($_SESSION)){
				unset($_SESSION);
			}
			
			fSession::close();
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Efetue o login novamente!';
			$mensagem['server'] = $_SERVER;
			fJSON::output($messagem);  
		}else{
			$resp_array['user'] = $user;
			$resp_array['server'] = $_SERVER;
			fJSON::output($resp_array);
			return;         
		}
	
	}


	/*
	Módulo: Controle de acesso aos serviços da API
	Descrição: verifica se o usuário esta logado e compara o seu token para permitir o acesso a api
	dentro de um modelo de segurança ao acesso aos dados
	Método: Não
	URL: Não
	Autenticação: Sim
	Resposta: Não
	Data de Criação: 17/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 17/10/2014
	*/

	public function acessoApi() {
		$user = fSession::get('user');

		//$pessoa = new Pessoa($user['user']['id']);
		$pessoa = fRecordSet::build('Usuario', array('id_pessoa=' => $user['user']['id']));

		if (count($user) > 0 && count($pessoa) > 0) {
			if ($user['user']['auth_token'] == $pessoa[0]->getToken()) {
				return;
			}else{
				$messagem['error'] = -1;
				$messagem['mensagem'] = 'Efetue o login novamente!';
				$mensagem['server'] = $_SERVER;
				fJSON::output($messagem);
			}
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Efetue o login novamente!';
			$mensagem['server'] = $_SERVER;
			fJSON::output($messagem);
		}
	}

	/*
	Módulo: Controle de logout
	Descrição: Encerra a sessão so usuário
	Método: SET
	URL: http://localhost/sig/api/index.php/logout
	Autenticação: Não
	Resposta: Não
	Data de Criação: 16/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function logout() {
		$req = $this->_slimApp->request();
		$url = 'http://localhost/sig/';

	//sigId::destroyUserInfo();
		fAuthorization::destroyUserInfo();
		fSession::destroy();
		fSession::close();
		fURL::redirect($url);

		$messagem['error'] = 0;
		$messagem['mensagem'] = $url;
		fJSON::output($messagem);
	}

	/*
	Módulo: Controle de Acesso
	Descrição: Codifica senha para armazenar na tabela de Pessoa
	Método: SET
	URL: não tem
	Autenticação: Não
	Resposta: Não
	Data de Criação: 16/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 16/10/2014
	*/

	public function setPass($id, $senha) {

		$aSearch = array();
		$aSearch['id_pessoa='] = $id;

		$fidUser = fRecordSet::build('Usuario', $aSearch);
		if(count($fidUser) > 0){
			$fidUser[0]->setSenha(sigId::hashPassword($senha));
			$fidUser[0]->store();
		}

		return;
	}

	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfile
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 21/10/2014
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 21/10/2014
	*/

	public function uploadFile($id) {

		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/pessoa/";

		$ext = explode('.', $_FILES['file']['name']);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$target_dir = $dir . 'foto_' .$date->getTimestamp() . '.' . $extensao;

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {

			$pessoa = new Pessoa($id);

			$fotoAnt = $pessoa->getFoto();
			if(file_exists ($dir .$fotoAnt) && $fotoAnt != ""){
				unlink($dir .$fotoAnt);//apaga a foto anterior
			}

			$pessoa->setFoto('foto_' .$date->getTimestamp() . '.' . $extensao); //Armazena o nome da imagem no objeto pessoa
			$pessoa->store();

			

			$messagem['error'] = 0;
			$messagem['mensagem'] = 'arquivo submetido com sucesso';
			$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao;
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
		}

		fJSON::output($messagem);
	}


	/*
	Módulo: Upload de arquivo (logotipo)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadLogotipo
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 16/06/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/


	public function uploadLogomarca($id) {

		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/logotipos/";

		$ext = explode('.', $_FILES['file']['name']);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$target_dir = $dir . 'foto_' .$date->getTimestamp() . '.' . $extensao;

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {

			$entidade = new Entidade($id);

			$fotoAnt = $entidade->getLogotipo();
			if(file_exists ($dir .$fotoAnt) && $fotoAnt != ""){
				unlink($dir .$fotoAnt);//apaga a foto anterior
			}

			$entidade->setLogotipo('foto_' .$date->getTimestamp() . '.' . $extensao); //Armazena o nome da imagem no objeto entidade
			$entidade->store();

			

			$messagem['error'] = 0;
			$messagem['mensagem'] = 'arquivo submetido com sucesso';
			$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao;
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
		}

		fJSON::output($messagem);
	}

	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfilefalecido
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 27/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function uploadFileFalecido($id) {

		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$target_dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/falecido/";
		$extensao = explode('.', $_FILES['file']['name']);
		$date = new DateTime();
		$target_dir = $target_dir . $date->getTimestamp() . '.' . $extensao[1];

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        
			$falecido = new Falecido($id);
		$falecido->setCertidaoObito($date->getTimestamp() . '.' . $extensao[1]); //Armazena o nome da imagem no objeto falecido
		$falecido->store();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'Arquivo submetido com sucesso';
		$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
	}else{
		$messagem['error'] = -1;
		$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
	}
	fJSON::output($messagem);
}


public function uploadFileFinanceiro($id) {

	$mensagem = array();
	$type = explode('/', $_FILES['file']['type']);
	$target_dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/financeiro/";
	$extensao = explode('.', $_FILES['file']['name']);
	$date = new DateTime();
	$target_dir = $target_dir . $date->getTimestamp() . '_.' . $extensao[1];

	if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        
		//$falecido = new Falecido($id);
		//$falecido->setCertidaoObito($date->getTimestamp() . '.' . $extensao[1]); //Armazena o nome da imagem no objeto falecido
		// $falecido->store();

		$caixa = new Caixa($id);
		$descricao = $caixa->getMaisDetalhes();

		$doc_caixa = new DocumentoCaixa();
		$doc_caixa->setIdCaixa($id);
		$doc_caixa->setDescricao($descricao);
		$doc_caixa->setArquivo($date->getTimestamp() . '_.' . $extensao[1]);
		$doc_caixa->store();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'Arquivo submetido com sucesso';
		$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
	}else{
		$messagem['error'] = -1;
		$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
	}
	fJSON::output($messagem);
}

public function uploadFileComprovante($id) {

	$mensagem = array();
	$type = explode('/', $_FILES['file']['type']);
	$target_dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/financeiro/";
	$extensao = explode('.', $_FILES['file']['name']);
	$date = new DateTime();
	$target_dir = $target_dir . $date->getTimestamp() . '.' . $extensao[1];

	if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        
		//$falecido = new Falecido($id);
		//$falecido->setCertidaoObito($date->getTimestamp() . '.' . $extensao[1]); //Armazena o nome da imagem no objeto falecido
		// $falecido->store();

		$caixa = new Caixa($id);
		$descricao = $caixa->getMaisDetalhes();

		$doc_caixa = new DocumentoCaixa();
		$doc_caixa->setIdCaixa($id);
		$doc_caixa->setDescricao($descricao);
		$doc_caixa->setArquivo($date->getTimestamp() . '.' . $extensao[1]);
		$doc_caixa->setTipo(2);
		$doc_caixa->store();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'Arquivo submetido com sucesso';
		$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
	}else{
		$messagem['error'] = -1;
		$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
	}
	fJSON::output($messagem);
}

public function uploadFileBens($id) {

	$mensagem = array();
	$type = explode('/', $_FILES['file']['type']);
	$target_dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/bens/";
	$extensao = explode('.', $_FILES['file']['name']);
	$date = new DateTime();
	$target_dir = $target_dir . $date->getTimestamp() . '.' . $extensao[1];

	if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        
		$bens = new Bens($id);
		$bens->setImagem($date->getTimestamp() . '.' . $extensao[1]); //Armazena o nome da imagem no objeto bens
		$bens->store();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'Arquivo submetido com sucesso';
		$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
	}else{
		$messagem['error'] = -1;
		$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
	}
	fJSON::output($messagem);
}  

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um Endereço para uma Pessoa
	Método: POST
	URL: http://localhost/sig/api/index.php/endereco/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 22/10/2014
	*/

	public function postEnderecoPessoa($data = '', $full = false) {
		if($data == ''){
			$data = json_decode(file_get_contents("php://input"));	
		}
		
		if (property_exists($data, 'id')) {
			$endereco = new Endereco($data->id);
			$aSearch = array();
			$aSearch['id_pessoa='] = $data->id_pessoa;
			$mensagem = "Endereco alterado com sucesso!";
			$alteracao=1;
		}
		else {
			$endereco = new Endereco();
			$mensagem = "Endereco incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Endereço
			if (property_exists($data, 'idTipoEndereco')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getIdTipoEndereco();
				}
				$this->setAuditoria('Endereco', 'Tipo endereço', $enderecoAnt, $data->idTipoEndereco);
				$endereco->setIdTipoEndereco($data->idTipoEndereco);
			}


			if (property_exists($data, 'idPais')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getIdPais();
				}
				$this->setAuditoria('Endereco', 'Id país', $enderecoAnt, $data->idPais);
				$endereco->setIdPais($data->idPais);
			}


			if (property_exists($data, 'id_pessoa')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getIdPessoa();
				}
				$this->setAuditoria('Endereco', 'Id Pessoa', $enderecoAnt, $data->id_pessoa);
				$endereco->setIdPessoa($data->id_pessoa);
			}


			if (property_exists($data, 'logradouro')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getLogradouro();
				}
				$this->setAuditoria('Endereco', 'Logradouro', $enderecoAnt, $data->logradouro);  
				$endereco->setLogradouro($data->logradouro);      
			}


			if (property_exists($data, 'numero')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getNumero();
				}
				$this->setAuditoria('Endereco', 'Numero', $enderecoAnt, $data->numero); 
				$endereco->setNumero($data->numero);
			}


			if (property_exists($data, 'bairro')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getBairro();
				}
				$this->setAuditoria('Endereco', 'Bairro', $enderecoAnt, $data->bairro);
				$endereco->setBairro($data->bairro);
			}        

			if (property_exists($data, 'complemento')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getComplemento();
				}
				$this->setAuditoria('Endereco', 'Complemento', $enderecoAnt, $data->complemento);
				$endereco->setComplemento($data->complemento);
			}

			if (property_exists($data, 'cidade')){

				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getCidade();
				}
				$this->setAuditoria('Endereco', 'Cidade', $enderecoAnt, $data->cidade);
				$endereco->setCidade($data->cidade);
			}

			if (property_exists($data, 'estado')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getEstado();
				}
				$this->setAuditoria('Endereco', 'Estado', $enderecoAnt, $data->estado);
				$endereco->setEstado($data->estado);
			}

			if (property_exists($data, 'principal')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getPrincipal();
				}
				$this->setAuditoria('Endereco', 'Principal', $enderecoAnt, $data->principal);
				$endereco->setPrincipal($data->principal);
			}

			if (property_exists($data, 'ativo')){
				$enderecoAnt = '';
				if($alteracao==1){
					$enderecoAnt = $endereco->getAtivo();
				}
				$this->setAuditoria('Endereco', 'Ativo', $enderecoAnt, $data->ativo);
				$endereco->setAtivo($data->ativo);
			} else { 
				$endereco->setAtivo('1');
			}

			if (property_exists($data, 'cep'))
				$endereco->setCodigoPostal($data->cep);

			if (property_exists($data, 'observacao'))
				$endereco->setObservacao($data->observacao);

			$endereco->setDataCadastro(date('Y-m-d H:i:s'));
			$endereco->store();

		//******** Fim - Grava informações na Tabela de Endereço            
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);

			if($full == false){
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: " . $e);

			if($full == false){
				fJSON::output($arrMensagem);
			}else{
				return $arrMensagem;
			}
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar a contribuição para uma Pessoa
	Método: POST
	URL: http://localhost/sig/api/index.php/contribuicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 22/10/2014
	*/
	private function postContribuicaoCaixa($id_contribuicao, $contaBancaria, $id_pessoa, $numero_meses, $dia, $valor){
		$aSearch = array();
		$aSearch['id='] = $id_pessoa;
		$pessoa = fRecordSet::build('Pessoa', $aSearch);
		$dia_atual = date('d');
		$primeira_parcela_hoje="";

		if($dia_atual > $dia){
			$ini = 1;
		}else{
			$ini = 0;  
			$numero_meses--;
		}

		for($a = $ini; $a <= $numero_meses; $a++){
			$caixa = new Caixa();
			$caixa->setIdSituacao(1);
			$caixa->setIdTipoLancamento(1);
			$caixa->setIdCategoria(34);
			$caixa->setIdContaBancaria($contaBancaria[0]->getId());
			$caixa->setIdFormaPagamento(1);
			$caixa->setIdPessoa($pessoa[0]->getId());
			$caixa->setIdContribuicao($id_contribuicao);

			$data_sel = date('Y-m') . '-1';
			$mes = date('m', strtotime("+" .$a ." month", strtotime($data_sel)));
			$ano = date('Y', strtotime("+" .$a ." month", strtotime($data_sel)));

			if($dia == $dia_atual && $mes == date('m') && $ano == date('Y')){
				$dias_proxima_parcela="+1 days";
			}
			else{
				$dias_proxima_parcela="+" . $a . " month";
			}

			if($dia == $dia_atual && $mes == date('m') && $ano == date('Y')){ // se o dia da primeira parcela é hoje, entao coloca pro dia seguinte
				$data_mes = date('Y-m-d', strtotime($dias_proxima_parcela, strtotime(date('Y-m-d'))));
			} else {
				if($dia == 30){
					if($mes == 2){
						if(checkdate($mes, '29', $ano)){ $data_mes = $ano . '-' . $mes . '-29'; } // se existir dia 29 nesse fevereiro
						else $data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-28';
					}
					else $data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-' . $dia;
				}
				else if($dia == 31){
					if($mes == 2){
						if(checkdate($mes, '29', $ano)){ $data_mes = $ano . '-' . $mes . '-29'; } // se existir dia 29 nesse fevereiro
						else $data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-28';
					}
					else if($mes == 4 || $mes == 6 || $mes == 9 || $mes == 11){ $data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-30'; } // meses com 30 dias
					else $data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-' . $dia;
				}
				else{
					if(strlen($dia) == 1) $dia = '0' . $dia;
					$data_mes = date('Y-m', strtotime($dias_proxima_parcela, strtotime($data_sel))) . '-' . $dia;
				}
			}

			$caixa->setDescricao('Mensalidade Associado ' . $pessoa[0]->getNome());
			$caixa->setIdMoeda(1);
			$caixa->setDataVencimento($data_mes);
			$caixa->setValor($valor);
			$caixa->setValorFinal($valor);
			$caixa->setDataLancamento(date('Y-m-d'));
			$caixa->setAtivo(1);

			$caixa->store();
		}
	}

	public function postContribuicaoPessoa($data="", $full = false) {

		if($data == ''){
			$data = json_decode(file_get_contents("php://input"));	
		}

		if (property_exists($data, 'id_pessoa')){
			$id_pessoa = $data->id_pessoa;
		}

		$userSes = fSession::get('user');

		$aSearch = array();
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		$aSearch['principal='] = 1;
		$contaBancaria = fRecordSet::build('ContaBancaria', $aSearch);

		if(count($contaBancaria) <= 0){
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: Não foi encontrado a conta bancaria!");
			fJSON::output($arrMensagem);
			die();
		}

		$alteracao = 0;

		if (property_exists($data, 'id_beneficiario') && property_exists($data, 'id_pessoa')){
			if ($data->id_beneficiario != ''){
				$id_pessoa = $data->id_beneficiario;
			}else{
				$id_pessoa = $data->id_pessoa;
			}
		}
		if ($data->id) {
			$contribuicao = new Contribuicao($data->id);
			$contribuicao->setUpdateAt(date('Y-m-d H:i:s'));
		}else{
			$contribuicao = new Contribuicao();
			$contribuicao->setCreateAt(date('Y-m-d H:i:s'));
		}
		

		try {
		//******** Grava informações na Tabela de Contribuição
			if (property_exists($data, 'id_pessoa')){
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'Id Pessoa', $contribuicaoAnt, $id_pessoa);
				$contribuicao->setIdPessoa($id_pessoa);
			}
			if (property_exists($data, 'dia')){
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'Dia', $contribuicaoAnt, $data->dia);
				$contribuicao->setDia($data->dia);
			}
			if (property_exists($data, 'valor')) {
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'Valor', $contribuicaoAnt, $data->valor);
				$contribuicao->setValor($data->valor);
			}
			if (property_exists($data, 'isento')){
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'Isento', $contribuicaoAnt, $data->isento);
				$contribuicao->setIsento($data->isento);
			}
			if (property_exists($data, 'carteira')){
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'Carteira', $contribuicaoAnt, $data->carteira);
				$contribuicao->setCarteira($data->carteira);              
			}
			if (property_exists($data, 'numero_meses')){
				$contribuicaoAnt = '';
				$this->setAuditoria('Contribuicao', 'NumeroMeses', $contribuicaoAnt, $data->numero_meses);
				$contribuicao->setNumeroMeses($data->numero_meses);
			}

			$contribuicao->store();

			$contribuicao->getId();

			if (property_exists($data, 'isento')) {
				if($contribuicao->getId() && $data->isento == 0){
					
					/*
					var_dump('getIdPessoa', $contribuicao->getIdPessoa());
					var_dump('getNumeroMeses', $contribuicao->getNumeroMeses());
					var_dump('getDia', $contribuicao->getDia());
					var_dump('getValor', $contribuicao->getValor());
					*/
					
					$this->postContribuicaoCaixa($contribuicao->getId(),
						$contaBancaria,
						$contribuicao->getIdPessoa(), 
						$contribuicao->getNumeroMeses(), 
						$contribuicao->getDia(), 
						$contribuicao->getValor()
					);
				}
			}
		//******** Fim - Grava informações na Tabela de Endereço                    
			$arrMensagem = array('error' => 0, 'mensagem' => "Contribuição incluída com sucesso!");
			
			if($full == false){
				fJSON::output($arrMensagem);	
			}else{
				return $arrMensagem;	
			}
			

		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: " . $e->getMessage());
			
			if($full == false){
				fJSON::output($arrMensagem);	
			}else{
				return $arrMensagem;	
			}
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar Beneficiarios
	Método: POST
	URL: http://localhost/sig/api/index.php/beneficiario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/10/2014
	Autor: Rafael Frota
	Versão: 1.0
	Data de Alteração: 24/10/2014
	*/

	public function postBeneficiario() {
		$beneficiarioPessoa = json_decode(file_get_contents("php://input"));       

		$pessoa = new Pessoa();

		try {
		//******** Grava informações na Tabela de Pessoa
			$id_pessoa = $beneficiarioPessoa->id_pessoa;

			$pessoa->setIdTipoPessoa(1);

			if (property_exists($beneficiarioPessoa, 'nome')){
				$pessoa->setNome($beneficiarioPessoa->nome);
			}
			if (property_exists($beneficiarioPessoa, 'data_nascimento')){
				$pessoa->setDataNascimento(implode("-", array_reverse(explode("/", $beneficiarioPessoa->data_nascimento))));
			}
			if (property_exists($beneficiarioPessoa, 'sexo')){
				$pessoa->setSexo($beneficiarioPessoa->sexo);
			}
			if (property_exists($beneficiarioPessoa, 'email')){
				$pessoa->setEmail($beneficiarioPessoa->email);
			}
			if (property_exists($beneficiarioPessoa, 'numero_carteirinha')){
				$pessoa->setNumeroCarteirinha($beneficiarioPessoa->numero_carteirinha);                      
			}
			if (property_exists($beneficiarioPessoa, 'apelido')){
				$pessoa->setApelido($beneficiarioPessoa->apelido);
			}
			if (property_exists($beneficiarioPessoa, 'nacionalidade')){
				$pessoa->setNacionalidade($beneficiarioPessoa->nacionalidade);
			}
			if (($beneficiarioPessoa->tipocadastro == 1)) { //Associado
			if ($beneficiarioPessoa->associacao == 1) {  //Beneficiario e Parentesco
				$pessoa->setAssociado(1);
				$pessoa->setBeneficiario(1);
				$pessoa->setParentesco(1);
				$pessoa->setFuncionario(0);
				$pessoa->setProprietario(0);
				$pessoa->setDonatario(0);
				$pessoa->setFornecedor(0);
			}else{ //Só parentesco
				$pessoa->setAssociado(0);
				$pessoa->setBeneficiario(0);
				$pessoa->setParentesco(1);
				$pessoa->setFuncionario(0);
				$pessoa->setProprietario(0);
				$pessoa->setDonatario(0);
				$pessoa->setFornecedor(0);
			}
			}else if(($beneficiarioPessoa->tipocadastro == 4)) {  //Donatario
				$pessoa->setAssociado(0);
				$pessoa->setBeneficiario(0);
				$pessoa->setParentesco(1);
				$pessoa->setFuncionario(0);
				$pessoa->setProprietario(0);
				$pessoa->setDonatario(1);
				$pessoa->setFornecedor(0);
			}

			$pessoa->setAtivo(1);
			$pessoa->setDataCadastro(date('Y-m-d H:i:s'));

			$pessoa->store();

		//******** Fim - Grava informações na Tabela de Pessoa      
		$id_pessoa_beneficiario = $pessoa->getId(); //Recupera o Id da Pessoa Inserida

		//******** Grava informações na Tabela de Beneficiario
		$beneficiario = new Beneficiario();

		$beneficiario->setIdPessoaBeneficiario($id_pessoa_beneficiario);
		$beneficiario->setIdTipoBeneficiario($beneficiarioPessoa->tipo);
		$beneficiario->setIdPessoa($id_pessoa);
		
		if (property_exists($beneficiarioPessoa, 'associacao')) { //Se for Beneficiário o campo de parentesco é igual a 0
			if ($beneficiarioPessoa->associacao == 1) {
				$beneficiario->setParentesco(0);
		}else{ //Se for Parentesco o campo de parentesco é igual a 1
			$beneficiario->setParentesco(1);
		}
	}

	$beneficiario->setAtivo(1);

	$beneficiario->store();

	$id = $beneficiario->getId();
		//******** Fim - Grava informações na Tabela de Beneficiario
		//******** Grava informações na Tabela de Telefone
		//Grava Telefone Celular se houver
		// if (property_exists($beneficiarioPessoa, 'telefone_celular')){       
	if ($beneficiarioPessoa->telefone_celular != '') {
		$telefone = new Telefone();

		$telefoneCelular = str_replace("(", "", $beneficiarioPessoa->telefone_celular);
			$telefoneCelular = str_replace(")", "", $telefoneCelular);
			$telefoneCelular = str_replace(" ", "", $telefoneCelular);
			$telefoneCelular = str_replace("-", "", $telefoneCelular);

			$dddCelular = substr($telefoneCelular, 0, 3);
			$numeroCelular = substr($telefoneCelular, 3, 9);

		$telefone->setIdTipoTelefone('3'); //Celular
		$telefone->setIdPessoa($id_pessoa_beneficiario);
		$telefone->setDdd($dddCelular);
		$telefone->setNumero($numeroCelular);
		$telefone->setPrincipal(1);
		$telefone->setAtivo(1);

		$telefone->store();
	}

		//******** Fim - Grava informações na Tabela de Telefone
		//Grava CPF
	if (property_exists($beneficiarioPessoa, 'cpf')) {

		$documento = new Documento();

		$cpf = str_replace(".", "", $beneficiarioPessoa->cpf);
		$cpf = str_replace("-", "", $cpf);

			$documento->setIdTipoDocumento('2'); //CPF
			$documento->setIdPessoa($id_pessoa_beneficiario);
			$documento->setNumero($cpf);
			$documento->setAtivo(1);

			$documento->store();
		}

		if (property_exists($beneficiarioPessoa, 'id_tipo_documento')) { //Tipo do Documento de Identificação
			if ($beneficiarioPessoa->id_tipo_documento) {
				$documento = new Documento();

				$documento->setIdTipoDocumento($beneficiarioPessoa->id_tipo_documento);
				$documento->setIdPessoa($id_pessoa_beneficiario);
				$documento->setNumero($beneficiarioPessoa->numero_documento);
				$documento->setAtivo(1);
				$documento->store();

				$id_documento = $documento->getId();
			}
		}		

		$arrMensagem = array('error' => 0, 'id' => $id, 'id_pessoa_beneficiario' => $id_pessoa_beneficiario, 'mensagem' => "Dependente(s) incluído(s) com sucesso!");
		fJSON::output($arrMensagem);

	}catch (fValidationException $e) {
		$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: " . $e);
		fJSON::output($arrMensagem);
	}
}

	/*
	Módulo: Geral
	Descrição: Verificar se o CPF já existe
	Método: GET
	URL: http://localhost/sig/api/index.php/cpf/<número do cpf>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/10/2014
	*/

	public function getCpf($cpf) {
	//$this->acessoApi();

		$cpf = str_replace(".", "", $cpf);
		$cpf = str_replace("-", "", $cpf);

		$aSearch['id_tipo_documento='] = 2;
		$aSearch['numero='] = $cpf;

		$documento = fRecordSet::build('Documento', $aSearch);

		if (count($documento) > 0) {
			$aCpf[] = array(
				'error' => -1,
				'mensagem' => "Já existe um associado com o CPF:" . $cpf
				);

			fJSON::output($aCpf);
			die;
		} else {
			$aCpf[] = array(
				'error' => 0
				);

			fJSON::output($aCpf);
			die;			
		}
	}

	/*
	Módulo: Geral
	Descrição: Verificar se o CPF já existe
	Método: GET
	URL: http://localhost/sig/api/index.php/cpf/<número do cpf>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/10/2014
	*/

	public function getDocumentoAll($documento) {
	//$this->acessoApi();

		$documento = str_replace(".", "", $documento);
		$documento = str_replace("-", "", $documento);

		$aSearch['numero='] = $documento;

		$doc = fRecordSet::build('Documento', $aSearch);

		if ($doc->count() > 0) {
			$aDocumento[] = array(
				'error' => -1,
				'mensagem' => "Já existe um associado com o documento:" . $documento
				);

			fJSON::output($aDocumento);
			die;
		} else {
			$aDocumento[] = array(
				'error' => 0
				);

			fJSON::output($aDocumento);
			die;			
		}
	}

	/*
	Módulo: Geral
	Descrição: Verificar se o CPF já existe
	Método: GET
	URL: http://localhost/sig/api/index.php/cpf/<número do cpf>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/10/2014
	*/

	public function getCnpjEntidade($cnpj) {
		$this->acessoApi();

		$cnpj = str_replace(".", "", $cnpj);
		$cnpj = str_replace("-", "", $cnpj);
		$cnpj = str_replace("/", "", $cnpj);

		$aSearch['cnpj='] = $cnpj;

		$entidade = fRecordSet::build('Entidade', $aSearch);

		if (count($entidade) > 0) {
			$aCnpj[] = array(
				'error' => -1,
				'id_entidade' => $entidade[0]->getId(),
				'mensagem' => "Já existe uma entidade com o CNPJ:" . $cnpj
				);

			fJSON::output($aCnpj);
			die;
		} else {
			$aCnpj[] = array(
				'error' => 0
				);

			fJSON::output($aCnpj);
			die;	
		}
	}

	/*
	Módulo: Administrador
	Descrição: Cadastrar uma Nova Entidade
	Método: POST
	URL: http://localhost/sig/api/index.php/entidade/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	Alteração: Adição dos campos de abreviatura e id_pessoa_representante
	*/

	public function postEntidade() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$entidade = new Entidade($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Empresa alterada com sucesso!";
			$alteracao=1;
		}
		else {
			$entidade = new Entidade();
			$mensagem = "Empresa incluída com sucesso!";
			$alteracao=0;
		}

		try {

		//******** Grava informações na Tabela de Entidade
			if (property_exists($data, 'idPais')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getIdPais();
				}
				$this->setAuditoria('Entidade', 'Descrição', $entidadeAnt, $data->idPais);
				$entidade->setIdPais($data->idPais);        
			}
			if (property_exists($data, 'id_tipo_entidade')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getIdTipoEntidade();
				}
				$this->setAuditoria('Entidade', 'Id tipo Entidade', $entidadeAnt, $data->id_tipo_entidade);
				$entidade->setIdTipoEntidade($data->id_tipo_entidade);
			}
			if (property_exists($data, 'cnpj')) {
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getCnpj();
				}

				$cnpj = str_replace(".", "", $data->cnpj);
				$cnpj = str_replace("-", "", $cnpj);
				$cnpj = str_replace("/", "", $cnpj);
				$this->setAuditoria('Entidade', 'CNPJ', $entidadeAnt, $cnpj);
				$entidade->setCnpj($cnpj);
			}
			if (property_exists($data, 'nome')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getNome();
				}
				$this->setAuditoria('Entidade', 'Nome', $entidadeAnt, $data->nome);
				$entidade->setNome($data->nome);
			}

			if (property_exists($data, 'foto')){
				if($alteracao==1){
					$entidadeAnt = $entidade->getLogotipo();
					$this->setAuditoria('Entidade', 'Logotipo', $entidadeAnt, $data->foto);
				}
				$entidade->setLogotipo($data->foto);
			}

			if (property_exists($data, 'abreviatura')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getAbreviatura();
				}
				$this->setAuditoria('Entidade', 'Abreviatura', $entidadeAnt, $data->abreviatura);
				$entidade->setAbreviatura($data->abreviatura);
			}
			if (property_exists($data, 'logradouro')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getLogradouro();
				}
				$this->setAuditoria('Entidade', 'Logradouro', $entidadeAnt, $data->logradouro);
				$entidade->setLogradouro($data->logradouro);
			}
			if (property_exists($data, 'numero')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getNumero();
				}
				$this->setAuditoria('Entidade', 'Numero', $entidadeAnt, $data->numero);
				$entidade->setNumero($data->numero);
			}
			if (property_exists($data, 'bairro')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getBairro();
				}
				$this->setAuditoria('Entidade', 'Bairro', $entidadeAnt, $data->bairro);
				$entidade->setBairro($data->bairro);
			}
			if (property_exists($data, 'complemento')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getComplemento();
				}
				$this->setAuditoria('Entidade', 'Complemento', $entidadeAnt, $data->complemento);
				$entidade->setComplemento($data->complemento);
			}
			if (property_exists($data, 'cidade')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getCidade();
				}
				$this->setAuditoria('Entidade', 'Cidade', $entidadeAnt, $data->cidade);
				$entidade->setCidade($data->cidade);
			}
			if (property_exists($data, 'estado')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getEstado();
				}
				$this->setAuditoria('Entidade', 'Estado', $entidadeAnt, $data->estado);
				$entidade->setEstado($data->estado);
			}
			if (property_exists($data, 'telefone')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $entidade->getTelefone();
				}
				$this->setAuditoria('Entidade', 'Telefone', $entidadeAnt, $data->telefone);
				$entidade->setTelefone($data->telefone);
			}
			if (property_exists($data, 'cep')){
				$entidade->setCodigoPostal($data->cep);
			}
			if(property_exists($data, 'diretor')){
				$entidade->setIdPessoaDiretor($data->diretor);
			}
			if(property_exists($data, 'secretario')){
				$entidade->setIdPessoaSecretario($data->secretario);
			}
			if(property_exists($data, 'tesoureiro')){
				$entidade->setIdPessoaTesoureiro($data->tesoureiro);
			}
			if(property_exists($data, 'id_pessoa_diretor')){
				$entidade->setIdPessoaDiretor($data->id_pessoa_diretor);
			}
			if(property_exists($data, 'id_pessoa_secretario')){
				$entidade->setIdPessoaSecretario($data->id_pessoa_secretario);
			}
			if(property_exists($data, 'id_pessoa_tesoureiro')){
				$entidade->setIdPessoaTesoureiro($data->id_pessoa_tesoureiro);
			}
			if(property_exists($data, 'id_pessoa_representante')){
				$entidade->setIdPessoaRepresentante($data->id_pessoa_representante);
			}


			$entidade->setAtivo(1);
			$entidade->setDataCadastro(date('Y-m-d H:i:s'));

			if($alteracao != 1){
				$aSearch = array();
				$cnpj = str_replace(".", "", $data->cnpj);
				$cnpj = str_replace("-", "", $cnpj);
				$cnpj = str_replace("/", "", $cnpj);
				$aSearch['cnpj='] = $cnpj;
				$countEntidade = fRecordset::build('Entidade',$aSearch);
				if($countEntidade->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A entidade já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$entidade->store();
				}
			}
			else{
				$entidade->store();
			}
		//******** Fim - Grava informações na Tabela de Entidade

			$id_entidade = $entidade->getId();

			$arrMensagem = array('error' => 0, 'id_entidade' => $id_entidade, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão:".$e);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Administrador
	Descrição: Obter Lista de Entidades
	Método: GET
	URL: http://localhost/sig/api/index.php/entidade/<entidade>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	Alteração: Adicionado o campo de abreviatura e campo de id_pessoa_responsavel
	*/

	public function getEntidade($id_entidade = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_entidade != "") {
			$aSearch['id='] = $id_entidade;
		}

		$entidade = fRecordSet::build('Entidade', $aSearch);

		if ($full == false) {

			$aEntidade = array();

			foreach ($entidade->getRecords() as $key => $value) {

		$resultTipoTipoEntidade = $this->getTipoEntidade($value->getIdTipoEntidade(), true); //Obtem Tipo Entidade

		$aEntidade[] = array(
			'id' => $value->getId(),
			'id_tipo_entidade' => $value->getIdTipoEntidade(),
			'tipo_entidade' => $resultTipoTipoEntidade->getDescricao(),
			'id_pais' => $value->getIdPais(),
			'cnpj' => $value->getCnpj(),
			'nome' => $value->getNome(),
			'abreviatura' => $value->getAbreviatura(),
			'logradouro' => $value->getLogradouro(),
			'numero' => $value->getNumero(),
			'bairro' => $value->getBairro(),
			'complemento' => $value->getComplemento(),
			'cidade' => $value->getCidade(),
			'estado' => $value->getEstado(),
			'cep' => $value->getCodigoPostal(),
			'telefone' => $value->getTelefone(),
			'ativo' => $value->getAtivo(),
			'id_pessoa_diretor' => $value->getIdPessoaDiretor(),
			'id_pessoa_secretario' => $value->getIdPessoaSecretario(),
			'id_pessoa_tesoureiro' => $value->getIdPessoaTesoureiro(),
			'id_pessoa_representante' => $value->getIdPessoaRepresentante(),
			'logotipo' => $value->getLogotipo()
			);
	}

	//'logotipo' => $value->getLogotipo(),

	if (count($aEntidade) == 0) {
		$aEntidade[] = array(
			'error' => -1,
			'mensagem' => "Nenhuma entidade encontrada."
			);
		fJSON::output($aEntidade);
		die();
	}

	$aEntidade = array(
		'error' => 0,
		'entidade' => $aEntidade
		);

	fJSON::output($aEntidade);
}
else {
	return $entidade[0];
}
}

	/*
	Módulo: Administrador
	Descrição: Obter Lista de Entidades filtrado por tipo de entidades
	Método: GET
	URL: http://localhost/sig/api/index.php/entbytipo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getEntidadeByTipo($id_tipo_entidade = "", $full = false) {

		$campos = array(
			'id'					 ,
			'id_pais'				 ,
			'id_tipo_entidade'		 ,
			'cnpj'					 ,
			'nome'					 ,
			'abreviatura'			 ,
			'logradouro'			 ,
			'numero'				 ,
			'bairro'				 ,
			'complemento'		 	 ,
			'cidade'				 ,
			'estado'				 ,
			'codigo_postal'			 ,
			'ativo'					 ,
			'id_pessoa_diretor'		 ,
			'id_pessoa_secretario'	 ,
			'id_pessoa_tesoureiro'	 ,
			'id_pessoa_representante',
			'data_cadastro'			 ,
			'telefone'				 );


		$consulta = "SELECT %S FROM %F WHERE %W ORDER BY %O";
		$tabela   = "entidade";
		$condicao = "id_tipo_entidade = ".$id_tipo_entidade;
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);


		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma ".$tabela." encontrada."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}

/*
Módulo: Mesquita
Descrição: Obter Lista de Beneficiarios de uma pessoa
Método: GET
URL: http://localhost/sig/api/index.php/beneficiario/<pessoa>/
Autenticação: Não
Resposta: JSON
Data de Criação: 16/10/2014
Autor: Ricardo Bruno
Versão: 1.0
Data de Alteração: 16/10/2014
*/

public function getBeneficiarioPessoa($id_pessoa = "", $full = false) {
	$this->acessoApi();
	$aSearch = array();

	if ($id_pessoa != "") {
		$aSearch['id_pessoa='] = $id_pessoa;
	}

	$beneficiarioPessoa = fRecordSet::build('Beneficiario', $aSearch);
	$aBeneficiarioPessoa = array();

	if ($beneficiarioPessoa->count() == 0) {
		$aBeneficiarioPessoa[] = array(
			'error' => -1,
			'mensagem' => "Nenhum beneficiário encontrado."
			);
	} else {
		foreach ($beneficiarioPessoa->getRecords() as $key => $value) {
			$resultBeneficiario = $this->getTipoBeneficiario($value->getIdTipoBeneficiario(), true); //Obtem Tipo do Beneficiario
			$resultPessoaBeneficiario = $this->getPessoa($value->getIdPessoaBeneficiario(), true); //Obtem Pessoa Beneficiario    
			$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getIdPessoaBeneficiario(), "", true, 2); //Obtem CPF do Beneficiario

			if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
				$cpf = "";
			} else {
				$cpf = $resultDocumentoPessoaCPF[0]["numero"];
			}

			$dataNascimento = '';
			if ($resultPessoaBeneficiario['pessoa'][0]['data_nascimento'] != null) {				
				$dataNascimento = date("d/m/Y", strtotime($resultPessoaBeneficiario['pessoa'][0]['data_nascimento']));
			}

			if ($resultPessoaBeneficiario['pessoa'][0]['sexo'] == 1) {
				$sexo_nome = 'Masculino';
			} else {
				$sexo_nome = 'Feminino';
			}

			if ($resultPessoaBeneficiario['pessoa'][0]['parentesco'] == 1) {
				$associacaoNome = 'Apenas Parentesco';
				$associacao = 2;
			} else {
				$associacaoNome = 'Beneficiário da Associação';
				$associacao = 1;
			}

			$aBeneficiarioPessoa[] = array(
				'id' => $value->getId(),
				'id_tipo_beneficiario' => $value->getIdTipoBeneficiario(),
				'tipo_beneficiario_nome' => $resultBeneficiario->getDescricao(),
				'id_pessoa_beneficiario' => $value->getIdPessoaBeneficiario(),
				'nome' => $resultPessoaBeneficiario['pessoa'][0]['nome'],
				'sexo' => $resultPessoaBeneficiario['sexo'],
				'sexo_nome' => $sexo_nome,
				'data_nascimento' => $dataNascimento,
				'email' => $resultPessoaBeneficiario['pessoa'][0]['email'],
				'apelido' => $resultPessoaBeneficiario['apelido'],
				'cpf' => $cpf,
				'nacionalidade' => $resultPessoaBeneficiario['nacionalidade'],
				'id_pessoa' => $value->getIdPessoa(),
				'parentesco' => $value->getParentesco(),
				'ativo' => $value->getAtivo(),
				'associacaoNome' => $associacaoNome,
				'associacao' => $associacao,
				);
		}
	}

	if ($full == false) {
		fJSON::output($aBeneficiarioPessoa);
	} else {
		return $aBeneficiarioPessoa;
	}
}

	/*
	Módulo: Geral
	Descrição: Verificar se o CNPJ já existe
	Método: GET
	URL: http://localhost/sig/api/index.php/cnpj/<número do cnpj>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 31/10/2014
	*/

	public function getCnpj($cnpj) {
	//$this->acessoApi();

		$cnpj = str_replace(".", "", $cnpj);
		$cnpj = str_replace("-", "", $cnpj);

		$aSearch['id_tipo_documento='] = 5;
		$aSearch['numero='] = $cnpj;

		$documento = fRecordSet::build('Documento', $aSearch);

		if (count($documento) > 0) {
			$aCnpj[] = array(
				'error' => -1,
				'mensagem' => "Já existe um associado com o CNPJ:" . $cnpj
				);

			fJSON::output($aCnpj);
			die;
		} else {
			$aCnpj[] = array(
				'error' => 0
				);

			fJSON::output($aCnpj);
			die;			
		}
	}

	/*
	Módulo: Geral
	Descrição: Altera o estado do usuário para ativo ou inativo
	Método: POST
	URL: http://localhost/sig/api/index.php/updatepessoa/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2014
	Autor: Daniel Swater de Castro
	*/

	public function updatePessoa($id){
		$pessoa = new Pessoa($id);
		try{
			if($pessoa->getAtivo() == 0){
				$pessoa->setAtivo(1);
				$mensagem = "Pessoa ativada com sucesso!";
			}
			else {
				$pessoa->setAtivo(0);
				$mensagem = "Pessoa desativada com sucesso!";
			}
			$pessoa->store();
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);

		} catch (fExpectedException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro ao Ativar/Desativar");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Descrição: Aplica Máscara de CPF E CNPJ
	Autenticação: Não
	Data de Criação: 04/11/2014
	Autor: Daniel Swater de Castro
	*/

	static function mask($val, $mask) {
		$maskared = '';
		$k = 0;
		for ($i = 0; $i <= strlen($mask) - 1; $i++) {
			if ($mask[$i] == '#') {
				if (isset($val[$k]))
					$maskared .= $val[$k++];
			}
			else {
				if (isset($mask[$i]))
					$maskared .= $mask[$i];
			}
		}
		return $maskared;
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Quadras
	Método: GET
	URL: http://localhost/sig/api/index.php/quadra/<quadra>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 05/11/2014
	*/

	public function getQuadra($id_quadra = "",$full = false) {
		$this->acessoApi();

		$aSearch = "";
		if ($id_quadra != "") {
			$aSearch .= ' and id = '. $id_quadra;
		}                 

		$strQueryQuadra = "SELECT * FROM quadra WHERE 1 ".$aSearch;

		$quadra = $this->_getDb()->query($strQueryQuadra);

		if ($full == false) {

			$aQuadra = array();

			foreach ($quadra as $key => $value) {

				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}

				$aQuadra[] = array(
					'id' => $value['id'],
					'id_entidade' => $value['id_entidade'],
					'descricao' => $value['descricao'],
					'setor' => $value['setor'],
					'ativo' => $value['ativo'],
					'status' => $status
					);
			}

			$quadra = $this->_getDb()->close();

			if (count($aQuadra) == 0) {
				$aQuadra[] = array('error' => -1, 'mensagem' => "Nenhuma quadra encontrada.");
				fJSON::output($aQuadra);
				die();
			}

			$aQuadra = array(
				'quadra' => $aQuadra
				);

			fJSON::output($aQuadra);
		}
		else {
			return $aQuadra;
		}
	}  

	/*
	Módulo: Cemitério
	Descrição: Cadastrar uma nova quadra
	Método: GET
	URL: http://localhost/sig/api/index.php/quadra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 05/11/2014
	*/

	public function postQuadra() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$quadra = new Quadra($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Quadra alterada com sucesso!";
			$alteracao=1;
		}
		else {
			$quadra = new Quadra();
			$mensagem = "Quadra incluída com sucesso!";
			$alteracao=0;
		}

		try {

		//******** Grava informações na Tabela de Quadra
			if (property_exists($data, 'id_entidade')){
				$quadraAnt = '';
				if($alteracao==1){
					$quadraAnt = $quadra->getIdEntidade();
				}
				$this->setAuditoria('Quadra', 'Id Entidade', $quadraAnt, $data->id_entidade);
				$quadra->setIdEntidade($data->id_entidade);
			}


			if (property_exists($data, 'descricao')){
				$quadraAnt = '';
				if($alteracao==1){
					$quadraAnt = $quadra->getDescricao();
				}
				$this->setAuditoria('Quadra', 'Descricao', $quadraAnt, $data->descricao);
				$quadra->setDescricao($data->descricao);
			}


			if (property_exists($data, 'setor')){
				$quadraAnt = '';
				if($alteracao==1){
					$quadraAnt = $quadra->getSetor();
				}
				$this->setAuditoria('Quadra', 'Setor', $quadraAnt, $data->setor);
				$quadra->setSetor($data->setor); 
			}


			if (property_exists($data, 'ativo'))
				$quadra->setAtivo($data->ativo);

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$aSearch['setor='] = $data->setor;

				$countQuadra = fRecordset::build('Quadra', $aSearch);

				if($countQuadra->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A quadra já foi cadastrada");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$quadra->store();
				}

			}
			else{
				$quadra->store();
			}

		//******** Fim - Grava informações na Tabela de quadra

			$id_quadra = $quadra->getId();

			$arrMensagem = array('error' => 0, 'id_quadra' => $id_quadra, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	 /*
	Módulo: Cemiterio
	Descrição: Obter lista de Lotes
	Método: GET
	URL: http://localhost/sig/api/index.php/lote/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/09/2015
	Autor: Fábio Roberto Haydn
	*/
	public function getLote($id_lote = "",$full = false) { 

		$userSes = fSession::get('user');

		$campos = array("l.id","l.id_quadra","q.descricao descricao_quadra","l.descricao descricao","l.id_tamanho_lotes","tl.descricao tamanho","l.preco","l.ativo","case when l.ativo=1 then 'ativo' else 'inativo' end status");

		$consulta = "SELECT %S FROM %F %J %W ORDER BY %O";
		$tabela   = "lote l";
		$condicao = ($id_lote!="") ? "WHERE l.id = ".$id_lote : "";
		$join 	  = 'LEFT JOIN tamanho_lotes tl ON l.id_tamanho_lotes=tl.id ';
		$join 	 .= 'LEFT JOIN quadra q ON q.id=l.id_quadra ';
		$ordem 	  = 'q.descricao,l.descricao';

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%J", $join 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'lote' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 

	/*
	Módulo: Cemitério
	Descrição: Cadastrar uma novo Lote
	Método: GET
	URL: http://localhost/sig/api/index.php/lote/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 05/11/2014
	*/

	public function postLote() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$lote = new Lote($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Lote alterado com sucesso!";
			$alteracao=1;
		}
		else {
			$lote = new Lote();
			$mensagem = "Lote incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de lote
			if (property_exists($data, 'id_quadra')){
				$loteAnt = '';
				if($alteracao==1){
					$loteAnt = $lote->getIdQuadra();
				}
				$this->setAuditoria('Lote', 'Id Quadra', $loteAnt, $data->id_quadra);
				$lote->setIdQuadra($data->id_quadra);
			}
			if (property_exists($data, 'descricao')){
				$loteAnt = '';
				if($alteracao==1){
					$loteAnt = $lote->getDescricao();
				}
				$this->setAuditoria('Lote', 'Descricao', $loteAnt, $data->descricao);
				$lote->setDescricao($data->descricao);
			}
			if (property_exists($data, 'id_tamanho_lotes')){
				$loteAnt = '';
				if($alteracao==1){
					$loteAnt = $lote->getIdTamanhoLotes();
				}
				$this->setAuditoria('Lote', 'IdTamanhoLotes', $loteAnt, $data->id_tamanho_lotes);
				$lote->setIdTamanhoLotes($data->id_tamanho_lotes); 
			}
			if (property_exists($data, 'preco')) {
				$preco = str_replace(".", "", $data->preco);
				$preco = str_replace(",", ".", $preco);
				$loteAnt = '';
				if($alteracao==1){
					$loteAnt = $lote->getPreco();
				}
				$this->setAuditoria('Lote', 'Preco', $loteAnt, $preco);
				$lote->setPreco($preco);             
			}
			if (property_exists($data, 'ativo')){
				$lote->setAtivo($data->ativo);
			}

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$aSearch['id_quadra='] = $data->id_quadra;
				$countLote = fRecordset::build('Lote', $aSearch);

				if($countLote->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O lote já foi cadastrado para esta quadra.");
					fJSON::output($arrMensagem);
					die();
				}else{
					$lote->store();
				}          
			}
			else{
				$lote->store();
			}


		//******** Fim - Grava informações na Tabela de lote

			$id_lote = $lote->getId();

			$arrMensagem = array('error' => 0, 'id_lote' => $id_lote, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();

		}catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista dos tipos de Unidades
	Método: GET
	URL: http://localhost/sig/api/index.php/tiposunidadearmazenagem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getTiposUnidadesArmazenagem(){
		$aUnidadesArmazenagem = array();
		try{
			$unidades = fRecordSet::build('TipoUnidadeArmazenagem');
			foreach ($unidades->getRecords() as $key => $value) {
				$aUnidadesArmazenagem[] = array(
					'id_tipos_unidade' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo()
					);
			}
			fJSON::output($aUnidadesArmazenagem);
		}
		catch(fValidationException $e){
			$aUnidadesArmazenagem[] = array(
				'error' => -1,
				'mensagem' => 'Erro ao carregar as Unidades'
				);
			fJSON::output($aUnidadesArmazenagem);
		}        
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista dos tipos de Concessão
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoconcessao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getTipoConcessao(){
		$aTipoConcessao = array();
		try{
			$tipo = fRecordSet::build('TipoConcessao');
			foreach ($tipo as $key => $value) {
				$aTipoConcessao[] = array('id_concessao' => $value->getId(), 'descricao' => $value->getDescricao(), 'ativo' => $value->getAtivo());
			}
			fJSON::output($aTipoConcessao);
		}
		catch(fValidationException $e){
			$aTipoConcessao[] = array('error' => -1, 'mensagem' => 'Erro ao carregar os Tipos de Concessão');
			fRecordSet::output($aTipoConcessao);
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista dos tipos de Cobrança
	Método: GET
	URL: http://localhost/sig/api/index.php/periodicidadecobranca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getPeriodicidadeCobranca(){
		$aPeriodicidade = array();
		try{
			$cobranca = fRecordSet::build('PeriodicidadeCobranca');
			foreach ($cobranca as $key => $value) {
				$aPeriodicidade[] = array('id_periodicidade' => $value->getId(), 'descricao' => $value->getDescricao(), 'ativo' => $value->getAtivo());
			}
			fJSON::output($aPeriodicidade);

		}
		catch(fValidationException $e){
			$aPeriodicidade[] = array('error' => -1, 'mensagem' => 'Erro ao carregar as Periodicidades de Cobrança');
			fJSON::output($aPeriodicidade);
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista de Planos de Unidade de Armazenagem
	Método: GET
	URL: http://localhost/sig/api/index.php/uaplanos/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function getPlanos(){

		$aPlanos = array();
		try{
			$planos = fRecordSet::build('PlanoUnidadeArmazenagem');
			foreach ($planos->getRecords() as $key => $value) {
				$aPlanos[] = array(
					'id_planos' => $value->getId(),
					'descricao_planos' => $value->getDescricao(),
					'ativo_planos' => $value->getAtivo()
					);
			}
			fJSON::output($aPlanos);
		}
		catch(fValidationException $e){
			$aPlanos[] = array(
				'error' => -1,
				'mensagem' => 'Erro ao carregar Planos'
				);
			fJSON::output($aPlanos);
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista de status das Gavetas
	Método: GET
	URL: http://localhost/sig/api/index.php/statusgaveta/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getStatusGaveta(){
		$aStatus = array();
		try{
			$gaveta = fRecordSet::build('StatusGaveta');
			foreach ($gaveta as $key => $value) {
				$aStatus[] = array(
					'id_gaveta' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					);
			}
			fJSON::output($aStatus);
		}
		catch(fValidationException $e){
			$aStatus[] = array(
				'error' => -1,
				'mensagem' => 'Erro ao carregar os Status'
				);
			fJSON::output($aStatus);
		}
	}


	/*
	Módulo: SIG
	Descrição: Gravar quadro societário de uma empresa
	Método: POST
	URL: http://localhost/sig/api/index.php/socio/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/11/2014
	Autor: Rafael Frota Carvalho
	Versão: 1.0
	*/

	public function postSocio() {

		$data = json_decode(file_get_contents("php://input"));

		$socio = new PessoaSocio();
		$mensagem = "Sócio incluído com sucesso!";

		try {
		//******** Grava informações na Tabela de pessoa_socio
			$socio->setIdPessoaSocio($data->id);          
			$socio->setIdPessoa($data->id_pessoa);
			$socio->store();
		//******** Fim - Grava informações na Tabela de pessoa_socio
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}

	/*
	Módulo: Cemitério
	Descrição: Grava Unidade de Armazenagem
	Método: POST
	URL: http://localhost/sig/api/index.php/unidadearmazenagem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postUnidadeArmazenagem(){

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')){
			$unidade_armazenagem = new UnidadeArmazenagem($data->id);
			$alteracao = 1;
		}else{
			$unidade_armazenagem = new UnidadeArmazenagem();
			$alteracao = 0;      
		}

		try{
			if(property_exists($data, 'plano')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $data->plano;
				}
				$this->setAuditoria('Unidade Armazenagem', 'Plano', $unidade_armazenagemAnt, $data->plano);
				$unidade_armazenagem->setIdPlanoUnidadeArmazenagem($data->plano);            
			}
			if(property_exists($data, 'unidade')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getIdTipoUnidadeArmazenagem();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Id Tipo Unidade Armazenagem', $unidade_armazenagemAnt, $data->unidade);
				$unidade_armazenagem->setIdTipoUnidadeArmazenagem($data->unidade);
			}
			if(property_exists($data, 'concessao')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getIdTipoConcessao();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Id Tipo Unidade Armazenagem', $unidade_armazenagemAnt, $data->concessao);
				$unidade_armazenagem->setIdTipoConcessao($data->concessao);
			}
			if(property_exists($data, 'lote')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getIdLote();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Lote', $unidade_armazenagemAnt, $data->lote);
				$unidade_armazenagem->setIdLote($data->lote);
			}          
			if(property_exists($data, 'periodicidade')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getIdPeriodicidadeCobranca();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Periodicidade de Cobrança', $unidade_armazenagemAnt, $data->periodicidade);
				$unidade_armazenagem->setIdPeriodicidadeCobranca($data->periodicidade);
			}
			if(property_exists($data, 'descricao')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getDescricao();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Descricao', $unidade_armazenagemAnt, $data->descricao);
				$unidade_armazenagem->setDescricao($data->descricao);
			}
			if(property_exists($data, 'tumulo')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getNumeroTumulo();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Tumulo', $unidade_armazenagemAnt, $data->tumulo);
				$unidade_armazenagem->setNumeroTumulo($data->tumulo);
			}
			if(property_exists($data, 'data_fim_armazenamento')){
				$unidade_armazenagemAnt = '';
				if($alteracao==1){
					$unidade_armazenagemAnt = $unidade_armazenagem->getDataFimArmazenagem();
				}
				$this->setAuditoria('Unidade Armazenagem', 'Lote', $unidade_armazenagemAnt, $data->data_fim_armazenamento);
				$unidade_armazenagem->setDataFimArmazenagem(self::formatDateDatebase($data->data_fim_armazenamento));
			}
			if(property_exists($data, 'status')){
				$unidade_armazenagem->setAtivo($data->status);
			}          
			$unidade_armazenagem->setDataCadastro(date('Y:m:d H:i:s'));

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['id_lote='] = $data->lote;
				$aSearch['numero_tumulo='] = $data->tumulo;
				$countUA = fRecordset::build('UnidadeArmazenagem',$aSearch);
				if($countUA->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A Unidade já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$unidade_armazenagem->store();
				}
			}
			else{
				$unidade_armazenagem->store();
			}

			$id = $unidade_armazenagem->getId();

			$arrMensagem = array('error' => 0, 'ua'=> $id, 'mensagem' => 'Jazigo salvo com sucesso!');
			fJSON::output($arrMensagem);
			die();
		}
		catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => $e->printMessage());
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Carrega as Unidades de Armazenagem
	Método: GET
	URL: http://localhost/sig/api/index.php/unidadearmazenagem/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getUnidadeArmazenagem($id){    
		try{

			$arrayUA = fRecordset::build('UnidadeArmazenagem', array('id=' => $id));

			foreach ($arrayUA as $key => $value) {
				$lote = fRecordSet::build('Lote', array("id=" => $value->getIdLote()));

				$dataFimArmazenagem = "";
				if ($value->getDataFimArmazenagem() != null) {
					$dataFimArmazenagem = $value->getDataFimArmazenagem()->format('Y/m/d');
				}  				

				$arrayUnidade = array(
					'id' => $value->getId(),
					'id_plano_unidade_armazenagem' => $value->getIdPlanoUnidadeArmazenagem(),
					'id_tipo_unidade_armazenagem' => $value->getIdTipoUnidadeArmazenagem(),
					'id_tipo_concessao' => $value->getIdTipoConcessao(),
					'id_quadra' => $lote[0]->getIdQuadra(),
					'id_lote' => $value->getIdLote(),
					'id_periodicidade_cobranca' => $value->getIdPeriodicidadeCobranca(),
					'descricao' => $value->getDescricao(),
					'numero_tumulo' => $value->getNumeroTumulo(),
					'data_fim_armazenagem' => $dataFimArmazenagem,
					'ativo' => $value->getAtivo(),
					'data_cadastro' => $value->getDataCadastro()->format('Y/m/d'),
					);

			}

			fJSON::output($arrayUnidade);
			die();
		}
		catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => 'Não foi possível carregar a Unidade de Armazenagem');
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Grava pessoas na Unidade de Armazenagem
	Método: GET
	URL: http://localhost/sig/api/index.php/unidadearmazenagempessoas/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postUnidadeArmazenagemPessoas(){

		$data = json_decode(file_get_contents("php://input"));
		$user = fSession::get('user');

		$aSearch = array();

		/*$aSearch['id_entidade='] = $user['user']['entidadePessoa'];
		$aSearch['principal='] = 1;

		$contabancaria = fRecordSet::build('ContaBancaria', $aSearch);

		if(count($contabancaria)==0){
			$arrMensagem = array('error' => -1, 'mensagem' => "Não é possível adicionar o proprietário, pois não existe uma conta bancária vinculada na empresa.");
			fJSON::output($arrMensagem);
			die();
		}  */  

		if (property_exists($data, 'id')){
			$unidade_armazenagem_pessoa = new UnidadeArmazenagemPessoa($data->id);
		}else{
			$unidade_armazenagem_pessoa = new UnidadeArmazenagemPessoa();  
		}

		if(!array_key_exists('id_pessoa', $data)){
			$arrMensagem = array('error' => -1, 'mensagem' => "Por favor, escolha uma pessoa");
			fJSON::output($arrMensagem);
			die();
		}

		try{
			$unidade_armazenagem_pessoa->setIdPessoa($data->id_pessoa);
			$unidade_armazenagem_pessoa->setIdUnidadeArmazenagem($data->id_ua);
			$unidade_armazenagem_pessoa->setIdTipoPlanoUa($data->id_tipo_plano_ua);
			$unidade_armazenagem_pessoa->setDataConcessao(self::formatDateDatebase($data->data_concessao));
			$unidade_armazenagem_pessoa->setDataContrato(self::formatDateDatebase($data->data_contrato));

			//$valor = str_replace(".", "", $data->valor);
			//$valor = str_replace(",", ".", $valor);

		//$valor_manutencao = str_replace(".", "", $data->valor_manutencao);
		//$valor_manutencao = str_replace(",", ".",$valor_manutencao);

			//$valor_manutencao = $data->valor_manutencao;

			//$unidade_armazenagem_pessoa->setValor($valor);
			//$unidade_armazenagem_pessoa->setValorManutencao($valor_manutencao);
			$unidade_armazenagem_pessoa->setIsento($data->isento);
			$unidade_armazenagem_pessoa->setAtivo($data->situacao);
			$unidade_armazenagem_pessoa->setDataCadastro(date('Y:m:d H:i:s'));

			$id_jazigo = $data->id_jazigo;

			$unidade_armazenagem_pessoa->store();

			switch($data->cobranca){
				case 1:
				$periodicidade = 12;
				break;

				case 2:
				$periodicidade = 3;
				break;

				case 3:
				$periodicidade = 6;
				break;

				case 4:
				$periodicidade = 1;
				break;
			}
/*
			$data_vencimento_venda = date('Y-m-d', strtotime("+5 days",strtotime(self::formatDateDatebase($data->data_concessao))));
			$valor_manutencao2 = $valor_manutencao / $periodicidade;

			$caixa = new Caixa();

			$caixa->setIdSituacao(1);
			$caixa->setIdTipoLancamento(1);
			$caixa->setIdCategoria(3);
			$caixa->setIdContaBancaria($contabancaria[0]->getId());
			$caixa->setIdFormaPagamento($data->id_forma_pagamento);
			$caixa->setIdPessoa($data->id_pessoa);
			$caixa->setDataVencimento($data_vencimento_venda);
			$caixa->setDescricao("Venda Jazigo: " . $id_jazigo);
			$caixa->setValor($valor);
			$caixa->setValorFinal($valor);
			$caixa->setDataLancamento(self::formatDateDatebase($data->data_concessao));
			$caixa->setAtivo(1);

			$caixa->store();

			$m = 1;

			for($i = 1; $i <= $periodicidade; $i++){

				$month = '+'.$m.'month';
				$data_vencimento_manutencao =  date('Y-m-d', strtotime($month, strtotime($data->data_concessao)));
				$data_vencimento_manutencao = date('Y-m-d', strtotime("+5 days", strtotime($data_vencimento_manutencao)));
				$caixa = new Caixa();
				$caixa->setIdSituacao(1);
				$caixa->setIdTipoLancamento(1);
				$caixa->setIdCategoria(5);
				$caixa->setIdContaBancaria(2);
				$caixa->setIdFormaPagamento($data->id_forma_pagamento);
				$caixa->setIdPessoa($data->id_pessoa);
				$caixa->setDataVencimento($data_vencimento_manutencao);
				$caixa->setDescricao("Manutenção Jazigo: " . $id_jazigo);
				$caixa->setValor($valor_manutencao2);
				$caixa->setValorFinal($valor_manutencao2);
				$caixa->setDataLancamento(self::formatDateDatebase($data->data_concessao));
				$caixa->setAtivo(1);

				$caixa->store();

				$m = $m + 1;
			}
*/
			$arrMensagem = array('error' => 0, 'mensagem' => 'Pessoas inseridas com sucesso!');
			fJSON::output($arrMensagem);
			die();
		}
		catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => $e->getMessage());
			fJSON::output($arrMensagem);
			die();
		}    
	}

	/*
	Módulo: Cemitério
	Descrição: Carrega as pessoas na Unidade de Armazenagem
	Método: GET
	URL: http://localhost/sig/api/index.php/unidadearmazenagempessoas/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getUnidadeArmazenagemPessoas($id){

		$unidade_armazenagem_pessoa = "";
		try{
			$arrayUnidadeArmazenagemPessoa = fRecordset::build('UnidadeArmazenagemPessoa', array('id_unidade_armazenagem=' => $id));

			foreach ($arrayUnidadeArmazenagemPessoa as $key => $value) {

				$pessoa = new Pessoa($value->getIdPessoa());

				$caixa = fRecordset::build('Caixa', array('id_pessoa=' => $value->getIdPessoa()));
				$id_forma_pagamento = '';
				foreach ($caixa as $key => $valor) {
					$id_forma_pagamento = $valor->getIdFormaPagamento();
				}

				$val_manutencao = fRecordset::build('UnidadeArmazenagemPessoa', array('id_pessoa=' => $value->getIdPessoa()));
				foreach ($val_manutencao as $key => $val) {
					$vm = $val->getValorManutencao();
				}

				$unidade_armazenagem_pessoa = array(
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'pessoa_nome' => $pessoa->getNome(),
					'id_unidade_armazenagem' => $value->getIdUnidadeArmazenagem(),
					'id_tipo_plano_ua' => $value->getIdTipoPlanoUa(),
					'data_concessao' => $value->getDataConcessao()->format('Y/m/d '),
					'data_contrato' => $value->getDataContrato()->format('Y/m/d '),
					'valor' => $value->getValor(),
					'valor_manutencao' => $vm,
					'forma_pagamento' => $id_forma_pagamento,
					'isento' => $value->getIsento(),
					'ativo' => $value->getAtivo(),
					'data_cadastro' => $value->getDataCadastro()->format('Y/m/d')
					);
			}
			fJSON::output($unidade_armazenagem_pessoa);
			die();
		}
		catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: ???
	Descrição: O que isso faz?
	Método: ???
	URL: ???
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ???
	Autor: ???
	Versão: ??
	Data de Alteração: ???
	*/

	public function postUnidadeArmazenagemGavetas(){

		$data = json_decode(file_get_contents("php://input"));

		$flag=0;
		if (property_exists($data, 'id')){
			$gaveta = new Gaveta($data->id);
		}else{
			$gaveta = new Gaveta();
		}

		try{

			$flag=0;
			if(property_exists($data, 'id_unidade_armazenagem')){
				$gaveta->setIdUnidadeArmazenagem($data->id_unidade_armazenagem);
				$flag=1;
			}

			if ($flag==0) {
				if(property_exists($data, 'id_ua')){
					$gaveta->setIdUnidadeArmazenagem($data->id_ua);
				}				
			}

			if(property_exists($data, 'id_status_gaveta')){
				$gaveta->setIdStatusGaveta($data->id_status_gaveta);
			}
			if(property_exists($data, 'data_vencimento_gaveta')){
				$gaveta->setDataVencimento($data->data_vencimento_gaveta);
			}
			if(property_exists($data, 'descricao')){
				$gaveta->setDescricao($data->descricao);
			}
			if(property_exists($data, 'ativo')){
				$gaveta->setAtivo($data->ativo);
			}

			$gaveta->store();

			$id = $gaveta->getId();

			if(property_exists($data, 'id_falecido')){
				if($data->id_falecido != "" || $data->id_falecido != null){
					$falecido = new Falecido($data->id_falecido);
					$falecido->setIdGaveta($id);
					$falecido->store();
				}
			}

			$arrMensagem = array('error' => 0, 'gaveta_id' => $id, 'mensagem' => 'Gavetas salvas com sucesso!');
			fJSON::output($arrMensagem);
			die();
		}
		catch(fValidationException $e){
			$arrMensagem = array('error' => -1, 'mensagem' => $e->getMessage());
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Gavetas de uma determinada Unidade de Armazenagem
	Método: GET
	URL: http://localhost/sig/api/index.php/unidadearmazenagemgavetas/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getUnidadeArmazenagemGavetas($id,$full=""){

		$aSearch = array();
		if ($id != "") {
			$aSearch['id_unidade_armazenagem='] = $id;
		}

		$gavetas = fRecordSet::build('Gaveta', $aSearch);

		if ($full == false) {

			$aGaveta = array();

			foreach ($gavetas->getRecords() as $key => $value) {

				$status_gaveta = new StatusGaveta($value->getIdStatusGaveta());

				if($value->getAtivo() == 1){
					$situacao = "Ativo";
				}
				else{
					$situacao = "Inativo";
				}

				$falecido = fRecordSet::build('Falecido', array('id_gaveta=' => $value->getId()));

				foreach ($falecido as $key2 => $value2) {
					$id_falecido = $value2->getId();
				}

				switch ($value->getIdStatusGaveta()) {
					case '1':
					$statusgaveta = "Livre";
					break;

					case '2':
					$statusgaveta = "Ocupado";
					break;

					case '3':
					$statusgaveta = "Bloqueado";
					break;
				}

				$aGaveta[] = array(
					'id' => $value->getId(),
					'id_unidade_armazenagem' => $value->getIdUnidadeArmazenagem(),
					'id_status_gaveta' => $value->getIdStatusGaveta(),
					'id_falecido' => $id_falecido,          
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'statusgaveta' => $statusgaveta,
					'situacao' => $situacao,
					);
			}

			if (count($aGaveta) == 0) {
				$aGaveta[] = array(
					'mensagem' => "Nenhuma gaveta encontrada."
					);
			}
			fJSON::output($aGaveta);
		}
		else {
			return $gavetas[0];
		}      
	}

	 /*
	Módulo: Cemitério
	Descrição: Obter Listagem para exibição no Dashboard 
	Método: GET
	URL: http://localhost/sig/api/index.php/consultaunidadearmazenagem
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/10/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getConsultaUnidadeArmazenagem($id_quadra = 0, $id_falecido = 0){

		$id_gaveta = 0;

		if($id_quadra == 0 && $id_falecido > 0){
			$query = "SELECT
						unidade_armazenagem.numero_tumulo,
						quadra.id AS id_quadra,
						lote.id AS id_lote,
						unidade_armazenagem.id AS id_ua,
						gaveta.id AS gaveta_id,
						falecido.id AS falecido_id
						FROM
						quadra
						INNER JOIN lote ON lote.id_quadra = quadra.id
						INNER JOIN unidade_armazenagem ON unidade_armazenagem.id_lote = lote.id
						INNER JOIN gaveta ON gaveta.id_unidade_armazenagem = unidade_armazenagem.id
						INNER JOIN falecido ON falecido.id_gaveta = gaveta.id
						WHERE
						falecido.id = ".$id_falecido;

			$rs = $this->_getDb()->query($query);
			foreach ($rs as $key => $value) {
				$id_quadra = $value['id_quadra'];
				$id_gaveta = $value['gaveta_id'];
			}
		}

		try{		

			$sql_A = "SELECT ";

			$sql_quadra = "q.id q_id, q.id_entidade q_id_entidade, q.descricao q_descricao, q.setor q_setor, q.ativo q_ativo ";		

			$sql_lote = "l.id l_id, l.descricao l_descricao, l.preco l_preco, l.ativo l_ativo, l.id_quadra l_id_quadra ";
						 
			$sql_ua = "pua.descricao pua_descricao,
					   tua.descricao tua_descricao,
					   ua.id ua_id, ua.id_plano_unidade_armazenagem ua_id_pua, ua.id_tipo_unidade_armazenagem ua_id_tua, ua.id_tipo_concessao ua_id_tipo_concessao, ua.id_periodicidade_cobranca ua_id_periodicidade_cobranca, ua.descricao ua_descricao, ua.numero_tumulo ua_numero_tumulo, ua.ativo ua_ativo, ua.id_lote ua_id_lote, DATE_FORMAT(ua.data_fim_armazenagem,'%d/%m/%Y') ua_data_fim_armazenagem ";

			$sql_gaveta = "g.id g_id, g.id_unidade_armazenagem g_id_unidade_armazenagem, g.id_status_gaveta g_id_status_gaveta, g.descricao g_descricao, g.ativo g_ativo, g.id_unidade_armazenagem g_id_ua,
						   sg.descricao sg_status_descricao,
						   f.nome f_falecido ";

			$sql_B = "FROM quadra q
					  LEFT JOIN lote l ON q.id=l.id_quadra 
					  LEFT JOIN unidade_armazenagem ua ON ua.id_lote=l.id
					  LEFT JOIN plano_unidade_armazenagem pua ON pua.id = ua.id_plano_unidade_armazenagem
					  LEFT JOIN tipo_unidade_armazenagem tua ON tua.id = ua.id_tipo_unidade_armazenagem
					  LEFT JOIN gaveta g ON g.id_unidade_armazenagem = ua.id
					  LEFT JOIN status_gaveta sg ON sg.id = g.id_status_gaveta
					  LEFT JOIN falecido f ON f.id_gaveta = g.id
					  WHERE q.ativo = 1 ".(($id_quadra>0) ? "AND q.id = ".$id_quadra : '');
			
			$retorno = array();
			
			$rs = $this->_getDb()->query($sql_A.$sql_quadra.$sql_B." GROUP BY q.id");

			foreach ($rs as $k => $v){
				$quadra[] = $v;
			}

			$rs = $this->_getDb()->close();	

			$rs = $this->_getDb()->query($sql_A.$sql_lote.$sql_B." GROUP BY l.id");

			foreach ($rs as $k => $v){
				$lote[] = $v;
			}

			$rs = $this->_getDb()->close();	

			$rs = $this->_getDb()->query($sql_A.$sql_ua.$sql_B." GROUP BY ua.id");

			foreach ($rs as $k => $v){
				$ua[] = $v;
			}

			$rs = $this->_getDb()->close();	

			$rs = $this->_getDb()->query($sql_A.$sql_gaveta.$sql_B." GROUP BY g.id");

			foreach ($rs as $k => $v){
				if($id_gaveta == $v['g_id']){
					$gaveta[$k] = $v;
					$gaveta[$k]['busca_id'] = $v['g_id'];
				}
				else{
					$gaveta[$k] = $v;
					$gaveta[$k]['busca_id'] = 0;
				}
				
			}

			$rs = $this->_getDb()->close();	

			$retorno[] = array('quadra' => $quadra,'lote' => $lote,'ua' => $ua,'gaveta' => $gaveta); 

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro existente");
				fJSON::output($retorno);
				die();
			}					

			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);			
		}
		catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro: ".$e);
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Causa Mortis
	Método: GET
	URL: http://localhost/sig/api/index.php/causamortis/<causamortis>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 10/11/2014
	*/

	public function getCausaMortis($id_causamortis = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_causamortis != "") {
			$aSearch['id='] = $id_causamortis;
		}                 

		$causamortis = fRecordSet::build('CausaMortis', $aSearch);

		if ($full == false) {

			$aCausaMortis = array();

			foreach ($causamortis->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aCausaMortis[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aCausaMortis) == 0) {
				$aCausaMortis[] = array('error'    => -1, 'mensagem' => "Nenhuma causa mortis encontrada.");
				fJSON::output($aCausaMortis);
				die();
			}

			$aCausaMortis = array(
				'causamortis' => $aCausaMortis
				);

			fJSON::output($aCausaMortis);
		}
		else {
			return $causamortis[0];
		}
	}  

	/*
	Módulo: Cemitério
	Descrição: Cadastrar uma nova causa mortis
	Método: GET
	URL: http://localhost/sig/api/index.php/causamortis/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/11/2014
	*/

	public function postCausaMortis() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$causamortis = new CausaMortis($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Causa Mortis alterada com sucesso!";
			$alteracao=1;
		}else{
			$causamortis = new CausaMortis();
			$mensagem = "Causa Mortis incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Causa Mortis
			if (property_exists($data, 'descricao')){
				$causamortisAnt = '';
				if($alteracao==1){
					$causamortisAnt = $causamortis->getDescricao();
				}
				$this->setAuditoria('Causa Mortis', 'Descricao', $causamortisAnt, $data->descricao);
				$causamortis->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$causamortis->setAtivo($data->ativo);
			}

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countCausa = fRecordset::build('CausaMortis', $aSearch);
				if($countCausa->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Causa Mortis já foi adicionada");
					fJSON::output($arrMensagem);
					die();
				}else{
					$causamortis->store();
				}        
			}
			else{
				$causamortis->store();
			}



		//******** Fim - Grava informações na Tabela de causa_mortis

			$id_causamortis = $causamortis->getId();

			$arrMensagem = array('error' => 0, 'id_causamortis' => $id_causamortis, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}    

	/*
	Módulo: ???
	Descrição: O que isso faz?
	Método: ???
	URL: ???
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ???
	Autor: ???
	Versão: ??
	Data de Alteração: ???
	*/

	public function delSocio() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_pessoa_socio='] = $data->id;

		$socio = fRecordSet::build('PessoaSocio', $aSearch);

		$mensagem = "Sócio excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$socio[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}



	public function delDuracaoFase() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data;

		$duracaofase = fRecordSet::build('DuracaoFases', $aSearch);

		$mensagem = "Fase excluída com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$duracaofase[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: ???
	Descrição: O que isso faz?
	Método: ???
	URL: ???
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ???
	Autor: ???
	Versão: ??
	Data de Alteração: ???
	*/

	public function delBeneficiario() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_pessoa='] = $data->id_pessoa_beneficiario;

	//Deleta Todos os Documentos do Beneficiario na tabela de Documento
		$resultDocumento = fRecordSet::build('Documento', $aSearch);
		foreach ($resultDocumento->getRecords() as $key => $value) {
			$documento = new Documento($value->getId());
			$documento->delete();
		}    

	//Deleta Todos os Telefones do Beneficiario na tabela de Documento
		$resultTelefone = fRecordSet::build('Telefone', $aSearch);
		foreach ($resultTelefone->getRecords() as $key => $value) {
			$telefone = new Telefone($value->getId());
			$telefone->delete();
		}  

		$beneficiario = new Beneficiario($data->id);    
		$beneficiario->delete();

	//Deleta o Beneficiario da Tabela de Pessoa
		$pessoa = new Pessoa($data->id_pessoa_beneficiario);    
		$pessoa->delete();


		$mensagem = "Dependente excluído com sucesso!";        

		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();        

	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Sócios
	Método: GET
	URL: http://localhost/sig/api/index.php/socio/<socio>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 10/11/2014
	*/

	public function getSocioPessoa($id_pessoa = "", $full = false) {

		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}

		$pessoaSocio = fRecordSet::build('PessoaSocio', $aSearch);
		$aPessoaSocio = array();

		if ($pessoaSocio->count() == 0) {
			$aPessoaSocio[] = array(
				'error' => -1,
				'mensagem' => "Nenhum sócio encontrado."
				);
		}else{
			foreach ($pessoaSocio->getRecords() as $key => $value) {

		$resultPessoaSocio = $this->getPessoa($value->getIdPessoaSocio(), true); //Obtem Pessoa Sócio
		$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getIdPessoaSocio(), "", true, 2); //Obtem CPF do Sócio

		if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
			$cpf = "";
		}else{
			$cpf = $resultDocumentoPessoaCPF[0]["numero"];
		}

		$dataAssociacao = '';
		if ($resultPessoaSocio['data_associacao'] != null) {
			$dataAssociacao = date("d/m/Y", strtotime($resultPessoaSocio['data_associacao']));
		}                

		$aPessoaSocio[] = array(
			'id' => $value->getId(),
			'id_pessoa' => $value->getIdPessoa(),
			'id_pessoa_socio' => $value->getIdPessoaSocio(),
			'nome' => $resultPessoaSocio['nome'],
			'cpf' => $cpf,
			'data_associacao' => $dataAssociacao,
			);
	}
}

if ($full == false) {
	fJSON::output($aPessoaSocio);
}else {
	return $aPessoaSocio;
}
} 

/* Metodo para formatação de datas no padrão Y-m-d */
public static function formatDateDatebase($data){
	$data = implode("-", array_reverse(explode("/",$data)));
	return $data;
}
/* Metodo para formatação de datas no padrão d/m/Y */
public static function formataData($data){
	$data = new DateTime($data);
	$data = $data->format('d/m/Y');
	return $data;
}





	/*
	Módulo: Cemitério
	Descrição: Cadastrar uma Nova Funerária
	Método: POST
	URL: http://localhost/sig/api/index.php/funeraria/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/11/2014
	*/

	public function postFuneraria() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$funeraria = new Funeraria($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Funerária alterada com sucesso!";
			$alteracao=1;
		}else{
			$funeraria = new Funeraria();
			$mensagem = "Funerária incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de funeraria
			if (property_exists($data, 'idPais')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getIdPais();
				}
				$this->setAuditoria('Funeraria', 'Id Pais', $funerariaAnt, $data->idPais);
				$funeraria->setIdPais($data->idPais);
			}
			if (property_exists($data, 'cnpj')) {
				$cnpj = str_replace(".", "", $data->cnpj);
				$cnpj = str_replace("-", "", $cnpj);
				$cnpj = str_replace("/", "", $cnpj);
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getCnpj();
				}
				$this->setAuditoria('Funeraria', 'Cnpj', $funerariaAnt, $cnpj);
				$funeraria->setCnpj($cnpj);
			}
			if (property_exists($data, 'nome')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getNome();
				}
				$this->setAuditoria('Funeraria', 'Nome', $funerariaAnt, $data->nome);
				$funeraria->setNome($data->nome);
			}
			if (property_exists($data, 'logradouro')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getLogradouro();
				}
				$this->setAuditoria('Funeraria', 'logradouro', $funerariaAnt, $data->logradouro);
				$funeraria->setLogradouro($data->logradouro);
			}
			if (property_exists($data, 'numero')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getNumero();
				}
				$this->setAuditoria('Funeraria', 'Numero', $funerariaAnt, $data->numero);
				$funeraria->setNumero($data->numero);
			}
			if (property_exists($data, 'bairro')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getBairro();
				}
				$this->setAuditoria('Funeraria', 'Bairro', $funerariaAnt, $data->bairro);
				$funeraria->setBairro($data->bairro);
			}
			if (property_exists($data, 'complemento')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getComplemento();
				}
				$this->setAuditoria('Funeraria', 'Complemeto', $funerariaAnt, $data->complemento);
				$funeraria->setComplemento($data->complemento);
			}
			if (property_exists($data, 'cidade')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getCidade();
				}
				$this->setAuditoria('Funeraria', 'Cidade', $funerariaAnt, $data->cidade);
				$funeraria->setCidade($data->cidade);
			}
			if (property_exists($data, 'estado')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getEstado();
				}
				$this->setAuditoria('Funeraria', 'Estado', $funerariaAnt, $data->estado);
				$funeraria->setEstado($data->estado);
			}
			if (property_exists($data, 'cep')){
				$funerariaAnt = '';
				if($alteracao==1){
					$funerariaAnt = $funeraria->getCodigoPostal();
				}
				$this->setAuditoria('Funeraria', 'Cep', $funerariaAnt, $data->cep);
				$funeraria->setCodigoPostal($data->cep);
			}
			$funeraria->setAtivo(1);
			$funeraria->setDataCadastro(date('Y-m-d H:i:s'));

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['cnpj='] = $data->cnpj;
				$countFuneraria = fRecordset::build('Funeraria', $aSearch);
				if($countFuneraria->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A funerária já está cadastrada");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$funeraria->store();
				}
			}
			else{
				$funeraria->store();
			}

		//******** Fim - Grava informações na Tabela de funeraria
			$id_funeraria = $funeraria->getId();

			$arrMensagem = array('error' => 0, 'id_funeraria' => $id_funeraria, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Funerárias
	Método: GET
	URL: http://localhost/sig/api/index.php/funeraria/<funeraria>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/11/2014
	*/

	public function getFuneraria($id_funeraria = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_funeraria != "") {
			$aSearch['id='] = $id_funeraria;
		}

		$funeraria = fRecordSet::build('Funeraria', $aSearch);

		if ($full == false) {

			$aFuneraria = array();

			foreach ($funeraria->getRecords() as $key => $value) {

				$aFuneraria[] = array(
					'id' => $value->getId(),
					'id_pais' => $value->getIdPais(),
					'cnpj' => $value->getCnpj(),
					'nome' => $value->getNome(),
					'logradouro' => $value->getLogradouro(),
					'numero' => $value->getNumero(),
					'bairro' => $value->getBairro(),
					'complemento' => $value->getComplemento(),
					'cidade' => $value->getCidade(),
					'estado' => $value->getEstado(),
					'cep' => $value->getCodigoPostal(),
					'ativo' => $value->getAtivo()
					);
			}

			if (count($aFuneraria) == 0) {
				$aFuneraria[] = array('error' => -1, 'mensagem' => "Nenhuma funerária encontrada."
					);
				fJSON::output($aFuneraria);
				die();
			}

			$aFuneraria = array('error' => 0, 'funeraria' => $aFuneraria);

			fJSON::output($aFuneraria);
		}
		else {
			return $funeraria[0];
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Verificar se o CNPJ já existe
	Método: GET
	URL: http://localhost/sig/api/index.php/cnpjfuneraria/<número do cnpj>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/11/2014
	*/

	public function getCnpjFuneraria($cnpj) {
		$this->acessoApi();

		$cnpj = str_replace(".", "", $cnpj);
		$cnpj = str_replace("-", "", $cnpj);
		$cnpj = str_replace("/", "", $cnpj);

		$aSearch['cnpj='] = $cnpj;

		$funeraria = fRecordSet::build('Funeraria', $aSearch);

		if (count($funeraria) > 0) {
			$aCnpj[] = array(
				'error' => -1,
				'id_funeraria' => $funeraria[0]->getId(),
				'mensagem' => "Já existe uma funeraria com o CNPJ:" . $cnpj
				);

			fJSON::output($aCnpj);
			die;
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Lotes a partir de uma quadra
	Método: GET
	URL: http://localhost/sig/api/index.php/quadralote/<quadra>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/11/2014
	*/

	public function getQuadraLote($id_quadra='', $full = false){

		if($id_quadra == ""){
			$sqlq = "SELECT * FROM lote";
		}
		else{
			$sqlq = "SELECT * FROM lote WHERE id_quadra = " . $id_quadra;
		}

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){
			$retorno[] = $value;
		}	
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error'=>0, 'lote'=>$retorno );
		if($full==false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de UA a partir de um lote
	Método: GET
	URL: http://localhost/sig/api/index.php/jazigo/<id_lote>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/11/2014
	*/

	public function getJazigo($id_lote = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_lote != "") {
			$aSearch['id_lote='] = $id_lote;
		}                 

		$jazigo = fRecordSet::build('UnidadeArmazenagem', $aSearch);

		if ($full == false) {

			$aUA = array();

			foreach ($jazigo->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aUA[] = array(
					'id' => $value->getId(),
					'id_lote' => $value->getIdLote(),
					'descricao' => $value->getDescricao(),
					'status' => $status
					);
			}

			if (count($aUA) == 0) {
				$aUA[] = array('error' => -1, 'mensagem' => "Nenhum jazigo encontrado.");
			}

			$aUA = array('error' => 0, 'jazigo' => $aUA);

			fJSON::output($aUA);
		}
		else {
			return $jazigo[0];
		}
	}  

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Gaveta a partir de um jazigo
	Método: GET
	URL: http://localhost/sig/api/index.php/gaveta/<id_jazigo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/11/2014
	*/

	public function getGaveta($livre = 0, $id_jazigo='', $full = false){

		if($livre == 1){
			$sqlq = "SELECT * FROM gaveta WHERE id_unidade_armazenagem = ". $id_jazigo;
		}
		if($livre == 0){
			$sqlq = "SELECT * FROM gaveta WHERE id NOT IN (SELECT id_gaveta FROM falecido)";
		}

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){
			$retorno[] = $value;
		}	
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error'=>0, 'gaveta'=>$retorno );
		if($full==false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		}
	}


	/*
	Módulo: Cemitério
	Descrição: Deleta as Gavetas
	Método: GET
	URL: http://localhost/sig/api/index.php/delgavetas/<id_gaveta>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/11/2014
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postDelGavetas($id){

		$falecido = fRecordSet::build('Falecido', array('id_gaveta=' => $id));
		if(count($falecido) > 0){
			$arrMensagem = array('error' => -1, 'mensagem' => 'A gaveta não pode ser excluída pois está ocupada.');
			fJSON::output($arrMensagem);
			die();          
		}
		else{
			try{
				$gaveta = new Gaveta($id);
				$gaveta->delete();
				$arrMensagem = array('error' => 0, 'mensagem' => 'Gaveta Excluída com sucesso.');
				fJSON::output($arrMensagem);
			}
			catch(fValidationException $e){
				$arrMensagem = array('error' => -1, 'mensagem' => 'Ocorreu um erro ao excluir a gaveta.');
				fJSON::output($arrMensagem);
			}
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Cadastrar um Novo Falecido
	Método: POST
	URL: http://localhost/sig/api/index.php/falecido/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 14/11/2014
	*/

	public function postFalecido() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$falecido = new Falecido($data->id);
			$aSearch  = array();
			$aSearch['id='] = $data->id;
			$alteracao = 1;
			$falecido_movimentacao = 1;

		}
		else {
			$falecido = new Falecido();
			$alteracao = 0;
			$falecido_movimentacao = 0;
		}

		try {
		//******** Grava informações na Tabela de Falecido
			if (property_exists($data, 'nome')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNome();
				}
				$this->setAuditoria('Falecido', 'Nome', $falecidoAnt, $data->nome);
				$falecido->setNome($data->nome);
			}
			if (property_exists($data, 'nacionalidade')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNacionalidade();
				}
				$this->setAuditoria('Falecido', 'Nacionalidade', $falecidoAnt, $data->nacionalidade);
				$falecido->setNacionalidade($data->nacionalidade);
			}
			if (property_exists($data, 'id_estado_civil')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIdEstadoCivil();
				}
				$this->setAuditoria('Falecido', 'Id Estado Civil', $falecidoAnt, $data->id_estado_civil);
				$falecido->setIdEstadoCivil($data->id_estado_civil);
			}
			if (property_exists($data, 'cor')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getCor();
				}
				$this->setAuditoria('Falecido', 'Cor', $falecidoAnt, $data->cor);
				$falecido->setCor($data->cor);
			}
			if (property_exists($data, 'data_nascimento')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getDataNascimento();
				}
				$this->setAuditoria('Falecido', 'Data Nascimento', $falecidoAnt, $data->data_nascimento);
				$falecido->setDataNascimento(implode("-", array_reverse(explode("/", $data->data_nascimento))));       
			}
			if (property_exists($data, 'sexo')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getSexo();
				}
				$this->setAuditoria('Falecido', 'Sexo', $falecidoAnt, $data->sexo);
				$falecido->setSexo($data->sexo);
			}
			if (property_exists($data, 'nome_pai')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNomePai();
				}
				$this->setAuditoria('Falecido', 'Nome pai', $falecidoAnt, $data->nome_pai);
				$falecido->setNomePai($data->nome_pai);
			}
			if (property_exists($data, 'nome_mae')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNomeMae();
				}
				$this->setAuditoria('Falecido', 'Nome Mae', $falecidoAnt, $data->nome_mae);
				$falecido->setNomeMae($data->nome_mae);
			}
			if (property_exists($data, 'profissao')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getProfissao();
				}
				$this->setAuditoria('Falecido', 'Profissao', $falecidoAnt, $data->profissao);
				$falecido->setProfissao($data->profissao);        
			}
			if (property_exists($data, 'observacao')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getObservacao();
				}
				$movimentacao_observacao = $data->observacao;
				$this->setAuditoria('Falecido', 'Observacao', $falecidoAnt, $data->observacao);
				$falecido->setObservacao($data->observacao);
			}        
			/*Endereço*/
			if (property_exists($data, 'logradouro')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getLogradouro();
				}
				$this->setAuditoria('Falecido', 'Logradouro', $falecidoAnt, $data->logradouro);
				$falecido->setLogradouro($data->logradouro);
			}
			if (property_exists($data, 'numero')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNumero();
				}
				$this->setAuditoria('Falecido', 'Numero', $falecidoAnt, $data->numero);
				$falecido->setNumero($data->numero);
			}
			if (property_exists($data, 'bairro')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getBairro();
				}
				$this->setAuditoria('Falecido', 'Bairro', $falecidoAnt, $data->bairro);
				$falecido->setBairro($data->bairro);
			}
			if (property_exists($data, 'complemento')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getComplemento();
				}
				$this->setAuditoria('Falecido', 'Complemento', $falecidoAnt, $data->complemento);
				$falecido->setComplemento($data->complemento);
			}
			if (property_exists($data, 'cidade')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getCidade();
				}
				$this->setAuditoria('Falecido', 'Cidade', $falecidoAnt, $data->cidade);
				$falecido->setCidade($data->cidade);
			}
			if (property_exists($data, 'estado')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getEstado();
				}
				$this->setAuditoria('Falecido', 'Estado', $falecidoAnt, $data->estado);
				$falecido->setEstado($data->estado);
			}
			if (property_exists($data, 'cep')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getCodigoPostal();
				}
				$this->setAuditoria('Falecido', 'Cep', $falecidoAnt, $data->cep);
				$falecido->setCodigoPostal($data->cep);   
			}
			if (property_exists($data, 'id_pais')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIdPais();
				}
				$this->setAuditoria('Falecido', 'ID Pais', $falecidoAnt, $data->id_pais);
				$falecido->setIdPais($data->id_pais);         
			}
			/*Falecimento*/
			if (property_exists($data, 'data_obito')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getDataObito();
				}
				$this->setAuditoria('Falecido', 'Data Obito', $falecidoAnt, $data->data_obito);
				$falecido->setDataObito(implode("-", array_reverse(explode("/", $data->data_obito))));
			}
			if (property_exists($data, 'hora_obito')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getHoraObito();
				}
				$this->setAuditoria('Falecido', 'Hora Obito', $falecidoAnt, $data->hora_obito);
				$falecido->setHoraObito($data->hora_obito);     
			}
			if (property_exists($data, 'local_falecimento')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getLocalFalecimento();
				}
				$this->setAuditoria('Falecido', 'Local Falecimento', $falecidoAnt, $data->local_falecimento);
				$falecido->setLocalFalecimento($data->local_falecimento);  
			}

			/*
			if (property_exists($data, 'id_causa_mortis')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIdCausaMortis();
				}
				$this->setAuditoria('Falecido', 'Id Causa Mortis', $falecidoAnt, $data->id_causa_mortis);
				$falecido->setIdCausaMortis($data->id_causa_mortis);  
			}
			*/
			if (property_exists($data, 'numero_certidao')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNumeroCertidao();
				}
				$this->setAuditoria('Falecido', 'Numero Certidao', $falecidoAnt, $data->numero_certidao);
				$falecido->setNumeroCertidao($data->numero_certidao);  
			}
			if (property_exists($data, 'cartorio')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getCartorio();
				}
				$this->setAuditoria('Falecido', 'Cartorio', $falecidoAnt, $data->cartorio);
				$falecido->setCartorio($data->cartorio);  
			}
			if (property_exists($data, 'livro_cartorio')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getLivroCartorio();
				}
				$this->setAuditoria('Falecido', 'Livro Cartorio', $falecidoAnt, $data->livro_cartorio);
				$falecido->setLivroCartorio($data->livro_cartorio);  
			}
			if (property_exists($data, 'pagina_cartorio')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getPaginaCartorio();
				}
				$this->setAuditoria('Falecido', 'Pagina Cartorio', $falecidoAnt, $data->pagina_cartorio);
				$falecido->setPaginaCartorio($data->pagina_cartorio);  
			}
			if (property_exists($data, 'nome_medico')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNomeMedico();
				}
				$this->setAuditoria('Falecido', 'Nome medico', $falecidoAnt, $data->nome_medico);
				$falecido->setNomeMedico($data->nome_medico);  
			}
			if (property_exists($data, 'crm_medico')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getCrmMedico();
				}
				$this->setAuditoria('Falecido', 'CRM Medico', $falecidoAnt, $data->crm_medico);
				$falecido->setCrmMedico($data->crm_medico);  
			}
			if (property_exists($data, 'id_funeraria')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIdFuneraria();
				}
				$this->setAuditoria('Falecido', 'Id Funeraria', $falecidoAnt, $data->id_funeraria);
				$falecido->setIdFuneraria($data->id_funeraria);                                                                                               
			}
			/*Sepultamento*/
			if (property_exists($data, 'data_sepultamento')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getDataSepultamento();
				}
				$this->setAuditoria('Falecido', 'Data Sepultamento', $falecidoAnt, $data->data_sepultamento);
				$falecido->setDataSepultamento(implode("-", array_reverse(explode("/", $data->data_sepultamento)))); 
			}
			if (property_exists($data, 'hora_sepultamento')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getHoraSepultamento();
				}
				$this->setAuditoria('Falecido', 'Hora Sepultamento', $falecidoAnt, $data->hora_sepultamento);
				$falecido->setHoraSepultamento($data->hora_sepultamento); 
			}
			if (property_exists($data, 'id_gaveta')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIdGaveta();
				}
				$this->setAuditoria('Falecido', 'Id Gaveta', $falecidoAnt, $data->id_gaveta);
				$falecido->setIdGaveta($data->id_gaveta); 
			}
			
			if ((property_exists($data, 'id_gaveta')) && (property_exists($data, 'data_vencimento_gaveta'))){	

				$varIdGaveta = $data->id_gaveta;
				
				$gaveta = new Gaveta($varIdGaveta);
				$gaveta->setDataVencimento($data->data_vencimento_gaveta);
				$gaveta->store();					
				
			}
			if (property_exists($data, 'numero_livro')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNumeroLivro();
				}
				$this->setAuditoria('Falecido', 'Numero Livro', $falecidoAnt, $data->numero_livro);
				$falecido->setNumeroLivro($data->numero_livro); 
			}
			if (property_exists($data, 'numero_pagina')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getNumeroPagina();
				}
				$this->setAuditoria('Falecido', 'Numero Pagina', $falecidoAnt, $data->numero_pagina);
				$falecido->setNumeroPagina($data->numero_pagina); 
			}
			if (property_exists($data, 'indigente')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getIndigente();
				}
				$this->setAuditoria('Falecido', 'Indigente', $falecidoAnt, $data->indigente);
				$falecido->setIndigente($data->indigente); 
			}
			if (property_exists($data, 'data_exumacao')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getDataExumacao();
				}
				$this->setAuditoria('Falecido', 'Data Exumação', $falecidoAnt, $data->data_exumacao);
				$falecido->setDataExumacao(implode("-", array_reverse(explode("/", $data->data_exumacao)))); 
			}
			if (property_exists($data, 'hora_exumacao')){
				$falecidoAnt = '';
				if($alteracao==1){
					$falecidoAnt = $falecido->getHoraExumacao();
				}
				$this->setAuditoria('Falecido', 'Hora Exumação', $falecidoAnt, $data->hora_exumacao);
				$falecido->setHoraExumacao($data->hora_exumacao);                                                                     
			}

			
			if (property_exists($data, 'id_tipo_documento')){
				$falecido->setIdTipoDocumento($data->id_tipo_documento);
				$falecido->setNumeroDocumento($data->numero_documento);
			}

			if (property_exists($data, 'cpf')){
				$falecido->setCpf($data->cpf);
			}

			$falecido->setDataCadastro(date('Y-m-d H:i:s'));

			$falecido->store();

			$id_falecido = $falecido->getId(); //Recupera o Id da Falecido Inserida
		/*Fim - Grava informações na Tabela de Falecido*/

		// =================================================
		// FRH - Gravar na nova tabela FALECIDO_CAUSA_MORTIS
		// =================================================

		$aSearch = array();
		$aSearch['id_falecido='] = $id_falecido;

		$rs = fRecordSet::build('FalecidoCausaMortis', $aSearch);
		foreach ($rs->getRecords() as $key => $value) {
			$tmp = new FalecidoCausaMortis($value->getId());
			$tmp->delete();
		}

		if (property_exists($data, 'causa_mortis')){
			foreach ($data->causa_mortis as $key => $value) {

				$falecidoCausaMortis = new FalecidoCausaMortis();				
				$falecidoCausaMortis->setIdFalecido($id_falecido);
				$falecidoCausaMortis->setIdCausaMortis($value->id);
				$falecidoCausaMortis->store(); 				
			}
		} 				

		if($falecido_movimentacao == 0){
			$ua_movimentacao = new UnidadeArmazenagemMovimentacao();
			$ua_movimentacao->setIdFalecido($id_falecido);
			$ua_movimentacao->setIdGaveta($falecido->getIdGaveta());
			$ua_movimentacao->setTipoEntrada(1);
			$date = date('Y-m-d');
			$ua_movimentacao->setDataEntrada($date);

			$ua_movimentacao->store();

		}
		else{
			$falecido = fRecordset::build('UnidadeArmazenagemMovimentacao', array('id_falecido=' => $id_falecido));
			foreach ($falecido as $key => $value) {
				$id_gaveta_falecido = $value->getIdGaveta();
			}
			$ua_movimentacao1 = new UnidadeArmazenagemMovimentacao();
			$ua_movimentacao1->setIdFalecido($id_falecido);
			$ua_movimentacao1->setIdGaveta($id_gaveta_falecido);
			$ua_movimentacao1->setTipoEntrada(0);
			$date = date('Y-m-d');
			$ua_movimentacao1->setDataSaida($date);
			if(property_exists($data, 'observacao')){
				$ua_movimentacao1->setObservacao($data->observacao);          
			} 

			$ua_movimentacao1->store();

			$ua_movimentacao2 = new UnidadeArmazenagemMovimentacao();

			$ua_movimentacao2->setIdFalecido($id_falecido);
			$ua_movimentacao2->setIdGaveta($data->id_gaveta);
			$ua_movimentacao2->setTipoEntrada(1);
			$date = date('Y-m-d');
			$ua_movimentacao2->setDataEntrada($date);
			if(property_exists($data, 'observacao')){
				$ua_movimentacao2->setObservacao($data->observacao);          
			} 

			$ua_movimentacao2->store();
		}
		
		$arrMensagem = array('error' => 0, 'id_falecido' => $id_falecido, 'mensagem' => "Falecido incluído com sucesso!");
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$e->printMessage();
		$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
		fJSON::output($arrMensagem);
		die();
	}
} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Campanhas
	Método: GET
	URL: http://localhost/sig/api/index.php/campanha/<campanha>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 18/11/2014
	*/

	public function getCampanha($id_campanha = "",$full = false,$flagPeriodo=0) {
		$this->acessoApi();

		$aSearch = array();

		$request = $this->_slimApp->request()->params();

		/*Deve trazer apenas os ativos e campanhas em vigência se $flagPeriodo=true*/
		if (array_key_exists('flagPeriodo', $request) && $request['flagPeriodo'] ==1) {
			$aSearch['ativo='] = 1;
			$aSearch['data_inicio<='] =  date("Y-M-d");
			$aSearch['data_fim>='] =  date("Y-M-d");
		}

		if ($id_campanha != "") {
			$aSearch['id='] = $id_campanha;
		}                 

		$campanha = fRecordSet::build('Campanha', $aSearch);

		if ($full == false) {

			$aCampanha = array();

			foreach ($campanha->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$dataInicio = '';
				$dataInicioFormatada = '';
				$dataFimFormatada = '';

				if ($value->getDataInicio() != null) {
					$dataInicio = $value->getDataInicio()->format('Y/m/d');
					$dataInicioFormatada = $value->getDataInicio()->format('d/m/Y');
				}   

				if ($value->getDataFim() != null) {
					$dataFim = $value->getDataFim()->format('Y/m/d');
					$dataFimFormatada = $value->getDataFim()->format('d/m/Y');
				}                        

				$aCampanha[] = array(
					'id' => $value->getId(),
					'nome' => $value->getNome(),              
					'descricao' => $value->getDescricao(),
					'valor_pontos' => $value->getValorPontos(),
					'data_inicio' => $dataInicio,
					'data_inicio_formatada' => $dataInicioFormatada,
					'data_fim' => $dataFim,
					'data_fim_formatada' => $dataFimFormatada, 
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}



			if (count($aCampanha) == 0) {
				$aCampanha[] = array('error' => -1, 'mensagem' => "Nenhuma campanha encontrada.");
				fJSON::output($aCampanha);
				die();
			}

			$aCampanha = array('error' => 0, 'campanha' => $aCampanha);

			fJSON::output($aCampanha);
		}
		else {
			return $campanha[0];
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova campanha
	Método: GET
	URL: http://localhost/sig/api/index.php/campanha/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 18/11/2014
	*/

	public function postCampanha() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$campanha = new Campanha($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Campanha alterada com sucesso!";
			$alteracao=1;
		}
		else {
			$campanha = new Campanha();
			$mensagem = "Campanha incluída com sucesso!";
			$alteracao=0;
		}

		try {
			/*Grava informações na Tabela de Campanha*/
			if (property_exists($data, 'nome')){
				$campanhaAnt = '';
				if($alteracao==1){
					$campanhaAnt = $campanha->getNome();
				}
				$this->setAuditoria('Campanha', 'Nome', $campanhaAnt, $data->nome);
				$campanha->setNome($data->nome);
			}
			if (property_exists($data, 'descricao')){
				$campanhaAnt = '';
				if($alteracao==1){
					$campanhaAnt = $campanha->getDescricao();
				}
				$this->setAuditoria('Campanha', 'Descricao', $campanhaAnt, $data->descricao);
				$campanha->setDescricao($data->descricao);
			}
			if (property_exists($data, 'valor_pontos')){
				$campanhaAnt = '';
				if($alteracao==1){
					$campanhaAnt = $campanha->getValorPontos();
				}
				$this->setAuditoria('Campanha', 'Valor Pontos', $campanhaAnt, $data->valor_pontos);
				$campanha->setValorPontos($data->valor_pontos); 
			}      
			if (property_exists($data, 'data_inicio')){
				$campanhaAnt = '';
				if($alteracao==1){
					$campanhaAnt = $campanha->getDataInicio();
				}
				$this->setAuditoria('Campanha', 'Data Inicio', $campanhaAnt, $data->data_inicio);
				$campanha->setDataInicio(implode("-", array_reverse(explode("/", $data->data_inicio)))); 
			}
			if (property_exists($data, 'data_fim')){
				$campanhaAnt = '';
				if($alteracao==1){
					$campanhaAnt = $campanha->getDataFim();
				}
				$this->setAuditoria('Campanha', 'Data Fim', $campanhaAnt, $data->data_fim);
				$campanha->setDataFim(implode("-", array_reverse(explode("/", $data->data_fim))));                      
			}
			if (property_exists($data, 'ativo')){
				$campanha->setAtivo($data->ativo);
			}

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['nome='] = $data->nome;
				$countNome = fRecordset::build('Campanha', $aSearch);
				if($countNome->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => 'Não foi possivel salvar a campanha. O nome já existe');
					fJSON::output($arrMensagem);
					die();
				}else{
					$campanha->store();
				}
			}
			else{
				$campanha->store();
			}            


			/*Fim - Grava informações na Tabela de Campanha*/
			$id_campanha = $campanha->getId();
			$arrMensagem = array('error' => 0, 'id_campanha' => $id_campanha, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Fontes de Captação de Associado
	Método: GET
	URL: http://localhost/sig/api/index.php/fontecaptacao/<fontecaptacao>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 18/11/2014
	*/

	public function getFonteCaptacao($fontecaptacao = "", $full = false) {

		$aSearch = '';

		if ($fontecaptacao != "") {
			$aSearch = 'WHERE id = '.$fontecaptacao;
		}

		$strQueryFonteCaptacao = "SELECT id,descricao,ativo FROM fonte_captacao ".$aSearch." ORDER BY descricao ";
		$fontecaptacao = $this->_getDb()->query($strQueryFonteCaptacao);
		$aFonteCaptacao = array();

		$status = array('Inativo', 'Ativo');

		foreach ($fontecaptacao as $key => $value){
			$aFonteCaptacao[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' =>$status[$value['ativo']]
				);
		}

		$fontecaptacao = $this->_getDb()->close();

		if (count($aFonteCaptacao) == 0) {
			$aFonteCaptacao = array('error' => -1, 'mensagem' => "Nenhuma fonte de captação encontrada.");
		} else {
			$aFonteCaptacao = array('error' => 0, 'fonte_captacao' => $aFonteCaptacao);
		}

		if ($full == false) {
			fJSON::output($aFonteCaptacao);
		}
		else {
			return $aFonteCaptacao;
		}		
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Campanha por Pessoa
	Método: GET
	URL: http://localhost/sig/api/index.php/campanhapessoa/<pessoa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 18/11/2014
	*/

	public function getCampanhaPessoa($id_pessoa = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}

		$campanhaPessoa = fRecordSet::build('CampanhaPessoa', $aSearch);

		$aCampanhaPessoa = array();

		if ($campanhaPessoa->count() == 0) {
			$aCampanhaPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhuma campanha encontrada."
				);
		}
		else {
			foreach ($campanhaPessoa->getRecords() as $key => $value) {

				$pessoa = new Pessoa($value->getIdPessoaIndicador());

				$aCampanhaPessoa[] = array(
					'error' => "0",
					'mensagem' => "",
					'id' => $value->getId(),
					'id_campanha' => $value->getIdCampanha(),
					'id_pessoa' => $value->getIdPessoa(),
					'id_pessoa_indicador' => $value->getIdPessoaIndicador(),
					'pessoa_indicador' => $pessoa->getNome()
					);
			}
		}

		if ($full == false) {
			fJSON::output($aCampanhaPessoa);
		}
		else {
			return $aCampanhaPessoa;
		}
	}      


	/*
	Módulo: Geral
	Descrição: Criar eventos na agenda
	Método: GET
	URL: http://localhost/sig/api/index.php/evento
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 18/11/2014
	Autor: Rafael Frota Carvalho
	Versão: 1.0
	Data de Alteração: 02/12/2014
	Alterado Por: Ricardo Bruno
	*/

	public function postEvento(){
		$this->acessoApi();
		$data = json_decode(file_get_contents("php://input"));

		if($data->end == ''){
			$data->end = $data->start;
		}

		if (property_exists($data, 'datadeinicio')){
			//var_dump($data->datadeinicio);
			$new_dt = substr($data->datadeinicio,0,10).' ' .$data->horadeinicio;

			$datetime = new DateTime($new_dt);
			$data->start = $datetime->format(DateTime::ISO8601);
		}

		if (property_exists($data, 'datadetermino')){
			$new_dt = substr($data->datadetermino,0,10).' ' .$data->horadetermino;
			$datetime = new DateTime($new_dt);
			$data->end = $datetime->format(DateTime::ISO8601);
		}

		try { 

			if (property_exists($data, 'id')) {
				$evento = new Evento($data->id);
				$aSearch = array();
				$aSearch['id='] = $data->id;
				$mensagem = "Evento alterado com sucesso!";  

				$aSearch2 = array();
				$aSearch2['id_evento='] = $data->id;

				$eventoLista = fRecordSet::build('EventoLista', $aSearch2);
				foreach ($eventoLista->getRecords() as $key => $value) {
					$eventoLista = new EventoLista($value->getId());
					$eventoLista->delete();
				}  

			}else{
				$evento = new Evento();
				$mensagem = "Evento incluído com sucesso!";
			}
			if (property_exists($data, 'title')){
				if (strpos($data->title, 'see object') == 1){
					$data->title = null;
				}
				$evento->setTitle($data->title);
			}
			if (property_exists($data, 'description')){
				if (strpos($data->description, 'see object') == 1){
					$data->description = null;
				}
				$evento->setDescription($data->description);
			}
			if (property_exists($data, 'icon')){
				if (strpos($data->icon, 'see object') == 1){
					$data->icon = null;
				}
				$evento->setIcon($data->icon); 
			}
			if (property_exists($data, 'className')){
				if (strpos($data->className[0], 'see object') == 1){
					$data->className[0] = null;
				}
				if (is_array($data->className)) {
					$evento->setClassName($data->className[0]); 
				} else {
					$evento->setClassName($data->className); 
				}
			}
		/*if (property_exists($data, 'url')){
		if (strpos($data->url, 'see object') == 1){
			$data->url = null;
		}
		$evento->setUrl($data->url); 
	}*/
	if (property_exists($data, 'start')){
		if (strpos($data->start, 'see object') == 1){
			$data->start = null;
		}
		$evento->setStart($data->start); 
	}
	if (property_exists($data, 'end')){
		if (strpos($data->end, 'see object') == 1){
			$data->end = null;
		}
		$evento->setEnd($data->end);         
	}
	if (property_exists($data, 'allDay')){
		if (strpos($data->allDay, 'see object') == 1){
			$data->allDay = null;
		}
		$evento->setAllDay(0);           
	}
	if (property_exists($data, 'id_tipo_evento')){
		if (strpos($data->id_tipo_evento, 'see object') == 1){
			$data->id_tipo_evento = null;
		}
		$evento->setIdTipoEvento($data->id_tipo_evento);           
	}      
	if (property_exists($data, 'id_departamento')){
		if (strpos($data->id_departamento, 'see object') == 1){
			$data->id_departamento = null;
		}
		$evento->setIdDepartamento($data->id_departamento);           
	}
	if (property_exists($data, 'valor')){
		if (strpos($data->valor, 'see object') == 1){
			$data->valor = null;
		}
		$valor = str_replace("R$ ", "", $data->valor);
		$valor = str_replace(".", "", $valor);
		$valor = str_replace(",", ".", $valor);
		$valor = trim($valor);

		$evento->setValor($valor);     

	}    

	/*FRH*/
	if (property_exists($data, 'ativo')){
		if (strpos($data->ativo, 'see object') == 1){
			$data->ativo = null;
		}
		$evento->setAtivo($data->ativo);
	}

	$evento->setDataCadastro(date('Y-m-d H:i:s'));  
	$evento->store();

	$id_evento = $evento->getId();


		//******** Grava informações na Tabela de EventoLista 
	if (property_exists($data, 'listaselecionado')) {
		foreach ($data->listaselecionado as $key => $value) {
			$eventoLista = new EventoLista();

			$eventoLista->setIdEvento($id_evento);
			$eventoLista->setIdLista($value->id);
			$eventoLista->store(); 
		}
	}        

	$arrMensagem = array('error' => 0, 'id_evento' => $id_evento, 'mensagem' => $mensagem);
	fJSON::output($arrMensagem);
	die();
}catch (fValidationException $e) {      
	$error = $this->errorMessage("Erro na inclusão",$e);
	$arrMensagem = array('error' => -1, 'mensagem' => $error);
	fJSON::output($arrMensagem);
	die();
}
}

	/*
	Módulo: Mesquita
	Descrição: Obter eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/evento/<evento>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/11/2014
	Autor: Rafael Frota Carvalho
	Versão: 1.0
	Data de Alteração: 20/11/2014
	*/

	public function getEvento($id_evento = "", $full = false) {        

		//$aSearch = array();
		$sql = '';
		if ($id_evento != "") {
			$sql = "SELECT
					evento.id,
					evento.id_departamento,
					evento.id_tipo_evento,
					evento.title,
					evento.description,
					evento.`start`,
					evento.`end`,
					evento.valor,
					evento.all_day,
					evento.class_name,
					evento.icon,
					evento.data_cadastro,
					evento.url,
					evento.ativo
					from evento WHERE id = " . $id_evento;
		}
		else{
			$sql = "SELECT
					evento.id,
					evento.id_departamento,
					evento.id_tipo_evento,
					evento.title,
					evento.description,
					evento.`start`,
					evento.`end`,
					evento.valor,
					evento.all_day,
					evento.class_name,
					evento.icon,
					evento.data_cadastro,
					evento.url,
					evento.ativo
					from evento";
		}		

		$evt = $this->_getDb()->query($sql);

		$aEvento = array();

		if (count($evt) == 0) {
			$aEvento[] = array(
				'error' => "-1",
				'mensagem' => "Nenhum evento encontrado."
				);
		} else {
			foreach ($evt as $key => $value) {

				/* FRH */
				$evtAtv = $value['ativo'] == 1 ? true : false;
				if($evtAtv)
				{

					$url = '#/agenda/evento/1/'.$value['id'];

					$data_termino = '';
					$hora_termino = '';

					if ($value['end'] != null) {
						$data_termino = date('Y/m/d', strtotime($value['end']));
						$hora_termino = date('H:i:s', strtotime($value['end']));
						$hora_termino = substr($hora_termino, 0, 5);
					}          

					$data_evento = date('Y/m/d', strtotime($value['start']));
					$hora_inicio = date('H:i:s', strtotime($value['start']));        

					$data_evento_formatada = date('d/m/Y', strtotime($value['start']));

					$allDay = $value['all_day'];

					if($hora_inicio != ''){
						$allDay = false;
					}

					$dataCadastroEvento = explode('-', $value['data_cadastro']);

					$dataCadastroEvento = $dataCadastroEvento[0] . '/' . $dataCadastroEvento[1] . '/' . $dataCadastroEvento[2]; 

					$resultEventoLista = $this->getEventoLista($value['id'], "",true); 

					$aEvento[] = array(                
						'tipo' => 'Eventos',
						'id' => $value['id'],
						'id_departamento' => $value['id_departamento'],
						'id_tipo_evento' => $value['id_tipo_evento'],
						'title' => $value['title'],
						'description' => $value['description'],
						'start' => $value['start'],
						'datadeinicio' => $data_evento,
						'horadeinicio' => substr($hora_inicio, 0, 5),
						'data_evento' => $data_evento,
						'data_evento_formatada' => $data_evento_formatada,
						'end' => $value['end'],
						'datadetermino' => $data_termino,
						'horadetermino' => $hora_termino,
						'valor' => number_format($value['valor'], 2, ',', '.'),
						'allDay' => $allDay,
						'className' => $value['class_name'],
						'icon' => $value['icon'],
						'evento_lista' => $resultEventoLista,
						'data_cadastro' => $dataCadastroEvento,
						'url' => $url
						);
				}
			}
		}

		if ($full == false) {
			fJSON::output($aEvento);
		}else{
			return $aEvento;
		}
	}


	public function getFalecido($id_falecido = "",$full = false) {
		$this->acessoApi();

		$aFalecido = array();

		$query = '';

		if($id_falecido != ""){
			$query = "SELECT * FROM falecido WHERE id = " . $id_falecido;
		}
		else{
			$query = "SELECT * FROM falecido WHERE id_gaveta IS NOT NULL";
		}

		$falecido = $this->_getDb()->query($query);
		//$falecido = fRecordSet::build('Falecido', $aSearch);

		foreach ($falecido as $key => $value) {

			$dataNascimento = '';
			$dataObito = '';
			$horaObito = '';
			$dataExumacao = '';
			$horaExumacao = '';
			$horaSepultamento = '';
			$dataSepultamento = '';
			$dataCadastro = '';

			if ($value['data_nascimento'] != null) {
				//$dataNascimento = $value->getDataNascimento()->format('Y-m-d');
				$dataNascimento = $value['data_nascimento'] . "T12:00:00";
				//$dataNascimentoShow = $value->getDataNascimento()->format('d/m/Y');
				$dataNascimentoShow = self::formataData($value['data_nascimento']);
			}
			if ($value['data_obito'] != null) {
				//$dataObito = $value->getDataObito()->format('Y-m-d');
				$dataObito = $value['data_obito'] . "T12:00:00";;
				//$dataObitoShow = $value->getDataObito()->format('d/m/Y');
				$dataObitoShow = self::formataData($value['data_obito']);
			}
			if ($value['data_exumacao'] != null) {
				//$dataExumacao = $value->getDataExumacao()->format('Y-m-d');
				$dataExumacao = $value['data_exumacao'];
			}
			if ($value['hora_exumacao'] != null) {
				$horaExumacao = $value['hora_exumacao'] . "T12:00:00";;
			}
			if ($value['data_cadastro'] != null) {
				//$dataCadastro = $value->getDataCadastro()->format('d/m/Y');
				$dataCadastro = self::formataData($value['data_cadastro']);
			}
			if ($value['data_sepultamento'] != null) {
				$dataSepultamento = $value['data_sepultamento'] . "T12:00:00";;
			}
			if ($value['hora_sepultamento'] != null) {
				$horaSepultamento = $value['hora_sepultamento'] . "T12:00:00";;
			}
		/*if ($value->getDataObito() != null) {
		$dataObito = $value->getDataObito()->format('d/m/Y');
	}*/
	if ($value['hora_obito'] != null) {
		$horaObito = $value['hora_obito'] . "T12:00:00";;
	}

	//CONTINUAÇÃO
	//VERIFICAR SE ESTA PASSANDO O ID DA GAVETA, SE ESTIVER MONTA UMA QUERY, SENAO MONTA OUTRA

	$query = "SELECT * FROM gaveta WHERE id = " . $value['id_gaveta'];

	$fGaveta = $this->_getDb()->query($query);

	foreach ($fGaveta as $key1 => $value1) {
		$tbGaveta = $value1['id_unidade_armazenagem'];
		$tbGavetaDescricao = $value1['descricao'];
		$dataVencimento = $value1['data_vencimento'] . "T12:00:00";
		$dataShow = $value1['data_vencimento'];
		$dataVencimentoShow = self::formataData($dataShow);
	}

	$query = "SELECT * FROM unidade_armazenagem WHERE id = " . $tbGaveta;

	$fJazigo = $this->_getDb()->query($query);

	foreach ($fJazigo as $key2 => $value2) {
		$tbJazigo = $value2['id_lote'];
		$tbJazigoDescricao = $value2['descricao'];
	}

	$query = "SELECT * FROM lote WHERE id = " . $tbJazigo;

	$fLote = $this->_getDb()->query($query);

	foreach ($fLote as $key3 => $value3) {
		$tbLote = $value3['id_quadra'];
	}

	$query = "SELECT * FROM quadra WHERE id = " . $tbLote;

	$fQuadra = $this->_getDb()->query($query);
	$tbQuadraDescricao='';

	foreach ($fQuadra as $key4 => $value4) {

		$tbQuadra = $value4['id'];
		$tbQuadraDescricao = $value4['descricao'];
	}

	//$tbGaveta   = fRecordSet::build('Gaveta', array('id=' => $value->getIdGaveta()));
	//$tbJazigo   = fRecordSet::build('UnidadeArmazenagem', array('id=' => $tbGaveta[0]->getIdUnidadeArmazenagem()));
	//$tbLote     = fRecordSet::build('Lote', array('id=' => $tbJazigo[0]->getIdLote()));
	//$tbQuadra   = fRecordSet::build('Quadra', array('id=' => $tbLote[0]->getIdQuadra()));


	// FRH - Buscar registros na tabela falecido_causa_mortis para montar o combo de multi-seleção de "Causa Mortis"	
	$rsCausaMortis = $this->getFalecidoCausaMortis($id_falecido, true);
	
	$aFalecido[] = array(
		'id'                => $value['id'],
		'id_quadra'         => $tbQuadra,
		'quadra_descricao'  => $tbQuadraDescricao,
		'id_lote'           => $tbJazigo,
		'id_unidade_armazenagem' => $tbGaveta,
		'ua_descricao' 		=> $tbJazigoDescricao,
		'id_gaveta'         => $value['id_gaveta'],
		'data_vencimento_gaveta' => $dataVencimento,
		'data_vencimento_gaveta_show' => $dataVencimentoShow,
		'gaveta_descricao'  => $tbGavetaDescricao,
		'id_funeraria'      => $value['id_funeraria'],
		'id_estado_civil'   => $value['id_estado_civil'],
		'id_pais'           => $value['id_pais'],
		'nome'              => $value['nome'],
		'sexo'              => $value['sexo'],
		'data_nascimento'   => $dataNascimento,
		'data_nascimento_show'   => $dataNascimentoShow,
		'cor'               => $value['cor'],
		'nacionalidade'     => $value['nacionalidade'],
		'profissao'         => $value['profissao'],
		'nome_pai'          => $value['nome_pai'],
		'nome_mae'          => $value['nome_mae'],
		'numero_livro'      => $value['numero_livro'],
		'numero_pagina'     => $value['numero_pagina'],
		'cartorio'          => $value['cartorio'],
		'numero_certidao'   => $value['numero_certidao'],
		'livro_cartorio'    => $value['livro_cartorio'],
		'pagina_cartorio'   => $value['pagina_cartorio'],
		'data_obito'        => $dataObito,
		'data_obito_show'   => $dataObitoShow,
		'hora_obito'        => $horaObito,
		'local_falecimento' => $value['local_falecimento'],
		'data_sepultamento' => $dataSepultamento,
		'hora_sepultamento' => $horaSepultamento,
		'nome_medico'       => $value['nome_medico'],
		'crm_medico'        => $value['crm_medico'],
		'observacao'        => $value['observacao'],
		'data_exumacao'     => $dataExumacao,
		'hora_exumacao'     => $horaExumacao,
		'indigente'         => $value['indigente'],
		'logradouro'        => $value['logradouro'],
		'numero'            => $value['numero'],
		'bairro'            => $value['bairro'],
		'complemento'       => $value['complemento'],
		'cidade'            => $value['cidade'],
		'estado'            => $value['estado'],
		'cep'       		=> $value['codigo_postal'],
		'id_gaveta'         => $value['id_gaveta'],
		'data_cadastro'     => $dataCadastro,
		'numero_documento'  => $value['numero_documento'],
		'cpf'  				=> $value['cpf'],
		'id_tipo_documento'	=> $value['id_tipo_documento'],
		'causa_mortis'		=> $rsCausaMortis,
		'certidao_obito'    => (($value['certidao_obito']!==null) ? $value['certidao_obito'] : '')
		);
}

if (count($aFalecido) == 0) {
	$aFalecido[] = array('error'    => -1, 'mensagem' => "Nenhum falecido encontrado.");
}else{
	$aFalecido = array('error'    => 0, 'falecido' => $aFalecido);
}
if ($full == false) {
	fJSON::output($aFalecido);
}else {
	return $aFalecido[0];
}
}  

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Categoria de Não Associado
	Método: GET
	URL: http://localhost/sig/api/index.php/categorianaoassociado/<categorianaoassociado>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 20/11/2014
	*/

	public function getCategoriaNaoAssociado($id_consulta="",$id="", $full = false) {

	//Se $id_consulta = 0 então vai trazer apenas entidades
	//Se $id_consulta =1 então traz tudo
	//Se $id_consulta = 2 traz so nao associados

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		if ($id_consulta==0) {
			$aSearch['tipo='] = 0;
		}

		if ($id_consulta==2) {
			$aSearch['tipo='] = 1;
		}    

		$categorianaoassociado = fRecordSet::build('CategoriaNaoassociado', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aCategoriaNaoAssociado = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aCategoriaNaoAssociado[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Categoria",
					'ativo' => ""
					);   
			}      

			$tratamento = array('Não', 'Sim');
			$documento = array('Não', 'Sim');
			$tipo = array('Entidade', 'Não Associados');
			$status = array('Inativo', 'Ativo');

			foreach ($categorianaoassociado->getRecords() as $key => $value) {
		//fazer tratamento quando for vazio
				$PronomeTratamento = 0;
				$Documento = 0;
				$Tipo = 0;
				if ($value->getPronomeTratamento()!=null) {
					$PronomeTratamento = $value->getPronomeTratamento();

				}
				if ($value->getDocumento()!=null) {
					$Documento = $value->getDocumento();
				}
				if ($value->getTipo()!=null) {
					$Tipo = $value->getTipo();
				}

				$aCategoriaNaoAssociado[] = array(
					'tipo' => "Categoria",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'pronome_tratamento' => $value->getPronomeTratamento(),
					'pronome_tratamento_status' => $tratamento[$PronomeTratamento],
					'documento' => $value->getDocumento(),
					'documento_status' => $documento[$Documento],
					'tipo_valor' => $value->getTipo(),
					'tipo_status' => $tipo[$Tipo],
					'ativo' => $value->getAtivo(),
					'status' => $status[$value->getAtivo()]
					);
			}

			if (count($aCategoriaNaoAssociado) == 0) {
				$aCategoriaNaoAssociado[] = array('error' => -1, 'mensagem' => "Nenhuma categoria encontrada.");
			} else {
				$aCategoriaNaoAssociado = array(
					'error' => 0,
					'categoria' => $aCategoriaNaoAssociado
					);
			}


			fJSON::output($aCategoriaNaoAssociado);
		}
		else {
			return $categorianaoassociado[0];
		}    
	}  

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipos de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/stringtipoevento/<stringtipoevento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 20/11/2014
	*/

	public function getTipoEventoString($tipoevento = "", $full = false) {

		$request = $this->_slimApp->request()->params();
		$aSearch = array();

		if (array_key_exists('string', $request) && $request['string'] != '') {
			$aSearch['descricao~'] = $request['string'];
		}

		if ($tipoevento != "") {
			$aSearch['id='] = $tipoevento;
		}

		$tipoevento = fRecordSet::build('TipoEvento', $aSearch);

		if ($full == false) {

			$aTipoEvento = array();


			$aTipoEvento[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Evento",
				'ativo' => ""
				);   


			foreach ($tipoevento->getRecords() as $key => $value) {

				$aTipoEvento[] = array(
					'tipo' => "Eventos",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao()
					);
			}

			if (count($aTipoEvento) == 0) {
				$aTipoEvento[] = array('error' => -1, 'mensagem' => "Nenhum tipo de evento encontrado.");
			}

			fJSON::output($aTipoEvento);
		}
		else {
			return $tipoevento[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipo de Evento de uma Pessoa
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoevento/<pessoa>/<id tipoevento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 21/11/2014
	*/

	public function getTipoEventoPessoa($id_pessoa = "", $id_tipoevento = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}

		if ($id_tipoevento != "") {
			$aSearch['id='] = $id_tipoevento;
		}

		$tipoEventoPessoa = fRecordSet::build('PessoaTipoEvento', $aSearch);

		$aTipoEventoPessoa = array();

		if ($tipoEventoPessoa->count() == 0) {

			$aTipoEventoPessoa = array(
				'error' => "-1",
				'mensagem' => "Nenhum tipo de evento encontrado."
				);
		}
		else {
			foreach ($tipoEventoPessoa->getRecords() as $key => $value) {

				$resultTipoEvento = $this->getTipoEvento($value->getIdTipoEvento(), true);

				$aTipoEventoPessoa[] = array(
					'id' => $value->getIdTipoEvento(),
					'descricao' => $resultTipoEvento['Descricao']
					);
			}
		}

		if ($full == false) {
			fJSON::output($aTipoEventoPessoa);
		}
		else {
			return $aTipoEventoPessoa;
		}
	}  

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipos de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/ctipoevento/<tipoevento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 21/11/2014
	*/

	public function getTipoEvento($tipoevento = "", $full = false) {

		$aSearch = array();

		if ($tipoevento != "") {
			//$aSearch['id='] = $tipoevento;
			$sql = "SELECT tipo_evento.id, tipo_evento.descricao, tipo_evento.ativo FROM tipo_evento WHERE id = " . $tipoevento;
		}
		else{
			$sql = "SELECT tipo_evento.id, tipo_evento.descricao, tipo_evento.ativo FROM tipo_evento";
		}

		$tipoevento = $this->_getDb()->query($sql);
		//$tipoevento = fRecordSet::build('TipoEvento', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoEvento = array();

			foreach ($tipoevento as $key => $value) {

				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}            

				$aTipoEvento[] = array(
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' => $status
					);
			}

			if (count($aTipoEvento) == 0) {
				$aTipoEvento[] = array('error' => -1, 'mensagem' => "Nenhum tipo de evento encontrado.");
				fJSON::output($aTipoEvento);
				die();        
			}

			$aTipoEvento = array('error' => 0,'tipoevento' => $aTipoEvento);          

			fJSON::output($aTipoEvento);
		}
		else {
			return $aTipoEvento[0];
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar e Manipular uma Nova Atividade
	Método: POST
	URL: http://localhost/sig/api/index.php/perfil/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/11/2014
	Autor: Fabio
	Versão: 1.0
	Data de Alteração: 25/11/2014
	*/

	public function postPerfil($id_perfil = "",$full = false) {
		$data = json_decode(file_get_contents("php://input"));

		$atividade = new Atividade();
		$papelAtividade = new PapelAtividade();
		$mensagem = "Atividade incluída com sucesso!";

		try {

		//******** Grava informações na Tabela de Atividade
			if (property_exists($data, 'id_atividade_parent')){
				$atividade->setIdAtividadeParent($data->id_atividade_parent);
			}
			if (property_exists($data, 'id_tipo_entidade')){
				$atividade->setIdTipoEntidade($data->id_tipo_entidade);
			}
			if (property_exists($data, 'nome')){
				$atividade->setNome($data->nome);
			}
			if (property_exists($data, 'descricao')){
				$atividade->setDescricao($data->descricao);
			}
			if (property_exists($data, 'url')){
				$atividade->setUrl($data->url);
			}
			if (property_exists($data, 'ativo')){
				$atividade->setAtivo($data->ativo);
			}
			$atividade->store();
		//******** Fim - Grava informações na Tabela de Atividade
			$id_atividade = $atividade->getId();

			$arrMensagem = array('error' => 0, 'id_atividade' => $id_atividade, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}             

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo tipo de evento
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 26/11/2014
	*/

	public function postTipoEvento() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoevento = new TipoEvento($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de Evento alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoevento = new TipoEvento();
			$mensagem = "Tipo de Evento incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Tipo Evento
			if (property_exists($data, 'descricao')){
				$tipoeventoAnt = '';
				if($alteracao==1){
					$tipoeventoAnt = $tipoevento->getDescricao();
				}
				$this->setAuditoria('Evento', 'Descrição', $tipoeventoAnt, $data->descricao);
				$tipoevento->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoevento->setAtivo($data->ativo);
			}

			if($alteracao != 1){
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoEvento', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A descrição do evento já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipoevento->store();
				}        
			}
			else{
				$tipoevento->store();
			}

		//******** Fim - Grava informações na Tabela de Tipo Evento
			$id_tipoevento = $tipoevento->getId();

			$arrMensagem = array('error' => 0, 'id_tipoevento' => $id_tipoevento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo departamento
	Método: GET
	URL: http://localhost/sig/api/index.php/departamento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/11/2014
	*/

	public function postDepartamento() {

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');
		$id_entidade = $user['user']['id'];

		if (property_exists($data, 'id')) {
			$departamento = new Departamento($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Departamento alterado com sucesso!";
			$alteracao=1;
		}
		else {
			$departamento = new Departamento();
			$mensagem = "Departamento incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Departamento
			if (property_exists($data, 'descricao')){
				$departamentoAnt = '';
				if($alteracao==1){
					$departamentoAnt = $departamento->getDescricao();
				}
				$this->setAuditoria('Departamento', 'Descrição', $departamentoAnt, $data->descricao);
				$departamento->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$departamento->setAtivo($data->ativo);
			}
			$departamento->setIdEntidade($id_entidade);

			if($alteracao != 1){
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDepto = fRecordset::build('Departamento', $aSearch);
				if($countDepto->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O departamento já existe.");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$departamento->store();
				} 
			}
			else{
				$departamento->store();
			}


		//******** Fim - Grava informações na Tabela de Departamento
			$id_departamento = $departamento->getId();

			$arrMensagem = array('error' => 0, 'id_departamento' => $id_departamento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: SIG
	Descrição: Gravar integrantes de um departamento
	Método: POST
	URL: http://localhost/sig/api/index.php/integrantedepartamento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	*/

	public function postIntegranteDepartamento() {
		$data = json_decode(file_get_contents("php://input"));

		$integrante = new DepartamentoPessoa();
		$mensagem = "Integrante do departamento incluído com sucesso!";
		try {
		//******** Grava informações na Tabela de departamento_pessoa
			$integrante->setIdDepartamento($data->id_departamento);      
			$integrante->setIdPessoa($data->id);
			$integrante->store();
		//******** Fim - Grava informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Departamentos
	Método: GET
	URL: http://localhost/sig/api/index.php/departamento/<tipoevento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	Adicionado ordenação por descriçao
	*/

	public function getDepartamento($departamento = "", $full = false) {

		$aSearch = "";
		if ($departamento != "") {
			$aSearch = ' and id = ' . $departamento;
		}

		$strQuerydepartamento = "SELECT * FROM departamento WHERE 1 ".$aSearch." order by descricao asc";

		$departamento = $this->_getDb()->query($strQuerydepartamento);

		
		$aDepartamento = array();
		
		foreach ($departamento as $key => $value) {
			
			if ($value['ativo']==1) {
				$status = "Ativo";
			} else if ($value['ativo']==0) {
				$status = "Inativo";
			}  
			$resultSocios = $this->getIntegranteDepartamento($value['Id'], true);          

			$aDepartamento[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' => $status,
				'sociosSel' => $resultSocios
				);
		}

		$departamento = $this->_getDb()->close();

		if (count($aDepartamento) == 0) {
			$aDepartamento[] = array('error' => -1, 'mensagem' => "Nenhum departamento encontrado.");
			fJSON::output($aDepartamento);
			die();
		}

		$aDepartamento = array(
			'error' => 0,
			'departamento' => $aDepartamento
		);          

		if ($full == false) {
			fJSON::output($aDepartamento);
		}else {
			return $aDepartamento;
		}
	}


	/*
	Módulo: Geral
	Descrição: Obter Lista de Departamentos para tela de eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/departamentoevento/<tipoevento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/08/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/

	public function getDepartamentoEvento($departamento = "", $full = false) {

		$aSearch = array();
		if ($departamento != "") {
			$sql = "SELECT * FROM departamento WHERE id = " . $departamento;
		}
		else{
			$sql = "SELECT * FROM departamento";
		}

		$departamento = $this->_getDb()->query($sql);

		if ($full == false) {
			$aDepartamento = array();
			foreach ($departamento as $key => $value) {
				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}
				$aDepartamento[] = array(
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' => $status
					);
			}

			if (count($aDepartamento) == 0) {
				$aDepartamento[] = array('error' => -1, 'mensagem' => "Nenhum encontrado.");
				fJSON::output($aDepartamento);
				die();
			}

			$aDepartamento = array(
				'error' => 0,
				'departamento' => $aDepartamento
				);          

			fJSON::output($aDepartamento);
		}else {
			return $departamento[0];
		}
	}      

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Integrantes de Departamento
	Método: GET
	URL: http://localhost/sig/api/index.php/integrantes/<socio>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/11/2014
	*/

	public function getIntegranteDepartamento($id_departamento = "", $full = false) {
		$this->acessoApi();

		$aSearch = "";
		
		if ($id_departamento != "") {
			$aSearch = ' and id_departamento = ' . $id_departamento;
		}

		$strQueryDepartamentoPessoa = "SELECT * FROM departamento_pessoa WHERE 1 ".$aSearch;

		$departamentoPessoa = $this->_getDb()->query($strQueryDepartamentoPessoa);

		$aDepartamentoPessoa = array();

		if ($departamentoPessoa->countReturnedRows() == 0) {
			$aDepartamentoPessoa[] = array(
				'error' => -1,
				'mensagem' => "Nenhum integrante encontrado."
				);
		}else {
			foreach ($departamentoPessoa as $key => $value) {        
				$resultIntegrantePessoa = $this->getPessoa($value['id_pessoa'], true); //Obtem Pessoa Integrante

				$dataAssociacao = '';
				if ($resultIntegrantePessoa['data_associacao'] != null) {
					$dataAssociacao = date("d/m/Y", strtotime($resultIntegrantePessoa['data_associacao']));
				}                				

				$aDepartamentoPessoa[] = array(
				'id' => $value['id'],
				'id_pessoa' => $value['id_pessoa'],
				'id_departamento' => $value['id_departamento'],
				'nome' => $resultIntegrantePessoa['nome'],
				'email' => $resultIntegrantePessoa['email'],
				'data_associacao' => $dataAssociacao,
				);
			}
		}

		$departamentoPessoa = $this->_getDb()->close();

		if ($full == false) {
			fJSON::output($aDepartamentoPessoa);
		}
		else {
			return $aDepartamentoPessoa;
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Exclui um Integrante de um Departamento
	Método: GET
	URL: http://localhost/sig/api/index.php/delintegrante/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 27/11/2014
	*/
	public function delIntegrante() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		if (property_exists($data, 'id_pessoa')) {
			$aSearch['id_pessoa='] = $data->id_pessoa;
		} else {
			$aSearch['id_pessoa='] = $data->id;
		}

		$integrante = fRecordSet::build('DepartamentoPessoa', $aSearch);

		$mensagem = "Integrante excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$integrante[0]->delete();
		//******** Fim - Excluí informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}             

	/*
	Módulo: Controle de Perfil
	Descrição: Obter Lista de Atividades (Tree view)
	Método: GET
	URL: http://localhost/sig/api/index.php/treeatividade/<atividade>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/11/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 26/11/2014
	*/

	private function getMontarAtividade($array, $id_parent, $array_permissao, $id_papel) {
	/*
	Monta a arvore de atividade, enquanto tiver filhos.
	OBS: Este metodo não pode ser chamado direto pelas rotas, pois esta vinculado com o getTreeAtividade.
	*/
	$aAtividades = array();

	foreach ($array[$id_parent] as $value) { 
		$children = null;
		if(array_key_exists($value['id_modulo'], $array)){
			$children = $this->getMontarAtividade($array, $value['id_modulo'], $array_permissao, $id_papel);        
		}

		$permissao = 0;
		$visualizar = 0;
		$cadastrar = 0;
		$excluir = 0;
		if(count(@$array_permissao[$id_papel][$value['id_modulo']]) > 0){
			$permissao = 1;
			$visualizar = $array_permissao[$id_papel][$value['id_modulo']]['visualizar'];
			$cadastrar = $array_permissao[$id_papel][$value['id_modulo']]['cadastrar'];
			$excluir = $array_permissao[$id_papel][$value['id_modulo']]['excluir'];
		}

		$aAtividades[] = array(
			'id_modulo' => $value['id_modulo'],
			'id_parent' => $value['id_parent'],
			'id_tipo_entidade' => $value['id_tipo_entidade'],
			'nome' => $value['nome'],
			'descricao' => $value['descricao'],
			'url' => $value['url'],
			'visualizar' => $visualizar,
			'cadastrar' => $cadastrar,
			'excluir' => $excluir,
			'permissao' => $permissao,
			'show_permissao' => $value['show_permissao'],
			'ativo' => $value['ativo'],
			'show_menu' => $value['show_menu'],          
			'children' => $children,          
			);
	}

	return $aAtividades;
	
}

public function getTreeAtividade($id_papel = "", $full = false) {
	$this->acessoApi();
	$show_permissao = false;

	$aSearch = array();
	if ($id_papel != "") {
		$aSearch['id='] = $id_papel;
		$show_permissao = true;
	}

	$user = fSession::get('user');
	$aSearch['id_tipo_entidade='] = $user['user']['entidadePessoa'];

	$papelPerfil = fRecordSet::build('Papel', $aSearch);

	//$permissao = 0;
	$papelAtividade = fRecordSet::build('PapelAtividade');
	$aPapelAtividade = array();
	foreach ($papelAtividade as $key => $value) {   
		$aPapelAtividade[$value->getIdPapel()][$value->getIdAtividade()] = array(
			'id_papel' => $value->getIdPapel(),
			'id_atividade' => $value->getIdAtividade(),
			'visualizar' => $value->getVisualizar(),
			'cadastrar' => $value->getCadastrar(),
			'excluir' => $value->getExcluir(),
			);
	}


	$atividade = fRecordSet::build('Atividade');
	$aAtividades = array();
	foreach ($atividade as $key => $value) {   
		$aAtividades[$value->getIdAtividadeParent()][$key] = array(
			'id_modulo' => $value->getId(),
			'id_parent' => $value->getIdAtividadeParent(),
			'id_tipo_entidade' => $value->getIdTipoEntidade(),
			'nome' => $value->getNome(),
			'descricao' => $value->getDescricao(),
			'url' => $value->getUrl(),
			'permissao' => '',
			'visualizar' => 0,
			'cadastrar' => 0,
			'excluir' => 0,
			'show_permissao' => $show_permissao,
			'ativo' => $value->getAtivo(),
			'show_menu' => $value->getShowMenu(),          
			);
	}

	$aTreeAtividades = $this->getMontarAtividade($aAtividades, 
		null, 
		$aPapelAtividade, 
		$id_papel
		);

	$aPapelPerfil = array();

	foreach ($papelPerfil as $rPapelPerfil) {
		$aPapelPerfil[] = array(
			'id_perfil' => $rPapelPerfil->getId(),
			'nome' => $rPapelPerfil->getNome(),
			'descricao' => $rPapelPerfil->getDescricao(),
			'ativo' => $rPapelPerfil->getAtivo(),
			'id_tipo_entidade' => $rPapelPerfil->getIdTipoEntidade(),
			'children' => $aTreeAtividades
			);  
	} 

	if ($full == false) {          
		fJSON::output($aPapelPerfil);
	}
	else {
		return $aPapelPerfil;
	}
}

 /* public function getTreeAtividade($papel = "", $full = false) {
	$this->acessoApi();
	$show_permissao = false;

	$aSearch = array();
	if ($papel != "") {
		$aSearch['id='] = $papel;
		$show_permissao = true;
	}
	
	$papelPerfil = fRecordSet::build('Papel', $aSearch);
	
	$aPapelPerfil = array();

	foreach ($papelPerfil as $rPapelPerfil) {
	
		$aSearchP = array();
		$aSearchP['id_atividade_parent='] = null;

		$papelAtividade = fRecordSet::build('Atividade', $aSearchP);

		$aAtividadesParent = array();

		foreach ($papelAtividade as $rAtividade) {
		
		
		$aAtividadesParent[] = array(
			'id_modulo' => $rAtividade->getId(),
			'nome' => $rAtividade->getNome(),
			'descricao' => $rAtividade->getDescricao(),
			'ativo' => $rAtividade->getAtivo(),
			'show_menu' => $rAtividade->getShowMenu(),
		);
		
		};

		$aAtividades = array();

		$aSearch = array();          
		$aSearch['id_atividade_parent!'] = null;
		$atividade = fRecordSet::build('Atividade', $aSearch);

		foreach ($atividade as $rAtividadeChildren) {          

		if ($atividade->count()) {
			$aAtividades[] = array(
			'id_modulo' => $rAtividadeChildren->getId(),
			'id_parent' => $rAtividadeChildren->getIdAtividadeParent(),
			'id_tipo_entidade' => $rAtividadeChildren->getIdTipoEntidade(),
			'nome' => $rAtividadeChildren->getNome(),
			'descricao' => $rAtividadeChildren->getDescricao(),
			'url' => $rAtividadeChildren->getUrl(),
			'ativo' => $rAtividadeChildren->getAtivo(),
			'show_menu' => $rAtividadeChildren->getShowMenu(),
			);
		}
		}

		foreach ($aAtividadesParent as $key => $value) {
				
		foreach ($aAtividades as $key2 => $value2) {
				
			if ($value2['id_parent'] == $value['id_modulo']) {
						
			$permissao = 0;
			$aSearchP = array();
		
			$aSearchP['id_atividade='] = $value2['id_modulo'];        
			$aSearchP['id_papel='] = $rPapelPerfil->getId();       

			$papelAtividadeSel = fRecordSet::build('PapelAtividade', $aSearchP);

			if ($papelAtividadeSel->count() == 1) {
				$permissao = 1;
			}

			$aAtividadesParent[$key]['children'][] = array(
				'id_modulo' => $value2['id_modulo'],
				'id_parent' => $value2['id_parent'],
				'id_tipo_entidade' => $value2['id_tipo_entidade'],
				'nome' => $value2['nome'],
				'descricao' => $value2['descricao'],
				'url' => $value2['url'],
				'permissao' => $permissao,
				'show_permissao' => $show_permissao,
				'ativo' => $value2['ativo'],
				'show_menu' => $value2['show_menu'],
			);
			}
		}
		}
	
		$aPapelPerfil[] = array(
		'id_perfil' => $rPapelPerfil->getId(),
		'nome' => $rPapelPerfil->getNome(),
		'descricao' => $rPapelPerfil->getDescricao(),
		'ativo' => $rPapelPerfil->getAtivo(),
		'children' => $aAtividadesParent,            
		);
	} 

	if ($full == false) {          
		fJSON::output($aPapelPerfil);
	}
	else {
		return $aPapelPerfil;
	}
	}
*/
	/*
	Módulo: Mesquita
	Descrição: Cadastrar e Manipular uma Nova Atividade
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrartreeatividade/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/11/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 27/11/2014
	*/

	private function cadastrarTreeAtividadeParente($id_perfil, $id_atividade) {
	/*
	Atribui as permissões aos (Pais, avos e etc) até achar um que ja tenha permissão
	OBS: Este metodo não pode ser chamado direto pelas rotas, pois esta vinculado com o postCadastrarTreeAtividade.
	*/
	$atividade = new Atividade($id_atividade);

	if($atividade->getIdAtividadeParent()){
		$aSearch = array();
		$aSearch['id_atividade='] = $atividade->getIdAtividadeParent();
		$aSearch['id_papel='] = $id_perfil;
		$perfilAtividadePai = fRecordSet::build('PapelAtividade', $aSearch);

		if($perfilAtividadePai->count() == 0){
			$perfilAtividadePai = new PapelAtividade();

			$perfilAtividadePai->setIdPapel($id_perfil);
			$perfilAtividadePai->setIdAtividade($atividade->getIdAtividadeParent());

			$perfilAtividadePai->store();

			$this->cadastrarTreeAtividadeParente($id_perfil, $atividade->getIdAtividadeParent());
		}
	}
}

private function excluirTreeAtividadeParente($id_perfil, $id_atividade) {
	/*
	Exclui as permissões aos (Pais, avos e etc) até achar um que não deve ser excluido porque continua tendo permissão em irmão, e primos
	OBS: Este metodo não pode ser chamado direto pelas rotas, pois esta vinculado com o postCadastrarTreeAtividade.
	*/
	$atividade = new Atividade($id_atividade);

	if($atividade->getIdAtividadeParent()){
		$aSearch = array();
		$aSearch['id_atividade_parent='] = $atividade->getIdAtividadeParent();
		$atividadePai = fRecordSet::build('Atividade', $aSearch);

		if($atividadePai->count() > 0){
			$aId[0] = $atividade->getIdAtividadeParent();
			foreach ($atividadePai as $key => $value) {
				$aId[$key+1] = $value->getId();
			}

			$aSearch = array();
			$aSearch['id_atividade='] = $aId;
			$aSearch['id_papel='] = $id_perfil;
			$papelAtividadePai = fRecordSet::build('PapelAtividade', $aSearch);

			if($papelAtividadePai->count() == 1){
				$papelAtividadePai[0]->delete();

				$this->excluirTreeAtividadeParente($id_perfil, $atividade->getIdAtividadeParent());
			}


		}
	}
}

public function postCadastrarTreeAtividade() {
	$data = json_decode(file_get_contents("php://input"));

	$aSearch = array();
	$aSearch['id_atividade='] = $data->id_atividade;
	$aSearch['id_papel='] = $data->id_perfil;
	$perfilAtividadeConferir = fRecordSet::build('PapelAtividade', $aSearch);

	if($perfilAtividadeConferir->count()){
		$id_atividade = $perfilAtividadeConferir[0]->getIdAtividade();

		$mensagem = "Atividade retirada do perfil!";

		$perfilAtividadeConferir[0]->delete();          

		$this->excluirTreeAtividadeParente($data->id_perfil, $data->id_atividade);

		$arrMensagem = array('error' => 0, 
			'id_atividade' => $id_atividade, 
			'visualizar' => 0, 
			'cadastrar' => 0, 
			'excluir' => 0, 
			'mensagem' => $mensagem);
		fJSON::output($arrMensagem);

	}else{
		$papelAtividade = new PapelAtividade();
		$mensagem = "Atividade vinculada ao perfil!";

		try {          
		//******** Grava informações na Tabela de PapelAtividade
			if (property_exists($data, 'id_atividade'))
				$papelAtividade->setIdAtividade($data->id_atividade);

			if (property_exists($data, 'id_perfil'))
				$papelAtividade->setIdPapel($data->id_perfil);

			$papelAtividade->store();
		//******** Fim - Grava informações na Tabela de Atividade

			$this->cadastrarTreeAtividadeParente($data->id_perfil, $data->id_atividade);

			$id_atividade = $papelAtividade->getIdAtividade();

			$arrMensagem = array('error' => 0, 
				'id_atividade' => $id_atividade,
				'visualizar' => 1, 
				'cadastrar' => 1, 
				'excluir' => 1,  
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}
}                                    

	/*
	Módulo: Mesquita
	Descrição: alterar as permissões da tree view de atividades
	Método: POST
	URL: http://localhost/sig/api/index.php/permissaotreeatividade/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 03/02/2015
	*/
	public function postPermissaoTreeAtividade() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_atividade='] = $data->id_atividade;
		$aSearch['id_papel='] = $data->id_perfil;
		$perfilAtividadeConferir = fRecordSet::build('PapelAtividade', $aSearch);

		try {          
		//******** Alterar informações na Tabela de PapelAtividade
			switch ($data->tipo) {
				case 'VISUALIZAR':
				$perfilAtividadeConferir[0]->setVisualizar($data->valor);
				$mensagem = "Permissão de visualização alterada!";
				break;
				case 'CADASTRAR':
				$perfilAtividadeConferir[0]->setCadastrar($data->valor);
				$mensagem = "Permissão de cadastro alterada!";
				break;
				case 'EXCLUIR':
				$mensagem = "Permissão de exclusão alterada!";
				$perfilAtividadeConferir[0]->setExcluir($data->valor);
				break;
			}

			$perfilAtividadeConferir[0]->store();

		//******** Fim -  Alterar informações na Tabela de PapelAtividade

			$id_atividade = $perfilAtividadeConferir[0]->getIdAtividade();
			$visualizar = $perfilAtividadeConferir[0]->getVisualizar();
			$cadastrar = $perfilAtividadeConferir[0]->getCadastrar();
			$excluir = $perfilAtividadeConferir[0]->getExcluir();

			$arrMensagem = array('error' => 0, 
				'id_atividade' => $id_atividade, 
				'visualizar' => $visualizar, 
				'cadastrar' => $cadastrar, 
				'excluir' => $excluir, 
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Cadastrar e Manipular uma Nova Atividade
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarperfil/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 01/12/2014
	*/

	public function postCadastrarPerfil() {
		$data = json_decode(file_get_contents("php://input"));

		if ($data->id_perfil != ''){
			$papel = new Papel($data->id_perfil);
			$mensagem = "Perfil alterado!";
			$alteracao=1;
		}else{
			$papel = new Papel();
			$mensagem = "Perfil cadastrado!";
			$alteracao=0;
		}

		try {        
		//******** Grava informações na Tabela de PapelAtividade
			if (property_exists($data, 'nome')){
				$papelAnt = '';
				if($alteracao==1){
					$papelAnt = $papel->getNome();
				}
				$this->setAuditoria('Papel', 'Nome', $papelAnt, $data->nome);
				$papel->setNome($data->nome);
			}
			if (property_exists($data, 'descricao')){
				$papelAnt = '';
				if($alteracao==1){
					$papelAnt = $papel->getDescricao();
				}
				$this->setAuditoria('Papel', 'Descricao', $papelAnt, $data->descricao);
				$papel->setDescricao($data->descricao);
			}

			$papel->setIdTipoEntidade($data->id_tipo_entidade);
			$papel->setAtivo(1);
			$papel->store();
		//******** Fim - Grava informações na Tabela de Atividade

			$id_papel = $papel->getId();

			$arrMensagem = array('error' => 0, 'id_papel' => $id_papel, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	} 

	/*
	Módulo: Mesquita
	Descrição: Excluir perfil e os vinculos das atividades
	Método: POST
	URL: http://localhost/sig/api/index.php/excluirperfil/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 01/12/2014
	*/

	public function postExcluirPerfil() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_papel='] = $data->id_perfil;

		$perfilAtividade = fRecordSet::build('PapelAtividade', $aSearch);

		foreach ($perfilAtividade->getRecords() as $key => $value){
			$perfilAtividade[$key]->delete();          
		}

		$aSearch = array();
		$aSearch['id='] = $data->id_perfil;
		$perfil = fRecordSet::build('Papel', $aSearch);

		if($perfil->count()){
			$perfil[0]->delete();          
		}

		$id_perfil = $data->id_perfil;

		$mensagem = "Perfil excluído!";
		$arrMensagem = array('error' => 0, 'id_perfil' => $id_perfil, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastrar e Manipular uma Nova Atividade
	Método: POST
	URL: http://localhost/sig/api/index.php/perfil/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/11/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 25/11/2014
	*/

	public function postAtividade($id_perfil = "",$full = false) {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')){
			$atividade = new Atividade($data->id);
			$mensagem = "Atividade alterada com sucesso!";
		}else{
			$atividade = new Atividade();
			$mensagem = "Atividade incluída com sucesso!";
		}

		try {
		//******** Grava informações na Tabela de Atividade
			if (property_exists($data, 'id_atividade_parent')){
				$atividade->setIdAtividadeParent($data->id_atividade_parent);
			}
			if (property_exists($data, 'id_tipo_entidade')){
				$atividade->setIdTipoEntidade($data->id_tipo_entidade);
			}
			if (property_exists($data, 'nome')){
				$atividade->setNome($data->nome);
			}
			if (property_exists($data, 'descricao')){
				$atividade->setDescricao($data->descricao);
			}
			if (property_exists($data, 'url')){
				$atividade->setUrl($data->url);
			}
			if (property_exists($data, 'show_menu')){
				$atividade->setShowMenu($data->show_menu);
			}
			if (property_exists($data, 'ativo')){
				$atividade->setAtivo($data->ativo);
			}
			$atividade->store();
		//******** Fim - Grava informações na Tabela de Atividade

			$id_atividade = $atividade->getId();
			$arrMensagem = array('error' => 0, 'id_atividade' => $id_atividade, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}    

	public function sendEmail(){

		ini_set("SMTP","smtp.marabraz.com.br");
		ini_set("smtp_port","25");
		$name = 'Rafael';
		$email = new fEmail();
		$email->setFromEmail('rafael.carvalho@marabraz.com.br', 'Frota');
		$email->addRecipient('rafael.carvalho@marabraz.com.br', 'Rafael');
		$email->setSubject('Bem vindo ao SIG!');
		$email->setBody("
			Hello $name,            
			Thanks for submitting your request, well get back to you as soon as we can!            
			", TRUE);
		$email->send();
		var_dump($email);

	}

	/*
	Módulo: Geral
	Descrição: Criar Agenda de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/agendaevento
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 03/12/2014
	Autor: Ricardo Bruno 
	Versão: 1.0
	Data de Alteração: 03/12/2014
	*/

	public function postAgendaEvento(){
		$this->acessoApi();
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$evento = new EventoAgenda($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Agenda alterada com sucesso!";
		}
		else {
			$evento = new EventoAgenda();
			$mensagem = "Agenda incluída com sucesso!";
		}

		if (property_exists($data, 'id_evento')){
			if (strpos($data->id_evento, 'see object') == 1){
				$data->id_evento = null;
			}
			$evento->setIdEvento($data->id_evento);
		} 

		if (property_exists($data, 'titulo')){
			if (strpos($data->titulo, 'see object') == 1){
				$data->titulo = null;
			}
			$evento->setTitulo($data->titulo);
		}

		if (property_exists($data, 'horario')){
			if (strpos($data->horario, 'see object') == 1){
				$data->horario = null;
			}
			$evento->setHorario($data->horario);
		}      

		$evento->setAtivo(1); 

		try {

			$evento->store();

			$id_ata = $evento->getId();

			$arrMensagem = array('error' => 0, 'id_ata' => $id_ata, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}    

	/*
	Módulo: Geral
	Descrição: Obter Lista de Agendas de um evento
	Método: GET
	URL: http://localhost/sig/api/index.php/agendaevento/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/122014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 03/122014
	*/

	public function getAgendaEvento($id_evento = "", $full = false) {

		$aSearch = array();
		if ($id_evento != "") {
			$sql = "SELECT evento_agenda.id, evento_agenda.id_evento, evento_agenda.titulo, evento_agenda.horario, evento_agenda.ativo FROM evento_agenda WHERE id_evento = " . $id_evento;
			//$aSearch['id_evento='] = $id_evento;
		}
		else{
			$sql = "SELECT evento_agenda.id, evento_agenda.id_evento, evento_agenda.titulo, evento_agenda.horario, evento_agenda.ativo FROM evento_agenda";
		}

		$agenda = $this->_getDb()->query($sql);

		//$agenda = fRecordSet::build('EventoAgenda', $aSearch);

		if ($full == false) {

			$aAgenda = array();

			foreach ($agenda as $key => $value) {

				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}         

				$aAgenda[] = array(
					'id' => $value['id'],
					'id_evento' => $value['id_evento'],
					'titulo' => $value['titulo'],
					'horario' => $value['horario'],
					'ativo' => $value['ativo'],
					'status' => $status              
					);
			}

			if (count($aAgenda) == 0) {
				$aAgenda[] = array(
					'mensagem' => "Nenhuma agenda encontrada."
					);
			}

			if (count($aAgenda) == 0) {
				$aAgenda[] = array(
					'id' => -1,
					'mensagem' => "Nenhuma agenda encontrada."
					);
			}

			fJSON::output($aAgenda);
		}
		else {
			return $agenda[0];
		}
	}    

	/*
	Módulo: Mesquita
	Descrição: Exclui uma Agenda de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/delAgendaEvento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 03/12/2014
 */
	public function delAgendaEvento() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		if (property_exists($data, 'id')) {
			$aSearch['id='] = $data->id;
		} else {
			$aSearch['id='] = $data->id;
		}

		$agenda = fRecordSet::build('EventoAgenda', $aSearch);

		$mensagem = "Agenda excluída com sucesso!";        

		try {
			//******** Excluí informações na Tabela de evento_agenda            
			$agenda[0]->delete();
			//******** Fim - Excluí informações na Tabela de departamento_pessoa

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	} 

	/*
	Módulo: Geral
	Descrição: Criar Ata de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/ata
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 02/12/2014
	Autor: Ricardo Bruno 
	Versão: 1.0
	Data de Alteração: 02/12/2014
	*/

	public function postAta(){
		$this->acessoApi();
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$evento = new EventoAta($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Ata alterada com sucesso!";
		}
		else {
			$evento = new EventoAta();
			$mensagem = "Ata incluída com sucesso!";
		}
		if (property_exists($data, 'ata')){
			if (strpos($data->ata, 'see object') == 1){
				$data->ata = null;
			}
			$evento->setAta($data->ata);
		}

		if (property_exists($data, 'id_evento')){
			if (strpos($data->id_evento, 'see object') == 1){
				$data->id_evento = null;
			}
			$evento->setIdEvento($data->id_evento);
		}    

		try {

			$evento->setAtivo(1);           
			$evento->store();

			$id_ata = $evento->getId();

			$arrMensagem = array('error' => 0, 'id_ata' => $id_ata, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter ata de evento
	Método: GET
	URL: http://localhost/sig/api/index.php/ata
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 02/12/2014
	Autor: Ricardo Bruno 
	Versão: 1.0
	Data de Alteração: 02/12/2014
	*/

	public function getAta($id_evento = "", $full = false) {        

		$aSearch = array();
		if ($id_evento != "") {
			//$aSearch['id_evento='] = $id_evento;
			$sql = "SELECT evento_ata.id, evento_ata.id_evento, evento_ata.ata, evento_ata.ativo FROM evento_ata WHERE evento_ata.id_evento = " . $id_evento;
		}
		else{
			$sql = "SELECT evento_ata.id, evento_ata.id_evento, evento_ata.ata, evento_ata.ativo FROM evento_ata";
		}

		$evento = $this->_getDb()->query($sql);

		//$evento = fRecordSet::build('EventoAta', $aSearch);

		$aEvento = array();

		if (count($evento) == 0) {
			$aEvento[] = array(
				'error' => "-1",
				'mensagem' => "Nenhuma ata encontrada."
				);
		} else {
			foreach ($evento as $key => $value) {

				$aEvento[] = array(                
					'id' => $value['id'],
					'id_evento' => $value['id_evento'],
					'ata' => $value['ata'],
					'ativo' => $value['ativo'],
					);

			}
		}

		if ($full == false) {
			fJSON::output($aEvento);
		}
		else {
			return $aEvento;
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Obter lista de evento
	Método: GET
	URL: http://localhost/sig/api/index.php/lista/<lista>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 04/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 04/12/2014
	*/

	public function getLista($id_lista = "", $full = false) {        
		
		$strQuerypessoa = "SELECT * FROM pessoa";
		$pessoa = $this->_getDb()->query($strQuerypessoa);

		$aPessoa = array();

		foreach ($pessoa as $key => $value) {

			$aPessoa[$value['id']] = array(                
				'id_pessoa' => $value['id'],
				'nome' => $value['nome'],
				'ocupacao' => $value['ocupacao'],
				'empresa' => $value['empresa'],
				);

		}
		
		$strQuerylistaPessoa = "SELECT * FROM lista_pessoa";
		$listaPessoa = $this->_getDb()->query($strQuerylistaPessoa);

		$aListaPessoa = array();

		foreach ($listaPessoa as $key => $value) {

			$aListaPessoa[] = array(                
				'id_lista' => $value['id_lista'],
				'id_pessoa' => $value['id_pessoa'],
				'nome' => $aPessoa[$value['id_pessoa']]['nome'],
				'ocupacao' => $aPessoa[$value['id_pessoa']]['ocupacao'],
				'empresa' => $aPessoa[$value['id_pessoa']]['empresa'],
				);

		}

		$aSearch = "";
		if ($id_lista != "") {
			$aSearch .= ' and id =' . $id_lista;
		}

		$strQuerylista = "SELECT * FROM lista WHERE 1 ".$aSearch;
		$lista = $this->_getDb()->query($strQuerylista);

		$aLista = array();

		if ($lista->countReturnedRows() == 0) {
			$aLista[] = array(
				'error' => "-1",
				'mensagem' => "Nenhuma lista encontrada."
				);
		} else {
			foreach ($lista as $key => $value) {

				$convidados = array();

				foreach ($aListaPessoa as $key2 => $value2) {

					if($value2['id_lista'] == $value['id']) {
						$convidados[] = array(
							'id_pessoa' => $value2['id_pessoa'],
							'id_lista' => $value2['id_lista'],
							'nome' => $value2['nome'],
							'ocupacao' => $value2['ocupacao'],
							'empresa' => $value2['empresa'],
							);
					}
				}

				$aLista[] = array(                
					'id' => $value['id'],
					'nome' => $value['nome'],
					'descricao' => $value['descricao'],
					'convidados' => $convidados,
					);
			}
		}

		if ($full == false) {
			fJSON::output($aLista);
		}
		else {
			return $aLista;
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Excluir lista e convidados
	Método: POST
	URL: http://localhost/sig/api/index.php/excluirlista/<excluirlista>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/12/2014
	Autor: Fabio
	Versão: 1.0
	Data de Alteração: 09/12/2014
	*/

	public function delExcluirLista($id_lista = "",$full = false) {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_lista='] = $data->id;

		try {
		//******** Exclui registros da Tabela de ListaPessoas e Lista
			$listaPessoa = fRecordSet::build('ListaPessoa', $aSearch);

			foreach ($listaPessoa->getRecords() as $key => $value){
				$listaPessoa[$key]->delete();          
			}

			$lista = new Lista($data->id);
			$lista->delete();          
		//******** Fim - Exclui registros da Tabela de ListaPessoas e Lista

			$arrMensagem = array('error' => 0, 'mensagem' => "Lista excluída com sucesso");
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}             
	
	/*
	Módulo: Mesquita
	Descrição: Cadastrar e Manipular uma Nova Lista
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarlista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 09/12/2014
	*/

	public function postLista() {
		$data = json_decode(file_get_contents("php://input"));

		if($data->id){
			$lista = new Lista($data->id);
			$mensagem = "Lista alterada com sucesso!";
			$alteracao = 1;
		} else {
			$lista = new Lista();
			$mensagem = "Lista incluida com sucesso!";
			$alteracao = 0;
		}

		try {          
		//******** Grava informações na Tabela de Lista
			if (property_exists($data, 'nome')){
				$listaAnt = '';
				if($alteracao==1){
					$listalAnt = $lista->getNome();
				}
				$this->setAuditoria('Lista', 'Nome', $listaAnt, $data->nome);
				$lista->setNome($data->nome);
			}

			if (property_exists($data, 'descricao')){
				$listaAnt = '';
				if($alteracao==1){
					$listalAnt = $lista->getDescricao();
				}
				$this->setAuditoria('Lista', 'Descrição', $listaAnt, $data->descricao);
				$lista->setDescricao($data->descricao);
			}


			$lista->store();
		//******** Fim - Grava informações na Tabela de Lista
			$id_lista = $lista->getId();

			$arrMensagem = array('error' => 0, 'id_lista' => $id_lista, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		} catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Geral
	Descrição: Obtém nome do associado beneficente
	Método: GET
	URL: http://localhost/sig/api/index.php/pessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/03/2015
	Autor: Thiago Mallon
	Versão: 1.0	
	Descrição: Busca associado beneficente
	*/
	
	public function getPessoaBeneficente($id_beneficiario){				
		
		$beneficiario = fRecordSet::build('Beneficiario', array('id_pessoa_beneficiario=' => $id_beneficiario));

		if(count($beneficiario->getRecords())>0){

			$beneficiarioRes = $beneficiario->getRecord(0);			

			$beneficente = fRecordSet::build('Pessoa', array('id='=> $beneficiarioRes->getIdPessoa()));
			$beneficenteRes = $beneficente->getRecord(0);			

			$aBeneficiario[] = array(
				'id' => $beneficenteRes->getId(),
				'nome' => $beneficenteRes->getNome()		
				);

			return $aBeneficiario;
		}
	}
	
	/*
	Módulo: Geral
	Descrição: Obter Lista de Pessoas por Tipo (1=Associado, 2=Beneficiario, 3=Funcionario, 4=Parentesco, 5=Proprietario)
	Método: GET
	URL: http://localhost/sig/api/index.php/consultapessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/10/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 24/10/2014
	Data de Alteração: 19/03/2015
	Autor: Ricardo S. Nakadomari
	Descrição: Adição da busca por funcionário de escola
	*/

	public function getConsultaPessoa($tipo = "", $full="") {
		$this->acessoApi();
		$aSearch = "";
		$userSes = fSession::get('user');

		if ($tipo!="") { 
			switch ($tipo) {
				case '1':
					$aSearch .= ' and associado = 1';			
					break;
				case '2':
					$aSearch .= ' and beneficiario = 1';			
					break;              
				case '3':
					$aSearch .= ' and parentesco = 1';			
					break;
				case '4':
					$userSes = fSession::get('user');
					$aSearch .= ' and id_entidade='. $userSes['user']['entidadePessoa'];					
					$strQueryentidadePessoa = "SELECT * FROM entidade_pessoa WHERE 1 ".$aSearch;
					$entidadePessoa = $this->_getDb()->query($strQueryentidadePessoa);
					$aEntidadePessoa = array();

					foreach ($entidadePessoa as $key => $value) {          
						array_push($aEntidadePessoa, $value['id_pessoa']);
					}

					$entidadePessoa = $this->_getDb()->close();

					$aSearch .= " and id in('". $aEntidadePessoa."')";				
					break;  
				case '5':
					$aSearch .= ' and proprietario = 1';							
					break;  
				case '6':
					$aSearch .= ' and donatario = 1';			
					break;  
				case '7':
					$aSearch .= ' and associado = 0';
					$aSearch .= ' and beneficiario = 0';
					$aSearch .= ' and parentesco = 0';
					$aSearch .= ' and funcionario = 0';
					$aSearch .= ' and proprietario = 0';
					$aSearch .= ' and donatario = 0';
					$aSearch .= ' and fornecedor = 0';				
					break; 
				case '8':
					$aSearch .= ' and fornecedor = 1';			
					break;                                                                               
				case '9':  													
					$aSearch .= ' and associado=1 or beneficiario=1';														
					break;                                                                               
				case '10': //busca apenas alunos
					$aSearch .= ' and aluno=1';			
					break;
				case '11': //busca apenas entidade
					$aSearch .= ' and entidade=1';
					break;				
				case '13': //busca apenas entidade
					$aSearch .= ' and associado = 0';
					$aSearch .= ' and beneficiario = 0';
					$aSearch .= ' and parentesco = 1';
					break;
				case '14':
					$aSearch .= ' and (associado=1 or parentesco=1 or donatario=1';
					break;
				case '15': //busca apenas entidade
					$aSearch .= ' and padrinho=1';
					break;
				case '16': //exibe tudo menos donatario
					$aSearch .= ' and donatario = 0';
					break;									
			}

			if ($tipo == 12) {				
				$strQuerypessoa = "SELECT pessoa.* FROM pessoa LEFT JOIN entidade_pessoa ON pessoa.id=entidade_pessoa.id_pessoa WHERE pessoa.funcionario = 1 AND entidade_pessoa.id_entidade=".$userSes['user']['entidadePessoa'];
				$pessoa = $this->_getDb()->query($strQuerypessoa);

			}else{
				$strQuerypessoa = "SELECT * FROM pessoa WHERE 1 ".$aSearch;
				$pessoa = $this->_getDb()->query($strQuerypessoa);
			}
		}

		
		$aPessoa = array();

		foreach ($pessoa as $key => $value) {
			//Obtem Estado Civil
			$estado_civil = new EstadoCivil($value['id_estado_civil']);
			//Obtem Nome do Tipo de Pessoa
			$resultTipoPessoa = new TipoPessoa($value['id_tipo_pessoa']);

			//Obtem Motivo de Bloqueio
			if ($value['id_motivo_bloqueio'] != null) {
				$resultMotivoBloqueio = $this->getMotivoBloqueio($value['id_motivo_bloqueio'], true);
				$motivo = $resultMotivoBloqueio->getDescricao();
			} else {
				$motivo = "";
			}

			$resultEnderecoPessoa = $this->getEnderecoPessoa($value['id'], "", true);
			$cidade = '';
			$estado = '';
			if ($resultEnderecoPessoa['error'] == 0) {
				$cidade = $resultEnderecoPessoa['endereco']['0']['cidade'];
				$estado = $resultEnderecoPessoa['endereco']['0']['estado'];
			}

			//Lista Documentos da Pessoa
			$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value['id'], "", true, 1);
			if (strlen($resultDocumentoPessoaRG[0]["mensagem"]) > 0) {
				$rg = "";
			} else {
				$rg = $resultDocumentoPessoaRG[0]["numero"];
			}

			$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value['id'], "", true, 2);

			if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
				$cpf = "";
			}
			else {
				$cpf = self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
				//$cpf = $resultDocumentoPessoaCPF[0]["numero"];
			}
			if(!preg_match('/[0-9]/',$cpf)){
				$cpf = '';
			}

			$resultDocumentoPessoaRNE = $this->getDocumentoPessoa($value['id'], "", true, 3);
			if (strlen($resultDocumentoPessoaRNE[0]["mensagem"]) > 0) {
				$rne = "";
			}
			else {
				$rne = $resultDocumentoPessoaRNE[0]["numero"];
			}

			$resultDocumentoPessoaPassaporte = $this->getDocumentoPessoa($value['id'], "", true, 4);
			if (strlen($resultDocumentoPessoaPassaporte[0]["mensagem"]) > 0) {
				$passaporte = "";
			}
			else {
				$passaporte = $resultDocumentoPessoaPassaporte[0]["numero"];
			}

			$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value['id'], "", true, 5);
			if (strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
				$cnpj = "";
			}
			else {
				$cnpj = self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
				//$cnpj = $resultDocumentoPessoaCnpj[0]["numero"];
			}

			$resultDocumentoPessoaIE = $this->getDocumentoPessoa($value['id'], "", true, 6);
			if (strlen($resultDocumentoPessoaIE[0]["mensagem"]) > 0) {
				$inscricaoEstadual = "";
			}
			else {
				$inscricaoEstadual = $resultDocumentoPessoaIE[0]["numero"];
			}

			$resultDocumentoPessoaIdentificacaoInternacional = $this->getDocumentoPessoa($value['id'], "", true, 7);
			if (strlen($resultDocumentoPessoaIdentificacaoInternacional[0]["mensagem"]) > 0) {
				$identificacao_internacional = "";
			}
			else {
				$identificacao_internacional = $resultDocumentoPessoaIdentificacaoInternacional[0]["numero"];
			}

			//Lista Contribuicao da Pessoa
			$resultContribuicaoPessoa = $this->getContribuicaoPessoa($value['id'], true);
			$contribuicaovalor = 'Isento';
			if($resultContribuicaoPessoa[0]['error'] != -1){
				$contribuicaovalor = $resultContribuicaoPessoa[0]['valor'];
			}
			
			//Obtem dados do Usuário   
			$dataAssociacao = '';
			$dataCadastro = '';
			$dataDesligamento = '';
			$dataNascimento = '';

			if ($value['data_associacao'] != null) {
				$dataAssociacao = date("d/m/Y", strtotime($value['data_associacao']));
			}
			if ($value['data_cadastro'] != null) {
				$dataCadastro = date("d/m/Y", strtotime($value['data_cadastro']));
			}
			if ($value['data_nascimento'] != null) {
				$dataNascimento = date("d/m/Y", strtotime($value['data_nascimento']));
			}
			if ($value['data_desligamento'] != null) {
				$dataDesligamento = date("d/m/Y", strtotime($value['data_desligamento']));
			}
							
			$id_funcao = "";
			$funcao = "";
			if ( $value['id_funcao'] > 0 ){
				$resultFuncao = $this->getFuncao(1, $value['id_funcao'], "", true);
				foreach ($resultFuncao->getRecords() as $keyFuncao => $valueFuncao) {
					$id_funcao = $valueFuncao->getId();
					$funcao = $valueFuncao->getDescricao();
				}
			}

			$tipo = "";
			//Trata Tipos
			if ($value['associado'] == 1) {
				$tipo = "Associado";
			}
			else if ($value['funcionario'] == 1) {
				$tipo = "Funcionário";
			}
			else if ($value['beneficiario'] == 1) {
				$tipo = "Beneficiário";
			}
			else if ($value['parentesco'] == 1) {
				$tipo = "Parente";
			}

			if (strlen($cpf)==0) {
				$cpf = $cnpj;
			}

			$ativobol = false;
			if($value['ativo'] == 1){
				$ativobol = true;          
			}

			$resultBeneficiarios = $this->getBeneficiarioPessoa($value['id'], true);
			$resultSocios = $this->getSocioPessoa($value['id'], true);

			$id_beneficente = '';
			$beneficente = '';
			if($tipo == 'Parente'){
				$beneficenteRes = $this->getPessoaBeneficente($value['id']);
				if(count($beneficenteRes) > 0){
					$id_beneficente = $beneficenteRes[0]['id'];
					$beneficente = $beneficenteRes[0]['nome'];
				}
			}

			/* FRH - Somente funcionários da escola */					
			$aPesqEnt = "";				
			$aPesqEnt .= ' and id_pessoa='. $value['id'];					
			$strQueryentidadePessoa = "SELECT * FROM entidade_pessoa WHERE 1 ".$aPesqEnt;
			$entidadePessoa = $this->_getDb()->query($strQueryentidadePessoa);
			$aEntidadePessoa = array();

			if ($entidadePessoa->countReturnedRows() > 0) 
			{ 
				$idEntRow = $entidadePessoa->fetchRow();	
				$idEnt = $idEntRow['id_entidade']; 
			}
			else
			{
				$idEnt = '';
			}

			$entidadePessoa = $this->_getDb()->close();

			$token = '';
			$login = '';
			$senha = '';

			$resultUsuario = $this->getUsuario(0, $value['id'], true);

			if($resultUsuario['error'] == 0){
				$token = $resultUsuario['usuario']['0']['token'];
				$login = $resultUsuario['usuario']['0']['login'];
				$senha = $resultUsuario['usuario']['0']['senha'];
			}

			$aTel =  ' and id_pessoa=' . $value['id'];
			$aTel .= ' and id_tipo_telefone=3';

			$strQuerytelPessoa = "SELECT * FROM telefone WHERE 1 ".$aTel;
			$telPessoa = $this->_getDb()->query($strQuerytelPessoa);

			$celular='';
			foreach ($telPessoa as $keyTel => $valueTel) {
				$celular = $valueTel['numero'];
			}

			$telPessoa = $this->_getDb()->close();

			$aPessoa[] = array(
				'id' => $value['id'],
				'id_entidade' => $idEnt,
				'nome' => $value['nome'],
				'id_motivo_bloqueio' => $value['id_motivo_bloqueio'],
				'motivo_bloqueio' => $motivo,
				'id_estado_civil' => $estado_civil->getId(),
				'estado_civil' => $estado_civil->getDescricao(), 
				'id_tipo_pessoa' => $value['id_tipo_pessoa'],
				'tipo_pessoa' => $resultTipoPessoa->getDescricao(),
				'apelido' => $value['apelido'],
				'nome_tradicao' => $value['nome_tradicao'],
				'data_nascimento' => $dataNascimento,
				'nacionalidade' => $value['nacionalidade'],
				'naturalidade' => $value['naturalidade'],
				'sexo' => $value['sexo'],
				'empresa' => $value['empresa'],
				'ocupacao' => $value['ocupacao'],
				'login' => $login,
				'senha' => $senha,
				'telefone_celular' => $celular,
				'email' => $value['email'],
				'foto' => $value['foto'],
				'data_associacao' => $dataAssociacao,
				'token' => $token,
				'associado' => $value['associado'],
				'beneficiario' => $value['beneficiario'],
				'parentesco' => $value['parentesco'],
				'donatario' => $value['donatario'],
				'funcionario' => $value['funcionario'],
				'ativo' => $value['ativo'],
				'ativobol' => $ativobol,
				'data_cadastro' => $dataCadastro,
				'endereco' => $resultEnderecoPessoa,
				'cidade' => $cidade,
				'estado' => $estado,
				'rg' => $rg,
				'cpf' => $cpf,
				'rne' => $rne,
				'passaporte' => $passaporte,
				'identificacao_internacional' => $identificacao_internacional,
				'cnpj' => $cnpj,
				'inscricaoEstadual' => $inscricaoEstadual,
				'contribuicao' => $resultContribuicaoPessoa,
				'contribuicaovalor' => $contribuicaovalor,
				'beneficiarios' => $resultBeneficiarios,
				'sociosSel' => $resultSocios,
				'data_desligamento' => $dataDesligamento,
				'observacao' => $value['observacao'],
				'tipo' => $tipo,
				'id_funcao' => $id_funcao,
				'funcao' => $funcao,
				'id_beneficente' => $id_beneficente,							
				'beneficente' => $beneficente,							
			);
		}

		if (count($aPessoa) == 0) {
			$aPessoa = array(
				'error' => -1,
				'mensagem' => "Nenhuma pessoa encontrada."
				);
			fJSON::output($aPessoa);
			die();
		}

		$aPessoa = array(
			'error' => -0,
			'pessoa' => $aPessoa
		);

		if ($full == false) {
			fJSON::output($aPessoa);
		} else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar Lista com convidados
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarlistapessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/12/2014
	*/

	public function postListaPessoa() {
		$data = json_decode(file_get_contents("php://input"));

		$listaPessoa = new ListaPessoa();
		$mensagem = "Convidado incluído na lista com sucesso!";

		try {          
		//******** Grava informações na Tabela de Lista
			if (property_exists($data, 'id_lista'))
				$listaPessoa->setIdLista($data->id_lista);

			if (property_exists($data, 'id_pessoa'))
				$listaPessoa->setIdPessoa($data->id_pessoa);

			$listaPessoa->store();
		//******** Fim - Grava informações na Tabela de Lista
			$id_lista_pessoa = $listaPessoa->getId();

			$arrMensagem = array('error' => 0, 'id_lista_pessoa' => $id_lista_pessoa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Exclui convidados da lista
	Método: POST
	URL: http://localhost/sig/api/index.php/excluirlistapessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/12/2014
	*/

	public function delListaPessoa() {
		$data = json_decode(file_get_contents("php://input"));

		try {          
		//******** excluir convidados da Lista
			$aSearch = array();
			if (property_exists($data, 'id_pessoa')){
				$aSearch['id_pessoa='] = $data->id_pessoa;
			}

			if (property_exists($data, 'id_lista')){
				$aSearch['id_lista='] = $data->id_lista;
			}

			$listaPessoa = fRecordSet::build('ListaPessoa', $aSearch);
			$mensagem = "Convidado excluído da lista com sucesso!";
			$listaPessoa[0]->delete();

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Exclui todos os convidados da lista
	Método: POST
	URL: http://localhost/sig/api/index.php/excluirlistapessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 15/12/2014
	*/

	public function limparListaPessoa() {
		$data = json_decode(file_get_contents("php://input"));

		try {          
		//******** excluir convidados da Lista
			$aSearch['id_lista='] = $data->id;

			$listaPessoa = fRecordSet::build('ListaPessoa', $aSearch);
			$mensagem = "Todos os convidados foram excluídos da lista com sucesso!";

			foreach ($listaPessoa->getRecords() as $key => $value){
				$listaPessoa[$key]->delete();
			}

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na exclusão, verifique se todos os convidados foram excluídos.");
			fJSON::output($arrMensagem);
			die();
		}
	}
	
	/*
	Módulo: Mesquita
	Descrição: Obter lista de Pessoa que não esta em um determinado evento
	Método: GET
	URL: http://localhost/sig/api/index.php/listapessoa/<lista>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 11/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 11/12/2014
	*/

	public function getListaPessoa($id_lista = "", $full = false) {        

		$aSearch = "";

		if($id_lista != ''){
			$aSearch = ' and id_lista = ' . $id_lista;
		}
		
		$strQuerylistaPessoa = "SELECT * FROM lista_pessoa WHERE 1 ".$aSearch;
		$listaPessoa = $this->_getDb()->query($strQuerylistaPessoa);

		$aListaPessoa = array();

		foreach ($listaPessoa as $key => $value) {

			$aListaPessoa[$value['id_pessoa']] = array(                
				'id_lista' => $value['id_lista'],
				'id_pessoa' => $value['id_pessoa'],
				);

		}

		$strQuerycategoria = "SELECT * FROM categoria_naoassociado";
		$categoria = $this->_getDb()->query($strQuerycategoria);
		$aCategoria = array();

		foreach ($categoria as $key => $value) {

			$aCategoria[$value['id']] = array(                
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				);

		}

		$strQuerypessoa = "SELECT * FROM pessoa";
		$pessoa = $this->_getDb()->query($strQuerypessoa);
		$aPessoa = array();

		foreach ($pessoa as $key => $value) {
			$id_pessoa = '';
			$id_lista = '';
			if (array_key_exists($value['id'], $aListaPessoa)) {
				$id_pessoa = $aListaPessoa[$value['id']]['id_pessoa'];
				$id_lista = $aListaPessoa[$value['id']]['id_lista'];
			}

			if($value['id'] != $id_pessoa){
				$campoCategoria = '';
				if($value['id_categoria_naoassociado'] != null){
					$campoCategoria = $aCategoria[$value['id_categoria_naoassociado']]['descricao'];
				}

				$empresa = '';
				if($value['empresa'] != null){
					$empresa = $value['empresa'];
				}

				$ocupacao = '';
				if($value['ocupacao'] != null){
					$ocupacao = $value['ocupacao'];
				}

				$aPessoa[] = array(
					'id' => $value['id'],
					'nome' => $value['nome'],
					'ocupacao' => $ocupacao,
					'empresa' => $empresa,
					'lista' => $id_lista,
					'categoria' => $campoCategoria,
					);
			}

		}

		if ($full == false) {
			fJSON::output($aPessoa);
		}
		else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Categorias
	Método: GET
	URL: http://localhost/sig/api/index.php/categoria/<id_tipo_lancamento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 15/12/2014
	*/

	public function getCategoria($idTipoLancamento = "", $id="", $full = false) {

		$this->acessoApi();

		$user = fSession::get('user');
		$id_entidade = $user['user']['idTipoEntidade'];

		$var_query = "";

		$aSearch = array();
		if ($id != "") {
			$var_query = "SELECT categoria.id, categoria.id_tipo_lancamento, categoria.descricao, categoria.id_entidade, categoria.ativo FROM categoria WHERE categoria.id = ".$id." AND categoria.id_entidade = ".$id_entidade." ORDER BY categoria.descricao asc";
		}  

		if (($idTipoLancamento != "") && ($id=="")) {
			$var_query = "SELECT categoria.id, categoria.id_tipo_lancamento, categoria.descricao, categoria.ativo FROM categoria WHERE categoria.id_tipo_lancamento = ".$idTipoLancamento." AND categoria.id_entidade = ".$id_entidade." ORDER BY categoria.descricao asc";
		} else {
			$var_query = "SELECT categoria.id, categoria.id_tipo_lancamento, categoria.descricao, categoria.ativo FROM categoria WHERE categoria.id_tipo_lancamento = 1 AND categoria.id_entidade = ".$id_entidade." ORDER BY categoria.descricao asc";			
		}

		$categoria = $this->_getDb()->query($var_query);

		//$categoria = fRecordSet::build('Categoria', $aSearch, array('descricao' => 'asc'));
		
			$aCategoria = array();

			if (($idTipoLancamento != "") && ($id=="")) {
				$aCategoria[] = array('tipo'=>"Ação",
					'id' => "-1",
					'id_tipo_lancamento' => "",
					'tipo_lancamento' => "",
					'descricao' => ":: Cadastrar Nova Categoria",
					'ativo' => ""
					);   
			}      

			foreach ($categoria as $key => $value) {

				//$resultTipoLancamento = $this->getTipoLancamento($value['id_tipo_lancamento'], true);

				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}        

				$aCategoria[] = array(
					'tipo' => "Categoria",
					'id' => $value['id'],
					'id_tipo_lancamento' => $value['id_tipo_lancamento'],
					//'tipo_lancamento' => $resultTipoLancamento['descricao'],
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' => $status
					);
			}

			if (count($aCategoria) == 0) {
				$aCategoria[] = array('error' => -1, 'mensagem' => "Nenhuma categoria encontrada.");
				fJSON::output($aCategoria);
				die();
			}

			$aCategoria = array(
				'error' => 0,
				'categoria' => $aCategoria
				);          

		if ($full == false) {

			fJSON::output($aCategoria);
		}
		else {
			return $aCategoria;
		}
	}    

	/*
	Módulo: Mesquita
	Descrição: Cadastrar todas as pessoas de uma busca na lista de convidados
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarsellistapessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/12/2014
	*/

	public function postSelListaPessoa() {
		$data = json_decode(file_get_contents("php://input"));

	//$data['id_lista']
	//$data['selecionados']
		$selecionados = $data->selecionados;    
		$mensagem = "Todos os convidados selecionados foram incluídos na lista com sucesso!";

		try { 

			foreach ($selecionados as $value) {         
				$listaPessoa = new ListaPessoa();

		//******** Grava informações na Tabela de Lista
				if (property_exists($data, 'id_lista')){
					$listaPessoa->setIdLista($data->id_lista);  
				}

				if (property_exists($value, 'id')){
					$listaPessoa->setIdPessoa($value->id);  
				}

				$listaPessoa->store();
		//******** Fim - Grava informações na Tabela de Lista
			}


			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão, verifique se todos os convidados foram incluídos.");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Geral
	Descrição: Pegar o resumo financeiro para o mês selecionado
	Método: GET
	URL: /resumofinanceiro(/)(:periodo)(/)(:flgFull)
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 15/12/2014
	Autor: Rafael Frota Carvalho
	Versão: 1.0
	Data de Alteração: 15/12/2014
	*/

	/**/
	public function getResumoFinanceiro($periodo = "", $conta = 1, $full = false) {        

		$this->acessoApi();

		$userSes = fSession::get('user');

		$aSearch = array();    
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];

		$contaBancaria = fRecordSet::build('ContaBancaria', $aSearch);
		$aIdContaBancaria = array();
		foreach ($contaBancaria->getRecords() as $key => $value) {
			$aIdContaBancaria[$key] = $value->getId();

		}

		if(count($aIdContaBancaria)>0){

			$aPeriodo = explode('-', $periodo);    
			$ultimo_dia = date("t", mktime(0,0,0, $aPeriodo[1], '01', $aPeriodo[0]));

			$dataInicio = $aPeriodo[0].'-'.$aPeriodo[1].'-01';    
			$dataFinal = $aPeriodo[0].'-'.$aPeriodo[1].'-'.$ultimo_dia;

			$aDias = array();
			$aResumoDias = array();
			$aResumoAll = array();
			$creditosRealizados = 0;
			$creditos = 0;
			$despesaFixa = 0;
			$debitosRealizados = 0;
			$despesaVariavel = 0;
			$debitos = 0;

			$sql = "SELECT
						c.id,							 c.descricao,			  	 				c.ativo,
						COALESCE(c.valor, 0) as valor,	 COALESCE(c.valor_final, 0) as valor_final, c.data_lancamento,
						c.numero_documento,				 c.data_pagamento,		  	 				c.data_vencimento,
						c.id_situacao,					 s.descricao as situacao, 	 				c.id_tipo_lancamento,
						tl.descricao as tipo_lancamento, c.id_categoria,		  	 				ct.descricao as categoria,
						c.id_centro_custo,		  	 	 cc.descricao as centro_custo,
						c.juros,						 c.multa,				  	 				c.desconto,
						c.id_pessoa,					 p.nome as pessoa, 		  	 				c.id_centro_custo,
						c.id_conta_bancaria
					FROM caixa c
						LEFT JOIN pessoa p on p.id = c.id_pessoa
						LEFT JOIN conta_bancaria cb on cb.id = c.id_conta_bancaria
						LEFT JOIN situacao s on c.id_situacao = s.id
						LEFT JOIN tipo_lancamento tl on c.id_tipo_lancamento = tl.id
						LEFT JOIN categoria ct on c.id_categoria = ct.id
						LEFT JOIN centro_custo cc on c.id_centro_custo = cc.id
					WHERE cb.id_entidade = " .$userSes['user']['entidadePessoa'] ."
						and c.id_tipo_lancamento <> 6
						and c.data_vencimento between '" .$dataInicio ."' and '" .$dataFinal ."'
						and c.ativo = 1
					ORDER BY 
						data_vencimento, id
					ASC";


			$db = $this->_getDb()->query($sql);

			foreach ($db as $key => $value) {
				//Recebimentos + Doações
				if ($value['id_tipo_lancamento'] == 1 || $value['id_tipo_lancamento'] == 7){
					if($value['id_situacao'] == 6){
						$creditosRealizados+= $value['valor'];
					}
					$creditos+= $value['valor'];
				}else{
					if($value['id_tipo_lancamento'] == 2){
						$despesaFixa+= $value['valor'];
					}
					if($value['id_situacao'] == 2){
						$debitosRealizados+= $value['valor'];
					}
					if($value['id_tipo_lancamento'] == 3){
						$despesaVariavel+= $value['valor'];
					}
					$debitos+= $value['valor'];
				}

				$aData = explode('-', $value['data_vencimento']);
				$aDias[] =  $value['data_vencimento'];
				$value['data_vencimento_formatada'] = implode('/', array_reverse($aData));
				$aResumoAll[] = $value;
				$aResumoDias[$aData[2]][] = $value;
			}
			
			$aDias = array_unique($aDias);

			$db = $this->_getDb()->close();
			//}

			$periodo_anterior =  date('Y-m-d', strtotime('-1 months', strtotime(date($periodo))));
			$data_anterior = explode('-', $periodo_anterior);
			$ultimo_dia_anterior = date("t", mktime(0,0,0, $data_anterior[1], '01', $data_anterior[0]));

			$aSearch = array();    
			$data_inicio_anterior = $data_anterior[0].'-'.$data_anterior[1].'-01';    
			$data_final_anterior = $data_anterior[0].'-'.$data_anterior[1].'-'.$ultimo_dia_anterior;        
			$id_conta_bancaria = $aIdContaBancaria[0];    

			$sql = "SELECT
						(SELECT COALESCE(sum(c1.valor), 0) FROM caixa c1
										 WHERE 
											c1.id_conta_bancaria = " .$id_conta_bancaria ."
											and c1.id_tipo_lancamento = 2
											and c1.data_vencimento between '" .$data_inicio_anterior ."' and '" .$data_final_anterior ."') as despesaFixa_anterior,
						(SELECT COALESCE(sum(c2.valor), 0) FROM caixa c2
										 WHERE 
											c2.id_conta_bancaria = " .$id_conta_bancaria ."
											and c2.id_tipo_lancamento = 3
											and c2.data_vencimento  between '" .$data_inicio_anterior ."' and '" .$data_final_anterior ."') as despesaVariavel_anterior,
						(SELECT COALESCE(sum(c3.valor), 0) FROM caixa c3
										 WHERE 
											c3.id_conta_bancaria = " .$id_conta_bancaria ."
											and c3.id_tipo_lancamento not in (1,7)
											and c3.data_vencimento  between '" .$data_inicio_anterior ."' and '" .$data_final_anterior ."') as debitos_anterior,
						COALESCE(sum(c.valor), 0) as creditos_anterior
					FROM caixa c
					WHERE 
						c.id_conta_bancaria = " .$id_conta_bancaria ."
						and c.id_tipo_lancamento in (1,7)
						and c.data_vencimento between '" .$data_inicio_anterior ."' and '" .$data_final_anterior ."'";

			$dbCount = $this->_getDb()->query($sql);

			foreach ($dbCount as $key => $value) {
					$creditos_anterior = $value['creditos_anterior'];
					$despesaFixa_anterior = $value['despesaFixa_anterior'];
					$despesaVariavel_anterior = $value['despesaVariavel_anterior'];
					$debitos_anterior = $value['debitos_anterior'];
			}

			$dbCount = $this->_getDb()->close();


			//----------------------------------------------------------------------------------
			// FRH - Cálculo dos percentuais
			//----------------------------------------------------------------------------------

			$sqlq = "SELECT
					 TRUNCATE(COALESCE((y.recebimentos*100)/y.total,0),0) perc_recebimento,
				 	 TRUNCATE(COALESCE((y.saidas_totais*100)/y.total,0),0) perc_saidas_totais,
					 TRUNCATE(COALESCE((y.despesas_variaveis*100)/y.total,0),0) perc_despesas_variaveis,
					 TRUNCATE(COALESCE((y.despesas_fixas*100)/y.total,0),0) perc_despesas_fixas,
					 TRUNCATE(COALESCE(y.fechamento,0),0) fechamento
					 FROM(SELECT 
					 x.recebimentos + x.saidas_totais total,
					 x.recebimentos - x.saidas_totais fechamento,
					 x.recebimentos,
					 x.saidas_totais,
					 x.despesas_variaveis,
					 x.despesas_fixas
					 FROM(SELECT 
					 SUM(CASE WHEN c.id_tipo_lancamento IN(1,7) THEN c.valor ELSE 0 END) recebimentos,
					 SUM(CASE WHEN c.id_tipo_lancamento NOT IN(1,7) THEN c.valor ELSE 0 END) saidas_totais,
					 SUM(CASE WHEN c.id_tipo_lancamento = 3 THEN c.valor ELSE 0 END) despesas_variaveis,
					 SUM(CASE WHEN c.id_tipo_lancamento = 2 THEN c.valor ELSE 0 END) despesas_fixas
					 FROM caixa c
					 WHERE c.data_vencimento BETWEEN ADDDATE(LAST_DAY(SUBDATE('".$periodo."', INTERVAL 2 MONTH)), 1) 
					 AND LAST_DAY(ADDDATE(LAST_DAY(SUBDATE('".$periodo."', INTERVAL 2 MONTH)), 1))
					 AND c.ativo=1 AND (SELECT id_entidade FROM conta_bancaria WHERE id=c.id_conta_bancaria) = ".$userSes['user']['entidadePessoa'].")x)y;";
		
			$percentuais = array();
			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $value){ $percentuais[] = $value; }
			$rs = $this->_getDb()->close();
			//----------------------------------------------------------------------------------

			$aResumo = array(
				'dias' => $aDias,      
				'debitos' => $debitos,      
				'debitosRealizados' => $debitosRealizados,      
				'creditos' => $creditos,      
				'creditosRealizados' => $creditosRealizados,    
				'despesaFixa' => $despesaFixa,      
				'despesaVariavel' => $despesaVariavel,  
				'debitos_anterior' => $debitos_anterior,      
				'creditos_anterior' => $creditos_anterior,      
				'despesaFixa_anterior' => $despesaFixa_anterior,      
				'despesaVariavel_anterior' => $despesaVariavel_anterior,  
				'resumo' => $aResumoDias,      
				'resumoAll' => $aResumoAll,
				'percentuais' => $percentuais
				);

			if ($full == false) {
				fJSON::output($aResumo);
			}
			else {
				return $aResumo;
			}

		} //count conta bancaria>0
	} /**/

	/*
	public function getResumoFinanceiro($periodo = "", $conta = 1, $full = false) {        

		$this->acessoApi();

		$userSes = fSession::get('user');

		$aSearch = array();    
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		
		$contaBancaria = fRecordSet::build('ContaBancaria', $aSearch);
		$aIdContaBancaria = array();
		foreach ($contaBancaria->getRecords() as $key => $value) {
			$aIdContaBancaria[$key] = $value->getId();          
		}

		if(count($aIdContaBancaria)>0){

			$data = explode('-', $periodo);    
			$ultimo_dia = date("t", mktime(0,0,0, $data[1], '01', $data[0]));

			$aSearch = array();    
			$aSearch['data_vencimento>='] = $data[0].'-'.$data[1].'-01';    
			$aSearch['data_vencimento<='] = $data[0].'-'.$data[1].'-'.$ultimo_dia;
			//$aSearch['id_conta_bancaria='] = $conta;
			$aSearch['ativo='] = 1;
			$aSearch['id_conta_bancaria='] = $aIdContaBancaria;
			$aSearch['id_tipo_lancamento!'] = 6;

			$caixa = fRecordSet::build('Caixa', $aSearch, array('data_vencimento' => 'desc'));

			$aDias = array();
			$aResumoDias = array();    
			$aResumoall = array(); 
			$aResumoAll[] = array();

			$debitos = 0;
			$creditos = 0;    
			$despesaFixa = 0;    
			$despesaVariavel = 0;        
			$creditosRealizados = 0;
			$debitosRealizados = 0;

			if ($caixa->count() > 0) {   

				foreach ($caixa as $key => $value) {
					$aDias[] =  $value->getDataVencimento()->format('d');      

					//Recebimentos + Doações
					if (($value->getIdTipoLancamento() == 1) || ($value->getIdTipoLancamento() == 7)){
						if($value->getIdSituacao() == 6){
							$creditosRealizados+= $value->getValor();
						}
						$creditos+= $value->getValor();
					}else{
						if($value->getIdTipoLancamento() == 2){
							$despesaFixa+= $value->getValor();
						}
						if($value->getIdSituacao() == 2){
							$debitosRealizados+= $value->getValor();
						}
						if($value->getIdTipoLancamento() == 3){
							$despesaVariavel+= $value->getValor();
						}
						$debitos+= $value->getValor();
					}

					$dataLancamento = '';
					$dataPagamento = '';
					$dataVencimento = '';

					if ($value->getDataLancamento() != null) {
						$dataLancamento = $value->getDataLancamento()->format('d/m/Y');
					}
					if ($value->getDataPagamento() != null) {
						$dataPagamento = $value->getDataPagamento()->format('d/m/Y');
					}
					if ($value->getDataVencimento() != null) {
						$dataVencimento = $value->getDataVencimento()->format('d/m/Y');
					}

					$categoria = new Categoria($value->getIdCategoria());
					$situacao = new Situacao($value->getIdSituacao());
					$tipo_lancamento = new TipoLancamento($value->getIdTipoLancamento());
					$pessoa = new Pessoa($value->getIdPessoa());

					$aResumoAll[] = array(
						'id' => $value->getId(),
						'descricao' => $value->getDescricao(),
						'ativo' => $value->getAtivo(),
						'valor' => $value->getValor(),
						'valor_final' => $value->getValorFinal(),
						'data_lancamento' => $dataLancamento,
						'numero_documento' => $value->getNumeroDocumento(),
						'data_pagamento' => $dataPagamento,
						'data_vencimento' => $dataVencimento,
						'id_situacao' => $value->getIdSituacao(),
						'situacao' => $situacao->getDescricao(),
						'id_tipo_lancamento' => $value->getIdTipoLancamento(),
						'tipo_lancamento' => $tipo_lancamento->getDescricao(),
						'id_categoria' => $value->getIdCategoria(),
						'categoria' => $categoria->getDescricao(),
						'juros' => $value->getJuros(),
						'multa' => $value->getMulta(),
						'desconto' => $value->getDesconto(),
						'id_pessoa' => $pessoa->getId(), 
						'pessoa' => $pessoa->getNome(), 
						'id_centro_custo' => $value->getIdCentroCusto(),
						'id_conta_bancaria' => $value->getIdContaBancaria(),
						);

					$aResumoDias[$value->getDataVencimento()->format('d')][] = array(
						'id' => $value->getId(),
						'descricao' => $value->getDescricao(),
						'ativo' => $value->getAtivo(),
						'valor' => $value->getValor(),
						'valor_final' => $value->getValorFinal(),
						'data_lancamento' => $dataLancamento,
						'numero_documento' => $value->getNumeroDocumento(),
						'data_pagamento' => $dataPagamento,
						'data_vencimento' => $dataVencimento,
						'id_situacao' => $value->getIdSituacao(),
						'situacao' => $situacao->getDescricao(),
						'id_tipo_lancamento' => $value->getIdTipoLancamento(),
						'tipo_lancamento' => $tipo_lancamento->getDescricao(),
						'id_categoria' => $value->getIdCategoria(),
						'categoria' => $categoria->getDescricao(),
						'juros' => $value->getJuros(),
						'multa' => $value->getMulta(),
						'desconto' => $value->getDesconto(),
						'id_pessoa' => $pessoa->getId(), 
						'pessoa' => $pessoa->getNome(), 
						);

				}
				$aDias = array_unique($aDias);      

			}

			$periodo_anterior =  date('Y-m-d', strtotime('-1 months', strtotime(date($periodo))));
			$data_anterior = explode('-', $periodo_anterior);
			$ultimo_dia_anterior = date("t", mktime(0,0,0, $data_anterior[1], '01', $data_anterior[0]));

			$aSearch = array();    
			$aSearch['data_vencimento>='] = $data_anterior[0].'-'.$data_anterior[1].'-01';    
			$aSearch['data_vencimento<='] = $data_anterior[0].'-'.$data_anterior[1].'-'.$ultimo_dia_anterior;        
			$aSearch['id_conta_bancaria='] = $aIdContaBancaria[0];

			$caixa = fRecordSet::build('Caixa', $aSearch, array('data_vencimento' => 'asc'));

			$debitos_anterior = 0;
			$creditos_anterior = 0; 
			$despesaFixa_anterior = 0;
			$despesaVariavel_anterior = 0;

			foreach ($caixa as $key => $value) {

				//Recebimentos + Doações
				if (($value->getIdTipoLancamento() == 1) || ($value->getIdTipoLancamento() == 7)){
					$creditos_anterior+= $value->getValor();
				}else{

					if($value->getIdTipoLancamento() == 2){
						$despesaFixa_anterior+= $value->getValor();
					}
					if($value->getIdTipoLancamento() == 3){
						$despesaVariavel_anterior+= $value->getValor();
					}
					$debitos_anterior+= $value->getValor();
				}

			}

			//----------------------------------------------------------------------------------
			// FRH - Cálculo dos percentuais
			//----------------------------------------------------------------------------------

			$sqlq = "SELECT
					 TRUNCATE(COALESCE((y.recebimentos*100)/y.total,0),0) perc_recebimento,
				 	 TRUNCATE(COALESCE((y.saidas_totais*100)/y.total,0),0) perc_saidas_totais,
					 TRUNCATE(COALESCE((y.despesas_variaveis*100)/y.total,0),0) perc_despesas_variaveis,
					 TRUNCATE(COALESCE((y.despesas_fixas*100)/y.total,0),0) perc_despesas_fixas,
					 y.fechamento
					 FROM(SELECT 
					 x.recebimentos + x.saidas_totais total,
					 x.recebimentos - x.saidas_totais fechamento,
					 x.recebimentos,
					 x.saidas_totais,
					 x.despesas_variaveis,
					 x.despesas_fixas
					 FROM(SELECT 
					 SUM(CASE WHEN id_tipo_lancamento IN(1,7) THEN valor ELSE 0 END) recebimentos,
					 SUM(CASE WHEN id_tipo_lancamento NOT IN(1,7) THEN valor ELSE 0 END) saidas_totais,
					 SUM(CASE WHEN id_tipo_lancamento = 3 THEN valor ELSE 0 END) despesas_variaveis,
					 SUM(CASE WHEN id_tipo_lancamento = 2 THEN valor ELSE 0 END) despesas_fixas
					 FROM caixa 
					 WHERE data_vencimento BETWEEN ADDDATE(LAST_DAY(SUBDATE('".$periodo."', INTERVAL 2 MONTH)), 1) 
					 AND LAST_DAY(ADDDATE(LAST_DAY(SUBDATE('".$periodo."', INTERVAL 2 MONTH)), 1))
					 AND ativo=1)x)y;";
		
			$percentuais = array();
			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $value){ $percentuais[] = $value; }
			$rs = $this->_getDb()->close();
			//----------------------------------------------------------------------------------

			$aResumo = array(
				'dias' => $aDias,      
				'debitos' => $debitos,      
				'debitosRealizados' => $debitosRealizados,      
				'creditos' => $creditos,      
				'creditosRealizados' => $creditosRealizados,    
				'despesaFixa' => $despesaFixa,      
				'despesaVariavel' => $despesaVariavel,  
				'debitos_anterior' => $debitos_anterior,      
				'creditos_anterior' => $creditos_anterior,      
				'despesaFixa_anterior' => $despesaFixa_anterior,      
				'despesaVariavel_anterior' => $despesaVariavel_anterior,  
				'resumo' => $aResumoDias,      
				'resumoAll' => $aResumoAll,
				'percentuais' => $percentuais
				);

			if ($full == false) {
				fJSON::output($aResumo);
			}
			else {
				return $aResumo;
			}

		} //count conta bancaria>0
	} */

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Formas de Pagamento
	Método: GET
	URL: http://localhost/sig/api/index.php/formapagamento/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/12/2014
	*/

	public function getFormaPagamento($id_forma_pagamento = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_forma_pagamento != "") {
			$aSearch['id='] = $id_forma_pagamento;
		}                 

		$formapagamento = fRecordSet::build('FormaPagamento', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aFormaPagamento = array();

			foreach ($formapagamento->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aFormaPagamento[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aFormaPagamento) == 0) {
				$aFormaPagamento[] = array('error'    => -1, 'mensagem' => "Nenhuma forma de pagamento encontrada.");
				fJSON::output($aFormaPagamento);
				die();
			}

			$aFormaPagamento = array(
				'forma_pagamento' => $aFormaPagamento
				);

			fJSON::output($aFormaPagamento);
		}
		else {
			return $formapagamento[0];
		}
	}  

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipo de Conta
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoconta/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/12/2014
	*/

	public function getTipoConta($id_tipo_conta = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_tipo_conta != "") {
			$aSearch['id='] = $id_tipo_conta;
		}                 

		$tipoconta = fRecordSet::build('TipoConta', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoConta = array();

			foreach ($tipoconta->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aTipoConta[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoConta) == 0) {
				$aTipoConta[] = array('error'    => -1, 'mensagem' => "Nenhum tipo de conta encontrado.");
				fJSON::output($aTipoConta);
				die();
			}

			$aTipoConta = array(
				'tipoconta' => $aTipoConta
				);

			fJSON::output($aTipoConta);
		}
		else {
			return $tipoconta[0];
		}
	}    

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de bancos
	Método: GET
	URL: http://localhost/sig/api/index.php/banco/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/12/2014
	*/

	public function getBanco($id_banco = "",$full = false) {
		$this->acessoApi();



		$aSearch = array();
		if ($id_banco != "") {
			$aSearch['id='] = $id_banco;
		}                 

		$banco = fRecordSet::build('Banco', $aSearch, array('nome' => 'asc'));

		if ($full == false) {

			$aBanco = array();

			foreach ($banco->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aBanco[] = array(
					'id' => $value->getId(),
					'nome' => $value->getNome(),
					'numero' => $value->getNumero(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aBanco) == 0) {
				$aBanco[] = array('error'    => -1, 'mensagem' => "Nenhum banco encontrado.");
				fJSON::output($aBanco);
				die();
			}

			$aBanco = array(
				'banco' => $aBanco
				);

			fJSON::output($aBanco);
		}
		else {
			return $banco[0];
		}
	}    

	 /*
	Módulo: Mesquita
	Descrição: Obter lista de Contas bancárias, sub-totais e totais de saldos
	Método: GET
	URL: http://localhost/sig/api/index.php/contabancaria/<id_entidade>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/09/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getContaBancaria($id_conta_bancaria = "",$full = false) {

		$userSes = fSession::get('user');		
		$acesso_modulo = $this->search_array($userSes['user']['modulo'], 'id_modulo', 189);//Valida se o usuario tem acesso ao modulo
		$saldo_total=0;	

		$consulta = "SELECT x.*, 
					 	COALESCE(((x.srec+x.saldo_transferido_entrada)-(x.sdesp+x.saldo_transferido_saida)),0) saldo
					 FROM(SELECT 'Conta' tipo, cb.id,
							 COALESCE(cb.id_tipo_conta,0) id_tipo_conta,
							 COALESCE(cb.id_entidade,0) id_entidade,
							 COALESCE(cb.id_banco,0) id_banco,
							 COALESCE(cb.descricao,'') descricao,
							 COALESCE(cb.agencia,'') agencia,
							 COALESCE(cb.numero,0) numero,
							 COALESCE(cb.principal,'') principal,
							 COALESCE(cb.ativo,'') ativo,
							 COALESCE(e.nome,'') entidade,
							 COALESCE(tc.descricao,'') tipo_conta,
							 COALESCE(b.nome,'') banco,
							 COALESCE(CASE WHEN cb.ativo=1 THEN 'ativo' ELSE 'inativo' END,'') status,
							 COALESCE(CASE WHEN cb.principal=1 THEN 'sim' ELSE 'nao' END,'') princ,
							 COALESCE((SELECT SUM(CASE WHEN c.id_situacao in(2,6) AND (c.id_tipo_lancamento IN(1,7)) THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria=cb.id and c.ativo=1),0) srec,
							 COALESCE((SELECT SUM(CASE WHEN c.id_situacao in(2,6) AND (c.id_tipo_lancamento IN(2,3,4,5)) THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria=cb.id and c.ativo=1),0) sdesp,					 
							 COALESCE((SELECT SUM(CASE WHEN c.id_situacao in(1,3,4) AND (c.id_tipo_lancamento IN(1,7)) THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria=cb.id and c.ativo=1),0) saldo_a_receber,
							 COALESCE((SELECT SUM(CASE WHEN c.id_situacao in(1,3,4) AND (c.id_tipo_lancamento IN(2,3,4,5)) THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria=cb.id and c.ativo=1),0) saldo_a_pagar,
							 COALESCE((SELECT SUM(CASE WHEN c.id_tipo_lancamento = 6 THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria=cb.id and c.id_conta_bancaria_destino is not null and c.ativo=1),0) saldo_transferido_saida,
							 COALESCE((SELECT SUM(CASE WHEN c.id_tipo_lancamento = 6 THEN valor ELSE 0 END) FROM caixa c WHERE c.id_conta_bancaria is not null and c.id_conta_bancaria_destino=cb.id and c.ativo=1),0) saldo_transferido_entrada
						 FROM conta_bancaria cb
						 LEFT JOIN tipo_conta tc ON tc.id=cb.id_tipo_conta
						 LEFT JOIN entidade e ON e.id=cb.id_entidade
						 LEFT JOIN banco b ON b.id=cb.id_banco  WHERE cb.id_entidade=".$userSes['user']['entidadePessoa']." @I
					 )x";

		$sqlq = $consulta;

		$sub = ($id_conta_bancaria!='') ? " AND cb.id = ".$id_conta_bancaria : '';
		$sqlq = str_replace("@I", $sub, $sqlq);
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value)
		{ 
			$retorno[] = $value;
			if(count($acesso_modulo) > 0){ $saldo_total+= $value['saldo']; }
		}
		$rs = $this->_getDb()->close();	

		foreach ($retorno as $key => $value)
		{ 
			if(count($acesso_modulo) > 0){
				$retorno[$key]['acesso'] = true;
				$retorno[$key]['saldo_total'] = $saldo_total;
			}else{
				$retorno[$key]['acesso'] = false;
				$retorno[$key]['saldo'] = 0;
				$retorno[$key]['saldo_total'] = 0;
			}
		}

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: conta_bancaria");
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'contabancaria' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Situação
	Método: GET
	URL: http://localhost/sig/api/index.php/situacao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 16/12/2014
	*/

	public function getSituacao($id_situacao = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_situacao != "") {
			$aSearch['id='] = $id_situacao;
		}                 

		$situacao = fRecordSet::build('Situacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aSituacao = array();

			foreach ($situacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aSituacao[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aSituacao) == 0) {
				$aSituacao[] = array('error'    => -1, 'mensagem' => "Nenhuma situação encontrada.");
				fJSON::output($aSituacao);
				die();
			}

			$aSituacao = array(
				'situacao' => $aSituacao
				);

			fJSON::output($aSituacao);
		}
		else {
			return $situacao[0];
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova categoria
	Método: GET
	URL: http://localhost/sig/api/index.php/categoria/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 18/12/2014
	*/

	public function postCategoria() {

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');

		if (property_exists($data, 'id')) {
			$categoria = new Categoria($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Categoria alterada com sucesso!";
			$alteracao=1;
		}else{
			$categoria = new Categoria();
			$mensagem = "Categoria incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Categoria
			if (property_exists($data, 'id_tipo_lancamento')){
				$categoriaAnt = '';
				if($alteracao==1){
					$categoriaAnt = $categoria->getIdTipoLancamento();
				}
				$this->setAuditoria('Categoria', 'Id Tipo Lançamento', $categoriaAnt, $data->id_tipo_lancamento);
				$categoria->setIdTipoLancamento($data->id_tipo_lancamento);
			}

			if (property_exists($data, 'descricao')){
				$categoriaAnt = '';
				if($alteracao==1){
					$categoriaAnt = $categoria->getDescricao();
				}
				$this->setAuditoria('Categoria', 'Descricao', $categoriaAnt, $data->descricao);
				$categoria->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$categoria->setAtivo($data->ativo);
			}

			$categoria->setIdEntidade($user['user']['idTipoEntidade']);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['id_tipo_lancamento='] = $data->id_tipo_lancamento;
				$aSearch['descricao='] = $data->descricao;
				$aSearch['id_entidade='] = $user['user']['idTipoEntidade'];
				$countDescricao = fRecordset::build('Categoria', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A categoria já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$categoria->store();
				}     
			} else {
				$categoria->store();
			} 
		//******** Fim - Grava informações na Tabela de Categoria
			$id_categoria = $categoria->getId();

			$arrMensagem = array('error' => 0, 'id_categoria' => $id_categoria, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipos de Lançamentos
	Método: GET
	URL: http://localhost/sig/api/index.php/tipolancamento/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 20/12/2014
	*/

	public function getTipoLancamento($id_tipo_lancamento = "",$full = false) {

		$this->acessoApi();

		$aTipoLancamento = array();
		$query = "SELECT id, descricao, natureza_conta FROM tipo_lancamento";


		if ($id_tipo_lancamento != ""){
			$query .= " WHERE id = ".$id_tipo_lancamento." ORDER BY descricao ASC";
		}

		$tipo_lancamento = $this->_getDb()->query($query);

		foreach ($tipo_lancamento as $key => $value) {

			$aTipoLancamento[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'natureza_conta' => $value['natureza_conta']
				);
		}

		if (count($aTipoLancamento) == 0) {
			$aTipoLancamento[] = array('error'    => -1, 'mensagem' => "Nenhum tipo de lançamento encontrado.");
			fJSON::output($aTipoLancamento);
			die();
		}

		$aTipoLancamento = array(
			'tipo_lancamento' => $aTipoLancamento
			);

		$tipo_lancamento = $this->_getDb()->close();
		if ($full == false) {
			fJSON::output($aTipoLancamento);
		}
		else {

			return $aTipoLancamento;
		}
	}   

/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova conta bancária
	Método: GET
	URL: http://localhost/sig/api/index.php/contabancaria/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 20/12/2014
	*/

	public function postContaBancaria() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$contabancaria = new ContaBancaria($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Conta Bancária alterada com sucesso!";
			$alteracao=1;
		}else{
			$contabancaria = new ContaBancaria();
			$mensagem = "Conta Bancária incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de ContaBancaria
			if (property_exists($data, 'principal')){
				$contabancaria->setPrincipal($data->principal);

				if($data->principal == 1){
					$aSearch = array();
					$aSearch['principal='] = 1;
					$aSearch['id_entidade='] = $data->id_entidade;
					$countBancaria = fRecordset::build('ContaBancaria', $aSearch);
					if(count($countBancaria) > 0 && $data->confirmacao == 1){
						$arrMensagem = array('error' => 0, 'verificar' => 1);
						fJSON::output($arrMensagem); 
						die();          
					}else if(count($countBancaria) > 0){
						$countBancariaPrincipal = new ContaBancaria($countBancaria[0]->getId());
						$countBancariaPrincipal->setPrincipal(0);
						$countBancariaPrincipal->store();
					}
				}
			}

			if (property_exists($data, 'id_entidade')){
				$contabancaria->setIdEntidade($data->id_entidade);
			}
			if (property_exists($data, 'id_tipo_conta')){
				$contabancaria->setIdTipoConta($data->id_tipo_conta);
			}      

			if (property_exists($data, 'descricao')){
				$contabancaria->setDescricao($data->descricao);
			}

			if (property_exists($data, 'id_banco')){
				$contabancaria->setIdBanco($data->id_banco);
			}

			if (property_exists($data, 'agencia')){
				$contabancaria->setAgencia($data->agencia);
			}

			if (property_exists($data, 'numero')){
				$contabancaria->setNumero($data->numero);
			}      

			if (property_exists($data, 'ativo')){
				$contabancaria->setAtivo($data->ativo);
			}

			$userSes = fSession::get('user');
			$contabancaria->setIdEntidade($userSes['user']['entidadePessoa']);

			$aSearch = array();

			if ($alteracao!=1) {

				$aSearch['id_banco='] = $data->id_banco;
				$aSearch['agencia='] = $data->agencia;
				$aSearch['numero='] = $data->numero;
				$countDescricao = fRecordset::build('ContaBancaria', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A conta bancária já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$contabancaria->store();
				}      
		//******** Fim - Grava informações na Tabela de ContaBancaria
				$id_contabancaria = $contabancaria->getId();

			}else {
				$contabancaria->store();
				$id_contabancaria = $data->id;
			}

			$arrMensagem = array('error' => 0, 'id_contabancaria' => $id_contabancaria, 'verificar' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipo de Fornecedor
	Método: GET
	URL: http://localhost/sig/api/index.php/tipofornecedor/<tipofornecedor>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 21/12/2014
	*/
	
	public function getTipoFornecedor($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$tipofornecedor = fRecordSet::build('TipoFornecedor', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoFornecedor = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoFornecedor[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Fornecedor",
					'ativo' => ""
					);   
			}      

			foreach ($tipofornecedor->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoFornecedor[] = array(
					'tipo' => "Tipo de Fornecedor",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoFornecedor) == 0) {
				$aTipoFornecedor[] = array('error' => -1, 'mensagem' => "Nenhum tipo de fornecedor encontrado.");
			}

			$aTipoFornecedor = array(
				'tipofornecedor' => $aTipoFornecedor
				);          

			fJSON::output($aTipoFornecedor);
		}
		else {
			return $tipofornecedor[0];
		}    
	}  

/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo tipo de fornecedor
	Método: GET
	URL: http://localhost/sig/api/index.php/tipofornecedor/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 21/12/2014
	*/

	public function postTipoFornecedor() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipofornecedor = new TipoFornecedor($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo Fornecedor alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipofornecedor = new TipoFornecedor();
			$mensagem = "Tipo Fornecedor incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de tipo_fornecedor
			if (property_exists($data, 'descricao')){

				$tipofornecedorAnt = '';
				if($alteracao==1){
					$tipofornecedorAnt = $tipofornecedor->getDescricao();
				}

				$tipofornecedor->setDescricao($data->descricao);
				$this->setAuditoria('TipoFornecedor', 'Descrição', $tipofornecedorAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipofornecedor->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoFornecedor', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de fornecedor já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipofornecedor->store();
				}     
			} else {
				$tipofornecedor->store();
			} 
		//******** Fim - Grava informações na Tabela de Categoria
			$id_tipofornecedor = $tipofornecedor->getId();

			$arrMensagem = array('error' => 0, 'id_tipofornecedor' => $id_tipofornecedor, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  


	 /*
	Módulo: Mesquita
	Descrição: Obter lista de movimentações para tela movimentação financeira
	Método: GET
	URL: http://localhost/sig/api/index.php/movimentacao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/09/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getMovimentacao($id = "", $full = false) { 

		$userSes = fSession::get('user');	

		$consulta = "SELECT 
					 cx.id,
					 COALESCE(cx.descricao,'') descricao,
					 COALESCE(cx.ativo,'') ativo,
					 CASE WHEN cx.ativo=1 THEN 'ativo' ELSE 'inativo' END status,
					 COALESCE(cx.valor,0) valor,
					 COALESCE(cx.numero_documento,'') numero_documento,
					 COALESCE(cx.id_centro_custo,'') id_centro_custo,
					 COALESCE(cx.id_produtos_servicos,'') id_produtos_servicos,
					 COALESCE(cx.id_tipo_lancamento,0) id_tipo_lancamento,
					 COALESCE(cx.id_forma_pagamento,0) id_forma_pagamento,
					 COALESCE(cx.juros,0) juros,
					 COALESCE(cx.multa,0) multa,
					 COALESCE(cx.desconto,0) desconto,
					 COALESCE(cx.valor_final,0) valor_final,
					 COALESCE(cx.id_situacao,0) id_situacao,
					 COALESCE(cx.id_categoria,0) id_categoria,
					 COALESCE(cx.id_pessoa,0) id_pessoa,
					 COALESCE(cx.id_conta_bancaria,0) id_conta_bancaria,
					 COALESCE(cx.mais_detalhes,'') mais_detalhes,
					 COALESCE(cx.id_moeda,0) id_moeda,
					 COALESCE(cx.id_evento,0) id_evento,
					 COALESCE(cc.descricao,'') centro_custo,
					 COALESCE(s.descricao,'') situacao,
					 COALESCE(tl.descricao,'') tipo_lancamento,
					 COALESCE(ct.descricao,'') categoria,
					 COALESCE(fp.descricao,'') forma_pagamento,
					 COALESCE(p.nome,'') pessoa,
					 COALESCE(DATE_FORMAT(cx.data_lancamento,'%Y/%m/%d'),'') data_lancamento,
					 COALESCE(DATE_FORMAT(cx.data_pagamento,'%Y/%m/%d'),'') data_pagamento,
					 COALESCE(DATE_FORMAT(cx.data_vencimento,'%Y/%m/%d'),'') data_vencimento
					 FROM caixa cx
					 LEFT JOIN categoria ct ON ct.id=cx.id_categoria
					 LEFT JOIN situacao s ON s.id=cx.id_situacao
					 LEFT JOIN tipo_lancamento tl ON tl.id=cx.id_tipo_lancamento
					 LEFT JOIN forma_pagamento fp ON fp.id=cx.id_forma_pagamento
					 LEFT JOIN pessoa p ON p.id=cx.id_pessoa
					 LEFT JOIN centro_custo cc ON cc.id=cx.id_centro_custo @W";
		
		$sqlq = $consulta;
		$sqlq = str_replace("@W", (($id!='') ? "WHERE cx.id=".$id : ''), $sqlq);
	
		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value)
		{ 
			$retorno[] = $value;

			if($id!='')
			{ 
				$retorno_caixa = array();

				$sqlq = "SELECT id, id_caixa, descricao, tipo, arquivo FROM documento_caixa WHERE id_caixa=".$id;
				$rs_caixa = $this->_getDb()->query($sqlq); 
				foreach ($rs_caixa as $key => $val)
				{ 
					$retorno_caixa[] = $val;
				}
				$rs_caixa = $this->_getDb()->close();

				$retorno[$key]['arquivo'] = $retorno_caixa;
				$retorno[$key]['arquivo_pagamento'] = $retorno_caixa;
			}else{
				$retorno[$key]['arquivo'] = array();
				$retorno[$key]['arquivo_pagamento'] = array();
			}			
		}
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 

	/*
	Módulo: Escola
	Descrição: Cadastro de Movimentação
	Método: GET
	URL: http://localhost/sig/api/index.php/movimentacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function postMovimentacao() {

		try{

			$data = json_decode(file_get_contents("php://input"));

			if(property_exists($data, 'tipo_doacao')){
				if($data->tipo_doacao==0){ $data->id_tipo_lancamento=1; }
			}
			
			$juros = (property_exists($data, 'juros')) ? $data->juros : 0;
			$multa = (property_exists($data, 'multa')) ? $data->multa : 0;
			$desconto = (property_exists($data, 'desconto')) ? $data->desconto : 0;
			$data->valor_final = ($data->valor + $juros + $multa - $desconto);
			$data->ativo = (property_exists($data, 'ativo')) ? $data->ativo : 1;
			
			if(property_exists($data, 'data_vencimento')){
				if ($data->data_vencimento != '' || $data->data_vencimento != null){
					$data->data_vencimento=$this->formataDataMysql($data->data_vencimento,'date');
				} 
			}

			if(property_exists($data, 'data_lancamento')){
				if ($data->data_lancamento != '' || $data->data_lancamento != null){					
					$data->data_lancamento=$this->formataDataMysql($data->data_lancamento,'date');
				}
			}
		
			if(property_exists($data, 'data_pagamento')){
				if ($data->data_pagamento != '' || $data->data_pagamento != null){
					$data->data_pagamento=$this->formataDataMysql($data->data_pagamento,'date');
				}
			}
		
			$userSes = fSession::get('user');
			$data->id_entidade = $userSes['user']['entidadePessoa'];
			
			fJSON::output($this->postGeral('caixa',$data));

		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);			
		}
	}

/*
	Módulo: Mesquita
	Descrição: Obter Lista de Listas de Convidados
	Método: GET
	URL: http://localhost/sig/api/index.php/stringlista/<stringlista>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function getListaString($lista = "", $full = false) {

		$request = $this->_slimApp->request()->params();
		$aSearch = array();

		if (array_key_exists('string', $request) && $request['string'] != '') {
			$aSearch['nome~'] = $request['string'];
		}

		if ($lista != "") {
			$aSearch['id='] = $lista;
		}

		$lista = fRecordset::build('Lista', $aSearch);

		if ($full == false) {

			$aLista = array();

			foreach ($lista->getRecords() as $key => $value) {

				$aLista[] = array(
					'id' => $value->getId(),
					'nome' => $value->getNome()
					);
			}

			if (count($aLista) == 0) {
				$aLista[] = array('error' => -1, 'mensagem' => "Nenhuma lista encontrada.");
			}

			fJSON::output($aLista);
		}
		else {
			return $lista[0];
		}
	} 

/*
	Módulo: Mesquita
	Descrição: Obter Lista de Evento Lista
	Método: GET
	URL: http://localhost/sig/api/index.php/eventolista/<evento>/<id lista>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function getEventoLista($id_evento = "", $id_lista = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_evento != "") {
			$aSearch['id_evento='] = $id_evento;
		}

		if ($id_lista != "") {
			$aSearch['id_lista='] = $id_lista;
		}

		$eventoLista = fRecordSet::build('EventoLista', $aSearch);

		$aEventoLista = array();

		if ($eventoLista->count() == 0) {

			$aEventoLista = array(
				'error' => "-1",
				'mensagem' => "Nenhuma lista de evento encontrada."
				);
		}
		else {
			foreach ($eventoLista->getRecords() as $key => $value) {

				$resultLista = $this->getLista($value->getIdLista(), true);

				$aEventoLista[] = array(
					'id' => $value->getIdLista(),
					'id_evento' => $value->getIdEvento(),
					'id_lista' => $value->getIdLista(),
					'nome' => $resultLista[0]['nome']
					);
			}
		}

		if ($full == false) {
			fJSON::output($aEventoLista);
		}
		else {
			return $aEventoLista;
		}
	} 

/*
	Módulo: Geral
	Descrição: Obter Lista de Tipo de Fornecedor atraves de query
	Método: GET
	URL: http://localhost/sig/api/index.php/stringtipofornecedor/<tipofornecedor>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function getTipoFornecedorString() {
		$request = $this->_slimApp->request()->params();

		$aSearch['descricao~'] = $request['string'];

		$tipoFornecedor = fRecordSet::build('TipoFornecedor', $aSearch, array('descricao' => 'asc')); 

		$aTipoFornecedor = array(); 

		if ($tipoFornecedor->count() > 0) {

			foreach ($tipoFornecedor->getRecords() as $key => $value) {        

				$aTipoFornecedor[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),                    
					);
			};
		}

		if (count($aTipoFornecedor) == 0) {
			$aTipoFornecedor = array(
				'error' => "-1",
				'tipofornecedor' => $aTipoFornecedor,
				'mensagem' => "Nenhum tipo de fornecedor encontrado."
				);
			fJSON::output($aTipoFornecedor);
			die;
		}

		$aTipoFornecedor = array(
			'tipofornecedor' => $aTipoFornecedor
			);

		fJSON::output($aTipoFornecedor);      
	}

	 /*
	Módulo: Cemiterio
	Descrição: Obter lista de tipo de documento
	Método: GET
	URL: http://localhost/sig/api/index.php/templatetipodocumento/<templatetipodocumento>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function getModeloDocumento($id = "", $full = false) {        

		$aSearch = array();

		if($id != ''){
			$aSearch['id='] = $id;
		}

		$modeloDocumento = fRecordSet::build('ModeloDocumento', $aSearch);
		$aModeloDocumento = array();

		foreach ($modeloDocumento->getRecords() as $key => $value) {

			$aModeloDocumento[] = array(                
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				);

		}

		if ($full == false) {
			fJSON::output($aModeloDocumento);
		}
		else {
			return $aModeloDocumento;
		}
	}

	 /*
	Módulo: Mesquita
	Descrição: Obter lista de recibos
	Método: GET
	URL: http://localhost/sig/api/index.php/listarrecibo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/09/2015
	Autor: Fábio Roberto Haydn
	*/
	public function getListaRecibo($id = "", $full = false) {

		$userSes = fSession::get('user');

		$campos = array('id','texto','descricao','id_modelo_documento','ativo');

		$consulta = "SELECT %S FROM %F WHERE %W ORDER BY %O";
		$tabela   = "template";
		$condicao = ($id!="") ? "id = ".$id : "id_modelo_documento = 1 AND id_entidade = ".$userSes['user']['entidadePessoa'];
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 
	 /*
	Módulo: Mesquita
	Descrição: Obter lista de recibos
	Método: GET
	URL: http://localhost/sig/api/index.php/listarcertificado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/09/2015
	Autor: Fábio Roberto Haydn
	*/
	public function getListaCertificado($id = "", $full = false) {

		$userSes = fSession::get('user');

		$campos = array('id','texto','descricao','id_modelo_documento','ativo');

		$consulta = "SELECT %S FROM %F WHERE %W ORDER BY %O";
		$tabela   = "template";
		$condicao = ($id!="") ? "id = ".$id : "id_modelo_documento = 3 AND id_entidade = ".$userSes['user']['entidadePessoa']; 
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 



	public function getListaContrato($id = "", $full = false){

		$aSearch = array();

		if($id != ''){
			$aSearch['id='] = $id;
		}

		$aTipoDocumento = array();
		$aContrato = array();
		$aTipoDocumento['id_modelo_documento='] = 2;

		$listaContrato = fRecordset::build('Template',$aTipoDocumento);

		foreach ($listaContrato->getRecords() as $key => $value) {
			$aContrato[] = array(
				'id' => $value->getId(),
				'id_modelo_documento' => $value->getIdModeloDocumento(),
				'descricao' => $value->getDescricao(),
				'texto' => $value->getTexto()
				);
		}

		if($full == false){
			fJSON::output($aContrato);
		}
		else{
			return $aContrato;
		}
	}



	public function getModeloTemplate($id, $full = false){

		$aSearch = array();
		$aModeloTemplate = array();
		$aSearch['id='] = $id;

		$aTemplate = fRecordset::build('Template',$aSearch);

		foreach ($aTemplate->getRecords() as $key => $value) {
			$aModeloTemplate[] = array(
				'id' => $value->getId(),
				'id_modelo_documento' => $value->getIdModeloDocumento(),
				'descricao' => $value->getDescricao(),
				'texto' => $value->getTexto()
				);
		}
		if($full == false){
			fJSON::output($aModeloTemplate);
		}
		else{
			return $aModeloTemplate;
		}
	}

	/*
	Módulo: Cemiterio
	Descrição: Obter Variaveis do template
	Método: GET
	URL: http://localhost/sig/api/index.php/variavel/<variavel>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function getVariavel($id = "", $full = false) {        

		$aSearch = array();

		if($id != ''){
			$aSearch['id='] = $id;
		}

		$variavel = fRecordSet::build('Variavel', $aSearch);
		$aVariavel = array();

		foreach ($variavel->getRecords() as $key => $value) {

			$aVariavel[] = array(                
				'id' => $value->getId(),
				'id_entidade' => $value->getIdEntidade(),
				'tag' => $value->getTag(),
				'descricao' => $value->getDescricao(),
				'tabela' => $value->getTabela(),
				'campo' => $value->getCampo(),
				'ativo' => $value->getAtivo()
				);
		}

		if ($full == false) {
			fJSON::output($aVariavel);
		}
		else {
			return $aVariavel;
		}
	}

	/*
	Módulo: Cemiterio
	Descrição: Cadastrar um novo Template
	Método: GET
	URL: http://localhost/sig/api/index.php/cadastrartemplate/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function postCadastrarTemplate() {

		$data = json_decode(file_get_contents("php://input"));


		$user = fSession::get('user');
		$id_entidade = $user['user']['idTipoEntidade'];

		if (property_exists($data, 'id')) {
			$template = new Template($data->id);
			$mensagem = "Template alterado com sucesso!";
			$novoReg = 0;
		}else{
			$template = new Template();
			$mensagem = "Template incluído com sucesso!";
			$novoReg = 1;
		}

		try {
		//******** Grava informações na Tabela de Categoria
			if (property_exists($data, 'id_modelo_documento')){
				$template->setIdModeloDocumento($data->id_modelo_documento);
			}

			if (property_exists($data, 'descricao')){
				$template->setDescricao($data->descricao);
			}

			if (property_exists($data, 'texto')){
				$template->setTexto($data->texto);
			}

			if (property_exists($data, 'ativo')){
				$template->setAtivo($data->ativo);
			}

			$template->setIdEntidade($id_entidade);

			$template->store();
		//******** Fim - Grava informações na Tabela de Categoria

			$id_template = $template->getId();

			$arrMensagem = array('error' => 0, 'id_template' => $id_template, 'novoReg' => $novoReg, 'id_modelo_documento' => $data->id_modelo_documento,  'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

/*
Módulo: Cemiterio
Descrição: Obter Template
Método: GET
URL: http://localhost/sig/api/index.php/template/<modelodocumento>
Autenticação: Sim
Resposta: JSON
Data de Criação: 22/12/2014
Autor: Fabio da Silva
Versão: 1.0
Data de Alteração: 25/03/2015
Autor: Luciano Almeida
*/
public function getTemplate($id_modelo_documento = "", $full = false) {
	$aSearch = array();

	if($id_modelo_documento != ''){
		$aSearch['id_modelo_documento='] = $id_modelo_documento;
	}

	$template = fRecordSet::build('Template', $aSearch);
	$aTemplate = array();

	foreach ($template->getRecords() as $key => $value) {
		$aTemplate[] = array(
			'id' => $value->getId(),
			'id_modelo_documento' => $value->getIdModeloDocumento(),
			'descricao' => $value->getDescricao(),
			'texto' => $value->getTexto(),
			'ativo' => $value->getAtivo(),
			'id_entidade' => $value->getIdEntidade()
			);
	}
	if ($full == false) {
		fJSON::output($aTemplate);
	} else {
		return $aTemplate;
	}
}

	/*
	Módulo: Cemiterio
	Descrição: excluir um Template
	Método: GET
	URL: http://localhost/sig/api/index.php/deltemplate/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 22/12/2014
	*/

	public function postDelTemplate() {

		$data = json_decode(file_get_contents("php://input"));

		try {
		//******** Deletar registro na tabela template
			if (property_exists($data, 'id')) {
				$template = new Template($data->id);
				$template->delete();

				$mensagem = "Template excluído com sucesso!";
			}
		//******** Fim - Deletar registro na tabela template

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	public function setAuditoria($objeto, $campo, $antigo, $novo, $id_tabela="") {

		$user = fSession::get('user');

		$auditoria = new Auditoria();

		if($antigo == $novo){
			return;
		}

		$auditoria->setObjeto($objeto);
		$auditoria->setCampo($campo);
		$auditoria->setIdTabela($id_tabela);
		$auditoria->setValorAntigo($antigo);
		$auditoria->setValorNovo($novo);
		$auditoria->setDataAuditoria(date('Y-m-d H:i:s'));
		$auditoria->setIdPessoa($user['user']['id']);
		try{
			$auditoria->store();  
		}catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			return;
		}


	}

	/*
	Módulo: Geral
	Descrição: Carrega Lista de Convidados na Tabela de Inscrição de Evento
	Método: GET
	URL: http://localhost/sig/api/index.php/inscricaoevento
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 26/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 26/12/2014
	Alterado Por: Ricardo Bruno
	*/

	public function postInscricaoEvento(){
		$this->acessoApi();
		$data = json_decode(file_get_contents("php://input"));

		$idEvento = $data->id_evento;

		if (property_exists($data, 'id')) {  
			$idInscricao = $data->id;
		} else {
			$idInscricao = '';
		}

		if (property_exists($data, 'flag')) {  
			$flag = $data->flag;
			$idPessoa = $data->id_pessoa;
		} else {
			$flag=0;
		}

		try {     
			if ($flag!=1) {
				if (property_exists($data, 'listaselecionado')) {     
					foreach ($data->listaselecionado as $key => $value) {
			//Recupera a Lista de listas de Convidados
						$idLista = $value->id;        

			//Recupera Convidados da Lista
						$resultConvidadosLista = $this->getLista($idLista, true);


						foreach ($resultConvidadosLista[0]['convidados'] as $key => $convidado) {

							$idPessoa = $convidado['id_pessoa'];

							$aSearch = array();
							$aSearch['id_evento='] = $idEvento;            
							$aSearch['id_pessoa='] = $idPessoa; 

							$eventoInscricao = fRecordSet::build('EventoInscricao', $aSearch); 

							if (count($eventoInscricao) == 0) {
								$evento_inscricao = new EventoInscricao();

								$evento_inscricao->setIdEvento($idEvento); 
								$evento_inscricao->setIdPessoa($idPessoa);
								$evento_inscricao->setDataCadastro(date('Y-m-d H:i:s'));  
								$evento_inscricao->store(); 
							}
						}   
					}
				}
			} else {
				$aSearch = array();
				if (property_exists($data, 'id')) {  
					$aSearch['id='] = $idInscricao;            
				}
				$aSearch['id_evento='] = $idEvento;            
				$aSearch['id_pessoa='] = $idPessoa; 

				$eventoInscricao = fRecordSet::build('EventoInscricao', $aSearch); 

				if (count($eventoInscricao) == 0) {
					$evento_inscricao = new EventoInscricao();
				} else {
					if ($idInscricao!='') {          
						$evento_inscricao = new EventoInscricao($idInscricao);
					} else {
						$arrMensagem = array('error' => -1, 'id_evento' => $idEvento, 'mensagem' => 'A pré-inscrição desse associado já foi realizada');
						fJSON::output($arrMensagem);
						die();           
					}
				}

		 // if (count($eventoInscricao) == 0) {        
				$evento_inscricao->setIdEvento($idEvento); 
				$evento_inscricao->setIdPessoa($idPessoa);
				if (property_exists($data, 'id_forma_pagamento')) { 
					$evento_inscricao->setIdFormaPagamento($data->id_forma_pagamento);
				}

				$isento=0;

				if ($data->isento==true) {
					$isento=1;
				}
				$evento_inscricao->setIsento($isento);

				if ($data->pago==1)
				{
			//Precisa gerar um item na tabela Caixa
					if (property_exists($data, 'id')) {  
						$caixa = new Caixa($data->id_caixa);
					} else {
						$caixa = new Caixa();
					}

					$userSes = fSession::get('user');
					$idEntidade = $userSes['user']['entidadePessoa'];

			$caixa->setIdSituacao(6); //Status de Recebido
			$caixa->setIdTipoLancamento(1); //Recebimento
			$caixa->setIdCategoria(2); //Categoria: Eventos
			$caixa->setIdMoeda(1); //Moeda padrão

			$aSearchContaBancaria = array();
			$aSearchContaBancaria['id_entidade='] = $idEntidade;
			$aSearchContaBancaria['principal='] = 1;
			$contaBancaria = fRecordSet::build('ContaBancaria', $aSearchContaBancaria);
			$caixa->setIdContaBancaria($contaBancaria[0]->getId());

			$caixa->setIdFormaPagamento($data->id_forma_pagamento);
			$caixa->setIdPessoa($idPessoa);

			$data_atual = date('Y-m-d h:i:s');

			$caixa->setDataVencimento($data->data_evento);  

			$caixa->setDescricao('Evento: ' .$data->title);

			$caixa->setValor($data->valor);
			$caixa->setJuros(0);
			$caixa->setMulta(0);
			$caixa->setDesconto(0);
			$caixa->setValorFinal($data->valor);
			$caixa->setDataLancamento($data_atual);
			$caixa->setNumeroDocumento('');
			$caixa->setMaisDetalhes('');
			$caixa->setDataPagamento($data_atual);
			$caixa->setAtivo(1);  

			$caixa->store();  

			$id_caixa = $caixa->getId();         

		} else {
			$id_caixa='';
		}

		$evento_inscricao->setIdCaixa($id_caixa);
		$evento_inscricao->setDataCadastro(date('Y-m-d H:i:s'));  
		$evento_inscricao->store(); 
		 // }        
	}  
	$arrMensagem = array('error' => 0, 'id_evento' => $idEvento, 'mensagem' => 'Pré-inscrições realizadas');
	fJSON::output($arrMensagem);
	die();
}catch (fValidationException $e) {      
	$error = $this->errorMessage("Erro na inclusão",$e);
	$arrMensagem = array('error' => -1, 'mensagem' => $error);
	fJSON::output($arrMensagem);
	die();
}     

}  

/*
	Módulo: Mesquita
	Descrição: Obter Lista de Inscrições de Eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/inscricaoevento/<id_evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/12/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 26/12/2014
	*/

	public function getInscricaoEvento($id_evento = "",  $full = false) {

		$aSearch = array();
		if ($id_evento != "") {
			$aSearch['id_evento='] = $id_evento;
		}  

		$inscricao_evento = fRecordSet::build('EventoInscricao', $aSearch);

		if ($full == false) {

			$aInscricaoEvento = array();

			foreach ($inscricao_evento->getRecords() as $key => $value) {

				$resultEvento = $this->getEvento($id_evento, true);

				$resultPessoa = $this->getPessoa($value->getIdPessoa(), true);

				if ($value->getIsento()==1) {
					$isento_descricao = "Sim";
					$isento=true;
					$pagodisabled = true;
					$id_forma_pagamentodisabled = true;
				} else if ($value->getIsento()==0) {
					$isento_descricao = "Não";
					$isento=false;
					$pagodisabled = false;
					$id_forma_pagamentodisabled = false;          
				} 

				if ($value->getIdCaixa()==null) {
					$pago=false;
					$isentodisabled = false;
				} else {
					$pago=true;
					$isentodisabled = true;
				}

				$data_evento = date('d/m/Y', strtotime($resultEvento[0]['start']));       

				$aInscricaoEvento[] = array(
					'id' => $value->getId(),
					'id_evento' => $value->getIdEvento(),
					'nome_evento' => $resultEvento[0]['title'],
					'data_evento' => $data_evento,
					'id_pessoa' => $value->getIdPessoa(),
					'nome_pessoa' => $resultPessoa['nome'],
					'id_caixa' => $value->getIdCaixa(),
					'pago' => $pago,
					'id_forma_pagamento' => $value->getIdFormaPagamento(),
					'forma_pagamento' => 'Boleto Bancário',
					'isento' => $isento,
					'isento_descricao' => $isento_descricao,
					'id_forma_pagamentodisabled' =>  $id_forma_pagamentodisabled,
					'pagodisabled' => $pagodisabled,
					'isentodisabled' => $isentodisabled
					);
			}

			if (count($aInscricaoEvento) == 0) {
				$aInscricaoEvento[] = array('error' => -1, 'mensagem' => "Nenhuma inscrição encontrada.");
			}

			$aInscricaoEvento = array(
				'inscricao_evento' => $aInscricaoEvento
				);          

			fJSON::output($aInscricaoEvento);
		}
		else {
			return $inscricao_evento[0];
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Cadastra a evento frequencia
	Método: POST
	URL: http://localhost/sig/api/index.php/deltemplate/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 24/12/2014
	*/

	public function postEventoFrequencia() {

		$data = json_decode(file_get_contents("php://input"));

		$evento_frequencia = new EventoFrequencia();
		$mensagem = "Incluído com sucesso!";

		try {
		//******** Grava informações na Tabela Evento Frequencia
			if (property_exists($data, 'id')){
				$evento_frequencia->setIdPessoa($data->id);
			}

			if (property_exists($data, 'id_evento')){
				$evento_frequencia->setIdEvento($data->id_evento);
			}

			if (property_exists($data, 'donatario')){
				$evento_frequencia->setDonatario($data->donatario);
			}

			if (property_exists($data, 'isento')){
				$evento_frequencia->setIsento($data->isento);
			}

			$data_cadastro = date("Y-m-d h:i:s");

			$evento_frequencia->setDataCadastro($data_cadastro);

			$evento_frequencia->store();
		//******** Fim - Grava informações na Tabela Evento Frequencia

			$id_evento_frequencia = $evento_frequencia->getId();

			$arrMensagem = array('error' => 0, 
				'id' => $id_evento_frequencia, 
				'data_cadastro' => $data_cadastro, 
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Altera na tabela  evento_frequencia o campo id_pessoa_pagante
	Método: POST
	URL: http://localhost/sig/api/index.php/eventofrequenciauppagante/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 27/12/2014
	*/

	public function postEventoFrequenciaUpPagante() {
		$userSes = fSession::get('user');
		$idEntidade = $userSes['user']['entidadePessoa'];
		$id_caixa = '';

		$data = json_decode(file_get_contents("php://input"));

		$mensagem = "Pagante incluído com sucesso!";

		try {
		//******** Altera id_pessoa_pagante na Tabela Evento_Frequencia
			foreach ($data as $key => $value) {
		//if (property_exists($data, 'id') && property_exists($data, 'id_pessoa_pagante')){
				if($value->valor != '0,00'){
					$aSearch = array();
					$aSearch['id_entidade='] = $idEntidade;
					$aSearch['principal='] = 1;
					$contaBancaria = fRecordSet::build('ContaBancaria', $aSearch);

					$caixa = new Caixa();

					$caixa->setIdSituacao(2);
					$caixa->setIdTipoLancamento(1);
					$caixa->setIdCategoria(2);
					$caixa->setIdContaBancaria($contaBancaria[0]->getId());
					$caixa->setIdFormaPagamento($value->id_forma_pagamento);
					$caixa->setIdPessoa($value->id_pessoa_pagante);

					$aDt = explode(" ", $value->data_vencimento);
					$aData = explode("/", $aDt[0]);
					$data_vencimento = $aData[2]. "-" .$aData[1] ."-" .$aData[0];        
					$caixa->setDataVencimento($data_vencimento);

					$caixa->setDescricao('Evento: ' .$value->title);
					$caixa->setValor(str_replace(',', '.', $value->valor));
					$caixa->setJuros(0);
					$caixa->setMulta(0);
					$caixa->setDesconto(0);
					$caixa->setValorFinal(str_replace(',', '.', $value->valor));

					$data_cadastro = date('Y-m-d h:i:s', strtotime($value->data_lancamento));
					$caixa->setDataLancamento($data_cadastro);

					$caixa->setDataPagamento(date('Y-m-d'));
					$caixa->setAtivo(1);

					$caixa->store();

					$id_caixa = $caixa->getId();
				}

				$evento_frequencia = new EventoFrequencia($value->id);
				$evento_frequencia->setIdPessoaPagante($value->id_pessoa_pagante);
				if($id_caixa != ''){
					$evento_frequencia->setIdFormaPagamento($value->id_forma_pagamento);
					$evento_frequencia->setIdCaixa($id_caixa);
				}
				$evento_frequencia->setIsento(1);
				$evento_frequencia->store();

				$this->setAuditoria('EventoFrequencia','IdPessoaPagante', '', $value->id_pessoa_pagante, $value->id);

			}
		//******** Fim - Altera id_pessoa_pagante na Tabela Evento_Frequencia
			$pessoas = $data;

			$arrMensagem = array('error' => 0, 
				'id_caixa' => $id_caixa,
				'pessoas' => $pessoas,
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter lista de evento frequencia
	Método: GET
	URL: http://localhost/sig/api/index.php/eventofrequencia/<eventofrequencia>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 24/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 24/12/2014
	*/

	public function getEventoFrequencia($id_evento = "", $full = false) {

		//$pessoa = fRecordSet::build('Pessoa', array());
		$sql = "SELECT
				pessoa.id,
				pessoa.id_motivo_bloqueio,
				pessoa.id_estado_civil,
				pessoa.id_tipo_pessoa,
				pessoa.id_fonte_captacao,
				pessoa.id_categoria_naoassociado,
				pessoa.id_tipo_fornecedor,
				pessoa.id_departamento_funcionario,
				pessoa.id_religiao,
				pessoa.id_pessoa_indicadora,
				pessoa.id_forma_tratamento,
				pessoa.id_funcao,
				pessoa.nome,
				pessoa.apelido,
				pessoa.nome_tradicao,
				pessoa.data_nascimento,
				pessoa.nacionalidade,
				pessoa.naturalidade,
				pessoa.estado_nascimento,
				pessoa.nacionalidade_familia,
				pessoa.naturalidade_familia,
				pessoa.sexo,
				pessoa.habilitacao,
				pessoa.faculdade,
				pessoa.tipo_residencia,
				pessoa.antecedente_criminal,
				pessoa.empresa,
				pessoa.ocupacao,
				pessoa.especializacao,
				pessoa.email,
				pessoa.foto,
				pessoa.data_associacao,
				pessoa.data_desligamento,
				pessoa.observacao,
				pessoa.numero_carteirinha,
				pessoa.renda,
				pessoa.falecido,
				pessoa.website,
				pessoa.nome_mae,
				pessoa.nome_pai,
				pessoa.registro_docente,
				pessoa.associado,
				pessoa.beneficiario,
				pessoa.parentesco,
				pessoa.funcionario,
				pessoa.proprietario,
				pessoa.responsavel,
				pessoa.donatario,
				pessoa.responsavel_proprietario,
				pessoa.fornecedor,
				pessoa.aluno,
				pessoa.codigo,
				pessoa.professor,
				pessoa.entidade,
				pessoa.padrinho,
				pessoa.enviar_convite,
				pessoa.ativo,
				pessoa.data_cadastro,
				pessoa.id_cor_raca,
				pessoa.id_pessoa_responsavel_proprietario
				FROM pessoa";

		$pessoa = $this->_getDb()->query($sql);
		$aPessoa = array();

		foreach ($pessoa as $key => $value) {
			$aPessoa[$value['id']] = array(                
				'nome' => $value['nome']
				);      
		}

		//$formaPagamento = fRecordSet::build('FormaPagamento', array());
		$sql = "SELECT forma_pagamento.id, forma_pagamento.descricao, forma_pagamento.ativo FROM forma_pagamento";
		$formaPagamento = $this->_getDb()->query($sql);

		$aFormaPagamento = array();

		foreach ($formaPagamento as $key => $value) {
			$aFormaPagamento[$value['id']] = array(                
				'descricao' => $value['descricao'],
				);      
		}

		$sql = "SELECT situacao.id, situacao.descricao, situacao.ativo FROM situacao";
		//$situacao = fRecordSet::build('Situacao', array());
		$aSituacao = array();

		$situacao = $this->_getDb()->query($sql);

		foreach ($situacao as $key => $value) {
			$aSituacao[$value['id']] = array(                
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				);      
		}

		//$caixa = fRecordSet::build('Caixa', array());
		$sql = "SELECT
				caixa.id,
				caixa.id_situacao,
				caixa.id_tipo_lancamento,
				caixa.id_categoria,
				caixa.id_conta_bancaria,
				caixa.id_forma_pagamento,
				caixa.id_pessoa,
				caixa.id_evento,
				caixa.id_centro_custo,
				caixa.id_produtos_servicos,
				caixa.data_vencimento,
				caixa.descricao,
				caixa.id_moeda,
				caixa.valor,
				caixa.juros,
				caixa.multa,
				caixa.desconto,
				caixa.valor_final,
				caixa.data_lancamento,
				caixa.numero_documento,
				caixa.mais_detalhes,
				caixa.data_pagamento,
				caixa.ativo
				from caixa";
		$aCaixa = array();

		$caixa = $this->_getDb()->query($sql);

		foreach ($caixa as $key => $value) {

			$situacao = '';
			if (array_key_exists($value['id_situacao'], $aSituacao)) {
				$situacao = $aSituacao[$value['id_situacao']]['descricao'];
			}

			$aCaixa[$value['id']] = array(                
				'id' => $value['id'],
				'id_situacao' => $value['id_situacao'],
				'situacao' => $situacao,
				);      
		}

		$aSearch = array();

		if($id_evento != ''){
			//$aSearch['id_evento='] = $id_evento;
			$sql = "SELECT
					evento_frequencia.id,
					evento_frequencia.id_evento,
					evento_frequencia.id_pessoa,
					evento_frequencia.id_pessoa_pagante,
					evento_frequencia.id_caixa,
					evento_frequencia.id_forma_pagamento,
					evento_frequencia.isento,
					evento_frequencia.donatario,
					evento_frequencia.data_cadastro
					from evento_frequencia WHERE id_evento = " . $id_evento;
		}
		else{
			$sql = "SELECT
					evento_frequencia.id,
					evento_frequencia.id_evento,
					evento_frequencia.id_pessoa,
					evento_frequencia.id_pessoa_pagante,
					evento_frequencia.id_caixa,
					evento_frequencia.id_forma_pagamento,
					evento_frequencia.isento,
					evento_frequencia.donatario,
					evento_frequencia.data_cadastro
					from evento_frequencia";
		}

		$eventoFrequencia = $this->_getDb()->query($sql);

		//$eventoFrequencia = fRecordSet::build('EventoFrequencia', $aSearch);
		$aEventoFrequencia = array();

		foreach ($eventoFrequencia as $key => $value) {

			$dataCadastro = "";
			if ($value['data_cadastro'] != null) {
				$data_cadastro =  explode('-', $value['data_cadastro']);
				$data_cadastro = $data_cadastro[2] . '/' . $data_cadastro[1] . '/' . $data_cadastro[0];
				$dataCadastro = $data_cadastro;
			}

			$pagante = '';
			if (array_key_exists($value['id_pessoa_pagante'], $aPessoa)) {
				$pagante = $aPessoa[$value['id_pessoa_pagante']]['nome'];
			}

			$id_situacao = '';
			$situacao = 'Não';
			if (array_key_exists($value['id_caixa'], $aCaixa)) {
				$id_situacao = $aCaixa[$value['id_caixa']]['id_situacao'];
				$situacao = $aCaixa[$value['id_caixa']]['situacao'];
			}

			$pago = null;
			if ($value['id_caixa'] != null) {
				$pago = 'Pago';
			}

			$nome = '';
			if (array_key_exists($value['id_pessoa'], $aPessoa)) {
				$nome = $aPessoa[$value['id_pessoa']]['nome'];
			}

			$forma_pagamento = '';
			if (array_key_exists($value['id_forma_pagamento'], $aFormaPagamento)) {
				$forma_pagamento = $aFormaPagamento[$value['id_forma_pagamento']]['descricao'];
			}

			$aEventoFrequencia[] = array(                
				'id' => $value['id'],
				'id_evento' => $value['id_evento'],
				'id_pessoa' => $value['id_pessoa'],
				'id_pessoa_pagante' => $value['id_pessoa_pagante'],
				'pagante' => $pagante,
				'id_caixa' => $value['id_caixa'],
				'id_situacao' => $id_situacao,
				'situacao' => $situacao,
				'id_forma_pagamento' => $value['id_forma_pagamento'],
				'forma_pagamento' => $forma_pagamento,
				'nome' => $nome,
				'isento' => $value['isento'],
				'donatario' => $value['donatario'],
				'data_cadastro' => $dataCadastro,
				'situacao_pagamento' => $pago,
				);

		}

		if ($full == false) {
			fJSON::output($aEventoFrequencia);
		}else{
			return $aEventoFrequencia;
		}
	}

	 /*
	Módulo: Mesquita
	Descrição: Excluir um Evento Frequencia
	Método: GET
	URL: http://localhost/sig/api/index.php/deleventofrequencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 26/12/2014
	*/

	public function postDelEventoFrequencia() {
		$data = json_decode(file_get_contents("php://input"));
		
		$mensagem = "Excluído com sucesso!";

		try {
		//******** Deletar registro na tabela evento Pessoa e caixa
			if (property_exists($data, 'id')) {
				$eventofrequencia = new EventoFrequencia($data->id);
				$eventofrequencia->delete();
			}
			
			if (property_exists($data, 'id_pessoa')) {
				if ($data->id_pessoa != '') {
					$aSearch = array();
					$aSearch['id_pessoa_pagante='] = $data->id_pessoa;

					$eventofrequenciaUp = fRecordSet::build('EventoFrequencia', $aSearch);

					foreach ($eventofrequenciaUp->getRecords() as $key => $value) {
						$eventofrequenciaUp[$key]->setIdPessoaPagante(null);
						$eventofrequenciaUp[$key]->store();
					}
				}
			}
			
			if (property_exists($data, 'id_caixa')) {
				if ($data->id_caixa != '') {
					$this->setAuditoria('Caixa','Id', $data->id_caixa, '', $data->id_caixa);

					$caixa = new Caixa($data->id_caixa);
					$caixa->delete();
				}
			}
		//******** Fim - Deletar registro na tabela evento Pessoa e caixa

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


 /*
	Módulo: Mesquita
	Descrição: Cadastra a caixa e alterar evento frequencia
	Método: POST
	URL: http://localhost/sig/api/index.php/caixaupfrequencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 26/12/2014
	*/

	public function postCaixaUpFrequencia() {
		$userSes = fSession::get('user');
		$idEntidade = $userSes['user']['entidadePessoa'];

		$data = json_decode(file_get_contents("php://input"));

		$mensagem = "Pagamento confirmado com sucesso!";

		$data_atual = date('Y-m-d h:i:s');

		try {
		//******** Grava informações na Tabela caica e alterar evento frequencia
			if($data->isento == 0){
				$aSearch = array();
				$aSearch['id_entidade='] = $idEntidade;
				$aSearch['principal='] = 1;
				$contaBancaria = fRecordSet::build('ContaBancaria', $aSearch);

				$caixa = new Caixa();

				if (property_exists($data, 'id_situacao')){
					$caixa->setIdSituacao($data->id_situacao);
				}

				$caixa->setIdTipoLancamento(1);
				$caixa->setIdCategoria(2);
				$caixa->setIdContaBancaria($contaBancaria[0]->getId());

				if (property_exists($data, 'id_forma_pagamento')){
					$caixa->setIdFormaPagamento($data->id_forma_pagamento);
				}

				if (property_exists($data, 'id_pessoa')){
					$caixa->setIdPessoa($data->id_pessoa);
				}

				if (property_exists($data, 'data_vencimento')){
			//$data_vencimento = date('Y-m-d', strtotime($data->data_vencimento));
			//$data_vencimento = new fDate($data->data_vencimento);        
					$aDt = explode(" ", $data->data_vencimento);
					$aData = explode("/", $aDt[0]);
					$data_vencimento = $aData[2]. "-" .$aData[1] ."-" .$aData[0];        

					$caixa->setDataVencimento($data_vencimento);
				}

				if (property_exists($data, 'title')){      
					$caixa->setDescricao('Evento: ' .$data->title);
				}

				if (property_exists($data, 'valor')){
					$caixa->setValor(str_replace(',', '.', $data->valor));
				}

				$caixa->setJuros(0);
				$caixa->setMulta(0);
				$caixa->setDesconto(0);

				if (property_exists($data, 'valor')){
					$caixa->setValorFinal(str_replace(',', '.', $data->valor));
				}

				if (property_exists($data, 'data_cadastro')){
					$data_cadastro = date('Y-m-d h:i:s', strtotime($data->data_cadastro));
					$caixa->setDataLancamento($data_cadastro);
				}

				$caixa->setDataPagamento($data_atual);
				$caixa->setAtivo(1);

				$caixa->store();

				$id_caixa = $caixa->getId();

				$id_forma_pagamento = $caixa->getIdFormaPagamento();
			}else{
				$id_caixa = null;        
				$id_forma_pagamento = null;
			}

			$eventoFrequencia = new EventoFrequencia($data->id);
			$eventoFrequencia->setIdCaixa($id_caixa);
			$eventoFrequencia->setIdFormaPagamento($id_forma_pagamento);
			$eventoFrequencia->setIsento($data->isento);
			$eventoFrequencia->store();

			$this->setAuditoria('EventoFrequencia','IdCaixa', '', $id_caixa, $data->id);
			$this->setAuditoria('EventoFrequencia','IdFormaPagamento', '', $id_forma_pagamento, $data->id);


		//******** Fim - Grava informações na Tabela caica e alterar evento frequencia

			$arrMensagem = array('error' => 0, 'id_caixa' => $id_caixa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();


		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Pessoas com o evento frequencia especificado no campo id_evento
	Método: GET
	URL: http://localhost/sig/api/index.php/stringeventofrequencia?string=<nome>&idevento=<id_evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 29/12/2014
	*/

	public function getEventoFrequenciaString() {
		$request = $this->_slimApp->request()->params();

		$aSearch = array();
		$aSearch['nome~'] = $request['string'];  

		$pessoa = fRecordSet::build('Pessoa', $aSearch, array('nome' => 'asc')); 

		$aPessoa = array(); 
		
		$aSearch = array();
		$aSearch['id_evento='] = $request['idevento'];  

		$eventoFrequencia = fRecordSet::build('EventoFrequencia', $aSearch); 

		$aEventoFrequencia = array(); 
		foreach ($eventoFrequencia->getRecords() as $key => $value) {
			$aEventoFrequencia[$value->getIdPessoa()] = array(
				'id' => $value->getId(),
				'id_evento' => $value->getIdEvento(),
				'id_pessoa' => $value->getIdPessoa(),
				);
		}

		if ($pessoa->count() > 0) {

			foreach ($pessoa->getRecords() as $key => $value) {
				$db_id_evento = '';
				if (array_key_exists($value->getId(), $aEventoFrequencia)) {
					$db_id_evento = $aEventoFrequencia[$value->getId()]['id_evento'];
				}

				if($db_id_evento){

					$dataAssociacao = '';
					$dataCadastro = '';
					$dataDesligamento = '';
					$dataNascimento = '';

					if ($value->getDataAssociacao() != null) {
						$dataAssociacao = $value->getDataAssociacao()->format('d/m/Y');
					}
					if ($value->getDataCadastro() != null) {
						$dataCadastro = $value->getDataCadastro()->format('d/m/Y');
					}
					if ($value->getDataNascimento() != null) {
						$dataNascimento = $value->getDataNascimento()->format('d/m/Y');
					}
					if ($value->getDataDesligamento() != null) {
						$dataDesligamento = $value->getDataDesligamento()->format('d/m/Y');
					}

			$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value->getId(), "", true, 1); //Lista Documentos da Pessoa

			if (strlen($resultDocumentoPessoaRG[0]["mensagem"]) > 0) {
				$rg = "";
			}else{
				$rg = $resultDocumentoPessoaRG[0]["numero"];
			}

			$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getId(), "", true, 2);

			if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
				$cpf = "";
			}else{
				$cpf = self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
			}

			$resultDocumentoPessoaRNE = $this->getDocumentoPessoa($value->getId(), "", true, 3);

			if (strlen($resultDocumentoPessoaRNE[0]["mensagem"]) > 0) {
				$rne = "";
			}else{
				$rne = $resultDocumentoPessoaRNE[0]["numero"];
			}

			$resultDocumentoPessoaPassaporte = $this->getDocumentoPessoa($value->getId(), "", true, 4);

			if (strlen($resultDocumentoPessoaPassaporte[0]["mensagem"]) > 0) {
				$passaporte = "";
			}else{
				$passaporte = $resultDocumentoPessoaPassaporte[0]["numero"];
			}

			$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value->getId(), "", true, 5);

			if (strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
				$cnpj = "";
			}else{
				$cnpj = self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
			}

			$resultDocumentoPessoaIE = $this->getDocumentoPessoa($value->getId(), "", true, 6);

			if (strlen($resultDocumentoPessoaIE[0]["mensagem"]) > 0) {
				$inscricaoEstadual = "";
			}else{
				$inscricaoEstadual = $resultDocumentoPessoaIE[0]["numero"];
			}

			$resultDocumentoPessoaIdentificacaoInternacional = $this->getDocumentoPessoa($value->getId(), "", true, 7);

			if (strlen($resultDocumentoPessoaIdentificacaoInternacional[0]["mensagem"]) > 0) {
				$identificacao_internacional = "";
			}else{
				$identificacao_internacional = $resultDocumentoPessoaIdentificacaoInternacional[0]["numero"];
			}   

			$token = '';
			$login = '';
			$senha = '';

			$resultUsuario = $this->getUsuario(0, $value->getId(), true);

			if($resultUsuario['error'] == 0){
				$token = $resultUsuario['usuario']['0']['token'];
				$login = $resultUsuario['usuario']['0']['login'];
				$senha = $resultUsuario['usuario']['0']['senha'];
			}

			$aPessoa[] = array(
				'id' => $value->getId(),
				'id_evento' => $db_id_evento,
				'nome' => $value->getNome(),
				'apelido' => $value->getApelido(),
				'nome_tradicao' => $value->getNomeTradicao(),
				'data_nascimento' => $dataNascimento,
				'nacionalidade' => $value->getNacionalidade(),
				'sexo' => $value->getSexo(),
				'empresa' => $value->getEmpresa(),
				'ocupacao' => $value->getOcupacao(),
				'login' => $login,
				'senha' => $senha,
				'email' => $value->getEmail(),
				'foto' => $value->getFoto(),
				'data_associacao' => $dataAssociacao,
				'token' => $token,
				'associado' => $value->getAssociado(),
				'ativo' => $value->getAtivo(),
				'data_cadastro' => $dataCadastro,                                        
				'rg' => $rg,
				'cpf' => $cpf,
				'rne' => $rne,
				'passaporte' => $passaporte,
				'identificacao_internacional' => $identificacao_internacional,
				'donatario' => $value->getDonatario(),
				);
		};
	}
}

if (count($aPessoa) == 0) {
	$aPessoa = array(
		'error' => "-1",
		'pessoa' => $aPessoa,
		'mensagem' => "Nenhuma pessoa encontrada."
		);
	fJSON::output($aPessoa);
	die;
}

$aPessoa = array(
	'pessoa' => $aPessoa
	);

fJSON::output($aPessoa);      
}

	/*
	Módulo: Mesquita
	Descrição: Obter ata de evento e gerar um PDF
	Método: GET
	URL: http://localhost/sig/api/index.php/atapdf/<id>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 30/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 30/12/2014
	*/
	public function getAtaPdf($id_evento = "", $full = false) {        

		$aSearch = array();
		$aSearch['id_evento='] = $id_evento;

		$evento = fRecordSet::build('EventoAta', $aSearch);

		$aEvento = array();

		if ($evento->count() == 0) {
			$content = "Nenhuma ata encontrada.";
		}else{
			$content = $evento[0]->getAta();
		}

		try
		{
			$html2pdf = new HTML2PDF('P', 'A4', 'fr', true, 'UTF-8', 3);
			$html2pdf->pdf->SetDisplayMode('fullpage');
			$html2pdf->writeHTML($content, isset($_GET['vuehtml']));
			$html2pdf->Output('ata.pdf');

			// set HTTP response headers
			header("Content-Type: application/pdf");
			header("Cache-Control: max-age=0");
			header("Accept-Ranges: none");
			header("Content-Disposition: attachment; filename=\"ata.pdf\"");

		}
		catch(HTML2PDF_exception $e) {
			echo $e;
			exit;
		}
	}


	public function montaHtmlCarometro($aluno, $ultima_turma=false){		

		$cmt=0;
		$body = "<div style='float:left; margin-bottom:20px; padding-top:40px;'><table width='100%'>";

		for($x=0; $x<5; $x++){

			for($a=0; $a<3; $a++){
				$body.= "<tr>";

				for($y=0; $y<6; $y++){			
					
					$body.= "<td align='center' style='width:100px;'>";
					$img = $aluno[($y+$cmt)]['foto'];
					$tag = "<img width='100' height='130' src='http://localhost/sig/img/pessoa/%'/>";
					$foto = ($img!='') ? str_replace("%",$img,$tag) : '&nbsp;';

					if($a==0){$body.= $foto;}
					if($a==1){$body.= "<p align='center' style='font-size:10px; margin:0px;'>".$aluno[($y+$cmt)]['codigo']."</p>";}
					if($a==2){$body.= "<p align='center' style='font-size:10px; margin:0px;'>".$aluno[($y+$cmt)]['aluno']."</p>";}
					$body.= "</td>";					
				}

				$body .= "</tr>";
			}

			$cmt+=6;			
		}

		$body.= "</table></div>";
		if($ultima_turma == false){
			$body .= "<div style='page-break-before: always;'></div>";
		}
		else{
			$body .= "";
		}
		//$body.= ($ultima_turma) ? "" : 

		return $body;
		
	}

		/*
	Módulo: Escola
	Descrição: Obter fotos dos alunos e gerar um PDF
	Método: GET
	URL: http://localhost/sig/api/index.php/carometropdf/<id_aluno>
	Autenticação: Sim
	Resposta: JSON
	Data de Criação: 09/09/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function getCarometroPdf($id_etapa="", $id_curso="", $id_turma="", $id_aluno="") {

		$query = "SELECT e.descricao as etapa,c.nome as curso, t.serie,t.nome as turma,p.nome as aluno,p.codigo,p.foto".
		" FROM matricula m INNER JOIN etapa e ON m.id_etapa = e.id".
		" INNER JOIN curso c ON m.id_curso = c.id".
		" INNER JOIN turma t ON m.id_turma = t.id".
		" INNER JOIN pessoa p ON m.id_aluno = p.id".
		" WHERE m.id_etapa = ".$id_etapa;

		if($id_curso != ""){
			$query .= " AND m.id_curso = " . $id_curso;
		}
		if($id_turma != ""){
			$query .= " AND m.id_turma = " . $id_turma;
		}
		if($id_aluno != ""){
			$query .= " AND m.id_aluno = " . $id_aluno;
		}

		$query .= " ORDER BY c.nome,t.nome,p.nome";

		$doc = '';

		$bd = $this->_getDb()->query($query);
		//$bd2 = $this->_getDb()->query($query);

		foreach ($bd as $key => $value) {
			$dados[] = array('etapa'=>$value['etapa'],'curso'=>$value['curso'],'serie'=>$value['serie'], 'turma'=>$value['turma'], 'aluno'=>$value['aluno'],'foto'=>$value['foto'],'codigo'=>$value['codigo']);
		}

		$resultado = count($dados);

		if($resultado == 0){
			die('<h2 align="center">Nenhum resultado encontrado</h2>');
		}

		$logo = $this->getLogotipoEntidade();

		$header = "<html><body>".
			  "<style>body {  
              font-family: 'Helvetica';
              font-size: 13px;  
              }
              #logo img{border-radius: 10px;}
              @page { margin: 5px 20px; }</style>".
			  "<div id='header'>".
			  "<div align='center' id='logo'>".$logo."<div>".			  
	          "<h3 style='text-align:center; margin-bottom:5px; padding-bottom:5px; margin-top:5px; padding-top:5px; font-size:35px; font-family: 'Helvetica';'>Escola Islâmica Brasileira</h3>".	          
			  "<strong><p style='margin-top: 0px; padding-top:0px; margin-bottom:15px; font-size:20px; text-align:center;'>Carômetro</p></strong>".
			  "</div>".
			  "<div style='float:left;'><table width='100%' style='border:none;' border='0' align='center'>".
			  "<tr>".
			  "<td><b>Etapa:</b> &E </td>".
			  "<td><b>Curso:</b> &C </td>".
			  "<td><b>Série:</b> &Sº </td>".
			  "<td><b>Turma:</b> &T </td>".
			  "</tr><tr><td></td><td></td><td></td><td></td></tr>".
			  "</table></div>";


		$turmaAnterior = "";
		$id = -1;
		foreach($dados as $value){		

			if($turmaAnterior == ""  || $value['turma'] != $turmaAnterior){

				$turmaAnterior = $value['turma'];		
				$id++;

				//$doc = ($id>1) ? "<div style='page-break-before: always;'>" : "<div>";
				$doc.= $header;
				$doc = str_replace('&E', $value['etapa'], $doc);
				$doc = str_replace('&C', $value['curso'], $doc);
				$doc = str_replace('&S', $value['serie'], $doc);
				$doc = str_replace('&T', $value['turma'], $doc);
				$doc.= "&B".$id;
				
			}
			$aluno[$id]['etapa'] =$value['etapa'];
			$aluno[$id]['curso'] =$value['curso'];
			$aluno[$id]['serie'] =$value['serie'];
			$aluno[$id]['turma'] =$value['turma'];
			$aluno[$id][] = array('foto'=>$value['foto'],'codigo'=>$value['codigo'],'aluno'=>$value['aluno']);
		}

		$contador = count($aluno);

		for($i = 0; $i <= $contador; $i++){
			//$ultima_turma = ($i==count($aluno)) ? true : false;
			if($i > $contador){
				$ultima_turma = true;
			}
			else{
				$ultima_turma = false;
			}
			$doc = str_replace('&B'.$i, $this->montaHtmlCarometro($aluno[$i],$ultima_turma), $doc);
		}

		$doc .= "</body></html>";

		$dompdf = new DOMPDF();
		$dompdf->load_html($doc);
		$dompdf->set_paper("A4", "portrail");
		$dompdf->render();

		$dompdf->stream("carometro.pdf");

	}

	public function montaHtmlReuniaoAluno($aluno, $ultima_turma=false){

		unset($aluno['turma']);
		unset($aluno['etapa']);

		$cmt=0;

		$tr = '';
		$body = '';

		for($i = 0; $i < count($aluno); $i++){
			$tr.= "<tr>";
			$tr .= "<td><p  style='font-size:12px; margin:0px;'>".$aluno[$i]['codigo']."</p></td>";
			$tr .= "<td nowrap='nowrap'><p  style='font-size:12px; margin:0px;'>".$aluno[$i]['aluno']."</p></td>";
			$tr .= "<td><p  style='font-size:12px; margin:0px;'>________________________________________</p></td>";
			$tr .= "</tr>";
		}

		$body .= $tr;

		$body .= "</table>";

		
		if($ultima_turma == false){
			$body .= "<div style='page-break-before: always;'></div>";
		}
		else{
			$body .= "";
		}
		//$body.= ($ultima_turma) ? "" :

		return $body;
		
	}

	
	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Grupo de Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/grupobens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getGrupoBens($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$grupobens = fRecordSet::build('GrupoBens', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aGrupoBens = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aGrupoBens[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Grupo de Bens",
					'ativo' => ""
					);   
			}      

			foreach ($grupobens->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aGrupoBens[] = array(
					'tipo' => "Grupo Bens",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aGrupoBens) == 0) {
				$aGrupoBens[] = array('error' => -1, 'mensagem' => "Nenhum grupo de bens encontrado.");
			}

			$aGrupoBens = array(
				'grupobens' => $aGrupoBens
				);          

			fJSON::output($aGrupoBens);
		}
		else {
			return $grupobens[0];
		}
	}    

/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo grupo de bens
	Método: GET
	URL: http://localhost/sig/api/index.php/grupobens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postGrupoBens() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$grupobens = new GrupoBens($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Grupo de Bens alterado com sucesso!";
			$alteracao=1;
		}else{
			$grupobens = new GrupoBens();
			$mensagem = "Grupo de Bens incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Categoria
			if (property_exists($data, 'descricao')){
				$grupoBensAnt = '';
				if($alteracao==1){
					$grupoBensAnt = $grupobens->getDescricao();
					$this->setAuditoria('GrupoBens', 'Descricao', $grupoBensAnt, $data->descricao,$data->id);
					$grupobens->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('GrupoBens', 'Descricao', $grupoBensAnt, $data->descricao);
					$grupobens->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$grupobens->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('GrupoBens', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O grupo de bens já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$grupobens->store();
				}     
			} else {
				$grupobens->store();
			} 

		    //******** Fim - Grava informações na Tabela de grupo_bens
			
			$id_grupobens = $grupobens->getId();

			$arrMensagem = array('error' => 0, 'id_grupobens' => $id_grupobens, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}     

	function postDepartamentoFuncionario(){

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');
		$id_entidade = $user['user']['id'];

		if (property_exists($data, 'id')) {
			$depto = new DepartamentoFuncionario($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Departamento de funcionário alterado com sucesso!";
			$alteracao=1;

		}else{
			$depto = new DepartamentoFuncionario();
			$mensagem = "Departamento de funcionário incluído com sucesso!";
			$alteracao=0;
		}
		try {
		//******** Grava informações na Tabela de Categoria
			if (property_exists($data, 'descricao')){
				$deptoAnt = '';
				if($alteracao==1){
					$deptoAnt = $depto->getDescricao();
					$this->setAuditoria('DepartamentoFuncionario', 'Descricao', $deptoAnt, $data->descricao,$data->id);
					$depto->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('DepartamentoFuncionario', 'Descricao', $deptoAnt, $data->descricao);
					$depto->setDescricao($data->descricao);  
				}


			}
			if (property_exists($data, 'ativo')){
				$depto->setAtivo($data->ativo);
			}

			$depto->setIdEntidade($id_entidade);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$aSearch['id_entidade='] = $id_entidade;
				$countDescricao = fRecordset::build('DepartamentoFuncionario', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O grupo departamento de funcionário já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$depto->store();
				}     
			} else {
				$depto->store();
			} 
		//******** Fim - Grava informações na Tabela de grupo_bens
			$id_depto = $depto->getId();

			$arrMensagem = array('error' => 0, 'id_depto' => $id_depto, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}

	}

	function getDepartamentoFuncionario($id_consulta="",$id="", $full = false){
		$user = fSession::get('user');
		$id_entidade = $user['user']['id'];

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$aSearch['id_entidade='] = $id_entidade;

		$depto = fRecordSet::build('DepartamentoFuncionario', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aDeptoFuncionario = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aDeptoFuncionario[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Departamento Funcionario",
					'ativo' => ""
					);
			}

			foreach ($depto->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aDeptoFuncionario[] = array(
					'tipo' => "Departamento Funcionarios",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aDeptoFuncionario) == 0) {
				$aDeptoFuncionario[] = array('error' => -1, 'mensagem' => "Nenhum departamento encontrado.");
				fJSON::output($aDeptoFuncionario);
				die();
			}

			$aDeptoFuncionario = array(
				'error' => 0,
				'departamentos' => $aDeptoFuncionario
				);

			fJSON::output($aDeptoFuncionario);
		} else {
			return $unidademedida[0];
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Unidade de Medida
	Método: GET
	URL: http://localhost/sig/api/index.php/unidademedida/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postUnidadeMedida() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$unidademedida = new UnidadeMedida($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Unidade de Medida alterada com sucesso!";
			$alteracao=1;
		}else{
			$unidademedida = new UnidadeMedida();
			$mensagem = "Unidade de Medida incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de UnidadeMedida
			if (property_exists($data, 'descricao')){
				$unidadeMedidaAnt = '';
				if($alteracao==1){
					$unidadeMedidaAnt = $unidademedida->getDescricao();
					$this->setAuditoria('UnidadeMedida', 'Descricao', $unidadeMedidaAnt, $data->descricao,$data->id);
					$unidademedida->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('UnidadeMedida', 'Descricao', $unidadeMedidaAnt, $data->descricao);
					$unidademedida->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$unidademedida->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('UnidadeMedida', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A unidade de medida já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$unidademedida->store();
				}     
			} else {
				$unidademedida->store();
			} 
		//******** Fim - Grava informações na Tabela de unidade_medida
			$id_unidademedida = $unidademedida->getId();

			$arrMensagem = array('error' => 0, 'id_unidademedida' => $id_unidademedida, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Fabricante
	Método: GET
	URL: http://localhost/sig/api/index.php/fabricante/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getFabricante($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$fabricante = fRecordSet::build('Fabricante', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aFabricante = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aFabricante[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Fabricante",
					'ativo' => ""
					);   
			}      

			foreach ($fabricante->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aFabricante[] = array(
					'tipo' => "Fabricante",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aFabricante) == 0) {
				$aFabricante[] = array('error' => -1, 'mensagem' => "Nenhum fabricante encontrado.");
			}

			$aFabricante = array(
				'fabricante' => $aFabricante
				);          

			fJSON::output($aFabricante);
		}
		else {
			return $fabricante[0];
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Fabricante
	Método: GET
	URL: http://localhost/sig/api/index.php/fabricante/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postFabricante() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$fabricante = new Fabricante($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Fabricante alterado com sucesso!";
			$alteracao=1;
		}else{
			$fabricante = new Fabricante();
			$mensagem = "Fabricante incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Fabricante
			if (property_exists($data, 'descricao')){
				$fabricanteAnt = '';
				if($alteracao==1){
					$fabricanteAnt = $fabricante->getDescricao();
					$this->setAuditoria('Fabricante', 'Descricao', $fabricanteAnt, $data->descricao,$data->id);
					$fabricante->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Fabricante', 'Descricao', $fabricanteAnt, $data->descricao);
					$fabricante->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$fabricante->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Fabricante', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O fabricante já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$fabricante->store();
				}     
			} else {
				$fabricante->store();
			} 
		//******** Fim - Grava informações na Tabela de unidade_medida
			$id_fabricante = $fabricante->getId();

			$arrMensagem = array('error' => 0, 'id_fabricante' => $id_fabricante, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}         

	

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Marca
	Método: GET
	URL: http://localhost/sig/api/index.php/marca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getMarca($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$marca = fRecordSet::build('Marca', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aMarca = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aMarca[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Marca",
					'ativo' => ""
					);   
			}      

			foreach ($marca->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aMarca[] = array(
					'tipo' => "Marca",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aMarca) == 0) {
				$aMarca[] = array('error' => -1, 'mensagem' => "Nenhuma marca encontrada.");
			}

			$aMarca = array(
				'marca' => $aMarca
				);          

			fJSON::output($aMarca);
		}
		else {
			return $marca[0];
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Marca
	Método: GET
	URL: http://localhost/sig/api/index.php/marca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postMarca() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$marca = new Marca($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Marca alterada com sucesso!";
			$alteracao=1;
		}else{
			$marca = new Marca();
			$mensagem = "Marca incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Marca
			if (property_exists($data, 'descricao')){
				$marcaAnt = '';
				if($alteracao==1){
					$marcaAnt = $marca->getDescricao();
					$this->setAuditoria('Marca', 'Descricao', $marcaAnt, $data->descricao,$data->id);
					$marca->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Marca', 'Descricao', $marcaAnt, $data->descricao);
					$marca->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$marca->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Marca', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A marca já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$marca->store();
				}     
			} else {
				$marca->store();
			} 
		//******** Fim - Grava informações na Tabela de marca
			$id_marca = $marca->getId();

			$arrMensagem = array('error' => 0, 'id_marca' => $id_marca, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}       

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Seguradora
	Método: GET
	URL: http://localhost/sig/api/index.php/seguradora/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getSeguradora($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$seguradora = fRecordSet::build('Seguradora', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aSeguradora = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aSeguradora[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Seguradora",
					'ativo' => ""
					);   
			}      

			foreach ($seguradora->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aSeguradora[] = array(
					'tipo' => "Seguradora",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aSeguradora) == 0) {
				$aSeguradora[] = array('error' => -1, 'mensagem' => "Nenhuma seguradora encontrada.");
			}

			$aSeguradora = array(
				'seguradora' => $aSeguradora
				);          

			fJSON::output($aSeguradora);
		}
		else {
			return $seguradora[0];
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Seguradora
	Método: GET
	URL: http://localhost/sig/api/index.php/seguradora/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postSeguradora() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$seguradora = new Seguradora($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Seguradora alterada com sucesso!";
			$alteracao=1;
		}else{
			$seguradora = new Seguradora();
			$mensagem = "Seguradora incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de seguradora
			if (property_exists($data, 'descricao')){
				$seguradoraAnt = '';
				if($alteracao==1){
					$seguradoraAnt = $seguradora->getDescricao();
					$this->setAuditoria('Seguradora', 'Descricao', $seguradoraAnt, $data->descricao,$data->id);
					$seguradora->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Seguradora', 'Descricao', $seguradoraAnt, $data->descricao);
					$seguradora->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$seguradora->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Seguradora', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A seguradora já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$seguradora->store();
				}     
			} else {
				$seguradora->store();
			} 
		//******** Fim - Grava informações na Tabela de seguradora
			$id_seguradora = $seguradora->getId();

			$arrMensagem = array('error' => 0, 'id_seguradora' => $id_seguradora, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}    

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Procedencia
	Método: GET
	URL: http://localhost/sig/api/index.php/procedencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getProcedencia($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$procedencia = fRecordSet::build('Procedencia', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aProcedencia = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aProcedencia[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Procedência",
					'ativo' => ""
					);   
			}      

			foreach ($procedencia->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aProcedencia[] = array(
					'tipo' => "Procedência",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aProcedencia) == 0) {
				$aProcedencia[] = array('error' => -1, 'mensagem' => "Nenhuma procedência encontrada.");
			}

			$aProcedencia = array(
				'procedencia' => $aProcedencia
				);          

			fJSON::output($aProcedencia);
		}
		else {
			return $procedencia[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Procedencia
	Método: GET
	URL: http://localhost/sig/api/index.php/procedencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postProcedencia() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$procedencia = new Procedencia($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Procedência alterada com sucesso!";
			$alteracao=1;
		}else{
			$procedencia = new Procedencia();
			$mensagem = "Procedência incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de procedencia
			if (property_exists($data, 'descricao')){
				$procedenciaAnt = '';
				if($alteracao==1){
					$procedenciaAnt = $procedencia->getDescricao();
					$this->setAuditoria('Procedencia', 'Descricao', $procedenciaAnt, $data->descricao,$data->id);
					$procedencia->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Procedencia', 'Descricao', $procedenciaAnt, $data->descricao);
					$procedencia->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$procedencia->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Procedencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A procedência já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$procedencia->store();
				}     
			} else {
				$procedencia->store();
			} 
		//******** Fim - Grava informações na Tabela de procedencia
			$id_procedencia = $procedencia->getId();

			$arrMensagem = array('error' => 0, 'id_procedencia' => $id_procedencia, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Localidade de Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/localidadebens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getLocalidadeBens($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$localidadebens = fRecordSet::build('LocalidadeBens', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aLocalidadeBens = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aLocalidadeBens[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Localidade de Bens",
					'ativo' => ""
					);   
			}      

			foreach ($localidadebens->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aLocalidadeBens[] = array(
					'tipo' => "Localidade Bens",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aLocalidadeBens) == 0) {
				$aLocalidadeBens[] = array('error' => -1, 'mensagem' => "Nenhuma localidade de bens encontrada.");
			}

			$aLocalidadeBens = array(
				'localidadebens' => $aLocalidadeBens
				);          

			fJSON::output($aLocalidadeBens);
		}
		else {
			return $localidadebens[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Localidade de Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/localidadebens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postLocalidadeBens() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$localidadebens = new LocalidadeBens($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Localidade de Bens alterada com sucesso!";
			$alteracao=1;
		}else{
			$localidadebens = new LocalidadeBens();
			$mensagem = "Localidade de Bens incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de LocalidadeBens
			if (property_exists($data, 'descricao')){
				$localidadebensAnt = '';
				if($alteracao==1){
					$localidadebensAnt = $localidadebens->getDescricao();
					$this->setAuditoria('LocalidadeBens', 'Descricao', $localidadebensAnt, $data->descricao,$data->id);
					$localidadebens->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('LocalidadeBens', 'Descricao', $localidadebensAnt, $data->descricao);
					$localidadebens->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$localidadebens->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('LocalidadeBens', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A localidade de bens já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$localidadebens->store();
				}     
			} else {
				$localidadebens->store();
			} 
		//******** Fim - Grava informações na Tabela de localidadebens
			$id_localidadebens = $localidadebens->getId();

			$arrMensagem = array('error' => 0, 'id_localidadebens' => $id_localidadebens, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Situação Economica
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaoeconomica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getSituacaoEconomica($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$situacaoeconomica = fRecordSet::build('SituacaoEconomica', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aSituacaoEconomica = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aSituacaoEconomica[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Situação Econômica",
					'ativo' => ""
					);   
			}      

			foreach ($situacaoeconomica->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aSituacaoEconomica[] = array(
					'tipo' => "Situação Econômica",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aSituacaoEconomica) == 0) {
				$aSituacaoEconomica[] = array('error' => -1, 'mensagem' => "Nenhuma situação econômica encontrada.");
			}

			$aSituacaoEconomica = array(
				'situacaoeconomica' => $aSituacaoEconomica
				);          

			fJSON::output($aSituacaoEconomica);
		}
		else {
			return $situacaoeconomica[0];
		}
	}     

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova Situação Economica
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaoeconomica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postSituacaoEconomica() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$situacaoeconomica = new SituacaoEconomica($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Situação Econômica alterada com sucesso!";
			$alteracao=1;
		}else{
			$situacaoeconomica = new SituacaoEconomica();
			$mensagem = "Situação Econômica incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de SituacaoEconomica
			if (property_exists($data, 'descricao')){
				$situacaoeconomicaAnt = '';
				if($alteracao==1){
					$situacaoeconomicaAnt = $situacaoeconomica->getDescricao();
					$this->setAuditoria('SituacaoEconomica', 'Descricao', $situacaoeconomicaAnt, $data->descricao,$data->id);
					$situacaoeconomica->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('SituacaoEconomica', 'Descricao', $situacaoeconomicaAnt, $data->descricao);
					$situacaoeconomica->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$situacaoeconomica->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('SituacaoEconomica', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A situação econômica já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$situacaoeconomica->store();
				}     
			} else {
				$situacaoeconomica->store();
			} 
		//******** Fim - Grava informações na Tabela de situacaoeconomica
			$id_situacaoeconomica = $situacaoeconomica->getId();

			$arrMensagem = array('error' => 0, 'id_situacaoeconomica' => $id_situacaoeconomica, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Estado de Conservação
	Método: GET
	URL: http://localhost/sig/api/index.php/estadoconservacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getEstadoConservacao($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$estadoconservacao = fRecordSet::build('EstadoConservacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aEstadoConservacao = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aEstadoConservacao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Estado de Conservação",
					'ativo' => ""
					);   
			}      

			foreach ($estadoconservacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aEstadoConservacao[] = array(
					'tipo' => "Estado de Conservação",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aEstadoConservacao) == 0) {
				$aEstadoConservacao[] = array('error' => -1, 'mensagem' => "Nenhum estado de conservação encontrado.");
			}

			$aEstadoConservacao = array(
				'estadoconservacao' => $aEstadoConservacao
				);          

			fJSON::output($aEstadoConservacao);
		}
		else {
			return $estadoconservacao[0];
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Estado de Conservação
	Método: GET
	URL: http://localhost/sig/api/index.php/estadoconservacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postEstadoConservacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$estadoconservacao = new EstadoConservacao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Estado de Conservação alterado com sucesso!";
			$alteracao=1;
		}else{
			$estadoconservacao = new EstadoConservacao();
			$mensagem = "Estado de Conservação incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de EstadoConservacao
			if (property_exists($data, 'descricao')){
				$estadoconservacaoAnt = '';
				if($alteracao==1){
					$estadoconservacaoAnt = $estadoconservacao->getDescricao();
					$this->setAuditoria('EstadoConservacao', 'Descricao', $estadoconservacaoAnt, $data->descricao,$data->id);
					$estadoconservacao->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('EstadoConservacao', 'Descricao', $estadoconservacaoAnt, $data->descricao);
					$estadoconservacao->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$estadoconservacao->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('EstadoConservacao', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O estado de conservação já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$estadoconservacao->store();
				}     
			} else {
				$estadoconservacao->store();
			} 
		//******** Fim - Grava informações na Tabela de estadoconservacao
			$id_estadoconservacao = $estadoconservacao->getId();

			$arrMensagem = array('error' => 0, 'id_estadoconservacao' => $id_estadoconservacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Status do Bem
	Método: GET
	URL: http://localhost/sig/api/index.php/statusbem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getStatusBem($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$statusbem = fRecordSet::build('StatusBem', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aStatusBem = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aStatusBem[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Status do Bem",
					'ativo' => ""
					);   
			}      

			foreach ($statusbem->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aStatusBem[] = array(
					'tipo' => "Status do Bem",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aStatusBem) == 0) {
				$aStatusBem[] = array('error' => -1, 'mensagem' => "Nenhum status do bem encontrado.");
				fJSON::output($aStatusBem);
				die();
			}

			$aStatusBem = array(
				'error' => 0,
				'statusbem' => $aStatusBem
				);          

			fJSON::output($aStatusBem);
		}
		else {
			return $statusbem[0];
		}
	}      

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Status do Bem
	Método: GET
	URL: http://localhost/sig/api/index.php/statusbem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postStatusBem() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$statusbem = new StatusBem($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Status do Bem alterado com sucesso!";
			$alteracao=1;
		}else{
			$statusbem = new StatusBem();
			$mensagem = "Status do Bem incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de StatusBem
			if (property_exists($data, 'descricao')){
				$statusbemAnt = '';
				if($alteracao==1){
					$statusbemAnt = $statusbem->getDescricao();
					$this->setAuditoria('StatusBem', 'Descricao', $statusbemAnt, $data->descricao,$data->id);
					$statusbem->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('StatusBem', 'Descricao', $statusbemAnt, $data->descricao);
					$statusbem->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$statusbem->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('StatusBem', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O status do bem já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$statusbem->store();
				}     
			} else {
				$statusbem->store();
			} 
		//******** Fim - Grava informações na Tabela de statusbem
			$id_statusbem = $statusbem->getId();

			$arrMensagem = array('error' => 0, 'id_statusbem' => $id_statusbem, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}    

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Forma de Aquisição
	Método: GET
	URL: http://localhost/sig/api/index.php/formaaquisicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function getFormaAquisicao($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$formaaquisicao = fRecordSet::build('FormaAquisicao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aFormaAquisicao = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aFormaAquisicao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Forma de Aquisição",
					'ativo' => ""
					);   
			}      

			foreach ($formaaquisicao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aFormaAquisicao[] = array(
					'tipo' => "Forma de Aquisição",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aFormaAquisicao) == 0) {
				$aFormaAquisicao[] = array('error' => -1, 'mensagem' => "Nenhuma forma de aquisição encontrada.");
			}

			$aFormaAquisicao = array(
				'formaaquisicao' => $aFormaAquisicao
				);          

			fJSON::output($aFormaAquisicao);
		}
		else {
			return $formaaquisicao[0];
		}
	}  

	/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova Forma de Aquisição
	Método: GET
	URL: http://localhost/sig/api/index.php/formaaquisicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 07/01/2014
	*/

	public function postFormaAquisicao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$formaaquisicao = new FormaAquisicao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Forma de aquisição alterada com sucesso!";
			$alteracao=1;
		}else{
			$formaaquisicao = new FormaAquisicao();
			$mensagem = "Forma de aquisição incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de FormaAquisicao
			if (property_exists($data, 'descricao')){
				$formaaquisicaoAnt = '';
				if($alteracao==1){
					$formaaquisicaoAnt = $formaaquisicao->getDescricao();
					$this->setAuditoria('FormaAquisicao', 'Descricao', $formaaquisicaoAnt, $data->descricao,$data->id);
					$formaaquisicao->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('FormaAquisicao', 'Descricao', $formaaquisicaoAnt, $data->descricao);
					$formaaquisicao->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$formaaquisicao->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('FormaAquisicao', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A forma de aquisição já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$formaaquisicao->store();
				}     
			} else {
				$formaaquisicao->store();
			} 
		//******** Fim - Grava informações na Tabela de formaaquisicao
			$id_formaaquisicao = $formaaquisicao->getId();

			$arrMensagem = array('error' => 0, 'id_formaaquisicao' => $id_formaaquisicao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   



	public function postCentroCusto() {

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');
		$id_entidade = $user['user']['idTipoEntidade'];

		if (property_exists($data, 'id')) {
			$centro_custo = new CentroCusto($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Centro de Custo alterado com sucesso!";
			$alteracao=1;
		}else{
			$centro_custo = new CentroCusto();
			$mensagem = "Centro de Custo incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Marca
			if (property_exists($data, 'id_departamento_funcionario')){
				$centro_custoAnt = '';
				if($alteracao==1){
					$centro_custoAnt = $centro_custo->getIdDepartamentoFuncionario();
					$this->setAuditoria('Centro Custo', 'Id Departamento Funcionario', $centro_custoAnt, $data->id_departamento_funcionario,$data->id);
					$centro_custo->setIdDepartamentoFuncionario($data->id_departamento_funcionario);          
				} else {
					$this->setAuditoria('Centro Custo', 'Id Departamento Funcionario', $centro_custoAnt, $data->id_departamento_funcionario);
					$centro_custo->setIdDepartamentoFuncionario($data->id_departamento_funcionario);
				}
			}
			if(property_exists($data, 'descricao')){
				$centro_custoAnt = '';
				if($alteracao==1){
					$centro_custoAnt = $centro_custo->getDescricao();
					$this->setAuditoria('Centro Custo', 'Descricao', $centro_custoAnt, $data->descricao,$data->id);
					$centro_custo->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Centro Custo', 'Descricao', $centro_custoAnt, $data->descricao);
					$centro_custo->setDescricao($data->descricao);
				}

			}

			if(property_exists($data, 'codigo_contabil')){
				$centro_custoAnt = '';
				if($alteracao==1){
					$centro_custoAnt = $centro_custo->getCodigoContabil();
					$this->setAuditoria('Centro Custo', 'Codigo Contabil', $centro_custoAnt, $data->codigo_contabil,$data->id);
					$centro_custo->setCodigoContabil($data->codigo_contabil);          
				} else {
					$this->setAuditoria('Centro Custo', 'Descricao', $centro_custoAnt, $data->codigo_contabil);
					$centro_custo->setCodigoContabil($data->codigo_contabil);
				}

			}

			$centro_custo->setIdEntidade($id_entidade);

			if (property_exists($data, 'ativo')){
				$centro_custo->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$aSearch['id_entidade='] = $id_entidade;
				$countDescricao = fRecordset::build('CentroCusto', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Centro de Custo já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$centro_custo->store();
				}     
			} else {
				$centro_custo->store();
			} 
		//******** Fim - Grava informações na Tabela de marca
			$id_centro_custo = $centro_custo->getId();

			$arrMensagem = array('error' => 0, 'id_marca' => $id_centro_custo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	public function getCentroCusto($id_consulta="", $id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$user = fSession::get('user');
		$id_entidade = $user['user']['idTipoEntidade'];

		$aSearch['id_entidade='] = $id_entidade;

		$centro_custo = fRecordSet::build('CentroCusto', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aCentroCusto = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aCentroCusto[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar novo Centro de Custo",
					'ativo' => ""
					);   
			}      

			foreach ($centro_custo->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$depto = new DepartamentoFuncionario($value->getIdDepartamentoFuncionario());
				$depto_funcionario = $depto->getDescricao();      

				$aCentroCusto[] = array(
					'tipo' => "Centro de Custo",
					'id' => $value->getId(),
					'id_departamento_funcionario' => $value->getIdDepartamentoFuncionario(),
					'descricao_departamento' => $depto_funcionario,
					'descricao' => $value->getDescricao(),
					'codigo_contabil' => $value->getCodigoContabil(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aCentroCusto) == 0) {
				$aCentroCusto[] = array('error' => -1, 'mensagem' => "Nenhum centro de custo encontrado.");
				fJSON::output($aCentroCusto);
				die();
			}

			$aCentroCusto = array(
				'error' => 0,
				'centro_custo' => $aCentroCusto
				);          

			fJSON::output($aCentroCusto);
		}
		else {
			return $aCentroCusto[0];
		}
	}  


	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Unidade de Medida
	Método: GET
	URL: http://localhost/sig/api/index.php/unidademedida/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/01/2014
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 08/01/2014
	*/

	public function getUnidadeMedida($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$unidademedida = fRecordSet::build('UnidadeMedida', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aUnidadeMedida = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aUnidadeMedida[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Unidade de Medida",
					'ativo' => ""
					);   
			}      

			foreach ($unidademedida->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aUnidadeMedida[] = array(
					'tipo' => "Unidade de Medida",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aUnidadeMedida) == 0) {
				$aUnidadeMedida[] = array('error' => -1, 'mensagem' => "Nenhuma unidade de medida encontrada.");
				fJSON::output($aUnidadeMedida);
				die;
			}

			$aUnidadeMedida = array(
				'unidademedida' => $aUnidadeMedida
				);          

			fJSON::output($aUnidadeMedida);
		}
		else {
			return $unidademedida[0];
		}
	}  


	/*
	Módulo: Mesquita
	Descrição: Gerar excel com bordero 
	Método: GET
	URL: http://localhost/sig/api/index.php/gerarbordero/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 08/01/2015
	*/
/*
	public function getGerarBordero($id = "", $full = false) { 
	setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );

	$aId = explode('-', $id);
	
	$categoria = fRecordSet::build('Categoria');
	foreach ($categoria->getRecords() as $key => $value) {
		$aCategoria[$value->getId()] = array(
			'descricao' => $value->getDescricao(),
		);
	}

	$formaPagamento = fRecordSet::build('FormaPagamento');
	foreach ($formaPagamento->getRecords() as $key => $value) {
		$aFormaPagamento[$value->getId()] = array(
			'descricao' => $value->getDescricao(),
		);
	}

	$banco = fRecordSet::build('Banco');
	foreach ($banco->getRecords() as $key => $value) {
		$aBanco[$value->getId()] = array(
			'nome' => $value->getNome(),
			'numero' => $value->getNumero(),
		);
	}

	$contaBancaria = fRecordSet::build('ContaBancaria');
	foreach ($contaBancaria->getRecords() as $key => $value) {
		$aContaBancaria[$value->getId()] = array(
			'numero_banco' => @$aBanco[$value->getId()]['numero'],
			'banco' => @$aBanco[$value->getId()]['nome'],
			'agencia' => $value->getAgencia(),
			'numero' => $value->getNumero(),
		);
	}

	$centroCusto = fRecordSet::build('CentroCusto');
	foreach ($centroCusto->getRecords() as $key => $value) {
		$aCentroCusto[$value->getId()] = array(
			'descricao' => $value->getDescricao(),
			'codigo_contabil' => $value->getCodigoContabil(),
		);
	}

	$pessoa = fRecordSet::build('Pessoa');
	
	foreach ($pessoa->getRecords() as $key => $value) {
		$aPessoa[$value->getId()] = array(
			'nome' => $value->getNome(),
		);
	}

	$aSearch = array();
	$aSearch['id='] = $aId;

	$caixa = fRecordSet::build('Caixa', $aSearch);
	$rows = '';

	foreach ($caixa->getRecords() as $key => $value) {
		$dataVencimento = "";
		if ($value->getDataVencimento() != null) {
			$dataVencimento = $value->getDataVencimento()->format('d/m/Y');
		}
		
		$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value->getId(), "", true, 5);
		$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getId(), "", true, 2);
		if(strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
		$cpf_cnpj = @self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
		}else{
		$cpf_cnpj = @self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
		}

		$aCaixa[] = array(
			'fluxo_financeiro' => @$aCentroCusto[$value->getIdCentroCusto()]['descricao'],
			'cod_fornecedor' => $value->getIdPessoa(),
			'banco' => @$aContaBancaria[$value->getIdContaBancaria()]['numero_banco'],
			'cnpj_cpf' => $cpf_cnpj,
			'esp' => '',
			'data_vencimento' => $dataVencimento,
			'valor_pagar' => $value->getValorFinal(),
			'cod_fluxo_financeiro' => @$aCentroCusto[$value->getIdCentroCusto()]['codigo_contabil'],
			'nome_fornecedor' => @$aPessoa[$value->getIdPessoa()]['nome'],
			'agencia' => @$aContaBancaria[$value->getIdContaBancaria()]['agencia'],
			'conta_corrente' => @$aContaBancaria[$value->getIdContaBancaria()]['numero'],
			'doc_titulo' => $value->getNumeroDocumento(),
			'forma_pagamento' => @$aFormaPagamento[$value->getIdFormaPagamento()]['descricao'],
		);

		$rows.= '<tr>'.
				'<td>' .@$aCentroCusto[$value->getIdCentroCusto()]['descricao'] .'</td>'.
				'<td>' .$value->getIdPessoa() .'</td>'.
				'<td>' .@$aContaBancaria[$value->getIdContaBancaria()]['numero_banco'] .'</td>'.
				'<td>' .$cpf_cnpj .'</td>'.
				'<td>Esp.</td>'.
				'<td>' .$dataVencimento .'</td>'.
				'<td>' .$value->getValorFinal() .'</td>'.
				'</tr>'.
				'<tr>'.
				'<td>' .@$aCentroCusto[$value->getIdCentroCusto()]['codigo_contabil'] .'</th>'.
				'<td>' .@$aPessoa[$value->getIdPessoa()]['nome'] .'</td>'.
				'<td>' .@$aContaBancaria[$value->getIdContaBancaria()]['agencia'] .'</td>'.
				'<td>' .@$aContaBancaria[$value->getIdContaBancaria()]['numero'] .'</td>'.
				'<td>' .$value->getNumeroDocumento() .'</td>'.
				'<td>' .@$aFormaPagamento[$value->getIdFormaPagamento()]['descricao'] .'</td>'.
				'<td>&nbsp;</td>'.
				'</tr>';
	}
	
	header("Content-type: charset=UTF-8");
	header("Content-type: application/vnd.ms-excel;");
	header("Content-type: application/force-download");
	header('Content-Disposition: attachment; filename=data.xls');
	header("Pragma: no-cache");
	
	
	echo '<style>'.
			'table{font-size: 12px;}'.
			'th{background: rgba(218, 218, 218, 0.92); text-align: left;}'.
			'.titulo{font-size: 24px; text-align: center;}'.
			'.sub_titulo{font-size: 16px; text-align: center;}'.
			'.label{font-weight: bold;}'.
		 '</style>';

	echo '<table cellspacing="0" cellpadding="4">'.
			'<thead>'.
				'<tr>'.
				'<th colspan="7" class="titulo">' .utf8_decode("BORDERÔ") .'</th>'.
				'</tr>'.
			'</thead>'.
			'<tbody>'.
				'<tr>'.
				'<td colspan="3" class="label">Empresa</td>'.
				'<td colspan="4">&nbsp;</td>'.
				'</tr>'.
				'<tr>'.
				'<td colspan="3" class="label">' .utf8_decode("Borderô") .'</td>'.
				'<td colspan="4">&nbsp;</td>'.
				'</tr>'.
				'<tr>'.
				'<td colspan="3" class="label">Portador</td>'.
				'<td colspan="4">&nbsp;</td>'.
				'</tr>'.
				'<tr>'.
				'<td colspan="3" class="label">' .utf8_decode("Data p/ Pagamento") .'</td>'.
				'<td colspan="4">&nbsp;</td>'.
				'</tr>'.
				'<tr>'.
				'<td colspan="3">&nbsp;</td>'.
				'<td colspan="4">&nbsp;</td>'.
				'</tr>'.
			'</tbody>'.
			'<thead>'.
				'<tr>'.
				'<th>Fluxo Financeiro</th>'.
				'<th>Cod. do Fornecedor</th>'.
				'<th>Banco</th>'.
				'<th>CNPJ/CPF</th>'.
				'<th>Esp.</th>'.
				'<th>Data Vencimento</th>'.
				'<th>Valor a Pagar</th>'.
				'</tr>'.
			'</thead>'.
			'<thead>'.
				'<tr>'.
				'<th>C.C</th>'.
				'<th>Nome Fornecedor</th>'.
				'<th>' .utf8_decode("Agência") .'</th>'.
				'<th>Conta Corrente</th>'.
				'<th>Doc./Titulo</th>'.
				'<th>Forma Pagamento</th>'.
				'<th>&nbsp;</th>'.
				'</tr>'.
			'</thead>'.
			'<tbody>'.
				$rows.
			'</tbody>'.
			'<tbody>'.
				'<tr>'.
				'<td colspan="7">&nbsp;</td>'. 
				'</tr>'.
			'</tbody>'.
			'<thead>'.
				'<tr>'.
				'<th colspan="5">&nbsp;</th>'.
				'<th>' .utf8_decode("Total borderô") .'</th>'.
				'<th>' .utf8_decode("Verba Disponível") .'</th>'.
				'</tr>'.
			'</thead>'.
		'</table>
		';
	}
*/
	
	public function getGerarBordero($id = "", $full = false) { 
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );

	//$aId = explode('-', $id);
		$aSearch = array();
		$aSearch['id_bordero='] = $id;
		$borderoItens = fRecordSet::build('BorderoItens', $aSearch);
		foreach ($borderoItens->getRecords() as $key => $value) {
			$aId[$key] = $value->getIdCaixa();
		}

		$aSearch = array();
		$aSearch['id='] = $aId;
		$caixa = fRecordSet::build('Caixa', $aSearch);

	//Relacionamentos
		$categoria = fRecordSet::build('Categoria');
		foreach ($categoria->getRecords() as $key => $value) {
			$aCategoria[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$formaPagamento = fRecordSet::build('FormaPagamento');
		foreach ($formaPagamento->getRecords() as $key => $value) {
			$aFormaPagamento[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$banco = fRecordSet::build('Banco');
		foreach ($banco->getRecords() as $key => $value) {
			$aBanco[$value->getId()] = array(
				'nome' => $value->getNome(),
				'numero' => $value->getNumero(),
				);
		}

		$contaBancaria = fRecordSet::build('ContaBancaria');
		$aContaBancariaPrincipal = array();
		foreach ($contaBancaria->getRecords() as $key => $value) {
			$banco = '';
			$numero_banco = '';
			if (array_key_exists($value->getId(), $aBanco)) {
				$banco = $aBanco[$value->getId()]['nome'];
				$numero_banco = $aBanco[$value->getId()]['numero'];
			}

			$aContaBancaria[$value->getId()] = array(
				'numero_banco' => $numero_banco,
				'banco' => $banco,
				'agencia' => $value->getAgencia(),
				'numero' => $value->getNumero(),
				);

			if($value->getPrincipal() == 1){
				$aContaBancariaPrincipal[$value->getIdEntidade()] = array(
					'numero_banco' => $numero_banco,
					'banco' => $banco,
					'agencia' => $value->getAgencia(),
					'numero' => $value->getNumero(),
					);
			}
		}

		$centroCusto = fRecordSet::build('CentroCusto');
		foreach ($centroCusto->getRecords() as $key => $value) {
			$aCentroCusto[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				'codigo_contabil' => $value->getCodigoContabil(),
				);
		}

		$pessoa = fRecordSet::build('Pessoa');    
		foreach ($pessoa->getRecords() as $key => $value) {
			$aPessoa[$value->getId()] = array(
				'nome' => $value->getNome(),
				);
		}

		$entidade = fRecordSet::build('Entidade');
		foreach ($entidade->getRecords() as $key => $value) {
			$aEntidade[$value->getId()] = array(
				'nome' => $value->getNome(),
				);
		}
	//Fim - Relacionamentos

		$rows = '';
		$valor_total = 0;

		foreach ($caixa->getRecords() as $key => $value) {
			$dataVencimento = "";
			if ($value->getDataVencimento() != null) {
				$dataVencimento = $value->getDataVencimento()->format('d/m/Y');
			}

			$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value->getIdPessoa(), "", true, 5);
			$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getIdPessoa(), "", true, 2);
			if(strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
				$cpf_cnpj = @self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
			}else{
				$cpf_cnpj = @self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
			}

			$numero_banco = '';
			$agencia = '';
			$numero = '';
			if (array_key_exists($value->getIdContaBancaria(), $aContaBancaria)) {
				$numero_banco = $aContaBancaria[$value->getIdContaBancaria()]['numero_banco'];
				$agencia = $aContaBancaria[$value->getIdContaBancaria()]['agencia'];
				$numero = $aContaBancaria[$value->getIdContaBancaria()]['numero'];
			}

			$centro_custo = '';
			$codigo_contabil = '';
			if (array_key_exists($value->getIdCentroCusto(), $aCentroCusto)) {
				$centro_custo = $aCentroCusto[$value->getIdCentroCusto()]['descricao'];
				$codigo_contabil = $aCentroCusto[$value->getIdCentroCusto()]['codigo_contabil'];
			}

			$pessoa = '';
			if (array_key_exists($value->getIdPessoa(), $aPessoa)) {
				$pessoa = $aPessoa[$value->getIdPessoa()]['nome'];
			}

			$forma_pagamento = '';
			if (array_key_exists($value->getIdFormaPagamento(), $aFormaPagamento)) {
				$forma_pagamento = $aFormaPagamento[$value->getIdFormaPagamento()]['descricao'];
			}

			$rows.= '<tr>'.
			'<td>' .utf8_decode($centro_custo) .'</td>'.
			'<td>' .$value->getIdPessoa() .'</td>'.
			'<td>' .$numero_banco .'</td>'.
			'<td>' .$cpf_cnpj .'</td>'.
			'<td>Esp.</td>'.
			'<td>' .$dataVencimento .'</td>'.
			'<td>' .$value->getValorFinal() .'</td>'.
			'</tr>'.
			'<tr>'.
			'<td>' .$codigo_contabil .'</th>'.
			'<td>' .utf8_decode($pessoa) .'</td>'.
			'<td>' .$agencia .'</td>'.
			'<td>' .$numero .'</td>'.
			'<td>' .$value->getNumeroDocumento() .'</td>'.
			'<td>' .utf8_decode($forma_pagamento) .'</td>'.
			'<td>&nbsp;</td>'.
			'</tr>';

			$valor_total = $value->getValorFinal() + $valor_total;
		}

		$bordero = fRecordSet::build('Bordero');    

		$entidade = '';
		if (array_key_exists($bordero[0]->getIdEntidade(), $aEntidade)) {
			$entidade = $aEntidade[$bordero[0]->getIdEntidade()]['nome'];
		}

		$conta_bancaria_principal = '';
		if (array_key_exists($bordero[0]->getIdEntidade(), $aContaBancariaPrincipal)) {
			$conta_bancaria_principal = $aContaBancariaPrincipal[$bordero[0]->getIdEntidade()]['numero_banco'];
		}

		header("Content-type: charset=UTF-8");
		header("Content-type: application/vnd.ms-excel;");
		header("Content-type: application/force-download");
		header('Content-Disposition: attachment; filename=data.xls');
		header("Pragma: no-cache");


		echo '<style>'.
		'table{font-size: 12px; font-family: arial;}'.
		'th{background: #CCC; text-align: left;}'.
		'.cell{background: #CCC;}'.
		'.titulo{font-size: 24px; text-align: center;}'.
		'.sub_titulo{font-size: 16px; text-align: center;}'.
		'.label{font-weight: bold;}'.
		'</style>';

		echo '<table cellspacing="0" cellpadding="4">'.
		'<thead>'.
		'<tr>'.
		'<th colspan="7" class="titulo">' .utf8_decode("BORDERÔ") .'</th>'.
		'</tr>'.
		'</thead>'.
		'<tbody>'.
		'<tr>'.
		'<td colspan="2" class="label">Empresa</td>'.
		'<td colspan="5">' .utf8_decode($entidade) . '</td>'.
		'</tr>'.
		'<tr>'.
		'<td colspan="2" class="label">' .utf8_decode("Borderô") .'</td>'.
		'<td colspan="5">' .$bordero[0]->getIdEntidade() .'</td>'.
		'</tr>'.
		'<tr>'.
		'<td colspan="2" class="label">Portador</td>'.
		'<td colspan="5">' .$conta_bancaria_principal .'</td>'.
		'</tr>'.
		'<tr>'.
		'<td colspan="2" class="label">' .utf8_decode("Data p/ Pagamento") .'</td>'.
		'<td colspan="5">' .$bordero[0]->getDataPagamento()->format('d/m/Y') . '</td>'.
		'</tr>'.
		'<tr>'.
		'<td colspan="2">&nbsp;</td>'.
		'<td colspan="5">&nbsp;</td>'.
		'</tr>'.
		'</tbody>'.
		'<thead>'.
		'<tr>'.
		'<th class="cell">Fluxo Financeiro</th>'.
		'<th class="cell">Cod. do Fornecedor</th>'.
		'<th class="cell">Banco</th>'.
		'<th class="cell">CNPJ/CPF</th>'.
		'<th class="cell">Esp.</th>'.
		'<th class="cell">Data Vencimento</th>'.
		'<th class="cell">Valor a Pagar</th>'.
		'</tr>'.
		'</thead>'.
		'<thead>'.
		'<tr>'.
		'<th class="cell">C.C</th>'.
		'<th class="cell">Nome Fornecedor</th>'.
		'<th class="cell">' .utf8_decode("Agência") .'</th>'.
		'<th class="cell">Conta Corrente</th>'.
		'<th class="cell">Doc./Titulo</th>'.
		'<th class="cell">Forma Pagamento</th>'.
		'<th class="cell">&nbsp;</th>'.
		'</tr>'.
		'</thead>'.
		'<tbody>'.
		$rows.
		'</tbody>'.
		'<tbody>'.
		'<tr>'.
		'<td colspan="7">&nbsp;</td>'. 
		'</tr>'.
		'</tbody>'.
		'<thead>'.
		'<tr>'.
		'<th class="cell" colspan="5">&nbsp;</th>'.
		'<th class="cell">' .utf8_decode("Total borderô") .'</th>'.
		'<th class="cell">' .$valor_total .'</th>'.
		'</tr>'.
		'</thead>'.
		'</table>
		';
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/bens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/

	public function postBens() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$bens = new Bens($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Bem alterado com sucesso!";
			$alteracao=1;
		}else{
			$bens = new Bens();
			$mensagem = "Bem incluído com sucesso!";
			$alteracao=0;
		}

		$userSes = fSession::get('user');

		try {
		//******** Grava informações na Tabela de Bens
			if (property_exists($data, 'id_centro_custo')){
				$bens->setIdCentroCusto($data->id_centro_custo);
			}

			if (property_exists($data, 'id_situacao_economica')){
				$bens->setIdSituacaoEconomica($data->id_situacao_economica);
			}   

			if (property_exists($data, 'id_estado_conservacao')){
				$bens->setIdEstadoConservacao($data->id_estado_conservacao);
			}    

			if (property_exists($data, 'id_unidade_medida')){
				$bens->setIdUnidadeMedida($data->id_unidade_medida);
			}       

			if (property_exists($data, 'id_forma_aquisicao')){
				$bens->setIdFormaAquisicao($data->id_forma_aquisicao);
			} 

			if (property_exists($data, 'id_procedencia')){
				$bens->setIdProcedencia($data->id_procedencia);
			} 

		//if (property_exists($data, 'id_entidade')){
			$bens->setIdEntidade($userSes['user']['entidadePessoa']);
		//}             

			if (property_exists($data, 'id_pessoa')){
				$bens->setIdPessoa($data->id_pessoa);
			} 

			if (property_exists($data, 'id_marca')){
				$bens->setIdMarca($data->id_marca);
			} 

			if (property_exists($data, 'id_fabricante')){
				$bens->setIdFabricante($data->id_fabricante);
			} 

			if (property_exists($data, 'id_grupo_bens')){
				$bens->setIdGrupoBens($data->id_grupo_bens);
			} 

			if (property_exists($data, 'nome')){
				$bens->setNome($data->nome);
			}

			if (property_exists($data, 'descricao')){
				$bens->setDescricao($data->descricao);
			}

			if (property_exists($data, 'data_aquisicao')){
				$bens->setDataAquisicao(implode("-", array_reverse(explode("/", $data->data_aquisicao))));
			}               

			if (property_exists($data, 'valor')) {
				$bens->setValor($data->valor);
			} 

			if (property_exists($data, 'valor_corrigido')) {
				$bens->setValorCorrigido($data->valor_corrigido);
			} 

			if (property_exists($data, 'valor_depreciacao')) {
				$bens->setValorDepreciacao($data->valor_depreciacao);
			} 

			if (property_exists($data, 'valor_residual')) {
				$bens->setValorResidual($data->valor_residual);
			}             

			if (property_exists($data, 'numero_serie')){
				$bens->setNumeroSerie($data->numero_serie);
			}

			if (property_exists($data, 'numero_patrimonio')){
				$bens->setNumeroPatrimonio($data->numero_patrimonio);
			}

			if (property_exists($data, 'numero_processo')){
				$bens->setNumeroProcesso($data->numero_processo);
			}

			if (property_exists($data, 'numero_empenho')){
				$bens->setNumeroEmpenho($data->numero_empenho);
			}  

			if (property_exists($data, 'numero_nota_fiscal')){
				$bens->setNumeroNotaFiscal($data->numero_nota_fiscal);
			}  

			if (property_exists($data, 'data_limite_utilizacao')){
				$bens->setDataLimiteUtilizacao(implode("-", array_reverse(explode("/", $data->data_limite_utilizacao))));
			} 

			if (property_exists($data, 'modelo')){
				$bens->setModelo($data->modelo);
			}

			if (property_exists($data, 'quantidade')){
				$bens->setQuantidade($data->quantidade);
			}

			if (property_exists($data, 'ano_fabricacao')){
				$bens->setAnoFabricacao($data->ano_fabricacao);
			}                                            

			if (property_exists($data, 'caracteristicas')){
				$bens->setCaracteristicas($data->caracteristicas);
			}  

			if (property_exists($data, 'observacoes')){
				$bens->setObservacoes($data->observacoes);
			}                 

			if (property_exists($data, 'ativo')){
				$bens->setAtivo($data->ativo);
			} else {
				$bens->setAtivo(1);
			}

			if ($alteracao!=1) {
				$aSearch = array();


				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Bens', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O bem já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$bens->store();
				}     
			} else {
				$bens->store();
			} 

		//******** Fim - Grava informações na Tabela de bens
			$id_bens = $bens->getId();

			if ($alteracao!=1) {
		//******** Armazena na tabela movimentacao_bens
				$movimentacao_bens = new BensMovimentacao();

				if (property_exists($data, 'id_localidade_bens')){
					$movimentacao_bens->setIdLocalidadeBens($data->id_localidade_bens);
				}  

				if (property_exists($data, 'id_status_bem')){
					$movimentacao_bens->setIdStatusBem($data->id_status_bem);
				}   

		//if (property_exists($data, 'id_bens')){
				$movimentacao_bens->setIdBens($id_bens);
		//}   

				if (property_exists($data, 'quantidade')){
					$movimentacao_bens->setQuantidade($data->quantidade);
				} 

				$movimentacao_bens->setTipoEntrada(1);
				$movimentacao_bens->setDataEntrada(date('Y-m-d H:i:s'));
				$movimentacao_bens->setHistorico('Histórico Inicial');

				$movimentacao_bens->store();
			}


		//******** - Fim Armazena na tabela movimentacao_bens

			$arrMensagem = array('error' => 0, 'id_bens' => $id_bens, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Bens - Seguro
	Método: GET
	URL: http://localhost/sig/api/index.php/bensseguro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/

	public function postBensSeguro() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$bens = new SeguroBens($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Seguro alterado com sucesso!";
			$alteracao=1;
		}else{
			$bens = new SeguroBens();
			$mensagem = "Seguro incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Bens
			if (property_exists($data, 'id_seguradora')){
				$bens->setIdSeguradora($data->id_seguradora);
			}

			if (property_exists($data, 'id_bens')){
				$bens->setIdBens($data->id_bens);
			}   

			if (property_exists($data, 'numero_apolice')){
				$bens->setNumeroApolice($data->numero_apolice);
			}         

			if (property_exists($data, 'data_inicio')){
				$bens->setDataInicio(implode("-", array_reverse(explode("/", $data->data_inicio))));
			} 

			if (property_exists($data, 'data_termino')){
				$bens->setDataTermino(implode("-", array_reverse(explode("/", $data->data_termino))));
			}                    

			if (property_exists($data, 'valor_seguro')) {
				$bens->setValorSeguro($data->valor_seguro);
			} 

			if (property_exists($data, 'valor_premio')) {
				$bens->setValorPremio($data->valor_premio);
			} 

			if (property_exists($data, 'mais_informacoes')){
				$bens->setMaisInformacoes($data->mais_informacoes);
			}  

			if (property_exists($data, 'cobertura')){
				$bens->setCobertura($data->cobertura);
			}                 

			if (property_exists($data, 'ativo')){
				$bens->setAtivo($data->ativo);
			} else {
				$bens->setAtivo(1);
			}

			if ($alteracao!=1) {
				$aSearch = array();


				$aSearch['numero_apolice='] = $data->numero_apolice;
				$countDescricao = fRecordset::build('SeguroBens', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A apólice já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$bens->store();
				}     
			} else {
				$bens->store();
			} 

		//******** Fim - Grava informações na Tabela de bens
			$id_seguro = $bens->getId();

			$arrMensagem = array('error' => 0, 'id_seguro' => $id_seguro, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Bens - Excluir Seguro
	Método: GET
	URL: http://localhost/sig/api/index.php/delseguro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/
	public function delSeguro() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id_seguro;

		$seguro_bens = fRecordSet::build('SeguroBens', $aSearch);

		$mensagem = "Seguro excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de seguro_bens            
			$seguro_bens[0]->delete();
		//******** Fim - Excluí informações na Tabela de seguro_bens

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}  

/*
	Módulo: Mesquita
	Descrição: Cadastro de Bens - Movimentacao
	Método: GET
	URL: http://localhost/sig/api/index.php/bensmovimentacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/

	public function postBensMovimentacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$bens = new BensMovimentacao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Movimentação alterada com sucesso!";
			$alteracao=1;
		}else{
			$bens = new BensMovimentacao();
			$mensagem = "Movimentação incluída com sucesso!";
			$alteracao=0;
		}

		$aSearchBens = array();
		$aSearchBens['id_bens='] = $data->id_bens;
		$countBens = fRecordset::build('BensMovimentacao', $aSearchBens);

		$Entrada = 0;
		$Saida = 0;

		foreach ($countBens as $key => $value) {
			if ($countBens[$key]->getTipoEntrada() == 1) {
				$Entrada += $countBens[$key]->getQuantidade();
			}
			if ($countBens[$key]->getTipoEntrada() == 0) {
				$Saida += $countBens[$key]->getQuantidade();
			}
		}

		$quantidadeEstoque = $Entrada - $Saida;

		if ($data->quantidade <= 0) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A quantidade não pode ser igual ou menor que 0!");
			fJSON::output($arrMensagem);
			die();
		}

		if ($data->quantidade > $quantidadeEstoque && !$data->tipo_entrada) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A quantidade não pode ser maior que o estoque atual!");
			fJSON::output($arrMensagem);
			die();
		}

		try {
		//******** Grava informações na Tabela de BensMovimentacao
			if (property_exists($data, 'id_localidade_bens')){
				$bens->setIdLocalidadeBens($data->id_localidade_bens);
			}

			if (property_exists($data, 'id_status_bem')){
				$bens->setIdStatusBem($data->id_status_bem);
			}   

			if (property_exists($data, 'id_bens')){
				$bens->setIdBens($data->id_bens);
			}    

			if (property_exists($data, 'quantidade')){
				$bens->setQuantidade($data->quantidade);
			}       

			if (property_exists($data, 'tipo_entrada')){
				$bens->setTipoEntrada($data->tipo_entrada);

				if ($data->tipo_entrada==1) {
					$bens->setDataEntrada(date('Y-m-d H:i:s'));
				} else if  ($data->tipo_entrada==0) {
					$bens->setDataSaida(date('Y-m-d H:i:s'));
				}
			} 

			if (property_exists($data, 'historico')){
				$bens->setHistorico($data->historico);
			} 



		// if ($alteracao!=1) {
		//   $aSearch = array();


		//   // $aSearch['id_localidade_bens='] = $data->id_localidade_bens;
		//   // $aSearch['id_status_bem='] = $data->id_status_bem;
		//   // $countDescricao = fRecordset::build('BensMovimentacao', $aSearch);

		//   // if($countDescricao->count() > 0){
		//   //   $arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A movimentação já existe");
		//   //   fJSON::output($arrMensagem);
		//   //   die();            
		//   // }else{
		//     $bens->store();
		//   // }     
		// } else {
			$bens->store();
		// } 

		//******** Fim - Grava informações na Tabela de bens
			$id_bens = $bens->getIdBens();

			$arrMensagem = array('error' => 0, 'id_bens' => $id_bens, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 


/*
	Módulo: Mesquita
	Descrição: Cadastro de Bens - Excluir Seguro
	Método: GET
	URL: http://localhost/sig/api/index.php/delseguro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/
	public function delBensMovimentacao() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id_bens_movimentacao;

		$bens_movimentacao = fRecordSet::build('BensMovimentacao', $aSearch);

		$mensagem = "Movimentação excluída com sucesso!";        

		try {
		//******** Excluí informações na Tabela de bens_movimentacao            
			$bens_movimentacao[0]->delete();
		//******** Fim - Excluí informações na Tabela de bens_movimentacao

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}  

/*
	Módulo: Mesquita
	Descrição: Obter Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/bens/id
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function getBens($id = "", $full = false) { 

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$bens = fRecordSet::build('Bens', $aSearch);

		if ($full == false) {

			$aBens = array();

			foreach ($bens->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				} 

				$dataAquisicao = '';
				$dataLimiteUtilizacao = '';

				if ($value->getDataAquisicao() != null) {
					//$dataAquisicao = $value->getDataAquisicao()->format('Y/m/d');
					$dataAquisicao = self::formataData($value->getDataAquisicao());
				}  

				if ($value->getDataLimiteUtilizacao() != null) {
					//$dataLimiteUtilizacao = $value->getDataLimiteUtilizacao()->format('Y/m/d');
					$dataLimiteUtilizacao = self::formataData($value->getDataLimiteUtilizacao());
				}               

				$centro_custo = new CentroCusto($value->getIdCentroCusto());
				$situacao_economica = new SituacaoEconomica($value->getIdSituacaoEconomica());
				$estado_conservacao = new EstadoConservacao($value->getIdEstadoConservacao());
				$unidade_medida = new UnidadeMedida($value->getIdUnidadeMedida());
				$forma_aquisicao = new FormaAquisicao($value->getIdFormaAquisicao());
				$procedencia = new Procedencia($value->getIdProcedencia());
				$entidade = new Entidade($value->getIdEntidade());
				$pessoa = new Pessoa($value->getIdPessoa());
				$marca = new Marca($value->getIdMarca());
				$fabricante = new Fabricante($value->getIdFabricante());
				$grupo_bens = new GrupoBens($value->getIdGrupoBens());

				$aSearchMovimentacao = array();
				if ($id != "") {
					$aSearchMovimentacao['id_bens='] = $id;
				} 

		//Pega o Primeiro item da movimentação
				$bens_movimentacao = fRecordSet::build('BensMovimentacao', $aSearchMovimentacao,array('id' => 'asc'));

				$localidade_bens = new LocalidadeBens($bens_movimentacao[0]->getIdLocalidadeBens());
				$status_bem = new StatusBem($bens_movimentacao[0]->getIdStatusBem());

				$resultSeguro = $this->getBensSeguro($value->getId(),true);

				$resultMovimentacao = $this->getBensMovimentacao($value->getId(),true);

				$aBens[] = array(
					'id' => $value->getId(),
					'id_centro_custo' => $value->getIdCentroCusto(),
					'centro_custo' => $centro_custo->getDescricao(),
					'id_situacao_economica' => $value->getIdSituacaoEconomica(),
					'situacao_economica' => $situacao_economica->getDescricao(),
					'id_estado_conservacao' => $value->getIdEstadoConservacao(),
					'estado_conservacao' => $estado_conservacao->getDescricao(),
					'id_unidade_medida' => $value->getIdUnidadeMedida(),
					'unidade_medida' => $unidade_medida->getDescricao(),
					'id_forma_aquisicao' => $value->getIdFormaAquisicao(),
					'forma_aquisicao' => $forma_aquisicao->getDescricao(),
					'id_procedencia' => $value->getIdProcedencia(),
					'procedencia' => $procedencia->getDescricao(),
					'id_entidade' => $value->getIdEntidade(),
					'entidade' => $entidade->getNome(),
					'id_pessoa' => $value->getIdPessoa(),
					'fornecedor' => $pessoa->getNome(),
					'id_marca' => $value->getIdMarca(),
					'marca' => $marca->getDescricao(),
					'id_fabricante' => $value->getIdFabricante(),
					'fabricante' => $fabricante->getDescricao(),
					'id_grupo_bens' => $value->getIdGrupoBens(),
					'grupo_bens' => $grupo_bens->getDescricao(),
					'nome' => $value->getNome(),
					'descricao' => $value->getDescricao(),
					'data_aquisicao' => $dataAquisicao,
					'valor' => $value->getValor(),
					'valor_corrigido' => $value->getValorCorrigido(),
					'valor_depreciacao' => $value->getValorDepreciacao(),
					'valor_residual' => $value->getValorResidual(),
					'numero_serie' => $value->getNumeroSerie(),
					'imagem' => $value->getImagem(),
					'numero_patrimonio' => $value->getNumeroPatrimonio(),
					'numero_processo' => $value->getNumeroProcesso(),
					'numero_empenho' => $value->getNumeroEmpenho(),
					'numero_nota_fiscal' => $value->getNumeroNotaFiscal(),
					'data_limite_utilizacao' => $dataLimiteUtilizacao,
					'modelo' => $value->getModelo(),
					'quantidade' => $value->getQuantidade(),
					'ano_fabricacao' => $value->getAnoFabricacao(),
					'caracteristicas' => $value->getCaracteristicas(),
					'observacoes' => $value->getObservacoes(),
					'id_localidade_bens' => $bens_movimentacao[0]->getIdLocalidadeBens(),
					'localidade_bens' => $localidade_bens->getDescricao(),
					'id_status_bem' => $bens_movimentacao[0]->getIdStatusBem(),
					'status_bem' => $status_bem->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					'seguros' => $resultSeguro,
					'movimentacoes' => $resultMovimentacao
					);

}

if (count($aBens) == 0) {
	$aBens[] = array('error'    => -1, 'mensagem' => "Nenhum bem encontrado.");
	fJSON::output($aBens);
	die();
}

$aBens = array(
	'bens' => $aBens
	);

fJSON::output($aBens);
}
else {
	return $bens[0];
}   
}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Seguros de um bem
	Método: GET
	URL: http://localhost/sig/api/index.php/bensseguro/<bem>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function getBensSeguro($id_bens = "", $full = false) {

		$aSearch = array();
		if ($id_bens != "") {
			$aSearch['id_bens='] = $id_bens;
		}  

		$seguroBens = fRecordSet::build('SeguroBens', $aSearch);

		if ($seguroBens->count() == 0) {
			$aSeguroBens[] = array(
				'error' => -1,
				'mensagem' => "Nenhum seguro encontrado."
				);
		}else{

			foreach ($seguroBens->getRecords() as $key => $value) {


				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				} 

				$dataInicio = '';
				$dataTermino = '';

				if ($value->getDataInicio() != null) {
					$dataInicio = $value->getDataInicio()->format('d/m/Y');
				}  

				if ($value->getDataTermino() != null) {
					$dataTermino = $value->getDataTermino()->format('d/m/Y');
				}               

				$seguradora = new Seguradora($value->getIdSeguradora());                

				$aSeguroBens[] = array(
					'id' => $value->getId(),
					'id_seguro' => $value->getId(),
					'id_seguradora' => $value->getIdSeguradora(),
					'seguradoraNome' => $seguradora->getDescricao(),
					'id_bens' => $value->getIdBens(),
					'numero_apolice' => $value->getNumeroApolice(),
					'data_inicio' => $dataInicio,
					'data_termino' => $dataTermino,
					'valor_seguro' => $value->getValorSeguro(),
					'valor_premio' => $value->getValorPremio(),
					'mais_informacoes' => $value->getMaisInformacoes(),
					'cobertura' => $value->getCobertura(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}
		}

		if ($full == false) {
			fJSON::output($aSeguroBens);
		}else {
			return $aSeguroBens;
		}              
	}  

/*
	Módulo: Mesquita
	Descrição: Obter Lista de Movimentaçõe de um bem
	Método: GET
	URL: http://localhost/sig/api/index.php/bemmovimentacao/<bem>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function getBensMovimentacao($id_bens = "", $full = false) {

		$aSearch = array();
		if ($id_bens != "") {
			$aSearch['id_bens='] = $id_bens;
		}  

		$movimentacaoBens = fRecordSet::build('BensMovimentacao', $aSearch);

		if ($movimentacaoBens->count() == 0) {
			$aMovimentacaoBens[] = array(
				'error' => -1,
				'mensagem' => "Nenhuma movimentação encontrada."
				);
		}else{

			foreach ($movimentacaoBens->getRecords() as $key => $value) {

				$dataEntrada = '';
				$dataSaida = '';

				if ($value->getDataEntrada() != null) {
					$dataEntrada = $value->getDataEntrada()->format('Y/m/d');
				}  

				if ($value->getDataSaida() != null) {
					$dataSaida = $value->getDataSaida()->format('Y/m/d');
				}               

				$localidade_bens = new LocalidadeBens($value->getIdLocalidadeBens());
				$status_bem = new StatusBem($value->getIdStatusBem());

				if ($value->getTipoEntrada()==1) {
					$tipoMovimentacao = "Entrada";
					$data_movimentacao = $value->getDataEntrada()->format('d/m/Y');
				} else {
					$tipoMovimentacao = "Saída";
					$data_movimentacao = $value->getDataSaida()->format('d/m/Y');
				}

				$aMovimentacaoBens[] = array(
					'id' => $value->getId(),
					'id_bens_movimentacao' => $value->getId(),
					'id_localidade_bens' => $value->getIdLocalidadeBens(),
					'localidade_bens' => $localidade_bens->getDescricao(),
					'id_status_bem' => $value->getIdStatusBem(),
					'status_bem' => $status_bem->getDescricao(),
					'id_bens' => $value->getIdBens(),
					'quantidade' => $value->getQuantidade(),
					'tipo_entrada' => $value->getTipoEntrada(),
					'tipoMovimentacao' =>$tipoMovimentacao,
					'data_movimentacao' => $data_movimentacao,
					'data_entrada' => $dataEntrada,
					'data_saida' => $dataSaida,
					'historico' => $value->getHistorico(),
					);
			}
		}

		if ($full == false) {
			fJSON::output($aMovimentacaoBens);
		}else {
			return $aMovimentacaoBens;
		}              
	}    

	/*
	Módulo: Controle de Acesso
	Descrição: Criar data de expiração da senha
	Método: SET
	URL: não tem
	Autenticação: Não
	Resposta: Não
	Data de Criação: 13/01/2015
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function setDate($id, $data) {

		$aSearch = array();
		$aSearch['id_pessoa='] = $id;

		$fidUser = fRecordSet::build('Usuario', $aSearch);
		if(count($fidUser) > 0){
			$fidUser[0]->setDataExpiracaoSenha($data);
			$fidUser[0]->store();
		}

		return;
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo tipo de doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/tipodoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function postTipoDoacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoDoacao = new TipoDoacao($data->id);
			$mensagem = "Tipo de Doação alterada com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$tipoDoacao = new TipoDoacao();
			$mensagem = "Tipo de Doação incluída com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Tipo de Doacao
			if (property_exists($data, 'descricao')){
				$tipoDoacaoAnt = '';
				if($alteracao==1){
					$tipoDoacaoAnt = $tipoDoacao->getDescricao();
				}
				$this->setAuditoria('TipoDoacao', 'Descricao', $tipoDoacaoAnt, $data->descricao, $id);

				$tipoDoacao->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoDoacao->setAtivo($data->ativo);
			}

			$tipoDoacao->store();

		//******** Fim - Grava informações na Tabela de Tipo de Doacao

			$id_tipo_doacao = $tipoDoacao->getId();

			$arrMensagem = array('error' => 0, 'id_tipo_doacao' => $id_tipo_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipo Doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/tipodoacao/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function getTipoDoacao($id_consulta="", $id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$tipoDoacao = fRecordSet::build('TipoDoacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoDoacao = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aTipoDoacao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Doação",
					'ativo' => "",
					'status' => ""
					);   
			}      

			foreach ($tipoDoacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoDoacao[] = array(
					'tipo' => "Tipo de Doação",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoDoacao) == 0) {
				$aTipoDoacao[] = array('error' => -1, 'mensagem' => "Nenhum Tipo de Doação encontrado.");
				fJSON::output($aTipoDoacao);
				die();
			}

			$aTipoDoacao = array(
				'error' => 0,
				'tipo_doacao' => $aTipoDoacao
				);          

			fJSON::output($aTipoDoacao);
		}
		else {
			return $tipoDoacao[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Status Doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/statusdoacao/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function getStatusDoacao($id_consulta="", $id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$statusDoacao = fRecordSet::build('StatusDoacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aStatusDoacao = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aStatusDoacao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Status de Doação",
					'ativo' => "",
					'status' => ""
					);   
			}      

			foreach ($statusDoacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aStatusDoacao[] = array(
					'tipo' => "Status de Doação",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aStatusDoacao) == 0) {
				$aStatusDoacao[] = array('error' => -1, 'mensagem' => "Nenhum Status de Doação encontrado.");
				fJSON::output($aStatusDoacao);
				die();
			}

			$aStatusDoacao = array(
				'error' => 0, 
				'status_doacao' => $aStatusDoacao
				);          

			fJSON::output($aStatusDoacao);
		}
		else {
			return $statusDoacao[0];
		}
	} 

	 /*
	Módulo: Mesquita
	Descrição: Cadastrar um novo status de doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/statusdoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function postStatusDoacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$statusDoacao = new StatusDoacao($data->id);
			$mensagem = "Status de Doação alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$statusDoacao = new StatusDoacao();
			$mensagem = "Status de Doação incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Status de Doacao
			if (property_exists($data, 'descricao')){
				$statusDoacaoAnt = '';
				if($alteracao==1){
					$statusDoacaoAnt = $statusDoacao->getDescricao();
				}
				$this->setAuditoria('StatusDoacao', 'Descricao', $statusDoacaoAnt, $data->descricao, $id);

				$statusDoacao->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$statusDoacao->setAtivo($data->ativo);
			}

			$statusDoacao->store();

		//******** Fim - Grava informações na Tabela de Status de Doacao

			$id_status_doacao = $statusDoacao->getId();

			$arrMensagem = array('error' => 0, 'id_status_doacao' => $id_status_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	} 

	 /*
	Módulo: Mesquita
	Descrição: Obter Lista de Local Armazenamento Doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/localarmazenamentodoacao/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function getLocalArmazenamentoDoacao($id_consulta="", $id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$localArmazenamentoDoacao = fRecordSet::build('LocalArmazenamentoDoacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aLocalArmazenamentoDoacao = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aLocalArmazenamentoDoacao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Local de Armazenamento de Doação",
					'ativo' => "",
					'status' => ""
					);   
			}      

			foreach ($localArmazenamentoDoacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aLocalArmazenamentoDoacao[] = array(
					'tipo' => "Local de Armazenamento de Doação",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aLocalArmazenamentoDoacao) == 0) {
				$aLocalArmazenamentoDoacao[] = array('error' => -1, 'mensagem' => "Nenhum Local de Armazenamento de Doação encontrado.");
				fJSON::output($aLocalArmazenamentoDoacao);
				die();
			}

			$aLocalArmazenamentoDoacao = array(
				'error' => 0,
				'local_armazenamento_doacao' => $aLocalArmazenamentoDoacao
				);          

			fJSON::output($aLocalArmazenamentoDoacao);
		}
		else {
			return $localArmazenamentoDoacao[0];
		}
	}               
	
	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Local de Armazenamento de doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/localarmazenamentodoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function postLocalArmazenamentoDoacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$localArmazenamentoDoacao = new LocalArmazenamentoDoacao($data->id);
			$mensagem = "Local de Armazenamento de Doação alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$localArmazenamentoDoacao = new LocalArmazenamentoDoacao();
			$mensagem = "Local de Armazenamento de Doação incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Local de Armazenamento de Doacao
			if (property_exists($data, 'descricao')){
				$localArmazenamentoDoacaoAnt = '';
				if($alteracao==1){
					$localArmazenamentoDoacaoAnt = $localArmazenamentoDoacao->getDescricao();
				}
				$this->setAuditoria('LocalArmazenamentoDoacao', 'Descricao', $localArmazenamentoDoacaoAnt, $data->descricao, $id);

				$localArmazenamentoDoacao->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$localArmazenamentoDoacao->setAtivo($data->ativo);
			}

			$localArmazenamentoDoacao->store();

		//******** Fim - Grava informações na Tabela de Local de Armazenamento de Doacao

			$id_local_armazenamento_doacao = $localArmazenamentoDoacao->getId();

			$arrMensagem = array('error' => 0, 'id_local_armazenamento_doacao' => $id_local_armazenamento_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}  

/*
	Módulo: Mesquita
	Descrição: Obter Lista de Programa Doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/programadoacao/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function getProgramaDoacao($id_consulta="", $id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$aSearch['data_inicio<='] =  date("Y-M-d");
		$aSearch['data_fim>='] =  date("Y-M-d");

		$programaDoacao = fRecordSet::build('ProgramaDoacao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aProgramaDoacao = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aProgramaDoacao[] = array(
					'tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Programa de Doação",
					'ativo' => 1,
					'status' => ""
					);   
			}      

			foreach ($programaDoacao->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				if ($value->getDataInicio() != null) {
					$dataInicio = $value->getDataInicio()->format('Y/m/d');
					$dataInicioShow = $value->getDataInicio()->format('d/m/Y');
				}   

				if ($value->getDataFim() != null) {
					$dataFim = $value->getDataFim()->format('Y/m/d');
					$dataFimShow = $value->getDataFim()->format('d/m/Y');
				}

				$aProgramaDoacao[] = array(
					'tipo' => "Programa de Doação",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'data_inicio' => $dataInicio,
					'data_inicio1' => $dataInicio,
					'data_inicio_show' => $dataInicioShow,
					'data_fim' => $dataFim,
					'data_fim1' => $dataFim,
					'data_fim_show' => $dataFimShow,
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aProgramaDoacao) == 0) {
				$aProgramaDoacao[] = array('error' => -1, 'mensagem' => "Nenhum Programa de Doação encontrado.");
				fJSON::output($aDepartamento);
				die();
			}

			$aProgramaDoacao = array(
				'error' => 0,
				'programa_doacao' => $aProgramaDoacao
				);          

			fJSON::output($aProgramaDoacao);
		}
		else {
			return $programaDoacao[0];
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo programa de doacao
	Método: GET
	URL: http://localhost/sig/api/index.php/programadoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 07/01/2015
	*/

	public function postProgramaDoacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$programaDoacao = new ProgramaDoacao($data->id);
			$mensagem = "Programa de Doação alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$programaDoacao = new ProgramaDoacao();
			$mensagem = "Programa de Doação incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Programa de Doacao
			if (property_exists($data, 'descricao')){
				$programaDoacaoAnt = '';
				if($alteracao==1){
					$programaDoacaoAnt = $programaDoacao->getDescricao();
				}
				$this->setAuditoria('ProgramaDoacao', 'Descricao', $programaDoacaoAnt, $data->descricao, $id);

				$programaDoacao->setDescricao($data->descricao);
			}

			if (property_exists($data, 'data_inicio')){
				$dataInicioAnt = '';
				if($alteracao==1){
					$dataInicioAnt = $programaDoacao->getDataInicio();
				}

				$dataInicio = substr(implode("-", array_reverse(explode("/", $data->data_inicio))), 0, 10);

				$this->setAuditoria('ProgramaDoacao', 'DataInicio', $dataInicioAnt, $dataInicio, $id);
				$programaDoacao->setDataInicio($dataInicio); 
			}

			if (property_exists($data, 'data_fim')){
				$dataFimAnt = '';
				if($alteracao==1){
					$dataFimAnt = $programaDoacao->getDataFim();
				}

				$dataFim = substr(implode("-", array_reverse(explode("/", $data->data_fim))), 0, 10);

				$this->setAuditoria('ProgramaDoacao', 'DataFim', $dataFimAnt, $dataFim, $id);
				$programaDoacao->setDataFim($dataFim); 
			}

			if (property_exists($data, 'ativo')){
				$programaDoacao->setAtivo($data->ativo);
			}

			$programaDoacao->store();
		//******** Fim - Grava informações na Tabela de Programa de Doacao

			$id_programa_doacao = $programaDoacao->getId();

			$arrMensagem = array('error' => 0, 'id_programa_doacao' => $id_programa_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Doação
	Descrição: Cadastro de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/doacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function postDoacao() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$doacao = new Doacao($data->id);
			$mensagem = "Doação alterada com sucesso!";
			$alteracao=1;
		}else{
			$doacao = new Doacao();
			$mensagem = "Doação incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de doação
			if (property_exists($data, 'id_entidade')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $doacao->getIdEntidade();
				}
				$this->setAuditoria('Doacao', 'IdEntidade', $entidadeAnt, $data->id_entidade);
				$doacao->setIdEntidade($data->id_entidade);
			}

			if (property_exists($data, 'progDoacao')){
				$programaDoacaoAnt = '';
				if($alteracao==1){
					$programaDoacaoAnt = $doacao->getIdProgramaDoacao();
				}
				$this->setAuditoria('Doacao', 'IdProgramaDoacao', $programaDoacaoAnt, $data->progDoacao);
				$doacao->setIdProgramaDoacao($data->progDoacao);
			}


			if (property_exists($data, 'tipoDoacao')){
				$tipoDoacaoAnt = '';
				if($alteracao==1){
					$tipoDoacaoAnt = $doacao->getIdTipoDoacao();
				}
				$this->setAuditoria('Doacao', 'IdTipoDoacao', $tipoDoacaoAnt, $data->tipoDoacao);
				$doacao->setIdTipoDoacao($data->tipoDoacao);
			}

			if (property_exists($data, 'descricao')){
				$descricaoAnt = '';
				if($alteracao==1){
					$descricaoAnt = $doacao->getDescricao();
				}
				$this->setAuditoria('Doacao', 'Descricao', $descricaoAnt, $data->descricao);
				$doacao->setDescricao($data->descricao);
			}  

			if (property_exists($data, 'quantidade')){
				$quantidadeAnt = '';
				if($alteracao==1){
					$quantidadeAnt = $doacao->getQuantidade();
				}
				$this->setAuditoria('Doacao', 'Quantidade', $quantidadeAnt, $data->quantidade);
				$doacao->setQuantidade($data->quantidade);
			}

			if (property_exists($data, 'valor_unitario')){
				$valorUnitarioAnt = '';
				if($alteracao==1){
					$valorUnitarioAnt = $doacao->getValorUnitario();
				}
				$this->setAuditoria('Doacao', 'ValorUnitario', $valorUnitarioAnt, $data->valor_unitario);
				$doacao->setValorUnitario($data->valor_unitario);
			}

			if (property_exists($data, 'mais_detalhes')){
				$doacao->setMaisDetalhes($data->mais_detalhes);
			}

			if (property_exists($data, 'data_validade')){
				$dataValidadeAnt = '';
				if($alteracao==1){
					$dataValidadeAnt = $doacao->getDataValidade();
				}
				$dt = '';
				if ($data->data_validade != '' && $data->data_validade != null){
					$dt = substr(implode("-", array_reverse(explode("/", $data->data_validade))), 0, 10);
				}
				$this->setAuditoria('Doacao', 'DataValidade', $dataValidadeAnt, $dt);
				$doacao->setDataValidade($dt);
			}                    

			if (property_exists($data, 'ativo')){
				$doacao->setAtivo($data->ativo);
			}

			$doacao->store();

			$id_doacao = $doacao->getId();

			if($id_doacao != ''){
				if(property_exists($data, 'id')){
					$aSearch = array();
					$aSearch['id_doacao='] = $id_doacao;
					$selMovimentacaoDoacao = fRecordSet::build('MovimentacaoDoacao', $aSearch);

					$movimentacaoDoacao = new MovimentacaoDoacao($selMovimentacaoDoacao[0]->getId());
				}else{
					$movimentacaoDoacao = new MovimentacaoDoacao();
				}

				if (property_exists($data, 'idDoador')){
					$IdPessoaAnt = '';
					if($alteracao==1){
						$IdPessoaAnt = $movimentacaoDoacao->getIdPessoa();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'IdPessoa', $IdPessoaAnt, $data->idDoador);
					$movimentacaoDoacao->setIdPessoa($data->idDoador);
				}

				if (property_exists($data, 'localDoacao')){
					$IdLocalArmazenamentoDoacaoAnt = '';
					if($alteracao==1){
						$IdLocalArmazenamentoDoacaoAnt = $movimentacaoDoacao->getIdLocalArmazenamentoDoacao();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'IdLocalArmazenamentoDoacao', $IdLocalArmazenamentoDoacaoAnt, $data->localDoacao);
					$movimentacaoDoacao->setIdLocalArmazenamentoDoacao($data->localDoacao);
				}

				if (property_exists($data, 'statusDoacao')){
					$IdStatusDoacaoAnt = '';
					if($alteracao==1){
						$IdStatusDoacaoAnt = $movimentacaoDoacao->getIdStatusDoacao();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'IdStatusDoacao', $IdStatusDoacaoAnt, $data->statusDoacao);
					$movimentacaoDoacao->setIdStatusDoacao($data->statusDoacao);
				}

				if (property_exists($data, 'quantidade')){
					$quantidadeAnt = '';
					if($alteracao==1){
						$quantidadeAnt = $movimentacaoDoacao->getQuantidade();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'Quantidade', $quantidadeAnt, $data->quantidade);
					$movimentacaoDoacao->setQuantidade($data->quantidade);
				}

				$movimentacaoDoacao->setTipoEntrada(1);
				$movimentacaoDoacao->setDataEntrada(date('Y-m-d'));

				$movimentacaoDoacao->setIdDoacao($id_doacao);

				$movimentacaoDoacao->store();
			}

		//******** Fim - Grava informações na Tabela de doação



			$arrMensagem = array('error' => 0, 'id_doacao' => $id_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Doação
	Descrição: Obter Lista de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/doacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function getDoacao($id="", $full = false) {

		$aSearch = '';
		
		if ($id != "") {
			$aSearch = 'WHERE d.id = '.$id;
		}

		$strQueryDoacao = "SELECT d.id,d.id_entidade, e.nome as entidade, d.id_programa_doacao, pd.descricao as programa_doacao,
		d.id_tipo_doacao, td.descricao as tipo_doacao, d.descricao,d.quantidade,d.valor_unitario,d.data_validade,
		d.mais_detalhes,d.ativo
		FROM doacao d INNER JOIN entidade e ON d.id_entidade = e.id
		LEFT JOIN programa_doacao pd ON d.id_programa_doacao = pd.id
		INNER JOIN tipo_doacao td ON d.id_tipo_doacao = td.id " . $aSearch . " ORDER BY d.id";
		$doacao = $this->_getDb()->query($strQueryDoacao);
		$aDoacao = array();		

		$aStatus = array('Inativo', 'Ativo');

		foreach ($doacao as $key => $value){

			$data_validade = '';
			if ($value['data_validade'] != null) {
				$data_validade = date('Y/m/d', strtotime($value['data_validade']));
			}

			$strQueryMovimentacaoDoacao = "SELECT md.id_pessoa as id_doador, p.nome as doador, md.id_local_armazenamento_doacao, lad.descricao as local_armazenamento_doacao,
			md.id_status_doacao, sd.descricao as status_doacao
			FROM movimentacao_doacao md INNER JOIN pessoa p ON md.id_pessoa = p.id
			INNER JOIN local_armazenamento_doacao lad ON md.id_local_armazenamento_doacao = lad.id
			INNER JOIN status_doacao sd ON md.id_status_doacao = sd.id
			WHERE md.id_doacao=" .  $value['id'] . " ORDER BY md.id LIMIT 1";
			$movimentacaoDoacao = $this->_getDb()->query($strQueryMovimentacaoDoacao);
			$aMovimentacaoDoacao = array();	

			foreach ($movimentacaoDoacao as $key => $value2){
				$aMovimentacaoDoacao[] = array(
					'id_local_armazenamento_doacao' => $value2['id_local_armazenamento_doacao'],
					'local_armazenamento_doacao' => $value2['local_armazenamento_doacao'],
					'id_status_doacao' => $value2['id_status_doacao'],
					'status_doacao' => $value2['status_doacao'],
					'id_doador' => $value2['id_doador'],
					'doador' => $value2['doador']		    			
					);
			}

			$movimentacaoDoacao = $this->_getDb()->close();

			$aDoacao[] = array(
				'id' => $value['id'],
				'id_entidade' => $value['id_entidade'],
				'entidade' => $value['entidade'],
				'id_programa_doacao' => $value['id_programa_doacao'],
				'programa_doacao' => $value['programa_doacao'],
				'id_tipo_doacao' => $value['id_tipo_doacao'],
				'tipo_doacao' => $value['tipo_doacao'],
				'descricao' => $value['descricao'],
				'quantidade' => $value['quantidade'],
				'valor_unitario' => $value['valor_unitario'],
				'data_validade' => $data_validade,
				'ativo' => $value['ativo'],
				'status' => $aStatus[$value['ativo']],
				'mais_detalhes' => $value['mais_detalhes'],
				'movimentacao' => $aMovimentacaoDoacao,
				);
		}

		$doacao = $this->_getDb()->close();

		if (count($aDoacao) == 0) {
			$aDoacao = array('error' => -1, 'mensagem' => "Nenhuma doação encontrada.");
		} else {
			$aDoacao = array('error' => 0, 'doacao' => $aDoacao);
		}

		if ($full == false) {
			fJSON::output($aDoacao);
		}
		else {
			return $aDoacao;
		}	
	}
	
	/*
	Módulo: Doação
	Descrição: Obter Lista de Movimento de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/movimentodoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function getMovimentacaoDoacao($id="", $full = false) {

		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE md.id_doacao = '.$id;
		}

		$strQueryMovimentacao = "SELECT md.id,md.tipo_entrada, p.id as id_pessoa, p.nome, lad.descricao as local_armazenamento_doacao, s.descricao as status, 
		md.quantidade, md.data_entrada, md.data_saida, md.historico, p2.nome as pessoa_donatario
		FROM movimentacao_doacao md INNER JOIN local_armazenamento_doacao lad ON md.id_local_armazenamento_doacao = lad.id
		LEFT JOIN pessoa p ON md.id_pessoa = p.id
		LEFT JOIN pessoa p2 ON md.id_pessoa_donatario = p2.id
		INNER JOIN status_doacao s ON md.id_status_doacao = s.id " . $aSearch . " ORDER BY md.id";
		$movimentacaoDoacao = $this->_getDb()->query($strQueryMovimentacao);
		$aMovimentacaoDoacao = array();

		$aTipoEntrada = array('Saida', 'Entrada');

		foreach ($movimentacaoDoacao as $key => $value){

			$data_entrada = '';
			$data_entrada_show = '';
			if ($value['data_entrada'] != null) {
				$data_entrada = date('Y/m/d', strtotime($value['data_entrada']));
				$data_entrada_show = date('d/m/Y', strtotime($value['data_entrada']));

			}

			$data_saida = '';
			$data_saida_show = '';
			if ($value['data_saida'] != null) {
				$data_saida = date('Y/m/d', strtotime($value['data_saida']));
				$data_saida_show = date('d/m/Y', strtotime($value['data_saida']));
			}

			if ($value['data_entrada'] != null && $value['data_entrada'] != ''){
				$data_movimentacao = $data_entrada_show;
			}else{
				$data_movimentacao = $data_saida_show;
			}

			$aMovimentacaoDoacao[] = array(
				'id' => $value['id'],
				'local_armazenamento_doacao' => $value['local_armazenamento_doacao'],
				'status_doacao' => $value['status'],
				'pessoa' => $value['nome'],
				'id_doacao' => $value['id'],
				'pessoa_donatario' => $value['pessoa_donatario'],
				'quantidade' =>  $value['quantidade'],
				'tipo_entrada' => @$aTipoEntrada[$value['tipo_entrada']],
				'data_entrada' => $data_entrada,
				'data_saida' => $data_saida,
				'data_movimentacao' => $data_movimentacao,				
				'historico' => $value['historico']
				);
		}

		$movimentacaoDoacao = $this->_getDb()->close();

		if (count($aMovimentacaoDoacao) == 0) {
			$aMovimentacaoDoacao = array('error' => -1, 'mensagem' => "Nenhuma movimentação encontrada.");
		} else {
			$aMovimentacaoDoacao = array('error' => 0, 'movimentacao_doacao' => $aMovimentacaoDoacao);
		}

		if ($full == false) {
			fJSON::output($aMovimentacaoDoacao);
		}
		else {
			return $aMovimentacaoDoacao;
		}		

	} 

	/*
	Módulo: Doação
	Descrição: Deleta uma Movimentação de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/delmovimentacaodoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 14/01/2015
	*/

	public function delMovimentacaoDoacao() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$movimentacaoDoacao = fRecordSet::build('MovimentacaoDoacao', $aSearch);
		$mensagem = "Movimentação de Doação excluída com sucesso!";

		try {
		//******** Grava informações na Tabela de doação

			$movimentacaoDoacao[0]->delete();

		//******** Fim - Grava informações na Tabela de doação      

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Doação
	Descrição: Cadastro de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/movimentacaodoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/01/2015
	*/

	public function postMovimentacaoDoacao() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$movimentacaoDoacao = new MovimentacaoDoacao($data->id);
			$mensagem = "Movimentação de Doação alterada com sucesso!";
			$alteracao=1;
		}else{
			$movimentacaoDoacao = new MovimentacaoDoacao();
			$mensagem = "Movimentação de Doação incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de doação
			if (property_exists($data, 'idDoador')){
				$IdPessoaAnt = '';
				if($alteracao==1){
					$IdPessoaAnt = $movimentacaoDoacao->getIdPessoa();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'IdPessoa', $IdPessoaAnt, $data->idDoador);
				$movimentacaoDoacao->setIdPessoa($data->idDoador);
			}

			if (property_exists($data, 'idDoadoPara')){
				$IdPessoaDonatarioAnt = '';
				if($alteracao==1){
					$IdPessoaDonatarioAnt = $movimentacaoDoacao->getIdPessoaDonatario();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'IdPessoaDonatario', $IdPessoaDonatarioAnt, $data->idDoadoPara);
				$movimentacaoDoacao->setIdPessoaDonatario($data->idDoadoPara);
			}

			if (property_exists($data, 'id_doacao')){
				$id_doacao = $data->id_doacao;
				$movimentacaoDoacao->setIdDoacao($id_doacao);
			}

			if (property_exists($data, 'localDoacao')){
				$IdLocalArmazenamentoDoacaoAnt = '';
				if($alteracao==1){
					$IdLocalArmazenamentoDoacaoAnt = $movimentacaoDoacao->getIdLocalArmazenamentoDoacao();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'IdLocalArmazenamentoDoacao', $IdLocalArmazenamentoDoacaoAnt, $data->localDoacao);
				$movimentacaoDoacao->setIdLocalArmazenamentoDoacao($data->localDoacao);
			}

			if (property_exists($data, 'statusDoacao')){
				$IdStatusDoacaoAnt = '';
				if($alteracao==1){
					$IdStatusDoacaoAnt = $movimentacaoDoacao->getIdStatusDoacao();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'IdStatusDoacao', $IdStatusDoacaoAnt, $data->statusDoacao);
				$movimentacaoDoacao->setIdStatusDoacao($data->statusDoacao);
			}

			if (property_exists($data, 'quantidade')){
				$QuantidadeAnt = '';
				if($alteracao==1){
					$QuantidadeAnt = $movimentacaoDoacao->getQuantidade();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'Quantidade', $QuantidadeAnt, $data->quantidade);
				$movimentacaoDoacao->setQuantidade($data->quantidade);
			}

			if (property_exists($data, 'tipo_entrada')){
				$TipoEntradaAnt = '';
				if($alteracao==1){
					$TipoEntradaAnt = $movimentacaoDoacao->getTipoEntrada();
				}
				$this->setAuditoria('MovimentacaoDoacao', 'TipoEntrada', $TipoEntradaAnt, $data->tipo_entrada);
				$movimentacaoDoacao->setTipoEntrada($data->tipo_entrada);
			}

			if (property_exists($data, 'data_movimentacao')){
				$dt_mov = substr(implode("-", array_reverse(explode("/", $data->data_movimentacao))), 0, 10);
				$dtMovAnt = '';

				if($data->tipo_entrada == 1){
					if($alteracao==1){
						$dtMovAnt = $movimentacaoDoacao->getDataEntrada();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'DataEntrada', $dtMovAnt, $dt_mov);
					$movimentacaoDoacao->setDataEntrada($dt_mov);
				}else{
					if($alteracao==1){
						$dtMovAnt = $movimentacaoDoacao->getDataSaida();
					}
					$this->setAuditoria('MovimentacaoDoacao', 'DataSaida', $dtMovAnt, $dt_mov);
					$movimentacaoDoacao->setDataSaida($dt_mov);
				}
			} 

			if (property_exists($data, 'historico')){
				$movimentacaoDoacao->setHistorico($data->historico);
			}

			$movimentacaoDoacao->store();
		//******** Fim - Grava informações na Tabela de doação      

			$arrMensagem = array('error' => 0, 'id_doacao' => $id_doacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Pedido
	Método: POST
	URL: http://localhost/sig/api/index.php/pedido/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/01/2015
	Autor: Daniel
	Versão: 1.0
	Data de Alteração: 19/01/2015
	*/
	public function getFalecidoMovimentacao($id_falecido = "", $full = false) {

		$aSearch = array();
		if ($id_falecido != "") {
			$aSearch['id_falecido='] = $id_falecido;
		}  

		$aMensagemMovimentacao = array();

		$movimentacaoFalecido = fRecordSet::build('UnidadeArmazenagemMovimentacao', $aSearch);
		$id_falecido = '';
		$id_gaveta = '';
		$tipo_entrada = '';
		$data_entrada = '';
		$data_saida = '';

		foreach ($movimentacaoFalecido as $key => $value) {
			$id_falecido = $value->getIdFalecido();
			$id_gaveta = $value->getIdGaveta();
			$tipo_entrada = $value->getTipoEntrada();
			$data_entrada = $value->getDataEntrada();
			$data_saida = $value->getDataSaida();
			$observacao = $value->getObservacao();

			$aSearchFalecido = array();
			$aSearchFalecido['id='] = $id_falecido;
			$falecido = fRecordset::build('Falecido',$aSearchFalecido);
			foreach ($falecido as $key => $value) {
				$nome_falecido = $value->getNome();
			}
			$aSearchGaveta = array();
			$aSearchGaveta['id='] = $id_gaveta;
			$gaveta = fRecordset::build('Gaveta',$aSearchGaveta);

			foreach ($gaveta as $key => $value) {
				$descricao_gaveta = $value->getDescricao();
			}

			if($tipo_entrada == 1){
				$aMensagemMovimentacao[] = array(
					'falecido' => $nome_falecido,
					'data_entrada' => date('d/m/Y', strtotime($data_entrada)),
					'gaveta' => $descricao_gaveta
					);      
			}else{
				$aMensagemMovimentacao[] = array(
					'falecido' => $nome_falecido,
					'data_saida' => date('d/m/Y', strtotime($data_saida)),
					'gaveta' => $descricao_gaveta
					);
			}

		}

		if ($full == false) {
			fJSON::output($aMensagemMovimentacao);
		}else {
			return $aMensagemMovimentacao;
		}              
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Pedido
	Método: POST
	URL: http://localhost/sig/api/index.php/pedido/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/01/2015
	Autor: Daniel
	Versão: 1.0
	Data de Alteração: 20/01/2015
	*/

	public function postPedido() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$pedido = new Pedido($data->id);
			$mensagem = "Pedido alterado com sucesso!";
			$alteracao=1;
		}else{
			$pedido = new Pedido();
			$mensagem = "Pedido gerado com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de pedido
			if (property_exists($data, 'id_entidade')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $pedido->getIdEntidade();
				}
				$this->setAuditoria('Pedido', 'IdEntidade', $entidadeAnt, $data->id_entidade);
				$pedido->setIdEntidade($data->id_entidade);
			}

			if (property_exists($data, 'id_departamento_funcionario')){
				$departamentoFuncionarioAnt = '';
				if($alteracao==1){
					$departamentoFuncionarioAnt = $pedido->getIdDepartamentoFuncionario();
				}
				$this->setAuditoria('Pedido', 'IdDepartamentoFuncionario', $departamentoFuncionarioAnt, $data->id_departamento_funcionario);
				$pedido->setIdDepartamentoFuncionario($data->id_departamento_funcionario);
			}

			if (property_exists($data, 'id_pessoa_responsavel')){
				$pessoaResponsavelAnt = '';
				if($alteracao==1){
					$pessoaResponsavelAnt = $pedido->getIdPessoa();
				}
				$this->setAuditoria('Pedido', 'IdPessoa', $pessoaResponsavelAnt, $data->id_pessoa_responsavel);
				$pedido->setIdPessoa($data->id_pessoa_responsavel);
			}

			if (property_exists($data, 'descricao')){
				$descricaoAnt = '';
				if($alteracao==1){
					$descricaoAnt = $pedido->getDescricao();
				}
				$this->setAuditoria('Pedido', 'Descricao', $descricaoAnt, $data->descricao);
				$pedido->setDescricao($data->descricao);
			}  

			if (property_exists($data, 'id_pessoa_aprovador')){
				$pessoaAprovadorAnt = '';
				if($alteracao==1){
					$pessoaAprovadorAnt = $pedido->getIdAprovador();
				}
				$this->setAuditoria('Pedido', 'IdAprovador', $pessoaAprovadorAnt, $data->id_pessoa_aprovador);
				$pedido->setIdAprovador($data->id_pessoa_aprovador);
			}

			if (property_exists($data, 'narrativa')){
				$pedido->setNarrativa($data->narrativa);
			}


			$pedido->setIdSituacaoPedido(1);
			$pedido->setDataSolicitacao(date('Y-m-d'));

			$pedido->store();

			$id_pedido = $pedido->getId();
		//******** Fim - Grava informações na Tabela de pedido

			$arrMensagem = array('error' => 0, 'id_pedido' => $id_pedido, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Compras
	Descrição: Cadastro de Item
	Método: GET
	URL: http://localhost/sig/api/index.php/item/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Autor: Luciano Almeida
	Data de Alteração: 21/03/2015
	*/
	public function postProdutosServicos() {
		$data = json_decode(file_get_contents("php://input"));
		//$total = $data->departamentos;

		if(property_exists($data, 'id')) {
			$produtosServicos = new ProdutosServicos($data->id);
			$mensagem = "Item alterado com sucesso!";
			$alteracao=1;
		}else{
			$produtosServicos = new ProdutosServicos();
			$mensagem = "Item incluído com sucesso!";
			$alteracao=0;
		}

		try {
			//******** Grava informações na Tabela de doação
			if (property_exists($data, 'descricao')){
				$descricaoAnt = '';
				if($alteracao==1){
					$descricaoAnt = $produtosServicos->getDescricao();
				}
				$this->setAuditoria('ProdutosServicos', 'Descricao', $descricaoAnt, $data->descricao);
				$produtosServicos->setDescricao($data->descricao);
			}

			if (property_exists($data, 'tipo_info')){
				$produtosServicos->setTipo($data->tipo_info);
			}

			if(property_exists($data, 'familia_id')){
				$produtosServicos->setIdFamilia($data->familia_id);
			}

			if(property_exists($data, 'categoria')){
				$produtosServicos->setIdCategoria($data->categoria);
			}			

			if(property_exists($data, 'id_unidade_medida')){
				$produtosServicos->setIdUnidadeMedida($data->id_unidade_medida);
			}

			if (property_exists($data, 'ativo')){
				$produtosServicos->setAtivo($data->ativo);
			}

			$produtosServicos->store();
			$id_produtos_servicos = $produtosServicos->getId();

			if (property_exists($data, 'departamentoselecionado')){
				foreach ($data->departamentoselecionado as $key2 => $value2) {
					$depto = new ItemDepartamento();
					$depto->setIdItem($id_produtos_servicos);
					$depto->setIdDepartamento($value2->id);
					$depto->store();
				}
			}

			$arrMensagem = array('error' => 0, 'id_produtos_servicos' => $id_produtos_servicos, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Produtos Servicos
	Método: GET
	URL: http://localhost/sig/api/index.php/produtosservicos/<desabilitar>/<id_produtos_servicos>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 24/03/2015
	Autor: Luciano Almeida
	*/
	public function getProdutosServicos($id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$produtosServicos = fRecordSet::build('ProdutosServicos', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aProdutosServicos = array();

			foreach ($produtosServicos->getRecords() as $key => $value) {
				$aTipo = array(
					'P' => 'Produtos', 
					'S' => 'Serviços',
					);

				$aStatus = array("Inativo", "Ativo");

				$unidadeMedida = $this->getUnidadeMedida($value->getIdUnidadeMedida(), true, true);

				if (strlen($value->getIdCategoria()>0)) {
					$categoria = $this->getCategoria("", $value->getIdCategoria(), true);
					//$categoria_descricao = $categoria->getDescricao();
					$categoria_descricao = $categoria['categoria'][0]['descricao'];
				
				} else { 
					$categoria_descricao = "";
				}

				$aProdutosServicos[] = array(
					'id' => $value->getId(),
					'id_unidade_medida' => $value->getIdUnidadeMedida(),
					'id_categoria' => $value->getIdCategoria(),
					'categoria' => $categoria_descricao,
					'descricao' => $value->getDescricao(),
					'descricao_unidade_medida' => $unidadeMedida->getDescricao(),
					'tipo_info' => $value->getTipo(),
					'tipo' => $aTipo[$value->getTipo()],
					'ativo' => $value->getAtivo(),
					'status' => $aStatus[$value->getAtivo()],
					);
			}

			if(count($aProdutosServicos) == 0) {
				$aProdutosServicos[] = array('error' => -1, 'mensagem' => "Nenhum Produtos ou Servico encontrado.");
				fJSON::output($aProdutosServicos);
				die();
			}

			$aProdutosServicos = array(
				'error' => 0,
				'produtos_servicos' => $aProdutosServicos,
				);

			fJSON::output($aProdutosServicos);
		}
		else {
			return $produtosServicos[0];
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Produtos Servicos Fornecedor
	Método: GET
	URL: http://localhost/sig/api/index.php/fornecedor/<id_produtos_servicos>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 16/01/2015
	*/
	public function getFornecedor($id_produtos_servicos="", $full = false) {
		$aSearch = array();
		if ($id_produtos_servicos != "") {
			$aSearch['id_produtos_servicos='] = $id_produtos_servicos;
		}

		$produtosServicosFornecedor = fRecordSet::build('ProdutosServicosFornecedor', $aSearch);

		if ($full == false) {
			$aProdutosServicosFornecedor = array(); 

		//Relacionamentos 

			$prodServ = fRecordSet::build('ProdutosServicos');
			$aProdServ = array();
			foreach ($prodServ->getRecords() as $key => $value) {
				$aProdServ[$value->getId()] = array(
					'descricao' => $value->getDescricao(),
					);
			}

			$tipoFornecedor = fRecordSet::build('TipoFornecedor');
			$aTipoFornecedor = array();
			foreach ($tipoFornecedor->getRecords() as $key => $value) {
				$aTipoFornecedor[$value->getId()] = array(
					'descricao' => $value->getDescricao(),
					);
			}

			$pessoa = fRecordSet::build('Pessoa');
			$aPessoa = array();
			foreach ($pessoa->getRecords() as $key => $value) {

				$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getId(), "", true, 2);
				$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value->getId(), "", true, 5);

				$cpf_cnpj = "";

				if(strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) == 0){
					$cpf_cnpj = self::mask(@$resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
				}elseif (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) == 0){
					$cpf_cnpj = self::mask(@$resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
				}

				$aPessoa[$value->getId()] = array(
					'nome' => $value->getNome(),
					'id_tipo_fornecedor' => $value->getIdTipoFornecedor(),
					'tipo_fornecedor' => $this->keyExists($value->getIdTipoFornecedor(), $aTipoFornecedor, 'descricao'),
					'cpf_cnpj' => $cpf_cnpj,
					);
			}
		// Fim - Relacionamentos 

			foreach ($produtosServicosFornecedor->getRecords() as $key => $value) {
				$aStatus = array("Inativo", "Ativo");
				$aProdutosServicosFornecedor[] = array(
					'id' => $value->getId(),
					'id_produtos_servicos' => $value->getIdProdutosServicos(),
					'produtos_servicos' => $this->keyExists($value->getIdProdutosServicos(), $aProdServ, 'descricao'),
					'id_pessoa' => $value->getIdPessoa(),
					'pessoa_nome' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'nome'),
					'pessoa_cpf_cnpj' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'cpf_cnpj'),
					'id_tipo_fornecedor' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'id_tipo_fornecedor'),
					'tipo_fornecedor' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'tipo_fornecedor'),
					);
			}

			if(count($aProdutosServicosFornecedor) == 0) {
				$aProdutosServicosFornecedor[] = array('error' => -1, 'mensagem' => "Nenhum fornecedor encontrado.");
				fJSON::output($aProdutosServicosFornecedor);
				die();
			}

			$aProdutosServicosFornecedor = array(
				'error' => 0,
				'produtos_servicos_fornecedor' => $aProdutosServicosFornecedor,
				);

			fJSON::output($aProdutosServicosFornecedor);
		}
		else {
			return $produtosServicos[0];
		}
	}

	/*
	Módulo: Compras
	Descrição: Deleta um Produtos Servicos Fornecedor
	Método: POST
	URL: http://localhost/sig/api/index.php/delProdutosServicos/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/01/2015
	*/

	public function delProdutosServicosFornecedor() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$produtosServicosFornecedor = fRecordSet::build('ProdutosServicosFornecedor', $aSearch);
		$mensagem = "Fornecedor excluído com sucesso!";

		try {
		//******** Grava informações na Tabela de doação

			$produtosServicosFornecedor[0]->delete();

		//******** Fim - Grava informações na Tabela de doação      

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Compras
	Descrição: Cadastro de Fornecedor
	Método: GET
	URL: http://localhost/sig/api/index.php/fornecedor/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/01/2015
	*/

	public function postFornecedor() {
		$data = json_decode(file_get_contents("php://input"));

		$produtosServicosFornecedor = new ProdutosServicosFornecedor();
		$mensagem = "Fornecedor incluído com sucesso!";


		try {
		//******** Grava informações na Tabela de doação
			if (property_exists($data, 'id_produtos_servicos')){
				$this->setAuditoria('ProdutosServicosFornecedor', 'IdProdutosServicos', '', $data->id_produtos_servicos);
				$produtosServicosFornecedor->setIdProdutosServicos($data->id_produtos_servicos);
			}

			if (property_exists($data, 'id_pessoa')){
				$this->setAuditoria('ProdutosServicosFornecedor', 'IdPessoa', '', $data->id_pessoa);
				$produtosServicosFornecedor->setIdPessoa($data->id_pessoa);
			}

			$produtosServicosFornecedor->store();
		//******** Fim - Grava informações na Tabela de doação      

			$id_produtos_servicos_fornecedor = $produtosServicosFornecedor->getId();

			$arrMensagem = array('error' => 0, 'id_produtos_servicos_fornecedor' => $id_produtos_servicos_fornecedor, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Compras
	Descrição: Cadastro de Pedido Itens
	Método: GET
	URL: http://localhost/sig/api/index.php/pedidoitens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 20/01/2015
	*/
	public function postPedidoItens() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$pedido_itens = new PedidoItens($data->id);
			$mensagem = "Item alterado com sucesso!";
			$alteracao = 1;
		} else {
			$pedido_itens = new PedidoItens();
			$mensagem = "Item incluído com sucesso!";
			$alteracao = 0;
		}

		try {
			if (property_exists($data, 'id_pedido')){
				$pedido_itens->setIdPedido($data->id_pedido);
			}

			if (property_exists($data, 'id_centro_custo')){
				$idCentroCustoAnt = '';
				if($alteracao==1){
					$idCentroCustoAnt = $pedido_itens->getIdCentroCusto();
				}
				$this->setAuditoria('PedidoItens', 'IdCentroCusto', $idCentroCustoAnt, $data->id_centro_custo);
				$pedido_itens->setIdCentroCusto($data->id_centro_custo);
			}

			if (property_exists($data, 'id_unidade_medida')){
				$idUnidadeMedidaAnt = '';
				if($alteracao==1){
					$idUnidadeMedidaAnt = $pedido_itens->getIdUnidadeMedida();
				}
				$this->setAuditoria('PedidoItens', 'IdUnidadeMedida', $idUnidadeMedidaAnt, $data->id_unidade_medida);
				$pedido_itens->setIdUnidadeMedida($data->id_unidade_medida);
			}

			if (property_exists($data, 'id_produtos_servicos')){
				$idProdutosServicosAnt = '';
				if($alteracao==1){
					$idProdutosServicosAnt = $pedido_itens->getIdProdutosServicos();
				}
				$this->setAuditoria('PedidoItens', 'IdProdutosServicos', $idProdutosServicosAnt, $data->id_produtos_servicos);
				$pedido_itens->setIdProdutosServicos($data->id_produtos_servicos);
			}

			if (property_exists($data, 'quantidade')){
				$quantidadeAnt = '';
				if($alteracao==1){
					$quantidadeAnt = $pedido_itens->getQuantidade();
				}
				$this->setAuditoria('PedidoItens', 'Quantidade', $quantidadeAnt, $data->quantidade);
				$pedido_itens->setQuantidade($data->quantidade);
			}

			if (property_exists($data, 'narrativa')){
				$pedido_itens->setNarrativa($data->narrativa);
			}

			if (property_exists($data, 'data_entrega')){
				$dataEntregaAnt = '';
				if($alteracao==1){
					$dataEntregaAnt = $pedido_itens->getDataEntrega();
				}
				$dt = implode("-", array_reverse(explode("/", $data->data_entrega)));
				$this->setAuditoria('Doacao', 'DataEntrega', $dataEntregaAnt, $dt);
				$pedido_itens->setDataEntrega($dt);
			}

			$pedido_itens->store();
			$id_pedido_itens = $pedido_itens->getId();
			$arrMensagem = array('error' => 0, 'id_pedido_itens' => $id_pedido_itens, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Doação
	Descrição: Obter Lista de Pedido
	Método: GET
	URL: http://localhost/sig/api/index.php/pedidoitens/<id_pedido>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 20/01/2015
	*/
	public function getPedidoItens($id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id_pedido='] = $id;
		}  

		$pedidoItens = fRecordSet::build('PedidoItens', $aSearch);
		$aSituacaoPedido = array();
		$situacaoPedido = fRecordSet::build('SituacaoPedido');

		foreach ($situacaoPedido->getRecords() as $key => $value) {
			$aSituacaoPedido[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$pedido = new Pedido($id);
		$situacao = $aSituacaoPedido[$pedido->getIdSituacaoPedido()]['descricao'];
		$aCentroCusto = array();
		$centroCusto = fRecordSet::build('CentroCusto');

		foreach ($centroCusto->getRecords() as $key => $value) {
			$aCentroCusto[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$aUnidadeMedida = array();
		$unidadeMedida = fRecordSet::build('UnidadeMedida');

		foreach ($unidadeMedida->getRecords() as $key => $value) {
			$aUnidadeMedida[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$tipo_desc = array('P' => 'Produtos', 'S' => 'Serviços');
		$aProdutosServicos = array();
		$produtosServicos = fRecordSet::build('ProdutosServicos');

		foreach ($produtosServicos->getRecords() as $key2 => $value2) {
			$aProdutosServicos[$value2->getId()] = array(
				'id' => $value2->getId(),
				'id_unidade_medida' => $value2->getIdUnidadeMedida(),
				'descricao' => $value2->getDescricao(),
				'tipo' => $value2->getTipo(),
				'tipo_desc' => $tipo_desc[$value2->getTipo()],
				);
		}

		if ($full == false) {
			$aPedidoItens = array();

			foreach ($pedidoItens->getRecords() as $key => $value) {
				$data_entrega = '';

				if ($value->getDataEntrega() != null) {
					$data_entrega = $value->getDataEntrega()->format('Y/m/d');
					$data_entrega_show = $value->getDataEntrega()->format('d/m/Y');
				}

				$centro_custo = '';

				if (array_key_exists($value->getIdCentroCusto(), $aCentroCusto)) {
					$centro_custo = $aCentroCusto[$value->getIdCentroCusto()]['descricao'];
				}

				$unidade_medida = '';

				if (array_key_exists($aProdutosServicos[$value->getIdProdutosServicos()]['id_unidade_medida'], $aUnidadeMedida)) {
					$unidade_medida = $aUnidadeMedida[$aProdutosServicos[$value->getIdProdutosServicos()]['id_unidade_medida']]['descricao'];
				}

				$produtos_servicos_descricao = '';
				$produtos_servicos_tipo = '';
				$produtos_servicos_tipo_desc = '';

				if (array_key_exists($value->getIdProdutosServicos(), $aProdutosServicos)) {
					$produtos_servicos_descricao = $aProdutosServicos[$value->getIdProdutosServicos()]['descricao'];
					$produtos_servicos_tipo = $aProdutosServicos[$value->getIdProdutosServicos()]['tipo'];
					$produtos_servicos_tipo_desc = $aProdutosServicos[$value->getIdProdutosServicos()]['tipo_desc'];
				}

				$aPedidoItens[] = array(
					'id' => $value->getId(),
					'id_pedido' => $value->getIdPedido(),
					'id_centro_custo' => $value->getIdCentroCusto(),
					'centro_custo' => $centro_custo,
					'id_unidade_medida' => $aProdutosServicos[$value->getIdProdutosServicos()]['id_unidade_medida'],
					'unidade_medida' => $unidade_medida,
					'id_produtos_servicos' => $value->getIdProdutosServicos(),
					'produtos_servicos_descricao' => $produtos_servicos_descricao,
					'produtos_servicos_tipo' => $produtos_servicos_tipo,
					'produtos_servicos_tipo_desc' => $produtos_servicos_tipo_desc,
					'narrativa' => $value->getNarrativa(),
					'quantidade' => $value->getQuantidade(),
					'data_entrega' => $data_entrega,
					'data_entrega_show' => $data_entrega_show,
					'situacao' => $situacao,
					);
			}

			if (count($aPedidoItens) == 0) {
				$aPedidoItens[] = array('error' => -1, 'mensagem' => "Nenhum Item encontrado.");
				fJSON::output($aPedidoItens);
				die;
			}

			$aPedidoItens = array(
				'pedido_itens' => $aPedidoItens
				);          

			fJSON::output($aPedidoItens);
		}
		else {
			return $pedidoItens;
		}
	}

	/*
	Módulo: Doação
	Descrição: Obter Lista de Pedido
	Método: GET
	URL: http://localhost/sig/api/index.php/pedido/<id_pedido>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 20/01/2015
	*/

	public function getPedido($id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$aPedido = array();
		$pedido = fRecordSet::build('Pedido', $aSearch);

	// Relacionamentos 
		$aDepartamentoFuncionario = array();
		$departamentoFuncionario = fRecordSet::build('DepartamentoFuncionario');
		foreach ($departamentoFuncionario->getRecords() as $key => $value) {
			$aDepartamentoFuncionario[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$aSituacaoPedido = array();
		$situacaoPedido = fRecordSet::build('SituacaoPedido');
		foreach ($situacaoPedido->getRecords() as $key => $value) {
			$aSituacaoPedido[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$aPessoa = array();
		$pessoa = fRecordSet::build('Pessoa');
		foreach ($pessoa->getRecords() as $key => $value) {
			$aPessoa[$value->getId()] = array(
				'nome' => $value->getNome(),
				);
		}

		$aEntidade = array();
		$entidade = fRecordSet::build('Entidade');
		foreach ($entidade->getRecords() as $key2 => $value2) {
			$aEntidade[$value2->getId()] = array(
				'nome' => $value2->getNome(),
				);
		}
	// Fim - Relacionamento

		if ($full == false) {

			foreach ($pedido->getRecords() as $key => $value) {

				$data_aprovacao = '';
				if ($value->getDataAprovacao() != null) {
					$data_aprovacao = $value->getDataAprovacao()->format('Y/m/d');
				}

				$data_solicitacao = '';
				if ($value->getDataSolicitacao() != null) {
					$data_solicitacao = $value->getDataSolicitacao()->format('Y/m/d');
				}

				$aPedido[] = array(
					'id' => $value->getId(),  
					'id_departamento_funcionario' => $value->getIdDepartamentoFuncionario(),  
					'departamento_funcionario' => $this->keyExists($value->getIdDepartamentoFuncionario(), $aDepartamentoFuncionario, 'descricao'),  
					'id_situacao_pedido' => $value->getIdSituacaoPedido(),  
					'situacao_pedido' => $this->keyExists($value->getIdSituacaoPedido(), $aSituacaoPedido, 'descricao'),  
					'id_pessoa_responsavel' => $value->getIdPessoa(),  
					'pessoa_responsavel' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'nome'),  
					'id_entidade' => $value->getIdEntidade(),  
					'entidade' => $aEntidade[$value->getIdEntidade()]['nome'],  
					'id_pessoa_aprovador' => $value->getIdAprovador(),  
					'pessoa_aprovador' => $this->keyExists($value->getIdAprovador(), $aPessoa, 'nome'),  
					'justificativa' => $value->getJustificativa(),  
					'data_solicitacao' => $data_solicitacao,  
					'data_aprovacao' => $data_aprovacao,  
					'descricao' => $value->getDescricao(),
					'narrativa' => $value->getNarrativa(),
					);

}

if (count($aPedido) == 0) {
	$aPedido[] = array('error' => -1, 'mensagem' => "Nenhum Pedido encontrado.");
	fJSON::output($aPedido);
	die;
}

$aPedido = array(
	'pedido' => $aPedido
	);          

fJSON::output($aPedido);
}else {
	return $pedido;
}
}

	/*
	Módulo: Compras
	Descrição: Deleta um Item do pedido
	Método: POST
	URL: http://localhost/sig/api/index.php/delpedidoitem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/01/2015
	*/

	public function delPedidoItem() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$pedidoItens = fRecordSet::build('PedidoItens', $aSearch);
		$mensagem = "Item excluído do pedido com sucesso!";

		try {
		//******** Ecluir registro da Tabela pedido itens

			$pedidoItens[0]->delete();

		//******** fim - Ecluir registro da Tabela pedido itens

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na exclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Compras
	Descrição: Obter Lista de status do pedido
	Método: GET
	URL: http://localhost/sig/api/index.php/listasituacaopedido
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/01/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaSituacaoPedido($full = false) {

		$pedidos = fRecordSet::build('SituacaoPedido');

		if ($full == false) {

			$aPedidos = array();

			foreach ($pedidos->getRecords() as $key => $value) {

				$aPedidos[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo()
					);
			}

			if (count($aPedidos) == 0) {
				$aPedidos[] = array(
					'mensagem' => "Nenhum pedido encontrado."
					);
			}

			fJSON::output($aPedidos);
		}else{
			return $pedidos;
		}
	}

/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova categoria de não associado
	Método: GET
	URL: http://localhost/sig/api/index.php/categorianaoassociado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/01/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 20/01/2015
	*/

	public function postCategoriaNaoAssociado() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$categoria = new CategoriaNaoassociado($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Categoria alterada com sucesso!";
			$alteracao=1;
		}else{
			$categoria = new CategoriaNaoassociado();
			$mensagem = "Categoria incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de categoria_naoassociado
			if (property_exists($data, 'descricao')){

				$categoriaAnt = '';
				if($alteracao==1){
					$categoriaAnt = $categoria->getDescricao();
				}

				$categoria->setDescricao($data->descricao);
				$this->setAuditoria('CategoriaNaoassociado', 'Descrição', $categoriaAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$categoria->setAtivo($data->ativo);
			}

			if (property_exists($data, 'pronome_tratamento')){
				$categoria->setPronomeTratamento($data->pronome_tratamento);
			}

			if (property_exists($data, 'documento')){
				$categoria->setDocumento($data->documento);
			}

			if (property_exists($data, 'tipo')){
				$categoria->setTipo($data->tipo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('CategoriaNaoassociado', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A categoria já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$categoria->store();
				}     
			} else {
				$categoria->store();
			} 
		//******** Fim - Grava informações na Tabela de Categoria
			$id_categoria = $categoria->getId();

			$arrMensagem = array('error' => 0, 'id_categoria' => $id_categoria, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Mesquita
	Descrição: alterar a situação do pedido
	Método: GET
	URL: http://localhost/sig/api/index.php/uppedidosituacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 21/01/2015
	*/

	public function upPedidoSituacao() {
		$data = json_decode(file_get_contents("php://input"));
		$mensagem = "";

		if (property_exists($data, 'id') && property_exists($data, 'id_situacao_nova')) {
			$pedido = new Pedido($data->id);
			$situacao = $data->id_situacao_nova;

			switch($situacao){
				case 2:
				$mensagem = "Pedido enviado para aprovação com sucesso!";
				break;
				case 3:
				$mensagem = "Pedido aprovado com sucesso!";
				break;
				case 4:
				$mensagem = "Pedido rejeitado com sucesso!";
				break;
			}

			$alteracao=1;
		}
		try {
			$id = $pedido->getId();
			$situacaoAnt = $pedido->getIdSituacaoPedido();
			$pedido->setIdSituacaoPedido($situacao);
			$this->setAuditoria('Pedido', 'IdSituacaoPedido', $situacaoAnt, $situacao, $id);
			$justificativa = '';

			if (property_exists($data, 'justificativa')) {
				$justificativa = $data->justificativa;
				$pedido->setJustificativa($justificativa);
				$this->setAuditoria('Pedido', 'Justificativa', '', $justificativa, $id);
			}

			$pedido->store();
			$id_situacao_pedido = $pedido->getIdSituacaoPedido();
			$id_pedido = $pedido->getId();
			$id_pessoa = $pedido->getIdPessoa();

			if($id_situacao_pedido == 3){
				$aSearch = array();
				$aSearch['id_pedido='] = $id_pedido;
				$pedido_itens = fRecordset::build('PedidoItens', $aSearch);

				$cotacao_compra = new CotacaoCompra();
				$cotacao_compra->setIdSituacaoCompra(1);
				$cotacao_compra->setIdPessoa($id_pessoa);
				$cotacao_compra->setIdPedido($id_pedido);
				$cotacao_compra->setDescricao("Aprovado no dia: " .date('d-m-Y'));
				$cotacao_compra->store();
				$id_cotacao_compra = $cotacao_compra->getId();

				foreach ($pedido_itens->getRecords() as $key => $value) {
					$cotacao_compra_itens = new CotacaoCompraItens();
					$cotacao_compra_itens->setIdCotacaoCompra($id_cotacao_compra);
					$cotacao_compra_itens->setIdProdutosServicos($value->getIdProdutosServicos());
					$cotacao_compra_itens->setQuantidade($value->getQuantidade());
					$cotacao_compra_itens->store();
					$id_cotacao_compra_itens = $cotacao_compra_itens->getId();
					$id_produtos_servicos = $cotacao_compra_itens->getIdProdutosServicos();
					$aBuscaPessoa = array();
					$aBuscaPessoa['id_produtos_servicos='] = $id_produtos_servicos;
					$busca_pessoa = fRecordset::build('ProdutosServicosFornecedor', $aBuscaPessoa);

					foreach ($busca_pessoa as $key3 => $value3) {
						$id_pessoa = $value3->getIdPessoa();
						$cotacao_compra_itens_fornecedor = new CotacaoCompraItensFornecedor();
						$cotacao_compra_itens_fornecedor->setIdCotacaoCompraItens($id_cotacao_compra_itens);
						$cotacao_compra_itens_fornecedor->setIdPessoa($id_pessoa);
						$cotacao_compra_itens_fornecedor->store();
					}
				}
			}

			$situacaoPedido = new SituacaoPedido($id_situacao_pedido);
			$situacao_pedido = $situacaoPedido->getDescricao();

			$arrMensagem = array(
				'error' => 0, 
				'situacao_pedido' => $situacao_pedido, 
				'id_situacao_pedido' => $id_situacao_pedido, 
				'justificativa' => $justificativa, 
				'mensagem' => $mensagem
				);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na alteração",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	public function getPermissao($page, $child, $tipo = ''){

		$userSes = fSession::get('user');

		$url = '/'.$page.'/'.$child;
		if ($tipo != '') {
			$url.= '/'.$tipo;
		}

		$strQueryAtividade = "Select * from atividade where url like '%".$url."%'";
		
		try{
			$Atividade = $this->_getDb()->query($strQueryAtividade); 
		} catch (fSQLException $e) {
			// $this->gravaLogMysql('atividade', $strQueryAtividade, $e->getMessage());
		}

		if ($Atividade->countReturnedRows() == 0) {
			$arrMensagem = array('error' => -1, 'mensagem' => 'Usuário não tem permissão de acesso!');
			fJSON::output($arrMensagem);
			die();  
		};
		
		$rowAtividade = $Atividade->fetchrow();		

		$idAtividade = $rowAtividade['id'];

		$Atividade = $this->_getDb()->close();
		
		$strQueryPapelAtividade = "Select * from papel_atividade where id_atividade = ".$idAtividade." and id_papel = ".$userSes['user']['id_papel']." ";
		
		try{
			$PapelAtividade = $this->_getDb()->query($strQueryPapelAtividade); 
		} catch (fSQLException $e) {
			// $this->gravaLogMysql('atividade', $strQueryPapelAtividade, $e->getMessage());
		}

		if ($PapelAtividade->countReturnedRows() == 0) {
			$arrMensagem = array('error' => -1, 'mensagem' => 'Usuário não tem permissão de acesso!');
			fJSON::output($arrMensagem);
			die();  
		};
		
		$rowPapelAtividade = $PapelAtividade->fetchrow();		

		$PapelAtividade = $this->_getDb()->close();

		$aPermissoes = array(
			'visualizar' => $rowPapelAtividade['visualizar'],
			'cadastrar' => $rowPapelAtividade['cadastrar'],
			'excluir' => $rowPapelAtividade['excluir'],
			);

		$arrMensagem = array('error' => 0, 'permissoes'=> $aPermissoes, 'mensagem' => 'Ok');
		fJSON::output($arrMensagem);
		die();
	}

	/*
	Módulo: Mesquita
	Descrição: Consulta de cotação de pedidos
	Método: GET
	URL: http://localhost/sig/api/index.php/cotacaoaprovacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 22/01/2015
	*/

	public function postCotacaoAprovacao() {
		$userSes = fSession::get('user');

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$mensagem = "Item excluído do pedido com sucesso!";

		$dt_inicial = substr(implode("-", array_reverse(explode("/", $data->data_inicial))), 0, 10);
		$dt_final = substr(implode("-", array_reverse(explode("/", $data->data_final))), 0, 10);

		if (property_exists($data, 'id_situacao_pedido')) {
			if ($data->id_situacao_pedido != "") {
				$aSearch['id_situacao_pedido='] = $data->id_situacao_pedido; 
			}
		}

		if(count($data->departamentos) > 0){
			$departamentos = array();
			foreach ($data->departamentos as $key => $value) {
				$departamentos[$key] = $value->id;
			}

			$aSearch['id_departamento_funcionario='] = $departamentos; 
		}

		$aSearch['data_solicitacao>='] = $dt_inicial;  
		$aSearch['data_solicitacao<='] = $dt_final;  

		$aPedido = array();
		$pedido = fRecordSet::build('Pedido', $aSearch);

	// Relacionamentos 
		$aDepartamentoFuncionario = array();
		$departamentoFuncionario = fRecordSet::build('DepartamentoFuncionario');
		foreach ($departamentoFuncionario->getRecords() as $key => $value) {
			$aDepartamentoFuncionario[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$aSituacaoPedido = array();
		$situacaoPedido = fRecordSet::build('SituacaoPedido');
		foreach ($situacaoPedido->getRecords() as $key => $value) {
			$aSituacaoPedido[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}

		$aPessoa = array();
		$pessoa = fRecordSet::build('Pessoa');
		foreach ($pessoa->getRecords() as $key => $value) {
			$aPessoa[$value->getId()] = array(
				'nome' => $value->getNome(),
				);
		}

		$aEntidade = array();
		$entidade = fRecordSet::build('Entidade');
		foreach ($entidade->getRecords() as $key2 => $value2) {
			$aEntidade[$value2->getId()] = array(
				'nome' => $value2->getNome(),
				);
		}
	// Fim - Relacionamento


		foreach ($pedido->getRecords() as $key => $value) {

			$data_aprovacao = '';
			if ($value->getDataAprovacao() != null) {
				$data_aprovacao = $value->getDataAprovacao()->format('Y/m/d');
			}

			$data_solicitacao = '';
			if ($value->getDataSolicitacao() != null) {
				$data_solicitacao = $value->getDataSolicitacao()->format('d/m/Y');
			}

			$aprovador = 0;
			if ($userSes['user']['id'] == $value->getIdAprovador()) {
				$aprovador = 1;
			}


			$aPedido[] = array(
				'id' => $value->getId(),  
				'id_departamento_funcionario' => $value->getIdDepartamentoFuncionario(),  
				'departamento_funcionario' => $this->keyExists($value->getIdDepartamentoFuncionario(), $aDepartamentoFuncionario, 'descricao'),  
				'id_situacao_pedido' => $value->getIdSituacaoPedido(),  
				'situacao_pedido' => $this->keyExists($value->getIdSituacaoPedido(), $aSituacaoPedido, 'descricao'),  
				'id_pessoa_responsavel' => $value->getIdPessoa(),  
				'pessoa_responsavel' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'nome'),  
				'id_entidade' => $value->getIdEntidade(),  
				'entidade' => $aEntidade[$value->getIdEntidade()]['nome'],  
				'id_pessoa_aprovador' => $value->getIdAprovador(),  
				'pessoa_aprovador' => $this->keyExists($value->getIdAprovador(), $aPessoa, 'nome'),  
				'justificativa' => $value->getJustificativa(),  
				'data_solicitacao' => $data_solicitacao,  
				'data_aprovacao' => $data_aprovacao,  
				'descricao' => $value->getDescricao(),
				'narrativa' => $value->getNarrativa(),
				'aprovador' => $aprovador,

				);

}

if (count($aPedido) == 0) {
	$aPedido[] = array('error' => -1, 'mensagem' => "Nenhum Pedido encontrado.");
	fJSON::output($aPedido);
	die;
}

$aPedido = array(
	'pedido' => $aPedido
	);          

fJSON::output($aPedido);
}

	 /*
	Módulo: Mesquita
	Descrição: Lista de Cotações
	Método: GET
	URL: http://localhost/sig/api/index.php/listacotacaocompra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/01/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 22/01/2015
	*/
	public function getListaCotacao($full = false){
		$aSearchCotacaoCompra = array();
		$aSearchCotacaoCompra['id_situacao_compra='] = 1;
		$compra = fRecordSet::build('CotacaoCompra',$aSearchCotacaoCompra);
		$aCompras = array();
		
		foreach ($compra->getRecords() as $key => $value) {
			$idPessoa = $value->getIdPessoa();
			$pessoa = new Pessoa($idPessoa);
			$idPedido = $value->getId();
			$situacaoCompra = new SituacaoCotacaoCompra(1);
			$aSearchItem = array();
			$aSearchItem['id_cotacao_compra='] = $idPedido;
			$cotacao_compra_itens = fRecordset::build('CotacaoCompraItens', $aSearchItem);
			$aItens = array();

			foreach ($cotacao_compra_itens as $chave => $valor) {
				$produtos_servicos = new ProdutosServicos($valor->getIdProdutosServicos());
				$descricao_produtos_servicos = $produtos_servicos->getDescricao();
				$id_unidade_medida = $produtos_servicos->getIdUnidadeMedida();
				$desc_unidade_medida = new UnidadeMedida($id_unidade_medida);
				$unidade_medida = $desc_unidade_medida->getDescricao();
				$fornecedor = fRecordset::build('CotacaoCompraItensFornecedor', array('id_cotacao_compra_itens=' => $valor->getId()));
				$aFornecedores = array();

				foreach ($fornecedor as $key2 => $value2) {
					$pessoaFornecedor = new Pessoa($value2->getIdPessoa());
					$aFornecedores[] = array(
						'id_fornecedor' => $value2->getIdPessoa(),
						'nome_fornecedor' => $pessoaFornecedor->getNome(),
						'valor_unitario' => $value2->getValorUnitario(),
						'valor_imposto' => $value2->getValorImposto(),              
						'valor_bruto' => $value2->getValorBruto(),
						'valor_liquido' => $value2->getValorLiquido(),       
						);            
				}
				
				$aItens[] = array(
					'id' => $valor->getId(),
					'id_cotacao_compra' => $valor->getId(),
					'id_produtos_servicos' => $valor->getIdProdutosServicos(),
					'descricao_produtos_servicos' => $descricao_produtos_servicos,
					'quantidade' => $valor->getQuantidade(),
					'id_unidade_medida' => $id_unidade_medida,
					'unidade_medida' => $unidade_medida,
					'fornecedores' =>  $aFornecedores
					);
			}

			$aItens = array_unique($aItens,SORT_REGULAR);

			$aCompras[] = array(
				'id' => $value->getId(),
				'id_situacao_compra' => $value->getIdSituacaoCompra(),
				'id_pessoa' => $value->getIdPessoa(),
				'comprador' => $pessoa->getNome(),
				'id_pedido' => $value->getIdPedido(),
				'descricao' => $value->getDescricao(),
				'situacao_compra' => $situacaoCompra->getDescricao(),
				'classe' => 'glyphicon glyphicon-chevron-up link',
				'toggle' => true,
				'items' => $aItens,
				);
		}
		fJSON::output($aCompras);
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um bordero
	Método: GET
	URL: http://localhost/sig/api/index.php/bordero/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/01/2015
	*/
	public function postListaCotacao(){
		$data = json_decode(file_get_contents("php://input"));
		
		$aSearch = array();
		$aSearch['id_cotacao_compra='] = $data->id_cotacao_compra;
		$aSearch['id_cotacao_compra_itens='] = $data->id_cotacao_compra_itens;

		$rs = fRecordSet::build('CotacaoCompraItensFornecedor', $aSearch);
		foreach ($rs->getRecords() as $key => $value) {
			$tmp = new CotacaoCompraItensFornecedor($value->getId());
			$tmp->delete();
		}

		try{

			$cotacao= new CotacaoCompraItensFornecedor();

			if(property_exists($data, 'id_cotacao_compra_itens')){
				$cotacao->setIdCotacaoCompraItens($data->id_cotacao_compra_itens);
			}
			if(property_exists($data, 'id_fornecedor')){
				$cotacao->setIdPessoa($data->id_fornecedor);
			}

			if(property_exists($data, 'valor_unitario')){
				$cotacao->setValorUnitario($data->valor_unitario);
			}

			if(property_exists($data, 'valor_total')){
				$cotacao->setValorBruto($data->valor_total);
				$cotacao->setValorLiquido($data->valor_total);
			}

			$cotacao->store();
			$id = $cotacao->getId();

			/*$cotacao_compra = new CotacaoCompra($data->cotacao_compra);
			$cotacao_compra->setIdSituacaoCompra(4);
			$cotacao_compra->store();*/

			$mensagem = "Cotação incluída com sucesso.";
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem, 'id_cotacao' => $id);
			fJSON::output($arrMensagem);
			die();
		}

		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	public function postBordero() {
		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		$mensagem = "Borderô incluído com sucesso!";
		$alteracao = 0;

		try {
		//******** Grava informações na Tabela de Bordero
			$bordero = new Bordero();

			$bordero->setIdEntidade($userSes['user']['entidadePessoa']);
			$bordero->setIdBorderoStatus(1);
			$bordero->setDataPagamento(date('Y-m-d'));

			$bordero->store();
			$id_bordero = $bordero->getId();

			foreach ($data as $key => $value) {
				$borderoItens = new BorderoItens();
				$borderoItens->setIdBordero($id_bordero);
				$borderoItens->setIdCaixa($value);

				$borderoItens->store();
			}
		//******** Fim - Grava informações na Tabela de Programa de Doacao



			$arrMensagem = array('error' => 0, 'id_bordero' => $id_bordero, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um nova fonte de captacao
	Método: POST
	URL: http://localhost/sig/api/index.php/fontecaptacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 29/01/2015
	*/

	public function postFonteCaptacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$fonteCaptacao = new FonteCaptacao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Fonte de captação alterada com sucesso!";
			$alteracao=1;
		}else{
			$fonteCaptacao = new FonteCaptacao();
			$mensagem = "Fonte de captação incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de tipo_fornecedor
			if (property_exists($data, 'descricao')){

				$fonteCaptacaoAnt = '';
				if($alteracao==1){
					$fonteCaptacaoAnt = $fonteCaptacao->getDescricao();
				}

				$fonteCaptacao->setDescricao($data->descricao);
				$this->setAuditoria('FonteCaptacao', 'Descricao', $fonteCaptacaoAnt, $data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$fonteCaptacao->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('FonteCaptacao', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A fonte de captacao já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$fonteCaptacao->store();
				}     
			} else {
				$fonteCaptacao->store();
			} 
		//******** Fim - Grava informações na Tabela de Categoria
			$id_fonte_captacao = $fonteCaptacao->getId();

			$arrMensagem = array('error' => 0, 'id_fonte_captacao' => $id_fonte_captacao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getCotacaoCompraItensFornecedor($id, $full = false){
		$aSearch = array();
		$aCotacoes = array();
		$aSearch['id_cotacao_compra='] = $id;
		$cotacao_compra_itens = fRecordset::build('CotacaoCompraItens', $aSearch);

		foreach ($cotacao_compra_itens as $key => $value) {
			$id = $value->getId();
			$aSearchId = array();
			$aSearchId['id_cotacao_compra_itens='] = $id;
			$cotacao_compra = fRecordset::build('CotacaoCompraItensFornecedor',$aSearchId);

			foreach ($cotacao_compra as $chave => $valor) {
				$aCotacoes[] = array(
					'id' => $valor->getId(),
					'id_cotacao_compra_itens' => $valor->getIdCotacaoCompraItens(),
					'id_pessoa' => $valor->getIdPessoa(),
					'valor_unitario' => $valor->getValorUnitario(),
					'valor_imposto' => $valor->getValorImposto(),
					'valor_bruto' => $valor->getValorBruto(),
					'valor_liquido' => $valor->getValorLiquido() 
					);
			}
		}
		if($full == false){
			fJSON::output($aCotacoes);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status da Agenda
	Método: GET
	URL: http://localhost/sig/api/index.php/statusagenda/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 30/01/2015
	*/
	public function getStatusAgenda($data="", $full = false) {
		$userSes = fSession::get('user');
		$acesso_modulo = $this->search_array($userSes['user']['modulo'], 'id_modulo', 25);//Valida se o usuario tem acesso ao modulo

		$aEvento = array();

		if(count($acesso_modulo) > 0){
			if($data == ""){
				$data = date('Y-m-d');
			}

			$data_atual_inicio = $data .'T00:00:00-000Z';
			$data_atual_fim = $data .'T23:59:59-999Z';

			$aSearch = "";
			$aSearch .= " and start >= '".$data_atual_inicio."'";
			$aSearch .= " and end <= '".$data_atual_fim."'";

			$strQueryEvento = "SELECT * FROM evento WHERE 1 ".$aSearch;

			$evento = $this->_getDb()->query($strQueryEvento);

			foreach ($evento as $key => $value) {
				$data_inicio = '';
				$hora_inicio = '';

				if ($value['start'] != null) {
					$data_inicio = date('d/m/Y', strtotime($value['start']));
					$hora_inicio = date('H:i:s', strtotime($value['start']));
					$hora_inicio = substr($hora_inicio, 0, 5);
				}

				$data_termino = '';
				$hora_termino = '';

				if ($value['end'] != null) {
					$data_termino = date('d/m/Y', strtotime($value['end']));
					$hora_termino = date('H:i:s', strtotime($value['end']));
					$hora_termino = substr($hora_termino, 0, 5);
				}

				$aEvento[] = array(
					'id' => $value['id'],
					'id_tipo_evento' => $value['id_tipo_evento'],
					'title' => $value['title'],
					'description' => $value['description'],
					'start' => $value['start'],
					'end' => $value['end'],
					'data_inicio' => $data_inicio, 
					'hora_inicio' => $hora_inicio, 
					'data_termino' => $data_termino,
					'hora_termino' => $hora_termino,
					'valor' => $value['valor'],
					);
			}

			$evento = $this->_getDb()->close();

			if ($full == false) {
				fJSON::output($aEvento);
				die;
			}else{
				return $aEvento;
			}
		}else {
			return $aEvento;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro
	Método: GET
	URL: http://localhost/sig/api/index.php/statusfianceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 30/01/2015
	*/
	public function getStatusFinanceiro($aSearch="", $full = false) {
		$userSes = fSession::get('user');
		$acesso_modulo = $this->search_array($userSes['user']['modulo'], 'id_modulo', 43);//Valida se o usuario tem acesso ao modulo

		//provisorio enquanto não trocar o movimentação do mesquita e do cemiterio
		$aUrl = array('', 'financeiro/formMovimentacao', 
					  'financeiro/formMovimentacao', 'financeiro/formCadastroMovimentacao');

		$caixa = array();
		$aCaixa = array();

		if(count($acesso_modulo) > 0){
			
			$aSearchContaBancaria =' and id_entidade = ' . $userSes['user']['entidadePessoa'];			

			$strQueryContaBancaria = "SELECT * FROM conta_bancaria WHERE 1 ".$aSearchContaBancaria;

			$contaBancaria = $this->_getDb()->query($strQueryContaBancaria);

			$aContaBancaria = array();
			foreach ($contaBancaria as $key => $value) {
				$aContaBancaria[] = $value['id'];
			}
			$contaBancaria = $this->_getDb()->close();

			$inContaBancaria = implode(',', $aContaBancaria);
			$aSearch .= ' and caixa.id_conta_bancaria in(' .$inContaBancaria .')';

			$strQueryCaixa = "SELECT caixa.*, tipo_lancamento.descricao as descricao_tipo from caixa
			inner join tipo_lancamento on tipo_lancamento.id = caixa.id_tipo_lancamento
			WHERE caixa.ativo = 1 ".$aSearch." order by data_vencimento asc";

			$caixa = $this->_getDb()->query($strQueryCaixa);

			//Relacionamentos
			$strQueryTipoLancamento = "SELECT * FROM tipo_lancamento";
			$tipoLancamento = $this->_getDb()->query($strQueryTipoLancamento);
			
			foreach ($caixa as $key => $value) {
				$data_vencimento = '';
				if ($value['data_vencimento'] != null) {
					$data_vencimento = date("d/m/Y", strtotime($value['data_vencimento']));
				}

				$aCaixa[] = array(
					'id' => $value['id'],
					'numero_documento' => $value['numero_documento'],
					'id_situacao' => $value['id_situacao'],
					'id_tipo_lancamento' => $value['id_tipo_lancamento'],
					'descricao' => $value['descricao'],
					'valor_final' => number_format($value['valor_final'], 2, ',', '.'),
					'data_vencimento' => $data_vencimento,
					'tipo_lancamento' => $value['descricao_tipo'],
					'url' => $aUrl[$userSes['user']['entidadePessoa']],
					);
			}

			$caixa = $this->_getDb()->close();

			if ($full == false) {
				fJSON::output($aCaixa);
				die;
			}else{
				return $aCaixa;
			}
		}else {
			return $aCaixa; 
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status das cotações
	Método: GET
	URL: http://localhost/sig/api/index.php/statuscotacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 30/01/2015
	*/
	public function getStatusCotacao($id="", $full = false) {
		$userSes = fSession::get('user');
		$acesso_modulo = $this->search_array($userSes['user']['modulo'], 'id_modulo', 110);//Valida se o usuario tem acesso ao modulo
	
		$aPedido = array();

		if(count($acesso_modulo) > 0){
			$aSearch = "";
			$aSearch .= ' and id_aprovador = '. $userSes['user']['id'];
			$aSearch .= ' and id_situacao_pedido = 2';
			$aSearch .= ' and id_entidade = '. $userSes['user']['entidadePessoa'];

			$strQueryPedido = "SELECT 
				pedido.*, 
				pessoa.nome 			
			FROM pedido 
			inner join pessoa on pessoa.id = pedido.id_pessoa
			WHERE 1 ".$aSearch;

			$pedido = $this->_getDb()->query($strQueryPedido);

			foreach ($pedido as $key => $value) {
				$aPedido[] = array(
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'id_departamento_funcionario' => $value['id_departamento_funcionario'],
					'departamento_funcionario' => $value['descricao_dp'],
					'id_pessoa' => $value['id_pessoa'],
					'pessoa' => $value['nome'],
					);
			//'tipo_lancamento' => $this->keyExists($value->getIdTipoLancamento(), $aTipoLancamento, 'descricao'),
			}

			$pedido = $this->_getDb()->close();

			if ($full == false) {
				fJSON::output($aPedido);
				die;
			}else {
				return $aPedido;
			}
		}else{
			return $aPedido;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Status
	Método: GET
	URL: http://localhost/sig/api/index.php/status/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 30/01/2015
	*/
	public function getStatus($id="", $full = false) {
		$aFinanceiro = array(
			$this->getStatusFinanceiroVencido("", true),
			$this->getStatusFinanceiroHoje("", true),
			$this->getStatusFinanceiroVencer("", true),
			);

		$aUnidadesArmazenagem = array(
			$this->getStatusUnidadeArmazenagemVencido("", true),
			$this->getStatusUnidadeArmazenagemHoje("", true),
			$this->getStatusUnidadeArmazenagemVencer("", true),
			);

		$aStatus = array(
			'financeiro' => $aFinanceiro,
			'cotacao' => $this->getStatusCotacao("", true),
			'agenda' => $this->getStatusAgenda("", true),
			'unidade_armazenagem' => $aUnidadesArmazenagem,
			);

		$aStatus = array(
			'status_tarefa' => $aStatus
			);          

		fJSON::output($aStatus);
	}

	
	/*
	Módulo: Doação
	Descrição: Envia Email esqueceu senha
	Método: GET
	URL: http://localhost/sig/api/index.php/esqueceusenha/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 41/01/2015
	*/

	public function postEsqueceuSenha() {
		$data = json_decode(file_get_contents("php://input"));

		$pessoa = array();
		$email = "";
		if(property_exists($data, 'email')) {
			$email = $data->email;

			$aSearch = array();
			$aSearch['email='] = $email;

			$pessoa = fRecordSet::build('Pessoa', $aSearch);
		}

		try {
		//******** Altera a senha na tabela
			if(count($pessoa) > 0){
				$id_pessoa = $pessoa[0]->getId();
				$novaSenha = $this->generateRandomPass(5);
				$this->setPass($id_pessoa, $novaSenha);
				$this->setDate($id_pessoa, date("Y-m-d"));
				$mensagem = "Senha alterada e enviada ao e-mail com sucesso!";

				$emailremetente = 'email@dominio.com';
				$assunto = 'Alterar senha do SIG';  
				$html = 'Senha: '.$novaSenha;

				$this->email($email, $emailremetente, $assunto, $html);
			}else{
				$id_pessoa = "";
				$mensagem = "Senha não pode ser alterada, e-mail não encontrado.";
			}
		//******** Fim - Altera a senha na tabela

			if($id_pessoa != ""){
				$arrMensagem = array('error' => 0, 'id_pessoa' => $id_pessoa, 'mensagem' => $mensagem);        
			}else{
				$arrMensagem = array('error' => 1, 'mensagem' => $mensagem);
			}

			fJSON::output($arrMensagem);
			die();  

		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	 /*
	Módulo: Compra
	Descrição: Atualiza o status da cotacao
	Método: GET
	URL: http://localhost/sig/api/index.php/updatecotacaocompra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 02/02/2015
	*/

	public function postAtualizaCotacaoCompra(){

		$data = json_decode(file_get_contents("php://input"));
		try{     
			$cotacao_compra = new CotacaoCompra($data->id);
			$cotacao_compra->setIdSituacaoCompra(4);
			$cotacao_compra->store();

			$mensagem = "Cotação enviada com sucesso.";

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getListaCotacaoPendente($full = false){

		$aSearchCotacaoCompra = array();
		$aSearchCotacaoCompra['id_situacao_compra='] = 4;

		$compra = fRecordSet::build('CotacaoCompra',$aSearchCotacaoCompra);

		$aCompras = array();

		foreach ($compra->getRecords() as $key => $value) {
			$idPessoa = $value->getIdPessoa();

			$pessoa = new Pessoa($idPessoa);

			$idPedido = $value->getId();

			$situacaoCompra = new SituacaoCotacaoCompra(4);

			$aSearchItem = array();

			$aSearchItem['id_cotacao_compra='] = $idPedido;

			$cotacao_compra_itens = fRecordset::build('CotacaoCompraItens', $aSearchItem);

			$aItens = array();

			foreach ($cotacao_compra_itens as $chave => $valor) {

				$produtos_servicos = new ProdutosServicos($valor->getIdProdutosServicos());

				$descricao_produtos_servicos = $produtos_servicos->getDescricao();
				$id_unidade_medida = $valor->getIdUnidadeMedida();

				$desc_unidade_medida = new UnidadeMedida($id_unidade_medida);
				$unidade_medida = $desc_unidade_medida->getDescricao();

				$fornecedor = fRecordset::build('CotacaoCompraItensFornecedor', array('id_cotacao_compra_itens=' => $valor->getId()), array('valor_unitario' => 'asc'));

				$aFornecedores = array();

				foreach ($fornecedor as $key2 => $value2) {
					$pessoaFornecedor = new Pessoa($value2->getIdPessoa());

					$aFornecedores[] = array(
						'id_fornecedor' => $value2->getIdPessoa(),
						'nome_fornecedor' => $pessoaFornecedor->getNome(),
						'valor_unitario' => $value2->getValorUnitario(),
						'valor_imposto' => $value2->getValorImposto(),              
						'valor_bruto' => $value2->getValorBruto(),
						'valor_liquido' => $value2->getValorLiquido(),       
						);            
				}



				$aItens[] = array(
					'id' => $valor->getId(),
					'id_cotacao_compra' => $valor->getId(),
					'id_produtos_servicos' => $valor->getIdProdutosServicos(),
					'descricao_produtos_servicos' => $descricao_produtos_servicos,
					'quantidade' => $valor->getQuantidade(),
					'unidade_medida' => $unidade_medida,
					'fornecedores' =>  $aFornecedores
					);

			}

			$aCompras[] = array(
				'id' => $value->getId(),
				'id_situacao_compra' => $value->getIdSituacaoCompra(),
				'id_pessoa' => $value->getIdPessoa(),
				'comprador' => $pessoa->getNome(),
				'id_pedido' => $value->getIdPedido(),
				'descricao' => $value->getDescricao(),
				'situacao_compra' => $situacaoCompra->getDescricao(),
				'classe' => 'glyphicon glyphicon-chevron-up link',
				'toggle' => true,
				'items' => $aItens,
				);
		}

		fJSON::output($aCompras);
	}

	/*Módulo: Compra
	Descrição:Aprova ou reprova uma cotação
	Método: GET
	URL: http://localhost/sig/api/index.php/updatecotacaocompra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 02/02/2015
	*/


	public function postAprovaReprovaCotacao(){

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');

		$situacao = '';
		if(property_exists($data, 'id')){
			$cotacao = new CotacaoCompra($data->id);
		}
		if(property_exists($data, 'situacao')){
			if ($data->situacao == 1) {
				$situacao = 2;
				$mensagem = "Cotação aprovada com sucesso.";
			}
			else{
				$situacao = 3;
				$mensagem = "Cotação reprovada com sucesso.";
			}
		}
		if(property_exists($data, 'justificativa')){
			$cotacao->setJustificativa($data->justificativa);
		}
		try{
			$cotacao->setIdSituacaoCompra($situacao);
			$data_aprovacao = date('Y-m-d H:i:s');
			$cotacao->setIdAprovador($user['user']['id']);
			$cotacao->setDataAprovacao($data_aprovacao);
			$cotacao->store();
			$mensagem = "Cotação aprovada com sucesso.";
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}    
	}

	//

	public function getListaCompra($full = false) {

		$compra = fRecordSet::build('CotacaoCompra');

		if ($full == false) {

			$aCompras = array();
			$id_pessoa = '';

			foreach ($compra->getRecords() as $key => $value) {

				$id_pessoa = $value->getIdPessoa();
				$id_aprovador = $value->getIdAprovador();
				$id_situacao_compra = $value->getIdSituacaoCompra();
				$nome_pessoa = '';

				$pessoa = fRecordset::build('Pessoa', array('id=' => $id_pessoa));
				foreach ($pessoa as $key1 => $value1) {
					$nome_pessoa = $value1->getNome();
				}

				$nome_pessoa2 = '';
				$aprovador = fRecordset::build('Pessoa', array('id=' => $id_aprovador));
				foreach ($aprovador as $key2 => $value2) {
					$nome_pessoa2 = $value2->getNome();
				}

				$aCompras[] = array(
					'id' => $value->getId(),
					'id_situacao_compra' => $id_situacao_compra,
					'descricao' => $value->getDescricao(),
					'id_pessoa' => $id_pessoa,
					'nome' => $nome_pessoa,
					'id_pedido' => $value->getIdPedido(),
					'descricao' => $value->getDescricao(),
					'justificativa' => $value->getJustificativa(),
					'id_aprovador' => $id_aprovador,
					'nome_aprovador' => $nome_pessoa2
					);
			}

			if (count($aCompras) == 0) {
				$aCompras[] = array(
					'mensagem' => "Nenhuma compra encontrado."
					);
			}

			fJSON::output($aCompras);
		}else{
			return $compra;
		}
	}

	public function getFamilia(){

		$aFamilia = array();

		$familia = fRecordset::build('Familia');

		$aFamilia[] = array(
			'id' => -1,
			'descricao' => ':: Cadastrar nova família'
			);

		foreach ($familia as $key => $value) {
			$aFamilia[] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao()
				);
		}
		fJSON::output($aFamilia);
		die();
	}
	
	

	/*
	Módulo: Doação
	Descrição: Alterar dados da tabela pessoa para nova configuração da conta
	Método: POST
	URL: http://localhost/sig/api/index.php/configUsuario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 05/02/2015
	*/
	private function postTelefone($id_pessoa, $tipo, $numero){
		
		if($numero != ""){
			
			$fone_prefixo = substr($numero, 0,3);

			if($tipo == 3 || $tipo == 1){
				$fone_numero = substr($numero, 3);
				$fone_ramal = '';
			}else{
				$fone_numero = substr($numero, 3, 8);
				$fone_ramal = substr($numero, 11);
			}

			$aSearch = array();
			$aSearch['id_pessoa='] = $id_pessoa;
			$aSearch['id_tipo_telefone='] = $tipo;
			$aSearch['ddd='] = $fone_prefixo;
			$aSearch['numero='] = $fone_numero;

			$telefone = fRecordSet::build('Telefone',$aSearch);

			if($telefone->count()){
				$fone = new Telefone($telefone[0]->getId());
				$numeroAnt = $fone->getNumero();
				$dddAnt = $fone->getDdd();
				$ramalAnt = $fone->getRamal();
			}else{
				$fone = new Telefone();

				$fone->setIdTipoTelefone($tipo);
				$fone->setIdPessoa($id_pessoa);

				$numeroAnt = "";
				$dddAnt = "";
				$ramalAnt = "";
			}

			if($fone_ramal == ""){ $fone->setRamal(" "); }else{ $fone->setRamal($fone_ramal); }

			$this->setAuditoria('Telefone', 'Numero', $numeroAnt, $fone_numero);
			$fone->setNumero($fone_numero);

			$this->setAuditoria('Telefone', 'Ddd', $dddAnt, $fone_prefixo);
			$fone->setDdd($fone_prefixo);
			$fone->setAtivo(1);

			$fone->store();
		}
	}

	public function postConfigUsuario() {

		$data = json_decode(file_get_contents("php://input"));

		//$validar = 0;
		//$db_pass = '';
		/*
		if(property_exists($data, 'nova_senha') && property_exists($data, 'confirmar_nova_senha')) {
			if($data->nova_senha != "" && $data->nova_senha != $data->confirmar_nova_senha){
				$msg = 'Campo Nova Senha e Confirmar Nova Senha estão diferentes!';
				$validar = 1;
			}
		}
		*/
		if(property_exists($data, 'id')) {
			$pessoa = new Pessoa($data->id);
			//$db_pass = $pessoa->getSenha();
			$mensagem = "Dados pessoais alterados com sucesso!";
			$alteracao=1;
		}

		/*
		if (!sigId::checkPassword($data->senha_atual, $db_pass)){
			$msg = 'Senha Atual inválida!';
			$validar = 1;
		}
		*/

		//if ($validar == 0){
			try {
		//******** Alterando informações na Tabela de pessoa
				if (property_exists($data, 'nome')){
					$nomeAnt = '';
					if($alteracao==1){
						$nomeAnt = $pessoa->getNome();
					}
					$this->setAuditoria('Pessoa', 'Nome', $nomeAnt, $data->nome);
					$pessoa->setNome($data->nome);
				}

				if (property_exists($data, 'id_estado_civil')){
					$idEstadoCivilAnt = '';
					if($alteracao==1){
						$idEstadoCivilAnt = $pessoa->getIdEstadoCivil();
					}
					$this->setAuditoria('Pessoa', 'IdEstadoCivil', $idEstadoCivilAnt, $data->id_estado_civil);
					$pessoa->setIdEstadoCivil($data->id_estado_civil);
				}

				if (property_exists($data, 'data_nascimento')){
					$dataNascimentoAnt = '';
					if($alteracao==1){
						$dataNascimentoAnt = $pessoa->getDataNascimento();
					}
					$this->setAuditoria('Pessoa', 'DataNascimento', $dataNascimentoAnt, $data->data_nascimento);
					$pessoa->setDataNascimento($data->data_nascimento);
				}

				if (property_exists($data, 'nacionalidade')){
					$nacionalidadeAnt = '';
					if($alteracao==1){
						$nacionalidadeAnt = $pessoa->getNacionalidade();
					}

					$this->setAuditoria('Pessoa', 'Nacionalidade', $nacionalidadeAnt, $data->nacionalidade);
					$pessoa->setNacionalidade($data->nacionalidade);
				}

				if (property_exists($data, 'email')){
					$emailAnt = ''; 
					if($alteracao==1){
						$emailAnt = $pessoa->getEmail();
					}

					$this->setAuditoria('Pessoa', 'Email', $emailAnt, $data->email);
					$pessoa->setEmail($data->email);
				}

				$pessoa->store();

				$id_pessoa = $pessoa->getId();

				if(property_exists($data, 'nova_senha') && property_exists($data, 'confirmar_nova_senha')) {
					if($data->nova_senha != ""){
						$this->setPass($id_pessoa, $data->nova_senha);
					}
				}

				if(property_exists($data, 'telefone_celular')) {
					$this->postTelefone($id_pessoa, 3, $data->telefone_celular);
				}

				if(property_exists($data, 'telefone_residencial')) {
					$this->postTelefone($id_pessoa, 1, $data->telefone_residencial);
				}

				if(property_exists($data, 'telefone_comercial')) {
					$this->postTelefone($id_pessoa, 2, $data->telefone_comercial);
				}

				$arrMensagem = array('error' => 0, 'id_pessoa' => $id_pessoa, 'mensagem' => $mensagem);
				fJSON::output($arrMensagem);
				die();
			}
			catch (fValidationException $e) {
				$error = $this->errorMessage("Erro na inclusão",$e);
				$arrMensagem = array('error' => -1, 'mensagem' => $error);
				fJSON::output($arrMensagem);
				die();
			}
		/*
		}else{
			$arrMensagem = array('error' => -1, 'mensagem' => $msg);
			fJSON::output($arrMensagem);
			die();
		}
		*/
	}


	/*
	Módulo: Mesquita
	Descrição: Obter Lista de quadro associativo
	Método: GET
	URL: http://localhost/sig/api/index.php/quadroassociativo/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	Alteração devido a adição do campo de departamento
	*/

	public function getQuadroAssociativo($id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$quadroAssociativo = fRecordSet::build('QuadroAssociativo', $aSearch, array('data_inicio' => 'asc'));

		if ($full == false) {

			$aQuadroAssociativo = array();      

			$status = array("Inativo", "Ativo");

			foreach ($quadroAssociativo as $key => $value) {
				$dt_inicio = '';
				if($value->getDataInicio() != null){
					$dt_inicio = $value->getDataInicio()->format('Y/m/d');
					$dt_inicio_show = $value->getDataInicio()->format('d/m/Y');
				}

				$dt_termino = '';
				if($value->getDataTermino() != null){
					$dt_termino = $value->getDataTermino()->format('Y/m/d');
					$dt_termino_show = $value->getDataTermino()->format('d/m/Y');
				}

				$departamentoDescricao = "";
				if ($value->getIdDepartamento() > 0){
					$resultDepartamento = $this->getDepartamento($value->getIdDepartamento(), 1);
					$departamentoDescricao = $resultDepartamento['departamento'][0]["descricao"];
				}

				$aQuadroAssociativo[] = array(
					'id' => $value->getId(),
					'id_departamento' => $value->getIdDepartamento(),
					'departamento' => $departamentoDescricao,
					'data_inicio' => $dt_inicio,
					'data_inicio_show' => $dt_inicio_show,
					'data_termino' => $dt_termino,
					'data_termino_show' => $dt_termino_show,
					'referencia' => $value->getReferencia(),
					'ativo' => $value->getAtivo(),
					'status' => $status[$value->getAtivo()],
					);
			}

			if (count($aQuadroAssociativo) == 0) {
				$aQuadroAssociativo[] = array('error' => -1, 'mensagem' => "Nenhuma Estrutura Organizacional SBM encontrada.");
				fJSON::output($aQuadroAssociativo);
				die();
			}

			$aQuadroAssociativo = array(
				'error' => 0,
				'quadro_associativo' => $aQuadroAssociativo
				);          

			fJSON::output($aQuadroAssociativo);
		}
		else {
			return $quadroAssociativo[0];
		}
	}
	
	/*
	Módulo: Mesquita
	Descrição: Obter Contribuição Associativa conforme o beneficiario
	Método: GET
	URL: http://localhost/sig/api/index.php/beneficiariocontribuicao/<pessoa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 05/02/2015
	*/

	public function getContribuicaoBeneficiario($id_pessoa = "", $full = false) {
		$this->acessoApi();

		$aSearch = array();
		$aSearch['id_pessoa='] = $id_pessoa;
		$aSearch['parentesco='] = 0;

		$beneficiario = fRecordSet::build('Beneficiario', $aSearch);
		$aBeneficiario = array();
		$aBeneficiario[0] = $id_pessoa;
		foreach ($beneficiario as $key => $value) {
			$aBeneficiario[$key+1] = $value->getIdPessoaBeneficiario(); 
		}

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $aBeneficiario;
		}

		$contribuicaoPessoa = fRecordSet::build('Contribuicao', $aSearch);

		$aContribuicaoPessoa = array();

		$aIsento = array('Não', 'Sim');
		$aBoleto = array('Boleto Bancário via Banco', 'Boleto Bancário via E-mail');


		if ($contribuicaoPessoa->count() == 0) {
			$aContribuicaoPessoa[] = array(
				'error' => "-1",
				'mensagem' => "Nenhum contribuição encontrada."
				);
		}else{
			$total = 0;
			$total_dependentes = 0;
			$total_beneficiarios = 0;
			foreach ($contribuicaoPessoa as $key => $value) {
				if($value->getIdPessoa() == $id_pessoa){
					$total_dependentes = $total_dependentes + $value->getValor();
				}else{
					$total_beneficiarios = $total_beneficiarios + $value->getValor();
				}

				$total = $total + $value->getValor();
			}

			foreach ($contribuicaoPessoa as $key => $value) {
				$aSearch = array();
				$aSearch['id='] = $value->getIdPessoa();
				$pessoa = fRecordSet::build('Pessoa', $aSearch);

				if($value->getIsento() == 0){
					$boleto_show = $aBoleto[$value->getCarteira()];
					$valor_show = number_format($value->getValor(), 2, ',', '.');
				}else{
					$boleto_show = '';
					$valor_show = '';
				}

				$aContribuicaoPessoa[] = array(
					'error' => "0",
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'pessoa' => $pessoa[0]->getNome(),
					'dia' => $value->getDia(),
					'valor' => $valor_show,
					'isento' => $value->getIsento(),
					'isento_show' => $aIsento[$value->getIsento()],
					'carteira' => $value->getCarteira(),
					'carteira_show' => $boleto_show,
					'numero_meses' => $value->getNumeroMeses(),
					'total' => number_format($total, 2, ',', '.'),
					'total_dependentes' => number_format($total_dependentes, 2, ',', '.'),
					'total_beneficiarios' => number_format($total_beneficiarios, 2, ',', '.'),
					);
			}
		}

		if ($full == false) {
			fJSON::output($aContribuicaoPessoa);
		}else{
			return $aContribuicaoPessoa;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastro de Quadro Associativo por periodo
	Método: GET
	URL: http://localhost/sig/api/index.php/quadroassociativo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/02/2015
	*/

	public function postQuadroAssociativo() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$quadro_associativo = new QuadroAssociativo($data->id);
			$mensagem = "Estrutura Organizacional SBM alterada com sucesso!";
			$alteracao = 1;
		}else{
			$quadro_associativo = new QuadroAssociativo();
			$mensagem = "Estrutura Organizacional SBM incluída com sucesso!";
			$alteracao = 0;
		}

		try {
		//******** Grava informações na Tabela de doação
			if (property_exists($data, 'data_inicio')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $quadro_associativo->getDataInicio();
				}
				$this->setAuditoria('QuadroAssociativo', 'DataInicio', $entidadeAnt, $data->data_inicio);
				$quadro_associativo->setDataInicio($data->data_inicio);
			}

			if (property_exists($data, 'data_termino')){
				$entidadeAnt = '';
				if($alteracao==1){
					$entidadeAnt = $quadro_associativo->getDataTermino();
				}
				$this->setAuditoria('QuadroAssociativo', 'DataTermino', $entidadeAnt, $data->data_termino);
				$quadro_associativo->setDataTermino($data->data_termino);
			}

			if (property_exists($data, 'id_departamento')){
				$quadro_associativo->setIdDepartamento($data->id_departamento);
			}

			if (property_exists($data, 'referencia')){
				$quadro_associativo->setReferencia($data->referencia);
			}

			if (property_exists($data, 'ativo')){
				$quadro_associativo->setAtivo($data->ativo);
			}

			$quadro_associativo->store();

			$id_quadro_associativo = $quadro_associativo->getId();
		//******** Fim - Grava informações na Tabela de doação

			$arrMensagem = array('error' => 0, 
				'id_quadro_associativo' => $id_quadro_associativo, 
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/cargo/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	*/

	public function getCargo($id_consulta="", $id="",$id_departamento="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = "";
		if ($id > 0) {
			$aSearch .= ' and id=' . $id;
		}
		if ($id_departamento > 0) {
			$aSearch .= ' and id_departamento=' . $id_departamento;
		}
		if (  $userSes['user']['idTipoEntidade'] != null ){
			$aSearch .= ' and id_tipo_entidade=' . $userSes['user']['idTipoEntidade'];
		}

		$strQuerycargo = "SELECT * FROM cargo WHERE 1 ".$aSearch." order by descricao asc";
		$cargo = $this->_getDb()->query($strQuerycargo);

		if ($full == false) {

			$aCargo = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aCargo[] = array(
					'tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Cargo",
					'ativo' => "",
					'status' => ""
					);
			}      


			$aStatus = array("Inativo", "Ativo");

			foreach ($cargo as $key => $value) {

				$departamentoDescricao = "";
				if ($value['id_departamento'] > 0){
					$resultDepartamento = $this->getDepartamento($value['id_departamento'], 1);					
					$departamentoDescricao = $resultDepartamento['departamento'][0]["descricao"];					
				}

				$aCargo[] = array(
					'tipo' => "Cargos",
					'id' => $value['id'],
					'id_departamento' => $value['id_departamento'],
					'departamento' => $departamentoDescricao,
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' => $aStatus[$value['ativo']],
					);
			}

			$cargo = $this->_getDb()->close();

			if (count($aCargo) == 0) {
				$aCargo[] = array('error' => -1, 'mensagem' => "Nenhum cargo encontrado.");
				fJSON::output($aCargo);
				die();
			}

			$aCargo = array(
				'error' => 0, 
				'cargo' => $aCargo
				);

			fJSON::output($aCargo);
		}
		else {
			return $aCargo;
		}
	} 

/*
	Módulo: Mesquita
	Descrição: Cadastro de Quadro Associativo pessoa (cargos)
	Método: GET
	URL: http://localhost/sig/api/index.php/quadroassociativopessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/02/2015
	*/

	public function postQuadroAssociativoPessoa() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$quadro_associativo = new QuadroAssociativoPessoa($data->id);
			$mensagem = "Cargo do associado alterado com sucesso!";
			$alteracao = 1;
		}else{
			$quadro_associativo = new QuadroAssociativoPessoa();
			$mensagem = "Cargo do associado incluído com sucesso!";
			$alteracao = 0;
		}

		try {
		//******** Grava informações na Tabela de doação
			if (property_exists($data, 'id_pessoa')){
				$idPessoaAnt = '';
				if($alteracao==1){
					$idPessoaAnt = $quadro_associativo->getIdPessoa();
				}
				$this->setAuditoria('QuadroAssociativoPessoa', 'IdPessoa', $idPessoaAnt, $data->id_pessoa);
				$quadro_associativo->setIdPessoa($data->id_pessoa);
			}

			if (property_exists($data, 'id_quadro_associativo')){
				$idQuadroAssociativoAnt = '';
				if($alteracao==1){
					$idQuadroAssociativoAnt = $quadro_associativo->getIdQuadroAssociativo();
				}
				$this->setAuditoria('QuadroAssociativoPessoa', 'IdQuadroAssociativo', $idQuadroAssociativoAnt, $data->id_quadro_associativo);
				$quadro_associativo->setIdQuadroAssociativo($data->id_quadro_associativo);
			}

			if (property_exists($data, 'id_cargo')){
				$idCargoAnt = '';
				if($alteracao==1){
					$idCargoAnt = $quadro_associativo->getIdCargo();
				}
				$this->setAuditoria('QuadroAssociativoPessoa', 'IdCargo', $idCargoAnt, $data->id_cargo);
				$quadro_associativo->setIdCargo($data->id_cargo);
			}

			$quadro_associativo->store();

			$id_quadro_associativo_pessoa = $quadro_associativo->getId();
		//******** Fim - Grava informações na Tabela de doação

			$arrMensagem = array('error' => 0, 
				'id_quadro_associativo_pessoa' => $id_quadro_associativo_pessoa, 
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/quadroassociativopessoa/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/02/2015
	*/

	public function getQuadroAssociativoPessoa($id_quadro_associativo="", $full = false) {

		$aSearch = array();
		if ($id_quadro_associativo != "") {
			$aSearch['id_quadro_associativo='] = $id_quadro_associativo;
		}

		$quadroAssociativoPessoa = fRecordSet::build('QuadroAssociativoPessoa', $aSearch);

		if ($full == false) {
		//Relacionamento
			$cargo = fRecordSet::build('Cargo');      
			$aCargo = array();
			foreach ($cargo as $key => $value) {  
				$aCargo[$value->getId()] = array(
					'descricao' => $value->getDescricao(),
					);    
			}

			$pessoa = fRecordSet::build('Pessoa');      
			$aPessoa = array();
			foreach ($pessoa as $key => $value) {  
				$aPessoa[$value->getId()] = array(
					'nome' => $value->getNome(),
					);    
			}
		//Fim - Relacionamento
			$aQuadroAssociativoPessoa = array();     

			foreach ($quadroAssociativoPessoa as $key => $value) {     
				$aQuadroAssociativoPessoa[] = array(
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'pessoa' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'nome'),
					'id_quadro_associativo' => $value->getIdQuadroAssociativo(),
					'id_cargo' => $value->getIdCargo(),
					'cargo' => $this->keyExists($value->getIdCargo(), $aCargo, 'descricao'),
					); 
			}

			if (count($aQuadroAssociativoPessoa) == 0) {
				$aQuadroAssociativoPessoa[] = array('error' => -1, 'mensagem' => "Nenhum cargo encontrado.");
				fJSON::output($aQuadroAssociativoPessoa);
				die();
			}

			$aQuadroAssociativoPessoa = array(
				'error' => 0, 
				'quadro_associativo_pessoa' => $aQuadroAssociativoPessoa
				);          

			fJSON::output($aQuadroAssociativoPessoa);
		}
		else {
			return $quadroAssociativoPessoa[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Excluir quadro associativo
	Método: POST
	URL: http://localhost/sig/api/index.php/delquadroassociativopessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/12/2014
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 09/12/2014
	*/

	public function delQuadroAssociativoPessoa() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		try {
		//******** Exclui registros da Tabela de QuadroAssociativoPessoa
			$quadra = new QuadroAssociativoPessoa($data->id);
			$quadra->delete();          
		//******** Fim - Exclui registros da Tabela de QuadroAssociativoPessoa

			$arrMensagem = array('error' => 0, 'mensagem' => "Cargo excluído com sucesso");
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/cargo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 11/02/2015
	*/

	public function postCargo() {
		$userSes = fSession::get('user');

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$cargo = new Cargo($data->id);
			$mensagem = "Cargo alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$cargo = new Cargo();
			$mensagem = "Cargo incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Cargo
			if (property_exists($data, 'id_departamento')){
				$cargoAnt = '';
				if($alteracao==1){
					$cargoAnt = $cargo->getIdDepartamento();
				}
				$this->setAuditoria('Cargo', 'Departamento', $cargoAnt, $data->id_departamento, $id);

				$cargo->setIdDepartamento($data->id_departamento);
			}

			if (property_exists($data, 'descricao')){
				$cargoAnt = '';
				if($alteracao==1){
					$cargoAnt = $cargo->getDescricao();
				}
				$this->setAuditoria('Cargo', 'Descricao', $cargoAnt, $data->descricao, $id);

				$cargo->setDescricao($data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$cargo->setAtivo($data->ativo);
			}

			$cargo->setIdTipoEntidade($userSes['user']['idTipoEntidade']);

			$cargo->store();

		//******** Fim - Grava informações na Tabela de Cargo

			$id_cargo = $cargo->getId();

			$arrMensagem = array('error' => 0, 'id_cargo' => $id_cargo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

 /*
	Módulo: Compra
	Descrição: Faz o cadastro de família de ítens
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarfamilia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 10/02/2015
	*/

	public function postCadastrarFamilia(){

		$data = json_decode(file_get_contents("php://input"));
		$familia = new Familia();
		try{

			if(property_exists($data, 'descricao')){
				$familia->setDescricao($data->descricao);
			}
			if(property_exists($data, 'ativo')){
				$familia->setAtivo($data->ativo);
			}
			$familia->store();

			$id = $familia->getId();

			$mensagem = "Família de ítens salva com sucesso.";

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem, 'id' => $id);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Compra
	Descrição: Traz todos os ítens aonde o estoque seja 0 ou não possua estoque
	Método: POST
	URL: http://localhost/sig/api/index.php/listaitens/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 10/02/2015
	*/

	public function getListaItens($id_item = "", $full = false){
		$this->acessoApi();

		$item = array();
		$aSearch = array();
		$estoqueQtd = '';

		$produtos = fRecordset::build('ProdutosServicos');

		foreach ($produtos as $key => $value) {
			$aSearch['id_item='] = $value->getId();
			$estoque = fRecordset::build('Estoque', $aSearch);
			if($estoque->count() == 0){
				$estoqueQtd = 0;
			}
			else{
				foreach ($estoque as $key2 => $value2) {
					$estoqueQtd = $value2->getQuantidade();
				}
			}

			$fornecedorPessoa = array();

			$produto_servico_fornecedor = fRecordset::build('ProdutosServicosFornecedor',array('id_produtos_servicos=' => $value->getId()));
			foreach ($produto_servico_fornecedor as $key3 => $value3) {

		//echo $value3->getIdPessoa() . "<br />";
				$pessoa = new Pessoa($value3->getIdPessoa());
				$fornecedorPessoa[] = array(
					'id_fornecedor' => $value3->getIdPessoa(),
					'nome' => $pessoa->getNome()
					);
			}
			$item[] = array(
				'id' => $value->getId(),
				'nome' => $value->getDescricao(),
				'quantidade' => $estoqueQtd,
				'fornecedor' =>  $fornecedorPessoa      
				);
		}
		fJSON::output($item);
		die();
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro uma data ou do dia de atual
	Método: GET
	URL: http://localhost/sig/api/index.php/hojestatusfinanceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusFinanceiroHoje($data="", $full = false) {
		$aSearch = "";
		if($data == ""){
			$data_atual = date('Y-m-d');			
			$aSearch .= " and data_vencimento = '".$data_atual."'";
		}else{
			$aSearch .= " and data_vencimento = '".$data."'";
		}

		$aSearch .= ' and id_situacao = 1';

		$aStatus = array(
			'hoje' => $this->getStatusFinanceiro($aSearch, true),
			); 

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro vencido
	Método: GET
	URL: http://localhost/sig/api/index.php/vencidostatusfinanceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusFinanceiroVencido($data="", $full = false) {
		$aSearch = "";
		//if($data == ""){
		$data_atual = date('Y-m-d');		
		$aSearch .= " and data_vencimento < '".$data_atual."'";
		//}

		$aSearch .= ' and id_situacao not in (2,5) ';
		$aSearch .= ' and id_tipo_lancamento in (2,3,5)';

		$aStatus = array(
			'vencido' => $this->getStatusFinanceiro($aSearch, true),
			);

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro a vencer
	Método: GET
	URL: http://localhost/sig/api/index.php/vencerstatusfianceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusFinanceiroVencer($data="", $full = false) {
		$aSearch = "";

		//if($data == ""){
		$data_atual = date('Y-m-d');
		$data_fim = date("Y-m-d", strtotime("+3 day"));
		
		$aSearch .= " and data_vencimento > '".$data_atual."'";		
		$aSearch .= " and data_vencimento <= '".$data_fim."'";
		//}

		$aSearch .=' and id_situacao = 1';
		$aSearch .=' and id_tipo_lancamento in (2,3,5)';

		$aStatus = array(
			'vencer' => $this->getStatusFinanceiro($aSearch, true),
			); 

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de contato
	Método: POST
	URL: http://localhost/sig/api/index.php/tipocontato/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/

	public function postTipoContato() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipocontato = new TipoContato($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de contato alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipocontato = new TipoContato();
			$mensagem = "Tipo de contato incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Marca
			if (property_exists($data, 'descricao')){
				$tipocontatoAnt = '';
				if($alteracao==1){
					$tipocontatoAnt = $tipocontato->getDescricao();
					$this->setAuditoria('TipoContato', 'Descricao', $tipocontatoAnt, $data->descricao,$data->id);
					$tipocontato->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('TipoContato', 'Descricao', $tipocontatoAnt, $data->descricao);
					$tipocontato->setDescricao($data->descricao);
				}
			}
			if (property_exists($data, 'ativo')){
				$tipocontato->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoContato', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de contato já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipocontato->store();
				}     
			} else {
				$tipocontato->store();
			} 
		//******** Fim - Grava informações na Tabela de tipocontato
			$id_tipocontato = $tipocontato->getId();

			$arrMensagem = array('error' => 0, 'id_tipocontato' => $id_tipocontato, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


	/*
	Módulo: Escola
	Descrição: Obter Lista de contatos
	Método: GET
	URL: http://localhost/sig/api/index.php/tipodecontato/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/

	public function getTipoContato($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$tipocontato = fRecordSet::build('TipoContato', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoContato = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoContato[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Contato",
					'ativo' => ""
					);   
			}      

			foreach ($tipocontato->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoContato[] = array(
					'tipo' => "Tipo de Contato",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoContato) == 0) {
				$aTipoContato[] = array('error' => -1, 'mensagem' => "Nenhum tipo de contato encontrada.");
			}

			$aTipoContato = array(
				'tipocontato' => $aTipoContato
				);          

			fJSON::output($aTipoContato);
		}
		else {
			return $tipocontato[0];
		}
	}     


	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova Tipo Necessidades Especiais
	Método: POST
	URL: http://localhost/sig/api/index.php/tiponecessidadesespeciais/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/

	public function postTipoNecessidadesEspeciais() {
		/*recebe o conteúdo e decodifica o json*/
		$data = json_decode(file_get_contents("php://input"));

		/*verifica se edição ou cadastro*/
		if (property_exists($data, 'id')) {
			$tiponecessidadesespeciais = new TipoNecessidadesEspeciais($data->id);
			/*procurando o id como se fosse o where*/      
			$aSearch = array();
			$aSearch['id='] = $data->id;
			/*trata mensagem*/      
			$mensagem = "Tipo de necessidade especial alterada com sucesso!";
			/*controle se é alteração ou inclusão*/
			$alteracao=1;
		}else{
			$tiponecessidadesespeciais = new TipoNecessidadesEspeciais();
			$mensagem = "Tipo de necessidade especial incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Tipo Necessidades Especiais
			if (property_exists($data, 'descricao')){
				$tiponecessidadesespeciaisAnt = '';
				if($alteracao==1){
					$tiponecessidadesespeciaisAnt = $tiponecessidadesespeciais->getDescricao();

					$this->setAuditoria('Tipo_Necessidades_Especiais', 'Descricao', $tiponecessidadesespeciaisAnt, $data->descricao,$data->id);
					$tiponecessidadesespeciais->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Tipo_Necessidades_Especiais', 'Descricao', $tiponecessidadesespeciaisAnt, $data->descricao);
					$tiponecessidadesespeciais->setDescricao($data->descricao);
				}
			}
			/*se houver a propriedade faça*/      
			if (property_exists($data, 'ativo')){
				$tiponecessidadesespeciais->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoNecessidadesEspeciais', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de necessidade especial já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tiponecessidadesespeciais->store();
				}     
			} else {
				$tiponecessidadesespeciais->store();
			} 
		//******** Fim - Grava informações na Tabela de Tipo Necessidades Especiais
			$id_tiponecessidadesespeciais = $tiponecessidadesespeciais->getId();

			$arrMensagem = array('error' => 0, 'id_tiponecessidadesespeciais' => $id_tiponecessidadesespeciais, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}       

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipos de Necessidades Especiais
	Método: GET
	URL: http://localhost/sig/api/index.php/tiponecessidadesespeciais/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/

	public function getTipoNecessidadesEspeciais($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$tiponecessidadesespeciais = fRecordSet::build('TipoNecessidadesEspeciais', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTiposNecessidadesEspeciais = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTiposNecessidadesEspeciais[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Necessidade Especial",
					'ativo' => ""
					);   
			}      

			foreach ($tiponecessidadesespeciais->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTiposNecessidadesEspeciais[] = array(
					'tipo' => "Tipo de Necessidade Especial",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTiposNecessidadesEspeciais) == 0) {
				$aTiposNecessidadesEspeciais[] = array('error' => -1, 'mensagem' => "Nenhum tipo de necessidade especial encontrada.");
			}

			$aTiposNecessidadesEspeciais = array(
				'tiponecessidadesespeciais' => $aTiposNecessidadesEspeciais
				);          

			fJSON::output($aTiposNecessidadesEspeciais);
		}
		else {
			return $tiponecessidadesespeciais[0];
		}
	}    

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/contarassociados/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/02/2015
	*/

	public function getContarAssociados($full = false) {

		$aSearch = array();
		$aSearch['associado='] = 1;
		$associados = fRecordSet::build('Pessoa', $aSearch);

		$aSearch = array();
		$aSearch['donatario='] = 1;
		$donatarios = fRecordSet::build('Pessoa', $aSearch);

		$aSearch = array();
		$aSearch['beneficiario|parentesco|funcionario|proprietario|fornecedor|associado|donatario|aluno|professor|entidade|padrinho|responsavel~'] = 1;

		$naoAssociados = fRecordSet::build('Pessoa', $aSearch);

		$total = count($naoAssociados) + count($donatarios) + count($associados);

		if ($total>0) {
			$total_associados = count($associados) / $total * 100;
			$total_donatarios = count($donatarios) / $total * 100;
			$total_nao_associados = count($naoAssociados) / $total * 100;
		}

		$aPessoa = array(
			array(
				'key' => "Associados",
				'x' => count($associados),
				'y' => round($total_associados, 2),
				),
			array(
				'key' => "Donatarios",
				'x' => count($donatarios),
				'y' => round($total_donatarios, 2),
				),
			array(
				'key' => "Não Associados",
				'x' => count($naoAssociados),
				'y' => round($total_nao_associados, 2),
				)			
			);
		
		if ($full == false) {
			fJSON::output($aPessoa);
		} else {
			return $aPessoa;
		}		
		
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/contarstatisticaassociados/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/02/2015
	*/

	public function getContarStatisticaAssociados($full = false) {
		$aSearch = array();
		$aSearch['associado='] = 1;
		
		$aPessoaReturn = $this->getGraficoBarra($aSearch, 'Associados', 'Associados nos últimos 12 meses');

		if ($full == false) {
			fJSON::output($aPessoaReturn);
		}
		else {
			return $aPessoaReturn;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo grupo de ocorrências
	Método: POST
	URL: http://localhost/sig/api/index.php/grupoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 16/02/2015
	*/

	public function postGrupoOcorrencia() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$grupoocorrencia = new GrupoOcorrencia($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Grupo de ocorrência alterado com sucesso!";
			$alteracao=1;
		}else{
			$grupoocorrencia = new GrupoOcorrencia();
			$mensagem = "Grupo de ocorrência incluído com sucesso!";
			$alteracao=0;
		}


		try {
		//******** Grava informações na Tabela de Grupo de ocorrências
			if (property_exists($data, 'descricao')){
				$grupoocorrenciaAnt = '';
				if($alteracao==1){
					$grupoocorrenciaAnt = $grupoocorrencia->getDescricao();
					$this->setAuditoria('GrupoOcorrencia', 'Descricao', $grupoocorrenciaAnt, $data->descricao,$data->id);
					$grupoocorrencia->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('GrupoOcorrencia', 'Descricao', $grupoocorrenciaAnt, $data->descricao);
					$grupoocorrencia->setDescricao($data->descricao);
				}
			}


			if (property_exists($data, 'ativo')){
				$grupoocorrencia->setAtivo($data->ativo);
			}

			if(property_exists($data, 'aviso')){
				$grupoocorrencia->setAviso($data->aviso);
			}
			if(property_exists($data, 'confidencial')){
				$grupoocorrencia->setConfidencial($data->confidencial);
			}
			if(property_exists($data, 'financeiro')){
				$grupoocorrencia->setFinanceiro($data->financeiro);
			}
			if(property_exists($data, 'internet')){
				$grupoocorrencia->setInternet($data->internet);
			}
			if(property_exists($data, 'pedagogico')){
				$grupoocorrencia->setPedagogico($data->pedagogico);
			}
			if(property_exists($data, 'quiosque')){
				$grupoocorrencia->setQuiosque($data->quiosque);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('GrupoOcorrencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O grupo de ocorrência já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$grupoocorrencia->store();
				}     
			} else {
				$grupoocorrencia->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_grupoocorrencia = $grupoocorrencia->getId();

			$arrMensagem = array('error' => 0, 'id_grupoocorrencia' => $id_grupoocorrencia, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


/*
	Módulo: Escola
	Descrição: Obter Lista de grupos de ocorrência
	Método: GET
	URL: http://localhost/sig/api/index.php/grupoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 16/02/2015
	*/

	public function getGrupoOcorrencia($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$grupoocorrencia = fRecordSet::build('GrupoOcorrencia', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aGrupoOcorrencia = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aGrupoOcorrencia[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Grupo",
					'ativo' => ""
					);   
			}      

			foreach ($grupoocorrencia->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}
				if($value->getAviso() == 1){
					$aviso = "Sim";
				}
				else{
					$aviso = "Não";
				}
				if($value->getConfidencial() == 1){
					$confidencial = "Sim";
				}
				else{
					$confidencial = "Não";
				}
				if($value->getFinanceiro() == 1){
					$financeiro = "Sim";
				}
				else{
					$financeiro = "Não";
				}
				if($value->getInternet() == 1){
					$internet = "Sim";
				}
				else{
					$internet = "Não";
				}
				if($value->getPedagogico() == 1){
					$pedagogico = "Sim";
				}
				else{
					$pedagogico = "Não";
				}
				if($value->getQuiosque() == 1){
					$quiosque = "Sim";
				}
				else{
					$quiosque = "Não";
				}

				$aGrupoOcorrencia[] = array(
					'tipo' => "Grupos de Ocorrências",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'aviso' => $value->getAviso(),
					'aviso_txt' => $aviso,
					'confidencial' => $value->getConfidencial(),
					'confidencial_txt' => $confidencial,
					'financeiro' => $value->getFinanceiro(),
					'financeiro_txt' => $financeiro,
					'internet' => $value->getInternet(),
					'internet_txt' => $internet,
					'pedagogico' => $value->getPedagogico(),
					'pedagogico_txt' => $pedagogico,
					'quiosque' => $value->getQuiosque(),
					'quiosque_txt' => $quiosque,
					'status' => $status
					);
			}

			if (count($aGrupoOcorrencia) == 0) {
				$aGrupoOcorrencia[] = array('error' => -1, 'mensagem' => "Nenhum grupo de ocorrência encontrada.");
			}

			$aGrupoOcorrencia = array(
				'grupoocorrencia' => $aGrupoOcorrencia
				);          

			fJSON::output($aGrupoOcorrencia);
		}
		else {
			return $grupoocorrencia[0];
		}
	}   


/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de ocorrências
	Método: POST
	URL: http://localhost/sig/api/index.php/tipoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 16/02/2015
	*/

	public function postTipoOcorrencia() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoocorrencia = new TipoOcorrencia($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de ocorrência alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoocorrencia = new TipoOcorrencia();
			$mensagem = "Tipo de ocorrência incluído com sucesso!";
			$alteracao=0;
		}

		try {

		 //var_dump($data); 
		 //die();

		//******** Grava informações na Tabela de Grupo de ocorrências
			if (property_exists($data, 'descricao')){

				$tipoocorrenciaAnt = '';

				if($alteracao==1){
					$tipoocorrenciaAnt = $tipoocorrencia->getDescricao();
					$this->setAuditoria('TipoOcorrencia', 'Descricao', $tipoocorrenciaAnt, $data->descricao,$data->id);
					$tipoocorrencia->setDescricao($data->descricao);          
				} 
				else {
					$this->setAuditoria('TipoOcorrencia', 'Descricao', $tipoocorrenciaAnt, $data->descricao);
					$tipoocorrencia->setDescricao($data->descricao);
				}

			}

			if (property_exists($data, 'ativo')){
				$tipoocorrencia->setAtivo($data->ativo);
			}

			if(property_exists($data, 'id_tipo_bloqueio')){
				$tipoocorrencia->setIdTipoBloqueio($data->id_tipo_bloqueio);
			}

			if (property_exists($data, 'id_grupo_ocorrencia')){

				$grupoAnt = '';

				if($alteracao==1){
					$grupoAnt = $tipoocorrencia->getIdGrupoOcorrencia();

					$this->setAuditoria('TipoOcorrencia', 'Grupo', $grupoAnt, $data->id_grupo_ocorrencia, $data->id);
					$tipoocorrencia->setIdGrupoOcorrencia($data->id_grupo_ocorrencia);          
				} 
				else {
					$this->setAuditoria('TipoOcorrencia', 'Grupo', $grupoAnt, $data->id_grupo_ocorrencia);
					$tipoocorrencia->setIdGrupoOcorrencia($data->id_grupo_ocorrencia);
				}

			}

			if ($alteracao!=1) {

				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoOcorrencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de ocorrência já existe");
					fJSON::output($arrMensagem);
					die();            
				}
				else{
					$tipoocorrencia->store();
				}     

			} 
			else {
				$tipoocorrencia->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_tipoocorrencia = $tipoocorrencia->getId();

			$arrMensagem = array('error' => 0, 'id_tipoocorrencia' => $id_tipoocorrencia, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


/*
	Módulo: Escola
	Descrição: Obter Lista de tipos de ocorrência
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 23/03/2015
	Autor: Ricardo S. Nakadomari
	Descrição: Adição do campo de busca por grupo ocorrencia
	*/

	public function getTipoOcorrencia($id_consulta="",$id="", $id_grupo_ocorrencia="", $full = false) {
		$aSearch = array();
		if ( $id > 0 ) {
			$aSearch['id='] = $id;
		}
		if (  $id_grupo_ocorrencia > 0 ){
			$aSearch['id_grupo_ocorrencia='] = $id_grupo_ocorrencia;
		}
		$tipoocorrencia = fRecordSet::build('TipoOcorrencia', $aSearch, array('descricao' => 'asc'));
		if ($full == false) {
			$aTipoOcorrencia = array();

			if (($id_consulta != "1") && ($id == 0 || $id == '')) {
				$aTipoOcorrencia[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo",
					'ativo' => ""
					);   
			}     

			foreach ($tipoocorrencia->getRecords() as $key => $value) {

				$id_tipo_bloqueio = new TipoBloqueio($value->getIdTipoBloqueio());
				$tipo_bloqueio = $id_tipo_bloqueio->getDescricao();

				$grupo_ocorrencia = new GrupoOcorrencia($value->getIdGrupoOcorrencia());

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoOcorrencia[] = array(
					'tipo' => "Tipo de Ocorrência",
					'id' => $value->getId(),
					'id_grupo_ocorrencia' => $value->getIdGrupoOcorrencia(),
					'grupo_ocorrencia' => $grupo_ocorrencia->getDescricao(),
					'tipo_bloqueio' => $tipo_bloqueio,
					'id_tipo_bloqueio' => $value->getIdTipoBloqueio(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoOcorrencia) == 0) {
				$aTipoOcorrencia[] = array('error' => -1, 'mensagem' => "Nenhum tipo de ocorrência encontrada.");
			}

			$aTipoOcorrencia = array(
				'tipoocorrencia' => $aTipoOcorrencia
				);          

			fJSON::output($aTipoOcorrencia);
		}
		else {
			return $tipoocorrencia[0];
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Religião
	Método: GET
	URL: http://localhost/sig/api/index.php/religiao/<religiao>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 20/02/2015
	*/

	public function getReligiao($id_consulta="",$id="", $full = false) {
		$aSearch = "";
		if ($id != "") {
			$aSearch.='AND id=' . $id;
		} 

		$strQueryreligiao = "SELECT * FROM religiao WHERE 1 ".$aSearch." order by descricao asc";
		$religiao = $this->_getDb()->query($strQueryreligiao);

		$aReligiao = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aReligiao[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Nova Religião",
				'ativo' => ""
				);   
		}      

		foreach ($religiao as $key => $value) {

			if ($value['ativo']==1) {
				$status = "Ativo";
			} else if ($value['ativo']==0) {
				$status = "Inativo";
			}        

			$aReligiao[] = array(
				'tipo' => "Religião",
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' => $status
				);
		}

		$religiao = $this->_getDb()->close();

		if (count($aReligiao) == 0) {
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma religião encontrada.");			
		} else {
			$retorno = array('error' => 0, 'religiao' => $aReligiao);  			
		}

		if ($full == false) {
			fJSON::output($retorno);
		}
		else {
			return $retorno;
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar uma nova religião
	Método: POST
	URL: http://localhost/sig/api/index.php/religiao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 19/02/2015
	*/

	public function postReligiao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$religiao = new Religiao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Religião alterada com sucesso!";
			$alteracao=1;
		}else{
			$religiao = new Religiao();
			$mensagem = "Religião incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de religiao
			if (property_exists($data, 'descricao')){

				$religiaoAnt = '';
				if($alteracao==1){
					$religiaoAnt = $religiao->getDescricao();
				}

				$religiao->setDescricao($data->descricao);
				$this->setAuditoria('Religiao', 'Descrição', $religiaoAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$religiao->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Religiao', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A religião já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$religiao->store();
				}     
			} else {
				$religiao->store();
			} 
		//******** Fim - Grava informações na Tabela de religiao
			$id_religiao = $religiao->getId();

			$arrMensagem = array('error' => 0, 'id_religiao' => $id_religiao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Escola
	Descrição: Obter Lista de Orgão Emissor
	Método: GET
	URL: http://localhost/sig/api/index.php/orgaoemissor/<orgaoemissor>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 20/02/2015
	*/

	public function getOrgaoEmissor($id_consulta="",$id="", $full = false) {
		
		$aSearch = "";
		if ($id != "") {
			$aSearch = ' and id = '. $id;
		} 

		$strQueryOrgaoEmissor = "SELECT * FROM orgao_emissor WHERE 1 ".$aSearch." order by descricao asc";

		$orgaoEmissor = $this->_getDb()->query($strQueryOrgaoEmissor);

		$aOrgaoEmissor = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aOrgaoEmissor[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Órgão Emissor",
				'ativo' => ""
				);   
		}      

		foreach ($orgaoEmissor as $key => $value) {

			if ($value['ativo']==1) {
				$status = "Ativo";
			} else if ($value['ativo']==0) {
				$status = "Inativo";
			}        

			$aOrgaoEmissor[] = array(
				'tipo' => "Órgão Emissor",
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' => $status
				);
		}

		$orgaoEmissor = $this->_getDb()->close();

		if (count($aOrgaoEmissor) == 0) {
			$aOrgaoEmissor[] = array('error' => -1, 'mensagem' => "Nenhum órgão emissor encontrado.");
		} else {
			$aOrgaoEmissor = array(
				'error' => 0,
				'orgaoEmissor' => $aOrgaoEmissor
				);  
		}

		if ($full == false) {
			fJSON::output($aOrgaoEmissor);
		}
		else {
			return $aOrgaoEmissor;
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar um novo orgão emissor
	Método: POST
	URL: http://localhost/sig/api/index.php/orgaoemissor/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 19/02/2015
	*/

	public function postOrgaoEmissor() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$orgaoEmissor = new OrgaoEmissor($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Órgão emissor alterado com sucesso!";
			$alteracao=1;
		}else{
			$orgaoEmissor = new OrgaoEmissor();
			$mensagem = "Órgão emissor incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de orgao_emissor
			if (property_exists($data, 'descricao')){

				$orgaoEmissorAnt = '';
				if($alteracao==1){
					$orgaoEmissorAnt = $orgaoEmissor->getDescricao();
				}

				$orgaoEmissor->setDescricao($data->descricao);
				$this->setAuditoria('OrgaoEmissor', 'Descrição', $orgaoEmissorAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$orgaoEmissor->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('OrgaoEmissor', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O órgão emissor já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$orgaoEmissor->store();
				}     
			} else {
				$orgaoEmissor->store();
			} 
		//******** Fim - Grava informações na Tabela de orgao_emissor
			$id_orgao_emissor = $orgaoEmissor->getId();

			$arrMensagem = array('error' => 0, 'id_orgao_emissor' => $id_orgao_emissor, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Escola
	Descrição: Obter Lista de tipo de responsável de aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/tiporesponsavel/<tiporesponsavel>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 20/02/2015
	*/

	public function getTipoResponsavel($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$tipoResponsavel = fRecordSet::build('TipoResponsavel', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoResponsavel = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoResponsavel[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Responsável",
					'ativo' => ""
					);
			}

			foreach ($tipoResponsavel->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoResponsavel[] = array(
					'tipo' => "Tipo Responsável",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoResponsavel) == 0) {
				$aTipoResponsavel[] = array('error' => -1, 'mensagem' => "Nenhum tipo de responsável encontrado.");
			} else {
				$aTipoResponsavel = array(
					'error' => 0,
					'tipoResponsavel' => $aTipoResponsavel
					);  
			}

			fJSON::output($aTipoResponsavel);
		}
		else {
			return $tipoResponsavel[0];
		}    
	}  


/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de endereço
	Método: POST
	URL: http://localhost/sig/api/index.php/tipoendereco/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 24/02/2015
	*/

	public function postTipoEndereco() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoEndereco = new TipoEndereco($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de endereço alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoEndereco = new TipoEndereco();
			$mensagem = "Tipo de endereço incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de tipo_endereco
			if (property_exists($data, 'descricao')){

				$tipoEnderecoAnt = '';
				if($alteracao==1){
					$tipoEnderecoAnt = $tipoEndereco->getDescricao();
				}

				$tipoEndereco->setDescricao($data->descricao);
				$this->setAuditoria('TipoEndereco', 'Descrição', $tipoEnderecoAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoEndereco->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoEndereco', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de endereço já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipoEndereco->store();
				}     
			} else {
				$tipEndereco->store();
			} 
		//******** Fim - Grava informações na Tabela de responsavel_aluno
			$id_tipo_endereco = $tipoEndereco->getId();

			$arrMensagem = array('error' => 0, 'id_tipo_endereco' => $id_tipo_endereco, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 


	/*
	Módulo: Escola
	Descrição: Obter Lista de tipo de endereço
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoendereco/<tipoendereco>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 24/02/2015
	*/

	public function getTipoEndereco($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$tipoEndereco = fRecordSet::build('TipoEndereco', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoEndereco = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoEndereco[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Endereço",
					'ativo' => ""
					);
			}

			foreach ($tipoEndereco->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoEndereco[] = array(
					'tipo' => "Tipo Endereço",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoEndereco) == 0) {
				$aTipoEndereco[] = array('error' => -1, 'mensagem' => "Nenhum tipo de enedreço encontrado.");
			} else {
				$aTipoEndereco = array(
					'error' => 0,
					'tipoEndereco' => $aTipoEndereco
					);  
			}

			fJSON::output($aTipoEndereco);
		}
		else {
			return $tipoEndereco[0];
		}    
	}  


/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de responsável
	Método: POST
	URL: http://localhost/sig/api/index.php/tiporesponsavel/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 19/02/2015
	*/

	public function postTipoResponsavel() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoResponsavel = new TipoResponsavel($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de responsável alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoResponsavel = new TipoResponsavel();
			$mensagem = "Tipo de responsável incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de tipo_responsavel
			if (property_exists($data, 'descricao')){

				$tipoResponsavelAnt = '';
				if($alteracao==1){
					$tipoResponsavelAnt = $tipoResponsavel->getDescricao();
				}

				$tipoResponsavel->setDescricao($data->descricao);
				$this->setAuditoria('TipoResponsavel', 'Descrição', $tipoResponsavelAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoResponsavel->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoResponsavel', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de responsável já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipoResponsavel->store();
				}     
			} else {
				$tipoResponsavel->store();
			} 
		//******** Fim - Grava informações na Tabela de responsavel_aluno
			$id_tipo_responsavel = $tipoResponsavel->getId();

			$arrMensagem = array('error' => 0, 'id_tipo_responsavel' => $id_tipo_responsavel, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	public function getEntidadePessoa($id_entidade, $full = false){

		$aSearch = array();
		$pessoa = array();
		$aSearch['id_entidade='] = $id_entidade;

		$idPessoa = fRecordset::build('EntidadePessoa', $aSearch);

		foreach ($idPessoa as $key => $value) {     

			$buscaPessoa = fRecordset::build('Pessoa', array('id=' => $value->getIdPessoa()));
			foreach ($buscaPessoa as $key2 => $value2) {
				$pessoa[] = array(
					'id' => $value->getId(),
					'nome' => $value2->getNome(),
					);
			}
		}

		if ($full == false) {
			fJSON::output($pessoa);
			die;
		}else{
			return $pessoa;
		}


	}


	/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de bloqueio
	Método: POST
	URL: http://localhost/sig/api/index.php/tipobloqueio/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postTipoBloqueio() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoBloqueio = new TipoBloqueio($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de Bloqueio alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoBloqueio = new TipoBloqueio();
			$mensagem = "Tipo de Bloqueio incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'descricao')){

				$tipoBloqueioAnt = '';
				if($alteracao==1){
					$tipoBloqueioAnt = $tipoBloqueio->getDescricao();
				}

				$tipoBloqueio->setDescricao($data->descricao);
				$this->setAuditoria('TipoBloqueio', 'Descrição', $tipoBloqueioAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoBloqueio->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoBloqueio', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de bloqueio já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipoBloqueio->store();
				}
			} else {
				$tipoBloqueio->store();
			} 
		//******** Fim - Grava informações na Tabela de orgao_emissor
			$id_tipo_bloqueio = $tipoBloqueio->getId();

			$arrMensagem = array('error' => 0, 'id_tipo_bloqueio' => $id_tipo_bloqueio, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Escola
	Descrição: Listar tipos de bloqueio
	Método: GET
	URL: http://localhost/sig/api/index.php/tipobloqueio/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/


	public function getTipoBloqueio($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$tipoBloqueio = fRecordSet::build('TipoBloqueio', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aTipoBloqueio = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoBloqueio[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Bloqueio",
					'ativo' => ""
					);
			}

			foreach ($tipoBloqueio->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoBloqueio[] = array(
					'tipo' => "Tipo Bloqueio",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoBloqueio) == 0) {
				$aTipoBloqueio[] = array('error' => -1, 'mensagem' => "Nenhum tipo de bloqueio encontrado.");
			} else {
				$aTipoBloqueio = array(
					'error' => 0,
					'tipoBloqueio' => $aTipoBloqueio
					);  
			}

			fJSON::output($aTipoBloqueio);
		}
		else {
			return $tipoBloqueio[0];
		}    
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo ciclo
	Método: POST
	URL: http://localhost/sig/api/index.php/ciclo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postCiclo() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$ciclo = new Ciclo($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Ciclo alterado com sucesso!";
			$alteracao=1;
		}else{
			$ciclo = new Ciclo();
			$mensagem = "Ciclo incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'descricao')){

				$cicloAnt = '';
				if($alteracao==1){
					$cicloAnt = $ciclo->getDescricao();
				}

				$ciclo->setDescricao($data->descricao);
				$this->setAuditoria('Ciclo', 'Descrição', $cicloAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$ciclo->setAtivo($data->ativo);
			}
			if(property_exists($data, 'duracao')){
				$ciclo->setDuracao($data->duracao);
			}
			if(property_exists($data, 'observacao')){
				$ciclo->setObservacao($data->observacao);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countCiclo = fRecordset::build('Ciclo', $aSearch);

				if($countCiclo->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O ciclo já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$ciclo->store();
				}     
			} else {
				$ciclo->store();
			} 
			$id_ciclo = $ciclo->getId();

			$arrMensagem = array('error' => 0, 'id_ciclo' => $id_ciclo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Listar ciclos
	Método: GET
	URL: http://localhost/sig/api/index.php/ciclo/
	Autenticação: Não
	Resposta: JSON	
	Autor: Fábio Roberto Haydn 201508271500
	*/
	public function getCiclo($id_consulta="", $id = "", $full = false) {

		if($id_consulta==0){ $retorno[] = array('tipo'		=>"Ação",
												'id' 		=> "-1",
												'descricao' => ":: Cadastrar Novo Ciclo",
												'ativo' 	=> "");}

		$campos = array('id','descricao','duracao','observacao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "ciclo";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value)
		{ 
			$value['tipo'] = 'Tipo Ciclo'; 
			$value['status'] = ($value['ativo']==1) ? 'Ativo' : 'Inativo';
			$retorno[] = $value; 
		}
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
			fJSON::output($retorno);
			die();
		}

		if ($full == false) { $retorno = array( 'error' => 0, 'retorno' => $retorno );
							  fJSON::output($retorno);

		}else{ return $retorno; }
	}

	/*
	Módulo: Escola
	Descrição: Listar as Situações das Etapas
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaoetapa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSituacaoEtapa($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$situacao_etapa = fRecordSet::build('SituacaoEtapa', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aSituacaoEtapa = array();

			foreach ($situacao_etapa->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aSituacaoEtapa[] = array(          
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo()
					);
			}

			if (count($aSituacaoEtapa) == 0) {
				$aSituacaoEtapa[] = array('error' => -1, 'mensagem' => "Nenhuma etapa encontrada.");
			} else {
				$aSituacaoEtapa = array(
					'error' => 0,
					'situacao_etapa' => $aSituacaoEtapa
					);  
			}

			fJSON::output($aSituacaoEtapa);
		}
		else {
			return $situacao_etapa[0];
		}    
	}

	/*
	Módulo: Escola
	Descrição: Cadastra etapas
	Método: POST
	URL: http://localhost/sig/api/index.php/etapa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/02/2015
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 13/03/2015
	Autor: Luciano Almeida
	Data de Alteração: 30/04/2015
	Autor: Fábio Roberto Haydn
	*/

	public function postEtapa() {

		$userSes = fSession::get('user');		

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['descricao='] = $data->descricao;
		$etapa = fRecordSet::build('Etapa', $aSearch);

		if ($etapa->count() > 0) { //Verifica se foi passado o Id da Pessoa, se sim, é feita a alteração.
			$etapa = new Etapa($etapa[0]->getId());
			$mensagem = "Etapa alterada com sucesso!";
			$alteracao = 1;
		}
		else{
			$etapa = new Etapa();
			$mensagem = "Etapa incluída com sucesso!";
			$alteracao = 0;
		}


		try {

			if(property_exists($data, 'id_ciclo')){
				$etapa->setIdCiclo($data->id_ciclo);
			}
			if(property_exists($data, 'id_situacao_etapa')){
				$etapa->setIdSituacaoEtapa($data->id_situacao_etapa);
			}


			if(property_exists($data, 'data_inicio')){

				$dti = '';
				if ($data->data_inicio != '' && $data->data_inicio != null){
					//$dti = implode("", array_reverse(explode("-", substr($data->data_inicio, 0, 7))));
					$dti = str_replace("/","",$data->data_inicio);
				}

				$etapa->setMesAnoInicio($dti);
			}

			if(property_exists($data, 'data_fim')){

				$dtf = '';
				if ($data->data_fim != '' && $data->data_fim != null){
					//$dtf = implode("", array_reverse(explode("-", substr($data->data_fim, 0, 7))));
					$dtf = str_replace("/","",$data->data_fim);
				}

				$etapa->setMesAnoFim($dtf);
			}

			if(property_exists($data, 'ano')){			

				$an = '';
				if ($data->ano != '' && $data->ano != null){
					$an = substr($data->ano, 0, 4);
				}

				$etapa->setAno($an);
			}


			if(property_exists($data, 'ativo')){
				$etapa->setAtivo($data->ativo);
			}

			if (property_exists($data, 'descricao')){
				$etapaAnt = '';
				if($alteracao==1){
					$etapaAnt = $etapa->getDescricao();
				}
				$etapa->setDescricao($data->descricao);
				$this->setAuditoria('Etapa', 'Descrição', $etapaAnt, $data->descricao);
			}

			if (property_exists($data, 'observacao')){
				$etapaAnt = '';
				if($alteracao==1){
					$etapaAnt = $etapa->getObservacao();
				}
				$etapa->setObservacao($data->observacao);
				$this->setAuditoria('Etapa', 'Observação', $etapaAnt, $data->observacao);
			}


			$etapa->setIdEntidade($userSes['user']['entidadePessoa']);


			if ($alteracao!=1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countEtapa = fRecordset::build('Etapa', $aSearch);

				if($countEtapa->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A etapa já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$etapa->store();
				}     
			} else {
				$etapa->store();
			} 


			$id_etapa = $etapa->getId();

			$arrMensagem = array('error' => 0, 'id_etapa' => $id_etapa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Etapa
	Método: GET
	URL: http://localhost/sig/api/index.php/etapa/<etapa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ?
	Autor: ?
	Versão: 1.0
	Data de Alteração: 22/06/2015
	Autor: Ricardo Bruno
	*/
	public function getEtapa($id_consulta="",$id="", $full = false) {

		$userSes = fSession::get('user');

		$aSearch = '';		
		$aSearch = ($id != "") 	 ? 'AND etapa.id = '.$id : '';

		$strQueryEtapa = "	SELECT 
							etapa.id,
							etapa.id_ciclo,
							etapa.id_situacao_etapa,
							etapa.ano, 
							etapa.mes_ano_inicio,
							etapa.mes_ano_fim,
							etapa.descricao,
							etapa.observacao,
							etapa.ativo,
							ciclo.descricao as ciclo, 
							situacao_etapa.descricao as situacao_etapa
							FROM etapa 
							INNER JOIN ciclo ON etapa.id_ciclo = ciclo.id
							INNER JOIN situacao_etapa ON etapa.id_situacao_etapa = situacao_etapa.id WHERE 1 ".$aSearch." AND etapa.id_entidade = ".$userSes['user']['entidadePessoa']." ORDER BY etapa.descricao ";
		
		$etapa = $this->_getDb()->query($strQueryEtapa);

		$aEtapa = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aEtapa[] = array(
				'tipo' => 'Ação',
				'id' => "-1",
				'id_ciclo' => "-1",
				'ciclo' => ":: Ciclo",
				'id_situacao_etapa' => "-1",
				'situacao_etapa' => ":: Situação Etapa",
				'ano' => ":: Ano",
				'data_inicio' => ":: Data Início",
				'data_fim' => ":: Data Fim",
				'descricao' => ":: Cadastrar Nova Etapa",
				'observacao' => ":: Observação",
				'ativo' => ""
				);
		}

		$data_inicio = '';
		$data_fim = '';
		$mes = '';
		$ano = '';

		foreach ($etapa as $key => $value){

			$status = array('Inativo', 'Ativo');

			$mes = substr($value['mes_ano_inicio'], 0, 2);
			$ano = substr($value['mes_ano_inicio'], -4);

			
			$data_inicio = $mes.'/'.$ano;
			$stat_dtini = $mes.'/'.$ano;

			$mes = substr($value['mes_ano_fim'], 0, 2);
			$ano = substr($value['mes_ano_fim'], -4);
			
			$data_fim = $mes.'/'.$ano;
			$stat_dtfim = $mes.'/'.$ano;

			$aEtapa[] = array( 	
				'tipo' 				=> 'Etapa',
				'id' 				=> $value['id'],
				'id_ciclo' 			=> $value['id_ciclo'],
				'ciclo' 			=> $value['ciclo'],
				'id_situacao_etapa' => $value['id_situacao_etapa'],
				'situacao_etapa' 	=> $value['situacao_etapa'],
				'ano' 				=> $value['ano'],
				'data_inicio'		=> $data_inicio,
				'data_fim'			=> $data_fim,
				'stat_dtini'		=> $data_inicio,
				'stat_dtfim'		=> $data_fim,
				'descricao' 		=> $value['descricao'],
				'observacao' 		=> $value['observacao'],
				'ativo'				=> $value['ativo'],
				'status' 			=> $status[$value['ativo']]
				);
		}

		if (count($aEtapa) == 0) {
			$aEtapa[] = array('error' => -1, 'mensagem' => "Nenhuma etapa encontrada.");
		} else {
			$aEtapa = array(
				'error' => 0,
				'etapa' => $aEtapa
				);  
		}
		
		if ($full == false) {
			fJSON::output($aEtapa);
		} else {
			return $aEtapa;
		}    
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de grupo sanguineo
	Método: GET
	URL: http://localhost/sig/api/index.php/gruposanguineo/<gruposanguineo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/02/2015
	Autor: Ricardo Nakadomari
	Versão: 1.0
	Data de Alteração: 24/02/2015
	*/

	public function getGrupoSanguineo($id_consulta="",$id="", $full = false) {
		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE id = '.$id;
		}

		$strQueryGrupoSanguineo = "SELECT id,descricao FROM grupo_sanguineo ".$aSearch." ORDER BY descricao ";
		$grupoSanguineo = $this->_getDb()->query($strQueryGrupoSanguineo);
		$aGrupoSanguineo = array();

		if ($full == false) {

			$aGrupoSanguineo = array();

			foreach ($grupoSanguineo as $key => $value){
				$aGrupoSanguineo[] = array(
					'tipo' => "Grupo Sanguineo",
					'id' => $value['id'],
					'descricao' => $value['descricao']
					);
			}

			$estadocivil = $this->_getDb()->close();			

			if (count($aGrupoSanguineo) == 0) {
				$aGrupoSanguineo[] = array('error' => -1, 'mensagem' => "Nenhum grupo sanguineo encontrado.");
			} else {
				$aGrupoSanguineo = array(
					'error' => 0,
					'grupoSanguineo' => $aGrupoSanguineo
					);  
			}

			fJSON::output($aGrupoSanguineo);
		}
		else {
			return $grupoSanguineo[0];
		}    
	}  



/*
Módulo: Geral
Descrição: Cadastrar Telefones de pessoa
Método: POST
URL: http://localhost/sig/api/index.php/telefone/
Autenticação: Não
Resposta: JSON
Data de Criação: 26/02/2015
Autor: Ricardo S. Nakadomari
Versão: 1.0
Alteração: 09/03/2015
Autor: Ricardo S. Nakadomari
Resumo: Adição de validação e desmonte do numero_telefone para retirar o ddd e o telefone
Alteração: 29/03/2015
Autor: Luciano Almeida
Resumo: Revisão, identação e montagem para aceitar multiplos telefones nos cadastros de pessoas
*/
public function postTelefonePessoa() {

	$data = json_decode(file_get_contents("php://input"));

	$id = "";
	$fone_prefixo = '0';
	$fone_numero  = '0';
	$fone_ramal	  = '0';


	if (property_exists($data, 'id')) {//verifica se é alteração ou se é inclusão
		$id = $data->id;
	}
	if ($id != "") { //Verifica se foi passado o Id da Pessoa, se sim, é feita a alteração.
		$telefone = new Telefone($data->id);
		$aSearch = array();
		$aSearch['id='] = $data->id;
		$mensagem = "Telefone alterado com sucesso!";
		$alteracao=1;
	}else{
		$telefone = new Telefone();
		$mensagem = "Telefone incluído com sucesso!";
		$alteracao=0;
	}
	try {
		$id_tipo_telefone = $id_pessoa = $principal = $ativo = "";

		if (property_exists($data, 'id_tipo_telefone')){
			$id_tipo_telefone = $data->id_tipo_telefone;
			$telefoneAnt = '';
			if($alteracao==1){
				$telefoneAnt = $telefone->getIdTipoTelefone();
			}
			$telefone->setIdTipoTelefone($id_tipo_telefone);
			$this->setAuditoria('Telefone', 'Tipo de Telefone', $telefoneAnt, $id_tipo_telefone);
		}
		if (property_exists($data, 'id_pessoa')){
			$id_pessoa = $data->id_pessoa;
			$telefoneAnt = '';
			if($alteracao==1){
				$telefoneAnt = $telefone->getIdPessoa();
			}
			$telefone->setIdPessoa($id_pessoa);
			$this->setAuditoria('Telefone', 'Pessoa', $telefoneAnt, $id_pessoa);
		}

		if (property_exists($data, 'numero_telefone'))
		{ 
			$fone = $data->numero_telefone;
		} 
		else 
		{
			if (property_exists($data, 'numero')){ 	$fone = $data->numero; }
		}

		$fone_prefixo = (strlen($fone)>0) ? substr($fone, 0,3) : '';
		$fone_numero  = (strlen($fone)>0) ? substr($fone, 3,8) : '';
		
		if($id_tipo_telefone == 3){
			$fone_numero = substr($fone, 3, 9);
			$fone_ramal = (strlen($fone)>12) ? substr($fone, 12) : '';
		} else {
			$fone_ramal = (strlen($fone)>11) ? substr($fone, 11) : '';		
		}
		
		$telefone->setNumero($fone_numero);
		$telefone->setDdd($fone_prefixo);
		$telefone->setRamal((property_exists($data, 'ramal')) ? $data->ramal : $fone_ramal);

		if (property_exists($data, 'principal')){
			$principalAnt = '';
			if($alteracao==1){
				$principalAnt = $telefone->getPrincipal();
			}
			$telefone->setPrincipal($data->principal);
			$this->setAuditoria('Telefone', 'Principal', $principalAnt, $data->principal);
		} else {
			$telefone->setPrincipal("0");
		}
		if (property_exists($data, 'ativo')){
			$telefone->setAtivo($data->ativo);
		} else {
			$telefone->setAtivo("1");
		}
		if(property_exists($data, 'observacao')){
			$telefone->setObservacao($data->observacao);
		}
		if ($alteracao!=1) {
			$aSearch = array();
			$aSearch['id_tipo_telefone='] = $id_tipo_telefone;
			$aSearch['id_pessoa='] = $id_pessoa;
			$aSearch['ddd='] = $fone_prefixo;
			$aSearch['numero='] = $fone_numero;
			$aSearch['ramal='] = $fone_ramal;
			$aSearch['principal='] = $principal;
			$aSearch['ativo='] = $ativo;

			$countTelefone = fRecordset::build('Telefone', $aSearch);

			if($countTelefone->count() > 0){
				$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O telefone já existe");
				fJSON::output($arrMensagem);
				die();
			}else{
				$telefone->store();
			}
		} else {
			$telefone->store();
		}
		
		$id_telefone = $telefone->getId();
		$arrMensagem = array('error' => 0, 'id_telefone' => $id_telefone, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $e);
		fJSON::output($arrMensagem);
		die();
	}
}



	/*
	Módulo: Escola
	Descrição: Cadastrar um novo dados médico de pessoa
	Método: POST
	URL: http://localhost/sig/api/index.php/pessoadadosmedico/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	*/

	public function postDadosMedicoPessoa() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_pessoa='] = $data->id_pessoa;
		$countPessoaDadosMedico = fRecordset::build('PessoaDadosMedico', $aSearch);

	if (property_exists($data, 'id') or $countPessoaDadosMedico->count() > 0) {//verifica se é alteração ou se é inclusão
		if ( $countPessoaDadosMedico->count() > 0 ) {
			foreach ($countPessoaDadosMedico->getRecords() as $key => $value) {
				$id = $value->getId();
			}
		}
		else {
			$id = $data->id;
		}
		$pessoadadosmedico = new PessoaDadosMedico($id);
		$aSearch = array();
		$aSearch['id='] = $id;
		$mensagem = "Dados médico alterado com sucesso!";
		$alteracao=1;
	}
	else{
		$pessoadadosmedico = new PessoaDadosMedico();
		$mensagem = "Dados médico incluído com sucesso!";
		$alteracao=0;
	}

	try {
		if (property_exists($data, 'id_pessoa')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getIdPessoa();
			}
			$pessoadadosmedico->setIdPessoa($data->id_pessoa);
			$this->setAuditoria('Dados Médicos', 'Pessoa', $pessoadadosmedicoAnt, $data->id_pessoa);
		}
		if (property_exists($data, 'id_tipo_sanguineo')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getIdPessoa();
			}
			$pessoadadosmedico->setIdTipoSanguineo($data->id_tipo_sanguineo);
			$this->setAuditoria('Dados Médicos', 'Tipo Sanguíneo', $pessoadadosmedicoAnt, $data->id_tipo_sanguineo);
		}
		if (property_exists($data, 'peso')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getPeso();
			}
			$pessoadadosmedico->setPeso($data->peso);
			$this->setAuditoria('Dados Médicos', 'Peso', $pessoadadosmedicoAnt, $data->peso);
		}
		if (property_exists($data, 'altura')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getAltura();
			}
			$pessoadadosmedico->setAltura($data->altura);
			$this->setAuditoria('Dados Médicos', 'Altura', $pessoadadosmedicoAnt, $data->altura);
		}
		if (property_exists($data, 'data_medicao_corpo')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getDataMedicaoCorpo();
			}
			$data_medicao_corpo = $data->data_medicao_corpo;
			if ( strrpos($data_medicao_corpo, 'GMT') > 0 ){
				$dt = explode('GMT', $data_medicao_corpo);
				$data_medicao_corpo = $dt[0];
			}
			$date = new fDate($data_medicao_corpo);
			$pessoadadosmedico->setDataMedicaoCorpo($date);
			$this->setAuditoria('Dados Médicos', 'Data Medição do Corpo', $pessoadadosmedicoAnt, $date);
		}
		if (property_exists($data, 'calca')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getCalca();
			}
			$pessoadadosmedico->setCalca($data->calca);
			$this->setAuditoria('Dados Médicos', 'Calça', $pessoadadosmedicoAnt, $data->calca);
		}
		if (property_exists($data, 'camisa')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getCamisa();
			}
			$pessoadadosmedico->setCamisa($data->camisa);
			$this->setAuditoria('Dados Médicos', 'Camisa', $pessoadadosmedicoAnt, $data->camisa);
		}
		if (property_exists($data, 'calcado')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getCalcado();
			}
			$pessoadadosmedico->setCalcado($data->calcado);
			$this->setAuditoria('Dados Médicos', 'Calçadp', $pessoadadosmedicoAnt, $data->calcado);
		}
		if (property_exists($data, 'data_medicao_vestuario')){
			$pessoadadosmedicoAnt = '';
			if($alteracao==1){
				$pessoadadosmedicoAnt = $pessoadadosmedico->getDataMedicaoVestuario();
			}
/*			$data_medicao_vestuario = $data->data_medicao_vestuario;
			if ( strrpos($data_medicao_vestuario, 'GMT') > 0 ){
				$dt = explode('GMT', $data_medicao_vestuario);
				$data_medicao_vestuario = $dt[0];
			}
			$date = new fDate($data_medicao_vestuario);*/ 
			$data_medicao_vestuario = self::formatDateDatebase($data_medicao_vestuario);   
			$pessoadadosmedico->setDataMedicaoVestuario($data_medicao_vestuario);
			$this->setAuditoria('Dados Médicos', 'Data Medição do Vestuário', $pessoadadosmedicoAnt, $data->data_medicao_vestuario);
		}
		if (property_exists($data, 'alergico')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getAlergico();
		//}
			$pessoadadosmedico->setAlergico($data->alergico);
		//$this->setAuditoria('Dados Médicos', 'É Alérgico', $pessoadadosmedicoAnt, $data->alergico);
		}
		if (property_exists($data, 'pode_medicar')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getPodeMedicar();
		//}
			$pessoadadosmedico->setPodeMedicar($data->pode_medicar);
		//$this->setAuditoria('Dados Médicos', 'Pode Medicar', $pessoadadosmedicoAnt, $data->pode_medicar);
		}
		if (property_exists($data, 'homeopatia')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getHomeopatia();
		//}
			$pessoadadosmedico->setHomeopatia($data->homeopatia);
		//$this->setAuditoria('Dados Médicos', 'Homeopatia', $pessoadadosmedicoAnt, $data->homeopatia);
		}
		if (property_exists($data, 'oculos')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getOculos();
		//}
			$pessoadadosmedico->setOculos($data->oculos);
		//$this->setAuditoria('Dados Médicos', 'Usa Óculos', $pessoadadosmedicoAnt, $data->oculos);
		}
		if (property_exists($data, 'vacinacao')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getVacinacao();
		//}
			$pessoadadosmedico->setVacinacao($data->vacinacao);
		//$this->setAuditoria('Dados Médicos', 'Vacinação', $pessoadadosmedicoAnt, $data->vacinacao);
		}
		if (property_exists($data, 'desmaios')){
		//$pessoadadosmedicoAnt = '';
		//if($alteracao==1){
		//  $pessoadadosmedicoAnt = $pessoadadosmedico->getDesmaios();
		//}
			$pessoadadosmedico->setDesmaios($data->desmaios);
		//$this->setAuditoria('Dados Médicos', 'Desmaios', $pessoadadosmedicoAnt, $data->desmaios);
		}

		if (property_exists($data, 'alergias')){
			$pessoadadosmedico->setAlergias($data->alergias);
		}
		if (property_exists($data, 'medicacao')){
			$pessoadadosmedico->setMedicacao($data->medicacao);
		}
		if (property_exists($data, 'medico_plano_saude')){
			$pessoadadosmedico->setMedicoPlanoSaude($data->medico_plano_saude);
		}
		if (property_exists($data, 'doencas')){
			$pessoadadosmedico->setDoencas($data->doencas);
		}
		if (property_exists($data, 'urgencia')){
			$pessoadadosmedico->setUrgencia($data->urgencia);
		}
		if (property_exists($data, 'ausencia_pais')){
			$pessoadadosmedico->setAusenciaPais($data->ausencia_pais);
		}
		if (property_exists($data, 'disturbios')){
			$pessoadadosmedico->setDisturbios($data->disturbios);
		}
		if(property_exists($data, 'observacoes')){
			$pessoadadosmedico->setObservacoes($data->observacoes);
		}

		$pessoadadosmedico->store();
		//******** Fim - Grava informações na Tabela de pessoa_dados_medico

		$id_pessoa_dados_medico = $pessoadadosmedico->getId();

		$arrMensagem = array('error' => 0, 'id_pessoa_dados_medico' => $id_pessoa_dados_medico, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die();
	}
}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo medicamento
	Método: POST
	URL: http://localhost/sig/api/index.php/medicamento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/

	public function postMedicamento() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$medicamento = new Medicamento($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Medicamento alterado com sucesso!";
			$alteracao=1;
		}else{
			$medicamento = new Medicamento();
			$mensagem = "Medicamento incluído com sucesso!";
			$alteracao=0;
		}


		try {
		//******** Grava informações na Tabela de Grupo de ocorrências
			if (property_exists($data, 'descricao')){
				$medicamentoAnt = '';
				if($alteracao==1){
					$medicamentoAnt = $medicamento->getDescricao();
					$this->setAuditoria('Medicamento', 'Descricao', $medicamentoAnt, $data->descricao,$data->id);
					$medicamento->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Medicamento', 'Descricao', $medicamentoAnt, $data->descricao);
					$medicamento->setDescricao($data->descricao);
				}
			}


			if (property_exists($data, 'ativo')){
				$medicamento->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Medicamento', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O medicamento já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$medicamento->store();
				}     
			} else {
				$medicamento->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_medicamento = $medicamento->getId();

			$arrMensagem = array('error' => 0, 'id_medicamento' => $id_medicamento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


/*
	Módulo: Escola
	Descrição: Obter Lista de medicamento
	Método: GET
	URL: http://localhost/sig/api/index.php/medicamento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/

	public function getMedicamento($id_consulta="",$id="", $full = false) {

		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$medicamento = fRecordSet::build('Medicamento', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aMedicamento = array();

			if (($id_consulta != "1") && ($id=="")) {

				$aMedicamento[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Medicamento",
					'ativo' => ""
					);  

			}      

			foreach ($medicamento->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} 
				else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}


				$aMedicamento[] = array(
					'tipo' => "Medicamento",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status

					);
			}

			if (count($aMedicamento) == 0) {
				$aMedicamento[] = array('error' => -1, 'mensagem' => "Nenhum medicamento encontrado.");
			}

			$aMedicamento = array(
				'medicamento' => $aMedicamento
				);          

			fJSON::output($aMedicamento);
		}
		else {
			return $medicamento[0];
		}
	}




	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova vacina
	Método: POST
	URL: http://localhost/sig/api/index.php/vacina/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/

	public function postVacina() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$vacina = new Vacina($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Vacina alterada com sucesso!";
			$alteracao=1;
		}else{
			$vacina = new Vacina();
			$mensagem = "Vacina incluída com sucesso!";
			$alteracao=0;
		}


		try {
		//******** Grava informações na Tabela de Grupo de ocorrências
			if (property_exists($data, 'descricao')){
				$vacinaAnt = '';
				if($alteracao==1){
					$vacinaAnt = $vacina->getDescricao();
					$this->setAuditoria('Vacina', 'Descricao', $vacinaAnt, $data->descricao,$data->id);
					$vacina->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Vacina', 'Descricao', $vacinaAnt, $data->descricao);
					$vacina->setDescricao($data->descricao);
				}
			}


			if (property_exists($data, 'ativo')){
				$vacina->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Vacina', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A vacina já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$vacina->store();
				}     
			} else {
				$vacina->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_vacina = $vacina->getId();

			$arrMensagem = array('error' => 0, 'id_vacina' => $id_vacina, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


/*
	Módulo: Escola
	Descrição: Obter Lista de vacina
	Método: GET
	URL: http://localhost/sig/api/index.php/vacina/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/

	public function getVacina($id_consulta="",$id="", $full = false) {
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$vacina = fRecordSet::build('Vacina', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aVacina = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aVacina[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Vacina",
					'ativo' => ""
					);
			}      

			foreach ($vacina->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aVacina[] = array(
					'tipo' => "Vacina",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aVacina) == 0) {
				$aVacina[] = array('error' => -1, 'mensagem' => "Nenhuma vacina encontrada.");
			} else {
				$aVacina = array(
					'error' => 0,
					'vacina' => $aVacina
					);          
			}

			fJSON::output($aVacina);
		}
		else {
			return $vacina[0];
		}
	}

/*
	Módulo: Escola
	Descrição: Cadastrar uma novo feriado
	Método: POST
	URL: http://localhost/sig/api/index.php/feriado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/

	public function postFeriado() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$feriado = new Feriado($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Feriado alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$feriado = new Feriado();
			$mensagem = "Feriado incluído com sucesso!";
			$alteracao=0;
		}


		try {
		//******** Grava informações na Tabela de Grupo de ocorrências
			if (property_exists($data, 'descricao')){
				$feriadoAnt = '';
				if($alteracao==1){
					$feriadoAnt = $feriado->getDescricao();
					$this->setAuditoria('Feriado', 'Descricao', $feriadoAnt, $data->descricao, $data->id);
					$feriado->setDescricao($data->descricao);          
				} else {
					$this->setAuditoria('Feriado', 'Descricao', $feriadoAnt, $data->descricao);
					$feriado->setDescricao($data->descricao);
				}
			}


			if (property_exists($data, 'ativo')){
				$feriado->setAtivo($data->ativo);
			}

			if (property_exists($data, 'data_feriado')){
				$feriadoAnt = '';
				if($alteracao==1){
					$feriadoAnt = $feriado->getDataFeriado();
				}
				$date = new fDate($data->data_feriado);
				$feriado->setDataFeriado($date);
				$this->setAuditoria('Feriado', 'Data Feriado', $feriadoAnt, $data->data_feriado);
			}

			if ($alteracao!=1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Feriado', $aSearch);

				$aSearch = array();
				$aSearch['data_feriado='] = $data->data_feriado;
				$countDataFeriado = fRecordset::build('Feriado', $aSearch);

				if($countDescricao->count() > 0){

					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O feriado já existe com essa descrição.");
					fJSON::output($arrMensagem);
					die();  

				}
				else if ($countDataFeriado->count() > 0){

					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O feriado já existe com essa data.");
					fJSON::output($arrMensagem);
					die();

				}  
				else{
					$feriado->store();
				}

			} else {
				$feriado->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_feriado = $feriado->getId();

			$arrMensagem = array('error' => 0, 'id_feriado' => $id_feriado, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}   


/*
	Módulo: Escola
	Descrição: Obter Lista de feriado
	Método: GET
	URL: http://localhost/sig/api/index.php/feriado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/02/2015
	Autor: Hamzi Jalel
	Versão: 1.0
	Data de Alteração: 27/02/2015
	*/



	public function getFeriado($id_consulta="",$id="", $full = false) {

		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$feriado = fRecordSet::build('Feriado', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aFeriado = array();

			if (($id_consulta != "1") && ($id=="")) {

				$aFeriado[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Feriado",
					'ativo' => "",
					'data_feriado' => ""
					);  

			}      

			foreach ($feriado->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} 
				else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$dataFeriado = '';
				$dataFeriadoFormatada = '';

				if ($value->getDataFeriado() != null) {
					$dataFeriado = $value->getDataFeriado()->format('Y/m/d');
					$dataFeriadoFormatado = $value->getDataFeriado()->format('d/m/Y');
				}


				$aFeriado[] = array(
					'tipo' => "Feriado",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					'data_feriado' => $dataFeriado,
					'data_feriado_formatado' => $dataFeriadoFormatado

					);
			}

			if (count($aFeriado) == 0) {
				$aFeriado[] = array('error' => -1, 'mensagem' => "Nenhum feriado encontrado.");
			}

			$aFeriado = array(
				'feriado' => $aFeriado
				);          

			fJSON::output($aFeriado);
		}
		else {
			return $feriado[0];
		}
	}  


	/*
	Módulo: Geral
	Descrição: Obter Lista de Responsável
	Método: GET
	URL: http://localhost/sig/api/index.php/responsaveisaluno/<id_pessoa_aluno>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/10/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getResponsaveis($id_pessoa_aluno = 0, $id = 0, $full = false) {

		$sqlq = "	SELECT
					ra.id,
					ra.id_pessoa,
					ra.id_pessoa_aluno,
					ra.id_tipo_responsavel,
					tr.descricao tipo_responsavel,
					p.nome,
					p.sexo,
					CASE WHEN p.sexo='M' THEN 'Masculino' ELSE 'Feminino' END sexo_nome,
					CONCAT(COALESCE(DATE_FORMAT(p.data_nascimento,'%Y-%m-%d'),''),' 00:00:00') data_nascimento,
					p.email,
					u.login,
					p.apelido,
					d.numero cpf,
					CONCAT(t.ddd,t.numero) telefone_celular,
					ec.id id_estado_civil,
					ec.descricao estado_civil,
					ra.responsavel_financeiro,
					ra.responsavel_pedagogico
					FROM responsavel_aluno ra
					LEFT JOIN tipo_responsavel 	tr 	ON tr.id=ra.id_tipo_responsavel
					LEFT JOIN usuario 			u 	ON u.id_pessoa = ra.id_pessoa
					LEFT JOIN pessoa 			p 	ON p.id=ra.id_pessoa
					LEFT JOIN estado_civil 		ec	ON ec.id=p.id_estado_civil
					LEFT JOIN telefone 			t 	ON t.id_tipo_telefone=3  AND t.id_pessoa=ra.id_pessoa
					LEFT JOIN documento 		d 	ON d.id_tipo_documento=2 AND d.id_pessoa=ra.id_pessoa
					WHERE ra.ativo = 1 @C1 @C2 GROUP BY ra.id";

			if($id_pessoa_aluno>0){ $sqlq = str_replace("@C1", "AND ra.id_pessoa_aluno=".$id_pessoa_aluno, $sqlq); }else{ $sqlq = str_replace("@C1", "", $sqlq); };
			if($id>0)			  { $sqlq = str_replace("@C2", "AND ra.id=".$id 						 , $sqlq); }else{ $sqlq = str_replace("@C2", "", $sqlq); };					

			$retorno = array();

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $retorno[] = $value; }			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma registro encontrado."	);
				fJSON::output($retorno);
				die();
			}

		$retorno = array( 'error' => 0, 'responsaveis' => $retorno );
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um responsável de aluno
	Método: POST
	URL: http://localhost/sig/api/index.php/responsavel/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/03/2015
	Autor: Rafael Frota
	Versão: 1.0
	Data de Alteração: 05/03/2015
	Autor: Ricardo S. Nakadomari
	*/

	public function postResponsavelPessoa($data = array(), $full = false) {

		$userSes = fSession::get('user');

		if(count($data) == 0){
			$data = json_decode(file_get_contents("php://input"));	
		}

		$del = 0;
		if (property_exists($data,'ativo')){ if($data->ativo==0){ $del = 1; }};

		if (property_exists($data, 'id') && $data->id != "") {
			$responsavelAluno = new ResponsavelAluno($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Responsável alterado com sucesso!";
			$alteracao=1;			
		//atualizar dados da pessoa
		}else{
			$responsavelAluno = new ResponsavelAluno();
			$mensagem = "Responsável incluído com sucesso!";
			$alteracao=0;			
		//cadastrar nova pessoa
		}

		try {
			if (property_exists($data, 'id_pessoa_aluno')){
				if($alteracao==1){
					$responsavelAlunoAnt = $responsavelAluno->getIdPessoaAluno();
					$this->setAuditoria('Responsável Aluno', 'Aluno', $responsavelAlunoAnt, $data->id_pessoa_aluno);
				}
				$responsavelAluno->setIdPessoaAluno($data->id_pessoa_aluno);
			}

		//Início da funcionalidade de gravar dados do responsável na tabela de pessoa
			if (property_exists($data, 'id_pessoa')){
				$pessoa = new Pessoa($data->id_pessoa);
				$id_pessoa = $data->id_pessoa;
				$alteracaoPessoa=1;
			} else {
				$pessoa = new Pessoa();
				$pessoa->setIdTipoPessoa(1);
				$pessoa->setDataCadastro(date("Y-m-d h:i:s"));
				$pessoa->setAssociado(0);
				$pessoa->setBeneficiario(0);
				$pessoa->setParentesco(0);
				$pessoa->setFuncionario(0);
				$pessoa->setProprietario(0);
				$pessoa->setDonatario(0);
				$pessoa->setFornecedor(0);
				$alteracaoPessoa=0;
			}
			if (property_exists($data, 'nome')){
				if($alteracaoPessoa==1){
					$pessoaAnt = $pessoa->getNome();
					$this->setAuditoria('Pessoa', 'Nome', $pessoaAnt, $data->nome);
				}
				$pessoa->setNome($data->nome);
			}
			if (property_exists($data, 'data_nascimento_responsavel')){
				$data_nascimento = $data->data_nascimento;
				if ( strrpos($data_nascimento, 'GMT') > 0 ){
					$dt = explode('GMT', $data_nascimento);
					$data_nascimento = $dt[0];
				}
				$dataNascimento = new fDate($data_nascimento);

				$pessoa->setDataNascimento($dataNascimento);
			}

			if (property_exists($data, 'id_estado_civil')){
				if($alteracaoPessoa==1){
					$pessoaAnt = $pessoa->getIdEstadoCivil();
					$this->setAuditoria('Pessoa', 'Estado Civil', $pessoaAnt, $data->id_estado_civil);
				}
				$pessoa->setIdEstadoCivil($data->id_estado_civil);
			}
			if (property_exists($data, 'sexo')){
				if($alteracaoPessoa==1){
					$pessoaAnt = $pessoa->getSexo();
					$this->setAuditoria('Pessoa', 'Sexo', $pessoaAnt, $data->sexo);
				}
				$pessoa->setSexo($data->sexo);
			}
			if (property_exists($data, 'email')){
				if($alteracao==1){
					$pessoaAnt = $pessoa->getEmail();
					$this->setAuditoria('Pessoa', 'E-mail', $pessoaAnt, $data->email);
				}
				$pessoa->setEmail($data->email);
			}
						
			$pessoa->setResponsavel(1);
			$pessoa->store();

			$id_pessoa = $pessoa->getId();

			
			$responsavelAluno->setIdPessoa($id_pessoa);

			
			// FRH - Verificar se já existe LOGIN
			//-----------------------------------
			$chk_login = array();
			$tmp = $id_pessoa;
			$sqlq = "SELECT 
					 COALESCE(u.login,'') login, 
					 CASE WHEN p.responsavel=1 AND (
					 p.associado+
					 p.beneficiario+
					 p.parentesco+
					 p.funcionario+
					 p.proprietario+
					 p.donatario+
					 p.responsavel_proprietario+
					 p.fornecedor+
					 p.aluno+
					 p.professor+
					 p.padrinho+
					 p.entidade)=0 then 1 else 0 end apagar
					 FROM pessoa p
					 LEFT JOIN usuario u on u.id_pessoa=p.id 
					 WHERE p.id = ".$id_pessoa;

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $ch => $val){ $chk_login[] = $val; }
			$rs = $this->_getDb()->close();
			//------------------------------------

			$login_usuario = ($chk_login[0]['login']=='') ? $this->setUsuario($id_pessoa, $data->nome, $alteracao) : $chk_login[0]['login'];

			$sqlq1='';
			if($del==1 && $chk_login[0]['apagar']==1){	$sqlq1 = 'DELETE FROM usuario WHERE id_pessoa='.$id_pessoa;
														$rsd01 = $this->_getDb()->query($sqlq1);
														$rsd01 = $this->_getDb()->close(); }

			//******** Início - Grava informações na Tabela de Documento
			if (property_exists($data, 'cpf')) { //Grava CPF
				$aSearch = array();
				$aSearch['id_pessoa='] = $id_pessoa;
				$aSearch['id_tipo_documento='] = 2;
				$documento = fRecordSet::build('Documento', $aSearch);
				if($documento->count() > 0){
					foreach ($documento->getRecords() as $key => $value) {
						$id_documento = $value->getId();
					}
					$documento = new Documento($id_documento);
				}else{
					$documento = new Documento();
				}
				$cpf = str_replace(".", "", $data->cpf);
				$cpf = str_replace("-", "", $cpf);
				$documento->setIdTipoDocumento('2'); //CPF
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($cpf);
				$documento->setAtivo(1);
				$documento->store();
			}

			//******** Fim - Grava informações na Tabela de Documento

			//******** Início - Grava informações na Tabela de Telefone
			if (property_exists($data, 'telefone_celular')) { //Grava Telefone Celular se houver
				if (strlen($data->telefone_celular)>0) {
					$aSearch = array();
					$aSearch['id_pessoa='] = $id_pessoa;
					$aSearch['id_tipo_telefone='] = 3;
					$telefoneBusca = fRecordSet::build('Telefone', $aSearch);
					if($telefoneBusca->count() > 0){
						foreach ($telefoneBusca->getRecords() as $key => $value) {
							$id_telefone = $value->getId();
						}
						$telefone = new Telefone($id_telefone);
					}else{
						$telefone = new Telefone();
					}
					$telefoneCelular = str_replace("(", "", $data->telefone_celular);
						$telefoneCelular = str_replace(")", "", $telefoneCelular);
						$telefoneCelular = str_replace(" ", "", $telefoneCelular);
						$telefoneCelular = str_replace("-", "", $telefoneCelular);

						$dddCelular = substr($telefoneCelular, 0, 3);
						$numeroCelular = substr($telefoneCelular, 3, 9);

				$telefone->setIdTipoTelefone('3'); //Celular
				$telefone->setIdPessoa($id_pessoa);
				$telefone->setDdd($dddCelular);
				$telefone->setNumero($numeroCelular);
				$telefone->setPrincipal(0);
				$telefone->setAtivo(1);
				$telefone->store();
			}
		}
			//******** Fim - Grava informações na Tabela de Telefone



		if (property_exists($data, 'id_tipo_responsavel')){
			if($alteracao==1){
				$responsavelAlunoAnt = $responsavelAluno->getIdTipoResponsavel();
				$this->setAuditoria('Responsável Aluno', 'Tipo de Responsável', $responsavelAlunoAnt, $data->id_tipo_responsavel);
			}
			$responsavelAluno->setIdTipoResponsavel($data->id_tipo_responsavel);
		}

		if (property_exists($data, 'responsavel_financeiro')){
			if ( $data->responsavel_financeiro == true ){
				$responsavel_financeiro = 1;
				//Busca se existe outro responsavel financeiro para manter apenas um responsável financeiro
				$aSearch = array();
				$aSearch['id_pessoa_aluno='] = $data->id_pessoa_aluno;
				$aSearch['responsavel_financeiro='] = 1;
				$responsavelAlunoTemp = fRecordSet::build('ResponsavelAluno', $aSearch);
				foreach ($responsavelAlunoTemp->getRecords() as $key => $value) {
					$responsavelAlunoTemp = new ResponsavelAluno($value->getId());
					$responsavelAlunoTemp->setResponsavelFinanceiro(0);
					$responsavelAlunoTemp->store();
				}
			} else {
				$responsavel_financeiro = 0;
			}
			$responsavelAluno->setResponsavelFinanceiro($responsavel_financeiro);
		}
		if (property_exists($data, 'responsavel_pedagogico')){
			if ( $data->responsavel_pedagogico == true ){
				$responsavel_pedagogico = 1;
				//Busca se existe outro responsavel pedagogico para manter apenas um responsável pedagogico
				$aSearch = array();
				$aSearch['id_pessoa_aluno='] = $data->id_pessoa_aluno;
				$aSearch['responsavel_pedagogico='] = 1;
				$responsavelAlunoTemp = fRecordSet::build('ResponsavelAluno', $aSearch);
				foreach ($responsavelAlunoTemp->getRecords() as $key => $value) {
					$responsavelAlunoTemp = new ResponsavelAluno($value->getId());
					$responsavelAlunoTemp->setResponsavelPedagogico(0);
					$responsavelAlunoTemp->store();
				}
			} else {
				$responsavel_pedagogico = 0;
			}
			$responsavelAluno->setResponsavelPedagogico($responsavel_pedagogico);
		}
		if (property_exists($data, 'ativo')){

			$valAtivo = ($del==1) ? 0 : 1;
			$responsavelAluno->setAtivo($valAtivo);
		}

		$responsavelAluno->store();

		//******** Fim - Grava informações na Tabela de orgao_emissor
		$id = $responsavelAluno->getId();

		$arrMensagem = array('error' => 0, 
				'login' => $login_usuario,
				'id' => $id, 
				'mensagem' => $mensagem);

		if($full == false){
			fJSON::output($arrMensagem);
			die();	
		}else{
			return $arrMensagem;
		}
		
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);

		if($full == false){
			fJSON::output($arrMensagem);
			die();
		}else{
			return $arrMensagem;
		}
	}
}

/*
	Módulo: Geral
	Descrição: Obter Dados Médico
	Método: GET
	URL: http://localhost/sig/api/index.php/pessoadadosmedico/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 03/03/2015
	Alterado por: Ricardo S. Nakadomari
	*/
	public function getDadosMedicoPessoa($id_pessoa = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != ""){            
			$aSearch['id_pessoa='] = $id_pessoa;
		}

		$dadosmedico = fRecordSet::build('PessoaDadosMedico', $aSearch, array('id_pessoa' => 'asc'));            

		if ($full == false) {
			$aDadosMedico = array();

			foreach ($dadosmedico as $key => $value) {
				$resultGrupoSanguineo = new GrupoSanguineo($value->getIdGrupoSanguineo());
				if ($value->getDataMedicaoCorpo() != null) {
					//$dataMedicaoCorpo = $value->getDataMedicaoCorpo()->format('Y-m-d') . " 00:00:00";

					$dataMedicaoCorpo = self::formataData($value->getDataMedicaoCorpo());
				}
				if ($value->getDataMedicaoVestuario() != null) {
					//$dataMedicaoVestuario = $value->getDataMedicaoVestuario()->format('Y-m-d') . " 00:00:00";
					$dataMedicaoVestuario = self::formataData($value->getDataMedicaoVestuario());
				}


				$aDadosMedico[] = array(
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'id_grupo_sanguineo' => $resultGrupoSanguineo->getId(),
					'grupo_sanguineo' => $resultGrupoSanguineo->getDescricao(),
					'peso' => $value->getPeso(),
					'altura' => $value->getAltura(),
					'data_medicao_corpo' => $dataMedicaoCorpo,
					'calca' => $value->getCalca(),
					'camisa' => $value->getCamisa(),
					'calcado' => $value->getCalcado(),
					'data_medicao_vestuario' => $dataMedicaoVestuario,
					'alergico' => $value->getAlergico(),
					'pode_medicar' => $value->getPodeMedicar(),
					'homeopatia' => $value->getHomeopatia(),
					'oculos' => $value->getOculos(),
					'vacinacao' => $value->getVacinacao(),
					'desmaios' => $value->getDesmaios(),
					'alergias' => $value->getAlergias(),
					'medicacao' => $value->getMedicacao(),
					'medico_plano_saude' => $value->getMedicoPlanoSaude(),
					'doencas' => $value->getDoencas(),
					'urgencia' => $value->getUrgencia(),
					'ausencia_pais' => $value->getAusenciaPais(),
					'disturbios' => $value->getDisturbios(),
					'observacoes' => $value->getObservacoes()
					);

}

if (count($aDadosMedico) == 0) {
	$aDadosMedico[] = array(
		'error' => "-1",
		'mensagem' => "Nenhum dado médico encontrado."
		);
	fJSON::output($aDadosMedico);
	die();
}
else {
	$aDadosMedico = array(
		'error' => 0,
		'dadosMedicos' => $aDadosMedico
		);
	fJSON::output($aDadosMedico);
}
}else {
	return $aDadosMedico;
}

}


	/*
	Módulo: Escola
	Descrição: Cadastrar um aluno
	Método: POST
	URL: http://localhost/sig/api/index.php/aluno/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 04/03/2015
	Autor: Ricardo S. Nakadomari
	*/

	public function postAluno($data = array(), $full = false) {
		
		if(count($data) == 0){
			$data = json_decode(file_get_contents("php://input"));	
		}

		if (property_exists($data, 'id')) {
			$aluno = new Pessoa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Aluno alterado com sucesso!";
			$alteracao=1;
		//atualizar dados da pessoa
		}else{
			$aluno = new Pessoa();
			$aluno->setAtivo(1);
			$mensagem = "Aluno incluído com sucesso!";
			$alteracao=0;
		//cadastrar nova pessoa
		}

		try {

			if (property_exists($data, 'nome')){
				if($alteracao==1){
					$alunoAnt = $aluno->getNome();
					$this->setAuditoria('Aluno', 'Nome', $alunoAnt, $data->nome);
				}
				$aluno->setNome($data->nome);
			}

			if (property_exists($data, 'data_nascimento')){
				$dataNascimento = self::formatDateDatebase($data->data_nascimento);
				if($alteracao==1){
					$alunoAnt = $aluno->getDataNascimento();
					$this->setAuditoria('Aluno', 'Data de Nascimento', $alunoAnt, $dataNascimento);
				}
				$aluno->setDataNascimento($dataNascimento);
			}
			if (property_exists($data, 'naturalidade')){
				if($alteracao==1){
					$alunoAnt = $aluno->getNaturalidade();
					$this->setAuditoria('Aluno', 'Naturalidade', $alunoAnt, $data->naturalidade);
				}
				$aluno->setNaturalidade($data->naturalidade);
			}
			if (property_exists($data, 'estado_nascimento')){
				if($alteracao==1){
					$alunoAnt = $aluno->getEstadoNascimento();
					$this->setAuditoria('Aluno', 'Estado de Nascimento', $alunoAnt, $data->estado_nascimento);
				}
				$aluno->setEstadoNascimento($data->estado_nascimento);
			}
			if (property_exists($data, 'nacionalidade')){
				if($alteracao==1){
					$alunoAnt = $aluno->getNacionalidade();
					$this->setAuditoria('Aluno', 'Nacionalidade', $alunoAnt, $data->nacionalidade);
				}
				$aluno->setNacionalidade($data->nacionalidade);
			}
			if (property_exists($data, 'id_estado_civil')){
				if($alteracao==1){
					$alunoAnt = $aluno->getIdEstadoCivil();
					$this->setAuditoria('Aluno', 'Estado Civil', $alunoAnt, $data->id_estado_civil);
				}
				$aluno->setIdEstadoCivil($data->id_estado_civil);
			}
			if (property_exists($data, 'sexo')){
				if($alteracao==1){
					$alunoAnt = $aluno->getSexo();
					$this->setAuditoria('Aluno', 'Sexo', $alunoAnt, $data->sexo);
				}
				$aluno->setSexo($data->sexo);
			}
			if (property_exists($data, 'renda')){
				if($alteracao==1){
					$alunoAnt = $aluno->getRenda();
					$this->setAuditoria('Aluno', 'Renda', $alunoAnt, $data->renda);
				}
				$aluno->setRenda($data->renda);
			}
			if (property_exists($data, 'foto')){
				if($alteracao==1){
					$alunoAnt = $aluno->getFoto();
					$this->setAuditoria('Aluno', 'Foto', $alunoAnt, $data->foto);
				}
				$aluno->setFoto($data->foto);
			}
			if (property_exists($data, 'email')){
				if($alteracao==1){
					$alunoAnt = $aluno->getEmail();
					$this->setAuditoria('Aluno', 'E-mail', $alunoAnt, $data->email);
				}
				$aluno->setEmail($data->email);
			}
			if (property_exists($data, 'id_religiao')){
				if ($data->id_religiao > 0){
					if($alteracao==1){
						$alunoAnt = $aluno->getIdReligiao();
						$this->setAuditoria('Aluno', 'Religião', $alunoAnt, $data->id_religiao);
					}
					$aluno->setIdReligiao($data->id_religiao);
				}
			}
			if (property_exists($data, 'falecido')){
				$falecido = 0;
				if ($data->falecido == true){
					$falecido = 1;
				}
				if($alteracao==1){
					$alunoAnt = $aluno->getFalecido();
					$falecidoAnt = 0;
					if ($alunoAnt == true){
						$falecidoAnt = 1;
					}
					$this->setAuditoria('Aluno', 'Falecido', $falecidoAnt, $falecido);
				}
				$aluno->setFalecido($falecido);
			}
			if (property_exists($data, 'id_cor_raca')){
				$aluno->setIdCorRaca($data->id_cor_raca);
			}

			$aluno->setAluno(1);

			if($alteracao!=1){
				$aluno->setIdTipoPessoa(1);
				$aluno->setDataCadastro(date("Y-m-d h:i:s"));
				$aluno->setAssociado(0);
				$aluno->setBeneficiario(0);
				$aluno->setParentesco(0);
				$aluno->setFuncionario(0);
				$aluno->setProprietario(0);
				$aluno->setDonatario(0);
				$aluno->setFornecedor(0);
			}

			$aluno->store();

			//******** Fim - Grava informações na Tabela de pessoa
			$id_pessoa = $aluno->getId();

			$pPessoa = new PapelPessoa();
			$pPessoa->setIdPessoa($id_pessoa);
			$pPessoa->setIdPapel(14);
			$pPessoa->setIdTipoEntidade(3);
			$pPessoa->store();

			// FRH - Solicitação Secretaria 201510190800
			$codigo_aluno = '';
			if(property_exists($data, 'codigo')){			

				if($data->codigo==''){
					$codigo_aluno = str_pad($id_pessoa, 7,"0", STR_PAD_LEFT).'/s';
					$aluno->setCodigo($codigo_aluno);
				}else{
					$codigo_aluno = $data->codigo;
					$aluno->setCodigo($data->codigo);
				}
				$aluno->store();
			}

			$nome = $aluno->getNome();
			
			$login_usuario = '';
			if($full != true){//Não gera login no caso de importação de alunos
				$login_usuario = $this->setUsuario($id_pessoa, $nome, $alteracao);//Gravar dados do sistema para gerar login do sistema
			}
			//******** Início - Grava informações na Tabela de Documento
			
			if (property_exists($data, 'rg')) { 
			//verificar se existe o documento, se existir coloca o id
				$aSearch = array();
				$aSearch['id_pessoa='] = $id_pessoa;
				$aSearch['id_tipo_documento='] = 1;
				$documento = fRecordSet::build('Documento', $aSearch);
				if($documento->count() > 0){
					foreach ($documento->getRecords() as $key => $value) {
						$id_documento = $value->getId();
					}
					$documento = new Documento($id_documento);
				}else{
					$documento = new Documento();
				}

				$dataRgEmissao = null;
				if (property_exists($data, 'data_rg_emissao')) { 
					if ($data->data_rg_emissao != '' && $data->data_rg_emissao != null){
						$dataRgEmissao = substr(implode("-", array_reverse(explode("/", $data->data_rg_emissao))), 0, 10);
					}
				}

				$documento->setIdTipoDocumento(1);
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($data->rg);
				$documento->setDataEmissao($dataRgEmissao);
				if (property_exists($data, 'estado_rg_emissor')) { 
					$documento->setEstadoEmissor($data->estado_rg_emissor);
				}
				if (property_exists($data, 'id_orgao_rg_emissor')) { 
					$documento->setIdOrgaoEmissor($data->id_orgao_rg_emissor);
				}
				$documento->setAtivo(1);
				$documento->store();
			}

			if (property_exists($data, 'cpf')) { //Grava CPF
				$aSearch = array();
				$aSearch['id_pessoa='] = $id_pessoa;
				$aSearch['id_tipo_documento='] = 2;
				$documento = fRecordSet::build('Documento', $aSearch);
				if($documento->count() > 0){
					foreach ($documento->getRecords() as $key => $value) {
						$id_documento = $value->getId();
					}
					$documento = new Documento($id_documento);
				}else{
					$documento = new Documento();
				}

				$cpf = str_replace(".", "", $data->cpf);
				$cpf = str_replace("-", "", $cpf);

				$documento->setIdTipoDocumento('2'); //CPF
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($cpf);
				$documento->setAtivo(1);
				$documento->store();
			}

			if (property_exists($data, 'rg_escolar')) { //Grava CPF
				$aSearch = array();
				$aSearch['id_pessoa='] = $id_pessoa;
				$aSearch['id_tipo_documento='] = 10;
				$documento = fRecordSet::build('Documento', $aSearch);
				if($documento->count() > 0){
					foreach ($documento->getRecords() as $key => $value) {
						$id_documento = $value->getId();
					}
					$documento = new Documento($id_documento);
				}else{
					$documento = new Documento();
				}

				$documento->setIdTipoDocumento('10'); //RG Escolar
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($data->rg_escolar);
				$documento->setAtivo(1);
				$documento->store();
			}

			if (property_exists($data, 'certidaonascimento')) { //Grava Certidão de Nascimento
				$aSearch = array();
				$aSearch['id_pessoa='] = $id_pessoa;
				$aSearch['id_tipo_documento='] = 9;
				$documento = fRecordSet::build('Documento', $aSearch);

				if($documento->count() > 0){
					foreach ($documento->getRecords() as $key => $value) {
						$id_documento = $value->getId();
					}
					$documento = new Documento($id_documento);
				}
				else{
					$documento = new Documento();
				}

				// $cpf = str_replace(".", "", $data->cpf);
				// $cpf = str_replace("-", "", $cpf);

				$documento->setIdTipoDocumento('9'); //Certidão de Nascimento
				$documento->setIdPessoa($id_pessoa);
				$documento->setNumero($data->certidaonascimento);
				$documento->setAtivo(1);
				$documento->store();
			}
			//******** Fim - Grava informações na Tabela de Documento

			

			/*
			tipo de correspondencia - tipo de contato
			necessidades especiais - tipo de necessidades especiais
			*/

			// =================================================
			// FRH - Gravar na tabela tipo_necessidades_especiais
			// =================================================

			$aSearch = array();
			$aSearch['id_pessoa='] = $data->id;

			$rs = fRecordSet::build('PessoaTipoNecessidadesEspeciais', $aSearch);
			foreach ($rs->getRecords() as $key => $value) {
				$tmp = new PessoaTipoNecessidadesEspeciais($value->getId());
				$tmp->delete();
			}

			if (property_exists($data, 'tiponecessidadeespecialselecionado')){
				foreach ($data->tiponecessidadeespecialselecionado as $key => $value) {

					$tne = new PessoaTipoNecessidadesEspeciais();				
					$tne->setIdPessoa($data->id);
					$tne->setIdTipoNecessidadesEspeciais($value->id);
					$tne->store();
				}
			} 			
			// =================================================
			// FRH - Gravar na tabela pessoa_tipo_contato
			// =================================================

			$aSearch = array();
			$aSearch['id_pessoa='] = $data->id;

			$rs = fRecordSet::build('PessoaTipoContato', $aSearch);
			foreach ($rs->getRecords() as $key => $value) {
				$tmp = new PessoaTipoContato($value->getId());
				$tmp->delete();
			}

			if (property_exists($data, 'tipocontatoselecionado')){
				foreach ($data->tipocontatoselecionado as $key => $value) {

					$ptc = new PessoaTipoContato();				
					$ptc->setIdPessoa($data->id);
					$ptc->setIdTipoContato($value->id);
					$ptc->store(); 				
				}
			} 
			// =================================================

			$arrMensagem = array('error' => 0, 'id' => $id_pessoa, 'login' => $login_usuario, 'codigo_aluno'=> $codigo_aluno, 'mensagem' => $mensagem);

			if($full == false){	
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}


		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'id' => null, 'mensagem' => $error);

			if($full == false){
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um Endereço para um aluno
	Método: POST
	URL: http://localhost/sig/api/index.php/enderecoaluno/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 03/03/2015
	*/

	public function postEnderecoAluno() {

		$data = json_decode(file_get_contents("php://input"));
		$id = "";

		if (property_exists($data, 'id')){
			$id = $data->id;
		}

	if ($id != "") { //Verifica se foi passado o Id da Pessoa, se sim, é feita a alteração.
		$endereco = new Endereco($id);      
		$mensagem = "Endereço alterado com sucesso!";
		$alteracao = 1;
	}
	else{
		$endereco = new Endereco();
		$mensagem = "Endereço incluído com sucesso!";
		$alteracao = 0;
	}

	try {
		//******** Grava informações na Tabela de Endereço
		if (property_exists($data, 'id_tipo_endereco')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getIdTipoEndereco();
			}
			$this->setAuditoria('Endereco', 'Tipo endereço', $enderecoAnt, $data->id_tipo_endereco);
			$endereco->setIdTipoEndereco($data->id_tipo_endereco);
		}
		

		if (property_exists($data, 'id_pais')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getIdPais();
			}
			$this->setAuditoria('Endereco', 'Id país', $enderecoAnt, $data->id_pais);
			$endereco->setIdPais($data->id_pais);
		}
		

		if (property_exists($data, 'id_pessoa')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getIdPessoa();
			}
			$this->setAuditoria('Endereco', 'Id Pessoa', $enderecoAnt, $data->id_pessoa);
			$endereco->setIdPessoa($data->id_pessoa);
		}


		if (property_exists($data, 'logradouro')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getLogradouro();
			}
			$this->setAuditoria('Endereco', 'Logradouro', $enderecoAnt, $data->logradouro);  
			$endereco->setLogradouro($data->logradouro);      
		}
		

		if (property_exists($data, 'numero')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getNumero();
			}
			$this->setAuditoria('Endereco', 'Numero', $enderecoAnt, $data->numero); 
			$endereco->setNumero($data->numero);
		}
		

		if (property_exists($data, 'bairro')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getBairro();
			}
			$this->setAuditoria('Endereco', 'Bairro', $enderecoAnt, $data->bairro);
			$endereco->setBairro($data->bairro);
		}        

		if (property_exists($data, 'complemento')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getComplemento();
			}
			$this->setAuditoria('Endereco', 'Complemento', $enderecoAnt, $data->complemento);
			$endereco->setComplemento($data->complemento);
		}

		if (property_exists($data, 'cidade')){

			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getCidade();
			}
			$this->setAuditoria('Endereco', 'Cidade', $enderecoAnt, $data->cidade);
			$endereco->setCidade($data->cidade);
		}

		if (property_exists($data, 'estado')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getEstado();
			}
			$this->setAuditoria('Endereco', 'Estado', $enderecoAnt, $data->estado);
			$endereco->setEstado($data->estado);
		}

		//montar verificação se principal, se for principal, zerar os outros que forem principal
		if (property_exists($data, 'principal')){
			if ( $data->principal == true ){
				$aSearch = array();
				$aSearch['id_pessoa='] = $data->id_pessoa;
				$aSearch['principal='] = 1;
				$aSearch['id!='] = $endereco->getId();
				$enderecoTemp = fRecordSet::build('Endereco', $aSearch);
				foreach ($enderecoTemp->getRecords() as $key => $value) {
					$pessoaEndereco = new Endereco($value->getId());
					$pessoaEndereco->setPrincipal(0);
					$pessoaEndereco->store();
				}
				$principal = 1;
			} else {
				$principal = 0;
			}
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getPrincipal();
			}
			$this->setAuditoria('Endereco', 'Principal', $enderecoAnt, $principal);
			$endereco->setPrincipal($principal);
		} else {
			$endereco->setPrincipal(0);
		}


		if (property_exists($data, 'ativo')){
			$enderecoAnt = '';
			if($alteracao==1){
				$enderecoAnt = $endereco->getAtivo();
			}
			$this->setAuditoria('Endereco', 'Ativo', $enderecoAnt, $data->ativo);
			$endereco->setAtivo($data->ativo);
		}

		if (property_exists($data, 'cep'))
			$endereco->setCodigoPostal($data->cep);

		if (property_exists($data, 'observacao'))
			$endereco->setObservacao($data->observacao);
		if($alteracao==0){
			$endereco->setDataCadastro(date('Y-m-d H:i:s'));
		}
		if($alteracao!=1){
			$endereco->setAtivo(1);
		}

		$endereco->store();

		$id_endereco = $endereco->getId();

		//******** Fim - Grava informações na Tabela de Endereço            
		$arrMensagem = array('error' => 0, 'id' => $id_endereco, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die();
	}
}

/*
	Módulo: Escola
	Descrição: Obter Aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/aluno/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	
	Data de Alteração: 04/03/2015
	Alterado por: Ricardo S. Nakadomari

	Data de Alteração: 11/03/2015
	Alterado por: Ricardo S. Nakadomari
	Alterado a forma de trazer a descrição do orgão emissor, pois estava sendo retornado o objeto todo.
	*/
	public function getAluno($id = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id != ""){            
			$aSearch['id='] = $id;
		}

		$pessoa = fRecordSet::build('Pessoa', $aSearch, array('nome' => 'asc'));

		if ($full == false) {
			$aPessoa = array();

			foreach ($pessoa as $key => $value) {
		//Busca dados das tabelas de assistencia
				$resultEstadoCivil = new EstadoCivil($value->getIdEstadoCivil());
				$resultReligiao = $this->getReligiao('', $value->getIdReligiao(), true);
				$religiao = '';

				if($resultReligiao['error']==0){
					$religiao = $resultReligiao['religiao'][0]['descricao'];
				}

		//Ajusta datas a serem apresentadas no sistema
				$dataNascimento = '';
				if ($value->getDataNascimento() != null) {
					//$dataNascimento = $value->getDataNascimento()->format('Y-m-d') . " 00:00:00";
					$dataNascimento = self::formataData($value->getDataNascimento());
				}
				if ($value->getDataCadastro() != null) {
					//$dataCadastro = $value->getDataCadastro()->format('Y-m-d') . " 00:00:00";
					$dataCadastro = self::formataData($value->getDataCadastro());
				}

		// Início - Busca dados de documento do aluno
				$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value->getId(), "", true, 1);
				$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getId(), "", true, 2);

				$rg = '';
				$data_rg_emissao = "";
				$estado_rg_emissor = "";
				$id_orgao_rg_emissor = "";
				$orgao_rg_emissor = "";
				$cpf = "";
				if ( !isset($resultDocumentoPessoaRG[0]['error']) ) {
					$rg = $resultDocumentoPessoaRG[0]['numero'];
					$data_rg_emissao = $resultDocumentoPessoaRG[0]['data_emissao'];
					$estado_rg_emissor = $resultDocumentoPessoaRG[0]['estado_emissor'];
					$id_orgao_rg_emissor = $resultDocumentoPessoaRG[0]['id_orgao_emissor'];
					$orgao_rg_emissor = $resultDocumentoPessoaRG[0]['orgao_emissor'];
				}
				if ( !isset($resultDocumentoPessoaCPF[0]["error"]) ) {
					$cpf = $resultDocumentoPessoaCPF[0]['numero'];
				}
		// Fim - Busca dados de documento do aluno

		//Busca necessidades especiais do aluno
				$resultTipoNecessidadesEspeciais = $this->getTipoNecessidadesEspeciaisPessoa($value->getId(), "",true);
		//Busca formas de contato com o aluno
				$resultTipoContato = $this->getTipoContatoPessoa($value->getId(), "",true);

				$login = '';
				$resultUsuario = $this->getUsuario(0, $value->getId(), true);
				if($resultUsuario['error'] == 0){
					$login = $resultUsuario['usuario']['0']['login'];
				}

				$aPessoa[] = array(
					'id' => $value->getId(),
					'nome' => $value->getNome(),
					'data_nascimento' => $dataNascimento,
					'naturalidade' => $value->getNaturalidade(),
					'estado_nascimento' => $value->getEstadoNascimento(),
					'nacionalidade' => $value->getNacionalidade(),
					'id_religiao' => $value->getIdReligiao(),
					'religiao' => $religiao,
					'id_estado_civil' => $value->getIdEstadoCivil(),
					'estado_civil' => $resultEstadoCivil->getDescricao(),
					'sexo' => $value->getSexo(),
					'renda' => $value->getRenda(),
					'codigo' => $value->getCodigo(),
					'foto' => $value->getFoto(),
					'email' => $value->getEmail(),
					'data_cadastro' => $dataCadastro,
					'falecido' => $value->getFalecido(),
					'aluno' => $value->getAluno(),
					'login' => $login,
					'rg' => $rg,
					'data_rg_emissao' => $data_rg_emissao,
					'estado_rg_emissor' => $estado_rg_emissor,
					'id_orgao_rg_emissor' => $id_orgao_rg_emissor,
					'orgao_rg_emissor' => $orgao_rg_emissor,
					'cpf' => $cpf,
					'tipo_necessidades_especiais' => $resultTipoNecessidadesEspeciais,
					'tipo_contato' => $resultTipoContato
					);
}

if (count($aPessoa) == 0) {
	$aPessoa[] = array(
		'error' => "-1",
		'mensagem' => "Nenhum aluno encontrado."
		);
	fJSON::output($aPessoa);
	die();
}
else {
	$aPessoa = array(
		'error' => 0,
		'pessoa' => $aPessoa
		);
	fJSON::output($aPessoa);
}
}else {
	var_dump($pessoa);
	return $pessoa[0];
}
}

/*
	Módulo: Escola
	Descrição: Obter Tipo de Necessidades Especiais do Aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/tiponecessidadesespeciaispessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 04/03/2015
	Alterado por: Ricardo S. Nakadomari
*/
	public function getTipoNecessidadesEspeciaisPessoa($id_pessoa = "", $id_tiponecessidadesespeciais = "", $full = false) {
		$this->acessoApi();
	//configura dados de busca
		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}
		if ($id_tiponecessidadesespeciais != "") {
			$aSearch['id_tipo_necessidades_especiais='] = $id_tiponecessidadesespeciais;
		}
	//Busca dados dos filtros utilizados
		$tipoNecessidadesEspeciaisPessoa = fRecordSet::build('PessoaTipoNecessidadesEspeciais', $aSearch);
		$aTipoNecessidadesEspeciaisPessoa = array();
	//Os valores filtrados não retornaram valor
		if ($tipoNecessidadesEspeciaisPessoa->count() == 0) {
			$aTipoNecessidadesEspeciaisPessoa = array(
				'error' => "-1",
				'mensagem' => "Nenhum tipo de necessidades especiais encontrado."
				);
		}
		else {
		//retornou valor montar a o array de dados
			foreach ($tipoNecessidadesEspeciaisPessoa->getRecords() as $key => $value) {
		//busca a descrição dos itens selecionados
				$resultTipoNecessidadesEspeciais = $this->getTipoNecessidadesEspeciais("",$value->getIdTipoNecessidadesEspeciais(), true);
				$aTipoNecessidadesEspeciaisPessoa[] = array(
					'id' => $value->getIdTipoNecessidadesEspeciais(),
					'descricao' => $resultTipoNecessidadesEspeciais->getDescricao()
					);
			}
		}
		if ($full == false) {
			fJSON::output($aTipoNecessidadesEspeciaisPessoa);
		}
		else {
			return $aTipoNecessidadesEspeciaisPessoa;
		}
	}

/*
	Módulo: Escola
	Descrição: Obter Tipo de Contato do Aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/tipocontatopessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 04/03/2015
	Alterado por: Ricardo S. Nakadomari
*/
	public function getTipoContatoPessoa($id_pessoa = "", $id_tipocontato = "", $full = false) {
		$this->acessoApi();
	//configura dados de busca
		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa='] = $id_pessoa;
		}
		if ($id_tipocontato != "") {
			$aSearch['id_tipo_contato='] = $id_tipocontato;
		}
	//Busca dados dos filtros utilizados
		$tipoContatoPessoa = fRecordSet::build('PessoaTipoContato', $aSearch);
		$aTipoContatoPessoa = array();
	//Os valores filtrados não retornaram valor
		if ($tipoContatoPessoa->count() == 0) {
			$aTipoContatoPessoa = array(
				'error' => "-1",
				'mensagem' => "Nenhum tipo de contato encontrado."
				);
		}
		else {
		//retornou valor montar a o array de dados
			foreach ($tipoContatoPessoa->getRecords() as $key => $value) {
		//busca a descrição dos itens selecionados
				$resultTipoContato = $this->getTipoContato("", $value->getIdTipoContato(), true);
				$aTipoContatoPessoa[] = array(
					'id' => $value->getIdTipoContato(),
					'descricao' => $resultTipoContato->getDescricao()
					);
			}
		}
		if ($full == false) {
			fJSON::output($aTipoContatoPessoa);
		}
		else {
			return $aTipoContatoPessoa;
		}
	}

	/*
	Módulo: Financeiro
	Descrição: Salvar moedas
	Método: GET
	URL: http://localhost/sig/api/index.php/moeda/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/03/2015
	Autor: Daniel Swater
	Versão: 1.0
*/

	public function postMoeda() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$moeda = new Moeda($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Moeda alterada com sucesso!";
			$alteracao=1;
		}else{
			$moeda = new Moeda();
			$mensagem = "Moeda incluída com sucesso!";
			$alteracao=0;
		}


		try {

			if (property_exists($data, 'moeda')){
				$moedaAnt = '';
				if($alteracao==1){
					$moedaAnt = $moeda->getMoeda();
					$this->setAuditoria('Moeda', 'Descricao', $moedaAnt, $data->moeda,$data->id);
					$moeda->setMoeda($data->moeda);          
				} else {
					$this->setAuditoria('Moeda', 'Descricao', $moedaAnt, $data->moeda);
					$moeda->setMoeda($data->moeda);
				}
			}


			if (property_exists($data, 'ativo')){
				$moeda->setAtivo($data->ativo);
			}

			if(property_exists($data, 'simbolo')){
				$moeda->setSimbolo($data->simbolo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['moeda='] = $data->moeda;
				$countDescricao = fRecordset::build('Moeda', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A moeda já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$moeda->store();
				}     
			} else {
				$moeda->store();
			} 
		//******** Fim - Grava informações na Tabela de grupoocorrencia
			$id_moeda = $moeda->getId();

			$arrMensagem = array('error' => 0, 'id_moeda' => $id_moeda, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Financeiro
	Descrição: Listar moedas
	Método: GET
	URL: http://localhost/sig/api/index.php/moeda/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/03/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getMoeda($id="",$full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$moeda = fRecordSet::build('Moeda', $aSearch, array('moeda' => 'asc'));

		if ($full == false) {

			$aMoeda = array();

			foreach ($moeda->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aMoeda[] = array(          
					'id' => $value->getId(),
					'id_moeda' => $value->getId(),
					'moeda' => $value->getMoeda(),
					'simbolo' => $value->getSimbolo(),          
					'ativo' => $value->getAtivo(),
					'status' => $status      
					);
			}

			if (count($aMoeda) == 0) {
				$aMoeda[] = array('error' => -1, 'mensagem' => "Nenhuma moeda encontrado.");
			} else {
				$aMoeda = array(
					'error' => 0,
					'moeda' => $aMoeda
					);  
			}

			fJSON::output($aMoeda);
		}
		else {
			return $moeda[0];
		}    
	}

	/*
	Módulo: Mesquita
	Descrição: Cadastrar uma nova Forma de Tratamento
	Método: GET
	URL: http://localhost/sig/api/index.php/formatratamento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/03/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 06/03/2015
	*/

	public function postFormaTratamento() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$formaTratamento = new FormaTratamento($data->id);
			$mensagem = "Forma de Tratamento alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$formaTratamento = new FormaTratamento();
			$mensagem = "Forma de Tratamento incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
		//******** Grava informações na Tabela de Forma Tratamento
			if (property_exists($data, 'descricao')){
				$descricaoAnt = '';
				if($alteracao==1){
					$descricaoAnt = $formaTratamento->getDescricao();
				}
				$this->setAuditoria('FormaTratamento', 'Descricao', $descricaoAnt, $data->descricao, $id);

				$formaTratamento->setDescricao($data->descricao);
			}

			if (property_exists($data, 'abreviacao')){
				$abreviacaoAnt = '';
				if($alteracao==1){
					$abreviacaoAnt = $formaTratamento->getAbreviacao();
				}
				$this->setAuditoria('FormaTratamento', 'Abreviacao', $abreviacaoAnt, $data->abreviacao, $id);

				$formaTratamento->setAbreviacao($data->abreviacao);
			}

			if (property_exists($data, 'ativo')){
				$formaTratamento->setAtivo($data->ativo);
			}

			$formaTratamento->store();

		//******** Fim - Grava informações na Tabela de Forma Tratamento

			$id_forma_tratamento = $formaTratamento->getId();

			$arrMensagem = array('error' => 0, 'id_forma_tratamento' => $id_forma_tratamento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Forma de Tratamento
	Método: GET
	URL: http://localhost/sig/api/index.php/formatratamento/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/03/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 06/03/2015
	*/

	public function getFormaTratamento($id_consulta="", $id="", $full = false) {
		$aSearch = "";
		if ($id != "") {
			$aSearch.='id=' . $id;
		}
		
		$strQueryformaTratamento = "SELECT * FROM forma_tratamento WHERE 1 ".$aSearch." order by descricao asc";
		$formaTratamento = $this->_getDb()->query($strQueryformaTratamento);

		$aFormaTratamento = array();

		if (($id_consulta != 1) && ($id=="")) {
			$aFormaTratamento[] = array(
				'tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Forma de Tratamento",
				'ativo' => "",
				'status' => ""
				);
		}      

		$aStatus = array("Inativo", "Ativo");

		foreach ($formaTratamento as $key => $value) {     

			$aFormaTratamento[] = array(
				'tipo' => "Formas de Tratamento",
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'abreviacao' => $value['abreviacao'],
				'ativo' => $value['ativo'],
				'status' => $aStatus[$value['ativo']],
				); 
		}

		$formaTratamento = $this->_getDb()->close();

		if (count($aFormaTratamento) == 0) {
			$aFormaTratamento[] = array('error' => -1, 'mensagem' => "Nenhuma Forma de Tratamento encontrada.");
			fJSON::output($aFormaTratamento);
			die();
		}

		$aFormaTratamento = array(
			'error' => 0, 
			'forma_tratamento' => $aFormaTratamento
		);          

		if ($full == false) {
			fJSON::output($aFormaTratamento);
		}
		else {
			return $aFormaTratamento;
		}
	} 

	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfile
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 09/03/2015
	Autor: Rafael Carvalho
	Versão: 1.0
	Data de Alteração: 09/03/2015
	*/

	public function uploadfileDocumento($id, $tipo) {

		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/pessoa/";

		$ext = explode('.', $_FILES['file']['name']);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$target_dir = $dir . $date->getTimestamp() .'_' .$tipo . '.' . $extensao;

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {

			$documento = new Documento($id);

			$documentoAnt = $documento->getArquivo();
			if(file_exists ($dir .$documentoAnt) && $documentoAnt != ""){
		unlink($dir .$documentoAnt);//apaga a foto anterior
	}

		$documento->setArquivo($date->getTimestamp() .'_' .$tipo . '.' . $extensao); //Armazena o nome da imagem no objeto pessoa
		$documento->store();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'arquivo submetido com sucesso';
		$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao;
	}else{
		$messagem['error'] = -1;
		$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
	}

	fJSON::output($messagem);
}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Disciplina
	Método: GET
	URL: http://localhost/sig/api/index.php/disciplina/<disciplina>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function getDisciplina($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$disciplina = fRecordSet::build('Disciplina', $aSearch, array('nome' => 'asc'));

		if ($full == false) {

			$aDisciplina = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aDisciplina[] = array('tipo'=>"Ação",
					'id' => "-1",
					'nome' => ":: Cadastrar Nova Disciplina",
					'ativo' => ""
					);   
			}      

			foreach ($disciplina->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aDisciplina[] = array(
					'tipo' => "Disciplina",
					'id' => $value->getId(),
					'nome' => $value->getNome(),
					'nome_abreviado' => $value->getNomeAbreviado(),
					'observacao' => $value->getObservacao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aDisciplina) == 0) {
				$aDisciplina[] = array('error' => -1, 'mensagem' => "Nenhuma disciplina encontrada.");
			} else {
				$aDisciplina = array(
					'error' => 0,
					'disciplina' => $aDisciplina
					);  
			}


			fJSON::output($aDisciplina);
		}
		else {
			return $disciplina[0];
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar uma nova disciplina
	Método: POST
	URL: http://localhost/sig/api/index.php/disciplina/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function postDisciplina() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$disciplina = new Disciplina($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Disciplina alterada com sucesso!";
			$alteracao=1;
		}else{
			$disciplina = new Disciplina();
			$mensagem = "Disciplina incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de disciplina
			if (property_exists($data, 'nome')){

				$disciplinaAnt = '';
				if($alteracao==1){
					$disciplinaAnt = $disciplina->getNome();
				}

				$disciplina->setNome($data->nome);
				$this->setAuditoria('Disciplina', 'Nome', $disciplinaAnt, $data->nome);
			}
			if (property_exists($data, 'nome_abreviado')){

				$disciplinaAnt = '';
				if($alteracao==1){
					$disciplinaAnt = $disciplina->getNomeAbreviado();
				}

				$disciplina->setNomeAbreviado($data->nome_abreviado);
				$this->setAuditoria('Disciplina', 'Nome Abreviado', $disciplinaAnt, $data->nome_abreviado);
			}
			if (property_exists($data, 'observacao')){

				$disciplinaAnt = '';
				if($alteracao==1){
					$disciplinaAnt = $disciplina->getObservacao();
				}

				$disciplina->setObservacao($data->observacao);
				$this->setAuditoria('Disciplina', 'Observação', $disciplinaAnt, $data->observacao);
			}
			if (property_exists($data, 'ativo')){
				$disciplina->setAtivo($data->ativo);
			}

			if (property_exists($data, 'valor_hora')){
				$disciplina->setValorHora($data->valor_hora);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['nome='] = $data->nome;
				$countNome = fRecordset::build('Disciplina', $aSearch);

				if($countNome->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A disciplina já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$disciplina->store();
				}     
			} else {
				$disciplina->store();
			} 
		//******** Fim - Grava informações na Tabela de disciplina
			$id_disciplina = $disciplina->getId();

			$arrMensagem = array('error' => 0, 'id_disciplina' => $id_disciplina, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Escola
	Descrição: Obter Lista de Período de Aula
	Método: GET
	URL: http://localhost/sig/api/index.php/periodoaula/<periodoaula>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function getPeriodoAula($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$periodoAula = fRecordSet::build('PeriodoAula', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aPeriodoAula = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aPeriodoAula[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Período de Aula",
					'ativo' => ""
					);   
			}      

			foreach ($periodoAula as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aPeriodoAula[] = array(
					'tipo' => "Período de Aula",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'hora_inicio' => $value->getHoraInicio(),
					'hora_fim' => $value->getHoraFim(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aPeriodoAula) == 0) {
				$aPeriodoAula[] = array('error' => -1, 'mensagem' => "Nenhum Período de Aula encontrado.");
			} else {
				$aPeriodoAula = array(
					'error' => 0,
					'periodo_aula' => $aPeriodoAula
					);  
			}


			fJSON::output($aPeriodoAula);
		}
		else {
			return $periodoAula;
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar um novo período de aula
	Método: POST
	URL: http://localhost/sig/api/index.php/periodoaula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function postPeriodoAula() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$periodoAula = new PeriodoAula($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Período de Aula alterado com sucesso!";
			$alteracao=1;
		}else{
			$periodoAula = new PeriodoAula();
			$mensagem = "Período de Aula incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de PeriodoAula
			if (property_exists($data, 'descricao')){

				$PeriodoAulaAnt = '';
				if($alteracao==1){
					$PeriodoAulaAnt = $periodoAula->getDescricao();
				}

				$periodoAula->setDescricao($data->descricao);
				$this->setAuditoria('Período de Aula', 'Descrição', $PeriodoAulaAnt, $data->descricao);
			}
			if (property_exists($data, 'hora_inicio')){

				$PeriodoAulaAnt = '';
				if($alteracao==1){
					$PeriodoAulaAnt = $periodoAula->getHoraInicio();
				}

				$periodoAula->setHoraInicio($data->hora_inicio);
				$this->setAuditoria('Período de Aula', 'Hora de Início', $PeriodoAulaAnt, $data->hora_inicio);
			}
			if (property_exists($data, 'hora_fim')){

				$PeriodoAulaAnt = '';
				if($alteracao==1){
					$PeriodoAulaAnt = $periodoAula->getHoraFim();
				}

				$periodoAula->setHoraFim($data->hora_fim);
				$this->setAuditoria('Período de Aula', 'Hora de Fim', $PeriodoAulaAnt, $data->hora_fim);
			}
			if (property_exists($data, 'ativo')){
				$periodoAula->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

//montar validação dentro de periodo
				$aSearch['descricao='] = $data->descricao;
				$aSearch['hora_inicio='] = $data->hora_inicio;
				$aSearch['hora_fim='] = $data->hora_fim;
				$countPeriodo= fRecordset::build('PeriodoAula', $aSearch);

				if($countPeriodo->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Período de Aula já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$periodoAula->store();
				}     
			} else {
				$periodoAula->store();
			} 
		//******** Fim - Grava informações na Tabela de PeriodoAula
			$id_periodo_aula = $periodoAula->getId();

			$arrMensagem = array('error' => 0, 'id_periodo_aula' => $id_periodo_aula, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Escola
	Descrição: Obter Lista de Doenças
	Método: GET
	URL: http://localhost/sig/api/index.php/doenca/<doenca>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function getDoenca($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$doenca = fRecordSet::build('Doenca', $aSearch, array('nome' => 'asc'));

		if ($full == false) {

			$aDoenca = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aDoenca[] = array('tipo'=>"Ação",
					'id' => "-1",
					'nome' => ":: Cadastrar Nova Doença",
					'ativo' => ""
					);   
			}      

			foreach ($doenca->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        
				if ($value->getInterfereRendimento()==1) {
					$statusInterfereRendimento = "Sim";
				} else if ($value->getInterfereRendimento()==0) {
					$statusInterfereRendimento = "Não";
				}        

				$aDoenca[] = array(
					'tipo' => "Doença",
					'id' => $value->getId(),
					'nome' => $value->getNome(),
					'interfere_rendimento' => $value->getInterfereRendimento(),
					'status_interfere_rendimento' => $statusInterfereRendimento,
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aDoenca) == 0) {
				$aDoenca[] = array('error' => -1, 'mensagem' => "Nenhuma Doença encontrada.");
			} else {
				$aDoenca = array(
					'error' => 0,
					'doenca' => $aDoenca
					);  
			}


			fJSON::output($aDoenca);
		}
		else {
			return $doenca[0];
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar uma nova Doença
	Método: POST
	URL: http://localhost/sig/api/index.php/doenca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 07/03/2015
	*/

	public function postDoenca() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$doenca = new Doenca($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Doença alterada com sucesso!";
			$alteracao=1;
		}else{
			$doenca = new Doenca();
			$mensagem = "Doença incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Doença
			if (property_exists($data, 'nome')){

				$DoencaAnt = '';
				if($alteracao==1){
					$DoencaAnt = $doenca->getNome();
				}

				$doenca->setNome($data->nome);
				$this->setAuditoria('Doença', 'Nome', $DoencaAnt, $data->nome);
			}
			if (property_exists($data, 'interfere_rendimento')){
				$doenca->setInterfereRendimento($data->interfere_rendimento);
			}
			if (property_exists($data, 'ativo')){
				$doenca->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['nome='] = $data->nome;
				$countNome = fRecordset::build('Doenca', $aSearch);

				if($countNome->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A Doença já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$doenca->store();
				}     
			} else {
				$doenca->store();
			} 
		//******** Fim - Grava informações na Tabela de Doença
			$id_doenca = $doenca->getId();

			$arrMensagem = array('error' => 0, 'id_doenca' => $id_doenca, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Escola
	Descrição: Obter Lista de Convênios
	Método: GET
	URL: http://localhost/sig/api/index.php/convenio/<convenio>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 10/03/2015
	Autor: Ricardo S. Nakadomari
	Adicionando retorno do campo numero_telefone que seria o telefone com o DDD
	*/

	public function getConvenio($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		} 

		$convenio = fRecordSet::build('Convenio', $aSearch, array('descricao' => 'asc'));

		if ($full == false) { 
			$aConvenio = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aConvenio[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Convênio",
					'ativo' => ""
					);   
			}      

			foreach ($convenio->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aConvenio[] = array(
					'tipo' => "Convênio",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ddd' => $value->getDdd(),
					'telefone' => $value->getTelefone(),
					'numero_telefone' => $value->getDdd() . $value->getTelefone(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aConvenio) == 0) {
				$aConvenio[] = array('error' => -1, 'mensagem' => "Nenhum Convênio encontrado.");
			} else {
				$aConvenio = array(
					'error' => 0,
					'convenio' => $aConvenio
					);  
			}

			fJSON::output($aConvenio);
		}
		else {
			return $convenio[0];
		}    
	}  

/*
	Módulo: Escola
	Descrição: Cadastrar uma nova Convênio
	Método: POST
	URL: http://localhost/sig/api/index.php/convenio/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	Data de Alteração: 10/03/2015
	Autor: Ricardo S. Nakadomari
	Adição de tratamento para o teelfone com o DDD junto
	*/

	public function postConvenio() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$convenio = new Convenio($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Convênio alterado com sucesso!";
			$alteracao=1;
		}else{
			$convenio = new Convenio();
			$mensagem = "Convênio incluído com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Convênio
			if (property_exists($data, 'descricao')){

				$ConvenioAnt = '';
				if($alteracao==1){
					$ConvenioAnt = $convenio->getDescricao();
				}

				$convenio->setDescricao($data->descricao);
				$this->setAuditoria('Convênio', 'Descrição', $ConvenioAnt, $data->descricao);
			}

			if (property_exists($data, 'numero_telefone')) {
				if (property_exists($data, 'numero_telefone')){
					$numero_telefone = $data->numero_telefone;
					$ddd = substr($numero_telefone, 0,3);
					$numero = substr($numero_telefone, 3);
					$ConvenioAnt = '';
					if($alteracao==1){
						$ConvenioAnt = $convenio->getTelefone();
					}
					$this->setAuditoria('Convênio', 'Numero', $ConvenioAnt, $numero);
					$convenio->setTelefone($numero);

					$ConvenioAnt = '';
					if($alteracao==1){
						$ConvenioAnt = $convenio->getDdd();
					}
					$this->setAuditoria('Convênio', 'DDD', $ConvenioAnt, $ddd);
					$convenio->setDdd($ddd);
				}
			} else {
				if (property_exists($data, 'ddd')){
					$ConvenioAnt = '';
					if($alteracao==1){
						$ConvenioAnt = $convenio->getDdd();
					}

					$convenio->setDdd($data->ddd);
					$this->setAuditoria('Convênio', 'DDD', $ConvenioAnt, $data->ddd);
				}
				if (property_exists($data, 'telefone')){

					$ConvenioAnt = '';
					if($alteracao==1){
						$ConvenioAnt = $convenio->getTelefone();
					}
					$convenio->setTelefone($data->telefone);
					$this->setAuditoria('Convênio', 'Telefone', $ConvenioAnt, $data->telefone);
				}
			}

			if (property_exists($data, 'ativo')){
				$convenio->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countNome = fRecordset::build('Convenio', $aSearch);

				if($countNome->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Convênio já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$convenio->store();
				}     
			} else {
				$convenio->store();
			} 
		//******** Fim - Grava informações na Tabela de Doença
			$id_convenio = $convenio->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_convenio, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Doação
	Descrição: Cadastro de laudo
	Método: GET
	URL: http://localhost/sig/api/index.php/laudo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/03/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 10/03/2015
	*/

	public function postPessoaLaudo() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$laudo = new PessoaLaudo($data->id);
			$mensagem = "Laudo alterada com sucesso!";
			$alteracao=1;
		}else{
			$laudo = new PessoaLaudo();
			$mensagem = "Laudo incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Laudo
			if (property_exists($data, 'id_pessoa')){
				$idPessoaAnt = '';
				if($alteracao==1){
					$idPessoaAnt = $laudo->getIdPessoa();
				}
				$this->setAuditoria('PessoaLaudo', 'IdPessoa', $idPessoaAnt, $data->id_pessoa);
				$laudo->setIdPessoa($data->id_pessoa);
			}

			if (property_exists($data, 'id_pessoa_assistente')){
				$idPessoaAssistenteAnt = '';
				if($alteracao==1){
					$idPessoaAssistenteAnt = $laudo->getIdPessoaAssistente();
				}
				$this->setAuditoria('PessoaLaudo', 'IdPessoaAssistente', $idPessoaAssistenteAnt, $data->id_pessoa_assistente);
				$laudo->setIdPessoaAssistente($data->id_pessoa_assistente);
			}

			if (property_exists($data, 'data_cadastro')){
				$dataCadastroAnt = '';
				if($alteracao==1){
					$dataCadastroAnt = $laudo->getDataCadastro();
				}
				$this->setAuditoria('PessoaLaudo', 'DataCadastro', $dataCadastroAnt, $data->data_cadastro);
				$laudo->setDataCadastro($data->data_cadastro);
			}

			if (property_exists($data, 'laudo')){
				$laudoAnt = '';
				if($alteracao==1){
					$laudoAnt = $laudo->getLaudo();
				}
				$this->setAuditoria('PessoaLaudo', 'Laudo', $laudoAnt, $data->laudo);
				$laudo->setLaudo($data->laudo);
			}

			$laudo->setStatus($data->status);

			$laudo->store();

			if($laudo->getStatus() == 1){
				$pessoa = new Pessoa($data->id_pessoa);

				$this->setAuditoria('Pessoa', 'ativo', $pessoa->getAtivo(), 1, $data->id_pessoa);
				$pessoa->setAtivo(1);

				$pessoa->store();
			}

		//******** Fim - Grava informações na Tabela de Laudo

			$id_pessoa_laudo = $laudo->getId();

			$arrMensagem = array('error' => 0, 'id_pessoa_laudo' => $id_pessoa_laudo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

/*
Módulo: Doação
Descrição: Obter Lista de Doação
Método: GET
URL: http://localhost/sig/api/index.php/laudo/
Autenticação: Não
Resposta: JSON
Data de Criação: 10/03/2015
Autor: Fabio da Silva
Versão: 1.0
Data de Alteração: 10/03/2015
*/
public function getPessoaLaudo($id_pessoa = "", $full = false) {
	$aSearch = array();
	if ($id_pessoa != "") {
		$aSearch['id_pessoa='] = $id_pessoa;
	}

	$laudo = fRecordSet::build('PessoaLaudo', $aSearch);

	if ($full == false) {
		$pessoa = fRecordSet::build('Pessoa');
		foreach ($pessoa->getRecords() as $key => $value) {
			$aPessoa[$value->getId()] = array(
				'nome' => $value->getNome(),
				);
		}

		$aLaudo = array();
		$status = array('Aprovado', 'Reprovado');

		foreach ($laudo as $key => $value) {
			$data_cadastro = '';
			if ($value->getDataCadastro() != null) {
				$data_cadastro = $value->getDataCadastro()->format('Y-m-d');
			}

			$aSearch = array();
			$aSearch['id='] = $value->getId(); 

			$aLaudo[] = array(
				'id' => $value->getId(),
				'id_pessoa' => $value->getIdPessoa(),
				'pessoa' => $this->keyExists($value->getIdPessoa(), $aPessoa, 'nome'),
				'id_pessoa_assistente' => $value->getIdPessoaAssistente(),
				'pessoa_assistente' => $this->keyExists($value->getIdPessoaAssistente(), $aPessoa, 'nome'),
				'laudo' => $value->getLaudo(),
				'data_cadastro' => $data_cadastro,
				'status' => $value->getStatus(),
				'status_descricao' => $status[$value->getStatus()],
				);
		}

		if (count($aLaudo) == 0) {
			$aLaudo = array('error' => -1, 'mensagem' => "Nenhum laudo encontrado.");
		} else {
			$aLaudo = array('error' => 0, 'laudo' => $aLaudo);
		}

		if ($full == false) {
			fJSON::output($aLaudo);
		}
		else {
			return $aLaudo;
		}				
	}
}

/*
	Módulo: Mesquita
	Descrição: Cadastrar Contatos de Entidades
	Método: POST
	URL: http://localhost/sig/api/index.php/pessoa_contato/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/03/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/03/2015
	*/

	public function postPessoaContato() {
		$pessoaContato = json_decode(file_get_contents("php://input"));       

		$pessoa = new Pessoa();

		try {
		//******** Grava informações na Tabela de Pessoa
			$id_pessoa = $pessoaContato->id_pessoa;

			$pessoa->setIdTipoPessoa(1);

			if (property_exists($pessoaContato, 'nome')){
				$pessoa->setNome($pessoaContato->nome);
			}
			if (property_exists($pessoaContato, 'data_nascimento')){
				$pessoa->setDataNascimento(implode("-", array_reverse(explode("/", $pessoaContato->data_nascimento))));
			}
			if (property_exists($pessoaContato, 'sexo')){
				$pessoa->setSexo($pessoaContato->sexo);
			}
			if (property_exists($pessoaContato, 'email')){
				$pessoa->setEmail($pessoaContato->email);
			}

			if (property_exists($pessoaContato, 'enviar_convite')){
				$pessoa->setEnviarConvite($pessoaContato->enviar_convite);                                                  
			}  

			$pessoa->setAssociado(0);
			$pessoa->setBeneficiario(0);
			$pessoa->setParentesco(0);
			$pessoa->setFuncionario(0);
			$pessoa->setProprietario(0);
			$pessoa->setDonatario(0);
			$pessoa->setFornecedor(0);
			$pessoa->setEntidade(0);
			$pessoa->setAluno(0);
			$pessoa->setAtivo(1);          

			$pessoa->setDataCadastro(date('Y-m-d H:i:s'));

			$pessoa->store();

		//******** Fim - Grava informações na Tabela de Pessoa      
		$id_pessoa_contato = $pessoa->getId(); //Recupera o Id da Pessoa Inserida

		//******** Grava informações na Tabela de pessoa_contato
		$pessoa_contato = new PessoaContato();

		$pessoa_contato->setIdPessoaContato($id_pessoa_contato);
		$pessoa_contato->setIdPessoaEntidade($id_pessoa);

		if (property_exists($pessoaContato, 'id_cargo')){
			$pessoa_contato->setIdCargo($pessoaContato->id_cargo);
		}  

		if (property_exists($pessoaContato, 'id_forma_tratamento')){
			$pessoa_contato->setIdFormaTratamento($pessoaContato->id_forma_tratamento);
		}

		if (property_exists($pessoaContato, 'tipo_contato')){
			$pessoa_contato->setTipoContato($pessoaContato->tipo_contato);
		}

		if (property_exists($pessoaContato, 'data_inicio_gestao')){
			$pessoa_contato->setDataInicioGestao(implode("-", array_reverse(explode("/", $pessoaContato->data_inicio_gestao))));
		}

		if (property_exists($pessoaContato, 'data_final_gestao')){
			$pessoa_contato->setDataFinalGestao(implode("-", array_reverse(explode("/", $pessoaContato->data_final_gestao))));
		}      

		$pessoa_contato->store();

		$id = $pessoa_contato->getId();
		//******** Fim - Grava informações na Tabela de Pessoa_contato

		//******** Grava informações na Tabela de Telefone
		//Grava Telefone Celular se houver
		// if (property_exists($beneficiarioPessoa, 'telefone_celular')){       
		if ($pessoaContato->telefone_celular != '') {
			$telefone = new Telefone();

			$telefoneCelular = str_replace("(", "", $pessoaContato->telefone_celular);
				$telefoneCelular = str_replace(")", "", $telefoneCelular);
				$telefoneCelular = str_replace(" ", "", $telefoneCelular);
				$telefoneCelular = str_replace("-", "", $telefoneCelular);

				$dddCelular = substr($telefoneCelular, 0, 3);
				$numeroCelular = substr($telefoneCelular, 3, 9);

		$telefone->setIdTipoTelefone('3'); //Celular
		$telefone->setIdPessoa($id_pessoa_contato);
		$telefone->setDdd($dddCelular);
		$telefone->setNumero($numeroCelular);
		$telefone->setPrincipal(1);
		$telefone->setAtivo(1);

		$telefone->store();
	}
		//******** Fim - Grava informações na Tabela de Telefone
		//Grava CPF
	if (property_exists($pessoaContato, 'cpf')) {

		$documento = new Documento();

		$cpf = str_replace(".", "", $pessoaContato->cpf);
		$cpf = str_replace("-", "", $cpf);

		$documento->setIdTipoDocumento('2'); //CPF
		$documento->setIdPessoa($id_pessoa_contato);
		$documento->setNumero($cpf);
		$documento->setAtivo(1);

		$documento->store();
	}

		//Grava Tipos de Evento Que Participa
	if (property_exists($pessoaContato, 'tipoeventos')) {
		foreach ($pessoaContato->tipoeventos as $key => $value) {
			$tipo_evento = new PessoaTipoEvento();

			$tipo_evento->setIdPessoa($id_pessoa_contato); //CPF
			$tipo_evento->setIdTipoEvento($value->id);
			
			$tipo_evento->store();
		}
	}

	$arrMensagem = array('error' => 0, 'id' => $id, 'id_pessoa_contato' => $id_pessoa_contato, 'mensagem' => "Contato(s) incluído(s) com sucesso!");
	fJSON::output($arrMensagem);

}catch (fValidationException $e) {
	$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: " . $e);
	fJSON::output($arrMensagem);
}
}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Contatos de uma entidade
	Método: GET
	URL: http://localhost/sig/api/index.php/contato_pessoa/<pessoa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/03/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/03/2015
	*/

	public function getPessoaContato($id_pessoa = "", $full = false) {

		$this->acessoApi();

		$aSearch = array();
		if ($id_pessoa != "") {
			$aSearch['id_pessoa_entidade='] = $id_pessoa;
		}
		$pessoaContato = fRecordSet::build('PessoaContato', $aSearch);
		$aPessoaContato = array();

		if ($pessoaContato->count() == 0) {
			$aPessoaContato[] = array(
				'error' => -1,
				'mensagem' => "Nenhum contato encontrado."
				);
		}else{
			foreach ($pessoaContato->getRecords() as $key => $value) {

		$resultPessoaContato = $this->getPessoa($value->getIdPessoaContato(), true); //Obtem Pessoa Contato    
		$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getIdPessoaContato(), "", true, 2); //Obtem CPF do Contato
		$resultTelefonePessoaCelular = $this->getTelefonePessoa($value->getIdPessoaContato(), "", true, 3);  //Celular

		$cargo = new Cargo($value->getIdCargo()); 
		$forma_tratamento = new FormaTratamento($value->getIdFormaTratamento());         

		if (strlen($resultTelefonePessoaCelular[0]["mensagem"]) > 0) {
			$telefone_celular = "";
		}else{
			$telefone_celular = "(" . $resultTelefonePessoaCelular[0]["ddd"] . ") " .
			substr($resultTelefonePessoaCelular[0]["numero"], 0, 5) . "-" .
			substr($resultTelefonePessoaCelular[0]["numero"], 5, 4);
		}

		if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
			$cpf = "";
		}else{
			$cpf = $resultDocumentoPessoaCPF[0]["numero"];
		}

		$dataNascimento = '';		
		if ($resultPessoaContato['data_nascimento'] != null) {
			$dataAssociacao = date("d/m/Y", strtotime($resultPessoaContato['data_nascimento']));
		}

		$dataInicioGestao = '';
		if ($value->getDataInicioGestao()!= null) {
			$dataInicioGestao = $value->getDataInicioGestao()->format('d/m/Y');
		}

		$dataFinalGestao = '';
		if ($value->getDataFinalGestao()!= null) {
			$dataFinalGestao = $value->getDataFinalGestao()->format('d/m/Y');
		}              

		if ($resultPessoaContato['sexo'] == 1) {
			$sexo_nome = 'Masculino';
		}else{
			$sexo_nome = 'Feminino';
		}

		$tipo_contato = array('Representante da Entidade', 'Contato da Entidade');

		$aPessoaContato[] = array(
			'id' => $value->getId(),
			'id_pessoa_contato' => $value->getIdPessoaContato(),
			'id_pessoa_entidade' => $value->getIdPessoaEntidade(),
			'id_cargo' =>  $value->getIdCargo(),
			'cargo' => $cargo->getDescricao(),
			'id_forma_tratamento' => $value->getIdFormaTratamento(),
			'forma_tratamento' => $forma_tratamento->getDescricao(),
			'tipo_contato' => $value->getTipoContato(),
			'tipo_status' => $tipo_contato[$value->getTipoContato()],
			'nome' => $resultPessoaContato['nome'],
			'email' => $resultPessoaContato['email'],
			'data_nascimento' => $dataNascimento,
			'data_inicio_gestao' => $dataInicioGestao,
			'data_final_gestao' => $dataFinalGestao,

			);
	}
}

if ($full == false) {
	fJSON::output($aPessoaContato);
}else {
	return $aPessoaContato;
}
}  

	/*
	Módulo: Mesquita
	Descrição: Exclui um Contato de Uma Entidade
	Método: POST
	URL: http://localhost/sig/api/index.php/delcontato_pessoa/<pessoa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/03/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 11/03/2015
	*/

	public function delPessoaContato() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_pessoa='] = $data->id_pessoa_contato;

	//Deleta Todos os Documentos do Beneficiario na tabela de Documento
		$resultDocumento = fRecordSet::build('Documento', $aSearch);
		foreach ($resultDocumento->getRecords() as $key => $value) {
			$documento = new Documento($value->getId());
			$documento->delete();
		}    

	//Deleta Todos os Telefones do Beneficiario na tabela de Documento
		$resultTelefone = fRecordSet::build('Telefone', $aSearch);
		foreach ($resultTelefone->getRecords() as $key => $value) {
			$telefone = new Telefone($value->getId());
			$telefone->delete();
		}  

	//Deleta Todos os Tipos de eventos que participa da pessoa
		$resultPessoaTipoEvento = fRecordSet::build('PessoaTipoEvento', $aSearch);
		foreach ($resultPessoaTipoEvento->getRecords() as $key => $value) {
			$pessoaTipoEvento = new PessoaTipoEvento($value->getId());
			$pessoaTipoEvento->delete();
		} 

		$pessoa_contato = new PessoaContato($data->id);    
		$pessoa_contato->delete();

	//Deleta o Contato da Tabela de Pessoa
		$pessoa = new Pessoa($data->id_pessoa_contato);    
		$pessoa->delete();


		$mensagem = "Contato excluído com sucesso!";        

		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();        

	}  

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo tipo de funcionário
	Método: GET
	URL: http://localhost/sig/api/index.php/tipofuncionario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function postTipoFuncionario() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipofuncionario = new TipoFuncionario($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de Funcionário alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipofuncionario = new TipoFuncionario();
			$mensagem = "Tipo de Funcionário incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'descricao')){
				$tipofuncionarioAnt = '';

				if($alteracao==1){
					$tipofuncionarioAnt = $tipofuncionario->getDescricao();
				}

				$tipofuncionario->setDescricao($data->descricao);
				$this->setAuditoria('TipoFuncionario', 'Descrição', $tipofuncionarioAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipofuncionario->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoFuncionario', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de funcionario já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipofuncionario->store();
				}     
			} else {
				$tipofuncionario->store();
			} 
			$id_tipofuncionario = $tipofuncionario->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_tipofuncionario, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipo de Funcionario
	Método: GET
	URL: http://localhost/sig/api/index.php/tipofuncionario/<tipofuncionario>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function getTipoFuncionario($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") { $aSearch['id='] = $id; }  

		$tipofuncionario = fRecordSet::build('TipoFuncionario', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aTipoFuncionario = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoFuncionario[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Funcionario",
					'ativo' => "");
			}

			foreach ($tipofuncionario->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}        

				$aTipoFuncionario[] = array(
					'tipo' => "Tipo de Funcionario",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoFuncionario) == 0) {
				$aTipoFuncionario[] = array('error' => -1, 'mensagem' => "Nenhum tipo de funcionario encontrado.");
			} else {
				$aTipoFuncionario = array('error' => 0, 'tipofuncionario' => $aTipoFuncionario);  
			}      

			
			fJSON::output($aTipoFuncionario);
		}
		else {
			return $tipofuncionario[0];
		}    
	}  

	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova função
	Método: GET
	URL: http://localhost/sig/api/index.php/funcao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function postFuncao() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$funcao = new Funcao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Função alterada com sucesso!";
			$alteracao=1;
		} else {
			$funcao = new Funcao();
			$mensagem = "Função incluída com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'id_tipo_funcionario')){
				$id_tipofuncionarioAnt = '';

				if($alteracao==1){
					$id_tipofuncionarioAnt = $funcao->getIdTipoFuncionario();
				}

				$funcao->setIdTipoFuncionario($data->id_tipo_funcionario);
				$this->setAuditoria('Funcao', 'Id Tipo Funcionário', $id_tipofuncionarioAnt, $data->id_tipo_funcionario);
			}
			if (property_exists($data, 'descricao')){
				$funcaoAnt = '';

				if($alteracao==1){
					$funcaoAnt = $funcao->getDescricao();
				}

				$funcao->setDescricao($data->descricao);
				$this->setAuditoria('Funcao', 'Descrição', $funcaoAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$funcao->setAtivo($data->ativo);
			}
			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['id_tipo_funcionario='] = $data->id_tipo_funcionario;
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('Funcao', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A função já existe");
					fJSON::output($arrMensagem);
					die();
				}else{
					$funcao->store();
				}
			} else {
				$funcao->store();
			}

			$id_funcao = $funcao->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_funcao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Função
	Método: GET
	URL: http://localhost/sig/api/index.php/funcao/<funcao>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	Data da Alteração: 18/03/2015
	Autor: Ricardo S. Nakadomari
	Atividade: Adição do filtro de tipo de funcionario
	Data da Alteração: 19/03/2015
	Autor: Ricardo S. Nakadomari
	Atividade: Alteração do retorno no caso de objeto, retirado o array 0
	*/
	public function getFuncao($id_consulta="",$id=0, $id_tipo_funcionario="", $full = false) {
		$aSearch = array();

		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		if ($id_tipo_funcionario > 0) {
			$aSearch['id_tipo_funcionario='] = $id_tipo_funcionario;
		}

		$funcao = fRecordSet::build('Funcao', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aFuncao = array();

			if (($id_consulta != "1") && ($id==0)) {
				$aFuncao[] = array('tipo'=>"Ação",
					'id' => "-1",
					'id_tipo_funcionario' => "-1",
					'descricao' => ":: Cadastrar Nova Função",
					'ativo' => ""
					);
			}      

			foreach ($funcao->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$id_tipo_funcionario = "";
				$tipo_funcionario = "";
				if ( $value->getIdTipoFuncionario() > 0 ){
					$resultTipoFuncionario = $this->getTipoFuncionario(true, $value->getIdTipoFuncionario(), true);
					$id_tipo_funcionario = $resultTipoFuncionario->getId();
					$tipo_funcionario = $resultTipoFuncionario->getDescricao();
				}

				$aFuncao[] = array(
					'tipo' => "Função",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'id_tipo_funcionario' => $id_tipo_funcionario,
					'tipo_funcionario' => $tipo_funcionario,
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aFuncao) == 0) {
				$aFuncao[] = array('error' => -1, 'mensagem' => "Nenhuma função encontrada.");
			} else {
				$aFuncao = array(
					'error' => 0,
					'funcao' => $aFuncao
					);
			}

			fJSON::output($aFuncao);
		}
		else {
			return $funcao;
		}    
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo estabelecimento
	Método: GET
	URL: http://localhost/sig/api/index.php/estabelecimento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function postEstabelecimento() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$estabelecimento = new Estabelecimento($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Estabelecimento alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$estabelecimento = new Estabelecimento();
			$mensagem = "Estabelecimento incluído com sucesso!";
			$alteracao=0;
		}

		try {

		//******** Grava informações na Tabela de estabelecimento

			if (property_exists($data, 'nome')){
				$estabelecimentoAnt = '';

				if($alteracao==1){
					$estabelecimentoAnt = $estabelecimento->getNome(); 
				}

				$estabelecimento->setNome($data->nome);
				$this->setAuditoria('Estabelecimento', 'nome', $estabelecimentoAnt, $data->nome); //PHP
			}

			if (property_exists($data, 'apelido')){
				$estabelecimento->setApelido($data->apelido);
			}

			if (property_exists($data, 'ativo')){
				$estabelecimento->setAtivo($data->ativo);
			}

			if (property_exists($data, 'estado')){
				$estabelecimentoAnt = '';

				if($alteracao==1){
					$estabelecimentoAnt = $estabelecimento->getEstado();
				}

				$estabelecimento->setEstado($data->estado);
				$this->setAuditoria('Estabelecimento', 'Estado', $estabelecimentoAnt, $data->estado);
			}

			if (property_exists($data, 'cidade')){
				$estabelecimentoAnt = '';

				if($alteracao==1){
					$estabelecimentoAnt = $estabelecimento->getCidade();
				}

				$estabelecimento->setCidade($data->cidade);
				$this->setAuditoria('Estabelecimento', 'Cidade', $estabelecimentoAnt, $data->cidade);
			}

			if (property_exists($data, 'tipo')){
				$estabelecimentoAnt = '';

				if($alteracao==1){
					$estabelecimentoAnt = $estabelecimento->getTipo();
				}

				$estabelecimento->setTipo($data->tipo);
				$this->setAuditoria('Estabelecimento', 'Tipo', $estabelecimentoAnt, $data->tipo);
			}


			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['nome='] = $data->nome; 
				$countDescricao = fRecordset::build('Estabelecimento', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O estabelecimento já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$estabelecimento->store();
				}

			} 
			else {
				$estabelecimento->store();
			}
		//******** Fim - Grava informações na Tabela de Categoria
			$id_estabelecimento = $estabelecimento->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_estabelecimento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Estabelecimento
	Método: GET
	URL: http://localhost/sig/api/index.php/estabelecimento
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/

	public function getEstabelecimento($id="", $full = false) {

		$search = '';

		if ($id != "") {
			$search = 'WHERE id= ' .$id;
		}  

		$sql = "SELECT 
					* 
				FROM  estabelecimento
			   " .$search;
		
		$db = $this->_getDb()->query($sql);

		$status = '';
		$descricao_tipo = '';
		$aEstabelecimento = array();
		foreach ($db as $key => $value) {
			if ($value['ativo']==1) {
				$status = "Ativo";
			} 
			else if ($value['ativo']==0) {
				$status = "Inativo";
			}

			if ($value['tipo']==0) {
				$descricao_tipo = "Escola pública";
			} 
			
			if ($value['tipo']==1) {
				$descricao_tipo = "Escola privada";
			}

			if ($value['tipo']==null) {
				$descricao_tipo = "Não definido";
			}

			$value['status'] =  $status;
			$value['descricao_tipo'] =  $descricao_tipo;

			$aEstabelecimento[] = $value;
		}

		$db = $this->_getDb()->close();

		
		if (count($aEstabelecimento) == 0) {
			$aEstabelecimento[] = array('error' => -1, 'mensagem' => "Nenhum estabelecimento encontrado.");
		} 
		else {
			$aEstabelecimento = array(
				'error' => 0,
				'estabelecimento' => $aEstabelecimento
			);
		}

		if ($full == false) {
			fJSON::output($aEstabelecimento);
		} else {
			return $estabelecimento;
		}  
	}  



	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova cor e raça
	Método: GET
	URL: http://localhost/sig/api/index.php/cor_raca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function postCorRaca() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$cor_raca = new CorRaca($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Cor ou Raça alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$cor_raca = new CorRaca();
			$mensagem = "Cor ou Raça incluído com sucesso!";
			$alteracao=0;
		}

		try {

		//******** Grava informações na Tabela de cor e raça

			if (property_exists($data, 'descricao')){
				$cor_racaAnt = '';

				if($alteracao==1){
					$cor_racaAnt = $cor_raca->getDescricao();
				}

				$cor_raca->setDescricao($data->descricao);
				$this->setAuditoria('CorRaca', 'Descricao', $cor_racaAnt, $data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$cor_raca->setAtivo($data->ativo);
			}


			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('CorRaca', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A Cor ou Raça já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{
					$cor_raca->store();
				}

			} 
			else {
				$cor_raca->store();
			}

		//******** Fim - Grava informações na Tabela de Categoria
			$id_cor_raca = $cor_raca->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_cor_raca, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Cor e Raça
	Método: GET
	URL: http://localhost/sig/api/index.php/cor_raca
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/

	public function getCorRaca($id_consulta="",$id="", $full = false) {

		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$cor_raca = fRecordSet::build('CorRaca', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aCorRaca = array();

			foreach ($cor_raca->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} 
				else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aCorRaca[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);

			}

			if (count($aCorRaca) == 0) {
				$aCorRaca[] = array('error' => -1, 'mensagem' => "Nenhuma cor ou raça encontrada.");
			} 
			else {
				$aCorRaca = array(
					'error' => 0,
					'cor_raca' => $aCorRaca
					);
			}

			fJSON::output($aCorRaca);

		}
		else {
			return $cor_raca[0];
		}  

	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo texto grupo ocorrência
	Método: GET
	URL: http://localhost/sig/api/index.php/textogrupoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function postTextoGrupoOcorrencia() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$textogrupoocorrencia = new TextoGrupoOcorrencia($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Texto Grupo Ocorrência alterado com sucesso!";
			$alteracao=1;
		} else {
			$textogrupoocorrencia = new TextoGrupoOcorrencia();
			$mensagem = "Texto Grupo Ocorrência incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'id_grupo_ocorrencia')){
				$id_grupo_ocorrenciaAnt = '';

				if($alteracao==1){
					$id_grupo_ocorrenciaAnt = $textogrupoocorrencia->getIdGrupoOcorrencia();
				}

				$textogrupoocorrencia->setIdGrupoOcorrencia($data->id_grupo_ocorrencia);
				$this->setAuditoria('TextoGrupoOcorrencia', 'Id Grupo Ocorrência', $id_grupo_ocorrenciaAnt, $data->id_grupo_ocorrencia);
			}
			if (property_exists($data, 'descricao')){
				$textogrupoocorrenciaAnt = '';

				if($alteracao==1){
					$textogrupoocorrenciaAnt = $textogrupoocorrencia->getDescricao();
				}

				$textogrupoocorrencia->setDescricao($data->descricao);
				$this->setAuditoria('TextoGrupoOcorrencia', 'Descrição', $textogrupoocorrenciaAnt, $data->descricao);
			}
			if (property_exists($data, 'texto')){
				$textoAnt = '';

				if($alteracao==1){
					$textoAnt = $textogrupoocorrencia->getTexto();
				}

				$textogrupoocorrencia->setTexto($data->texto);
				$this->setAuditoria('TextoGrupoOcorrencia', 'Descrição', $textogrupoocorrenciaAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$textogrupoocorrencia->setAtivo($data->ativo);
			}
			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['id_grupo_ocorrencia='] = $data->id_grupo_ocorrencia;
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TextoGrupoOcorrencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A texto grupo ocorrência já existe");
					fJSON::output($arrMensagem);
					die();
				} else {
					$textogrupoocorrencia->store();
				}
			} else {
				$textogrupoocorrencia->store();
			}

			$id_textogrupoocorrencia = $textogrupoocorrencia->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_textogrupoocorrencia, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}

	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Texto Grupo Ocorrência
	Método: GET
	URL: http://localhost/sig/api/index.php/textogrupoocorrencia/<textogrupoocorrencia>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function getTextoGrupoOcorrencia($id_consulta="",$id="", $id_grupo_ocorrencia="", $full = false) {
		$aSearch = array();

		if ($id > 0 ) {
			$aSearch['id='] = $id;
		}
		if ( $id_grupo_ocorrencia > 0 ){
			$aSearch['id_grupo_ocorrencia='] = $id_grupo_ocorrencia;
		}

		$textogrupoocorrencia = fRecordSet::build('TextoGrupoOcorrencia', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aTextoGrupoOcorrencia = array();

			if (($id_consulta != "1") && ( $id=="" || $id==0 )) {
				$aTextoGrupoOcorrencia[] = array('tipo'=>"Ação",
					'id' => "-1",
					'id_grupo_ocorrencia' => "-1",
					'descricao' => ":: Cadastrar Novo Texto de Grupo de Ocorrência",
					'ativo' => ""
					);
			}      

			foreach ($textogrupoocorrencia->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$resultTextoGrupoOcorrencia = $this->getGrupoOcorrencia(true, $value->getIdGrupoOcorrencia(), true);

				$aTextoGrupoOcorrencia[] = array(
					'tipo' => "Texto de Grupo de Ocorrência",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'id_grupo_ocorrencia' => $resultTextoGrupoOcorrencia->getId(),
					'descricao_grupo_ocorrencia' => $resultTextoGrupoOcorrencia->getDescricao(),
					'texto' => $value->getTexto(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTextoGrupoOcorrencia) == 0) {
				$aTextoGrupoOcorrencia[] = array('error' => -1, 'mensagem' => "Nenhuma texto grupo ocorrência encontrada.");
			} else {
				$aTextoGrupoOcorrencia = array(
					'error' => 0,
					'textogrupoocorrencia' => $aTextoGrupoOcorrencia
					);
			}

			fJSON::output($aTextoGrupoOcorrencia);
		}
		else {
			return $textogrupoocorrencia[0];
		}    
	}  

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Tipo de Turma
	Método: POST
	URL: http://localhost/sig/api/index.php/tipoturma/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function postTipoTurma() {

		$data = json_decode(file_get_contents("php://input"));
		
		if (property_exists($data, 'id')) {
			$tipoturma = new TipoTurma($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id; 
			$mensagem = "Tipo de turma alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$tipoturma = new TipoTurma();
			$mensagem = "Tipo de turma incluído com sucesso!";
			$alteracao=0;				
		}


		try {
			if (property_exists($data, 'descricao')){
				$tipoturmaAnt = '';

				if($alteracao==1){
					$tipoturmaAnt = $tipoturma->getDescricao();
				}

				$tipoturma->setDescricao($data->descricao);
				$this->setAuditoria('TipoTurma', 'Descricao', $tipoturmaAnt, $data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$tipoturma->setAtivo($data->ativo);
			}

			if ($alteracao != 1) {
				
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoTurma', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Tipo de turma já existe");					
					fJSON::output($arrMensagem);
					die();

				} else{
					$tipoturma->store();
				}
			} else {
				$tipoturma->store();
			}
			
			$id_tipoturma = $tipoturma->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_tipoturma, 'mensagem' => $mensagem);

			fJSON::output($arrMensagem);
			die();			
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipo de Turma
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoturma
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function getTipoTurma($id_consulta="",$id="", $full = false) {
		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE id = '.$id;
		}

		
		$strQueryTipoTurma = "SELECT id,descricao,ativo FROM tipo_turma ".$aSearch." ORDER BY descricao ";
		$tipoturma = $this->_getDb()->query($strQueryTipoTurma);
		$aTipoTurma = array();		

		//$tipoturma = fRecordSet::build('TipoTurma', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aTipoTurma = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoTurma[] = array(
					'tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Turma",					
					'ativo' => ""
					);
			}


			$status = array('Inativo', 'Ativo');

			foreach ($tipoturma as $key => $value){
				$aTipoTurma[] = array(
					'tipo'=>"Tipo de turma",
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' =>$status[$value['ativo']]
					);
			}

			$tipoturma = $this->_getDb()->close();			

			if (count($aTipoTurma) == 0) {
				$aTipoTurma[] = array('error' => -1, 'mensagem' => "Nenhum tipo de turma encontrado.");
			} 
			else {
				$aTipoTurma = array(
					'error' => 0,
					'tipoturma' => $aTipoTurma
					);
			}

			fJSON::output($aTipoTurma);
		} else {
			return $tipoturma;
		}  
	}  

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo tipo de informativo
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoinformativo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function postTipoInformativo() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipoinformativo = new TipoInformativo($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de Informativo alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipoinformativo = new TipoInformativo();
			$mensagem = "Tipo de Informativo incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'descricao')){
				$tipoinformativoAnt = '';

				if($alteracao==1){
					$tipoinformativoAnt = $tipoinformativo->getDescricao();
				}

				$tipoinformativo->setDescricao($data->descricao);
				$this->setAuditoria('TipoInformativo', 'Descrição', $tipoinformativoAnt, $data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$tipoinformativo->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('TipoInformativo', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de informativo já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipoinformativo->store();
				}     
			} else {
				$tipoinformativo->store();
			} 
			$id_tipoinformativo = $tipoinformativo->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_tipoinformativo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipo de Informativo
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoinformativo/<tipoinformativo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function getTipoInformativo($id_consulta="",$id="", $full = false) {

		//$aSearch = array();
		if ($id != "") {
			//$aSearch['id='] = $id;
			$sql = "SELECT tipo_informativo.id, tipo_informativo.descricao, tipo_informativo.ativo FROM tipo_informativo WHERE id = ". $id;
		}
		else{
			$sql = "SELECT tipo_informativo.id, tipo_informativo.descricao, tipo_informativo.ativo FROM tipo_informativo";
		}

		$tipoinformativo = $this->_getDb()->query($sql);

		//$tipoinformativo = fRecordSet::build('TipoInformativo', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aTipoInformativo = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoInformativo[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Informativo",
					'ativo' => ""
					);   
			}      

			foreach ($tipoinformativo as $key => $value) {
				if ($value['ativo']==1) {
					$status = "Ativo";
				} else if ($value['ativo']==0) {
					$status = "Inativo";
				}

				$aTipoInformativo[] = array(
					'tipo' => "Tipo de Informativo",
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'ativo' => $value['ativo'],
					'status' => $status
					);
			}

			if (count($aTipoInformativo) == 0) {
				$aTipoInformativo[] = array('error' => -1, 'mensagem' => "Nenhum tipo de informativo encontrado.");
			} else {
				$aTipoInformativo = array(
					'error' => 0,
					'tipoinformativo' => $aTipoInformativo
					);  
			}      

			fJSON::output($aTipoInformativo);
		}
		else {
			return $tipoinformativo[0];
		}    
	}  

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo evento de informativo
	Método: POST
	URL: http://localhost/sig/api/index.php/eventoinformativo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function postEventoInformativo() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$eventoinformativo = new EventoInformativo($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Evento de Informativo alterado com sucesso!";
			$alteracao=1;
		}else{
			$eventoinformativo = new EventoInformativo();
			$mensagem = "Evento de Informativo incluído com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'id_evento')){
				$id_eventoAnt = '';

				if($alteracao==1){
					$id_eventoAnt = $eventoinformativo->getIdEvento();
				}

				$eventoinformativo->setIdEvento($data->id_evento);
				$this->setAuditoria('EventoInformativo', 'IdEvento', $id_eventoAnt, $data->id_evento);
			}
			if (property_exists($data, 'id_tipo_informativo')){
				$id_tipo_informativoAnt = '';

				if($alteracao==1){
					$id_tipo_informativoAnt = $eventoinformativo->getIdTipoInformativo();
				}

				$eventoinformativo->setIdTipoInformativo($data->id_tipo_informativo);
				$this->setAuditoria('EventoInformativo', 'IdTipoInformativo', $id_eventoAnt, $data->id_tipo_informativo);
			}
			if (property_exists($data, 'descricao')){
				$eventoinformativoAnt = '';

				if($alteracao==1){
					$eventoinformativoAnt = $eventoinformativo->getDescricao();
				}

				$eventoinformativo->setDescricao($data->descricao);
				$this->setAuditoria('EventoInformativo', 'Descrição', $eventoinformativoAnt, $data->descricao);
			}
			if (property_exists($data, 'nome')){
				$nomeAnt = '';

				if($alteracao==1){
					$nomeAnt = $eventoinformativo->getNome();
				}

				$eventoinformativo->setNome($data->nome);
				$this->setAuditoria('EventoInformativo', 'Nome', $nomeAnt, $data->nome);
			}
			if (property_exists($data, 'familia')){
				$familiaAnt = '';

				if($alteracao==1){
					$familiaAnt = $eventoinformativo->getFamilia();
				}

				$eventoinformativo->setFamilia($data->familia);
				$this->setAuditoria('EventoInformativo', 'Familia', $familiaAnt, $data->familia);
			}
			if (property_exists($data, 'local')){
				$localAnt = '';

				if($alteracao==1){
					$localAnt = $eventoinformativo->getLocal();
				}

				$eventoinformativo->setLocal($data->local);
				$this->setAuditoria('EventoInformativo', 'Local', $familiaAnt, $data->local);
			}
			if (property_exists($data, 'texto')){
				$textoAnt = '';

				if($alteracao==1){
					$textoAnt = $eventoinformativo->getTexto();
				}

				$eventoinformativo->setTexto($data->texto);
				$this->setAuditoria('EventoInformativo', 'Texto', $textoAnt, $data->texto);
			}
			if (property_exists($data, 'tipo_envio')){
				$tipo_envioAnt = '';

				if($alteracao==1){
					$tipo_envioAnt = $eventoinformativo->getTipoEnvio();
				}

				$eventoinformativo->setTipoEnvio($data->tipo_envio);
				$this->setAuditoria('EventoInformativo', 'Texto', $tipo_envioAnt, $data->tipo_envio);
			}
			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['id_evento='] = $data->id_evento;
				$aSearch['id_tipo_informativo='] = $data->id_tipo_informativo;
				$aSearch['descricao='] = $data->descricao;
				$aSearch['nome='] = $data->nome;
				$aSearch['familia='] = $data->familia;
				$aSearch['local='] = $data->local;
				$aSearch['texto='] = $data->texto;
				$aSearch['tipo_envio='] = $data->tipo_envio;
				$countDescricao = fRecordset::build('EventoInformativo', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O evento de informativo já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$eventoinformativo->store();
				}     
			} else {
				$eventoinformativo->store();
			} 
			$id_eventoinformativo = $eventoinformativo->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_eventoinformativo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Evento de Informativo
	Método: GET
	URL: http://localhost/sig/api/index.php/eventoinformativo/<eventoinformativo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/03/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function getEventoInformativo($id_consulta="",$id="", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id_evento='] = $id;
		}  

		$eventoinformativo = fRecordSet::build('EventoInformativo', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aEventoInformativo = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aEventoInformativo[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Evento de Informativo"
					);
			}      

			foreach ($eventoinformativo->getRecords() as $key => $value) {
				$tipo_informativo = $this->getTipoInformativo($value->getIdTipoInformativo(), true, true);

				$aEventoInformativo[] = array(
					'tipo' => "Evento de Informativo",
					'id' => $value->getId(),
					'id_evento' => $value->getIdEvento(),
					'id_tipo_informativo' => $value->getIdTipoInformativo(),
					'descricao_tipo_informativo' => $tipo_informativo->getDescricao(),
					'descricao' => $value->getDescricao(),
					'nome' => $value->getNome(),
					'familia' => $value->getFamilia(),
					'local' => $value->getLocal(),
					'texto' => $value->getTexto(),
					'tipo_envio' => $value->getTipoEnvio()
					);
			}

			if (count($aEventoInformativo) == 0) {
				$aEventoInformativo[] = array('error' => -1, 'mensagem' => "Nenhum evento de informativo encontrado.");
			} else {
				$aEventoInformativo = array(
					'error' => 0,
					'eventoinformativo' => $aEventoInformativo
					);  
			}      

			fJSON::output($aEventoInformativo);
		}
		else {
			return $eventoinformativo[0];
		}    
	}  



	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova faixa
	Método: POST
	URL: http://localhost/sig/api/index.php/faixa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function postFaixa() {
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$faixa = new Faixa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Faixa alterada com sucesso!";
			$alteracao=1;
		}
		else{
			$faixa = new Faixa();
			$mensagem = "Faixa incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){
				$faixaAnt = '';

				if($alteracao==1){
					$faixaAnt = $faixa->getDescricao();
				}

				$faixa->setDescricao($data->descricao);
				$this->setAuditoria('Faixa', 'Descricao', $faixaAnt, $data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$faixa->setAtivo($data->ativo);
			}

			$faixa->setDataFaixa(date("Y-m-d h:i:s"));

			if ($alteracao != 1) {

				$aSearchDescricao = array();        
				$aSearchDescricao['descricao='] = $data->descricao;        
				$countDescricao = fRecordset::build('Faixa', $aSearchDescricao);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Essa descrição de faixa já existe");
					fJSON::output($arrMensagem);
					die();
				} 
				else{
					$faixa->store();
				}

			} 
			else {
				$faixa->store();
			}

			$id_faixa = $faixa->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_faixa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Faixa
	Método: GET
	URL: http://localhost/sig/api/index.php/faixa
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/03/2015
	Autor: HAMZI JALEL
	Versão: 1.0
	*/
	public function getFaixa($id_consulta="",$id="", $full = false) {
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$faixa = fRecordSet::build('Faixa', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aFaixa = array();

			foreach ($faixa->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} 
				else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aFaixa[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					'data_faixa' => $value->getDataFaixa()
					);
			}

			if (count($aFaixa) == 0) {
				$aFaixa[] = array('error' => -1, 'mensagem' => "Nenhum tipo de turma encontrado.");
			} 
			else {
				$aFaixa = array(
					'error' => 0,
					'faixa' => $aFaixa
					);
			}

			fJSON::output($aFaixa);
		} 
		else {
			return $faixa;
		}  
	}  

	/***********************************************************************************************************************/
	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova Origem
	Método: POST
	URL: http://localhost/sig/api/index.php/origem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/05/2015
	Autor: Fabio Roberto Haydn
	*/

	public function postOrigem() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {			
			$origem = new Origem($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Origem alterada com sucesso!";
			$alteracao = 1;	
			$id = $data->id;
		}else{			
			$origem = new Origem();
			$mensagem = "Origem incluída com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
			
			if (property_exists($data, 'descricao')){

				$origemAnt = '';
				if($alteracao==1){
					$origemAnt = $origem->getDescricao();
				}
				$this->setAuditoria('Origem', 'Descricao', $origemAnt, $data->descricao, $id);
				$origem->setDescricao($data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$origem->setAtivo($data->ativo);
			}
			
			/* ---FRH - Rotina para controle de existentes (Em 20150506)----------------------------------------- */
			
			if($alteracao != 1){

				$aSearch = array();
				$aSearch['descricao='] 	= $data->descricao;				

				$countOrigem = fRecordset::build('Origem',$aSearch);

				if($countOrigem->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Origem já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{ $origem->store(); }
			}
			else{ $origem->store(); }

			/* ------------------------------------------------------------------------------------------------- */

			$id_origem = $origem->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_origem, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Origens
	Método: GET
	URL: http://localhost/sig/api/index.php/origem/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0	
	*/

	public function getOrigem($id="", $full = false) {	
		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$origem = fRecordSet::build('Origem', $aSearch, array('descricao' => 'asc'));
		$aOrigem = array();

		$aStatusAtivo = array("Inativo", "Ativo");

		foreach ($origem as $key => $value) {

			$aOrigem[] = array(
				'id' 			=> $value->getId(),
				'descricao' 	=> $value->getDescricao(),
				'ativo' 		=> $value->getAtivo(),
				'status_ativo' 	=> $aStatusAtivo[$value->getAtivo()],
				);
		}

		if ($full == false) {

			if (count($aOrigem) == 0) {
				$aOrigem[] = array('error' => -1, 'mensagem' => "Nenhuma Origem encontrada.");
				fJSON::output($aOrigem);
				die();
			}

			$aOrigem = array(
				'error' => 0, 
				'origem' => $aOrigem
				);
			
			fJSON::output($aOrigem);
		} else {
			return $aOrigem;
		}
	} 

	/************************************************************************************************************************/

	/*
	Módulo: Escola
	Descrição: Cadastrar um funcionario
	Método: POST
	URL: http://localhost/sig/api/index.php/funcionarioescola/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/10/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function postFuncionarioEscola() {

		$data = json_decode(file_get_contents("php://input"));
		
		if (property_exists($data, 'id')) {
			$mensagem = "Funcionário alterado com sucesso!";
			$alteracao = 1;	
		}else{						
			$data->ativo = 1;
			$mensagem = "Funcionário incluído com sucesso!";
			$alteracao = 0;
		}

	try{		
		if($data->data_nascimento!=''){	
			$dt_nasc = explode('/',$data->data_nascimento);
			$data->data_nascimento = $dt_nasc[2] . '-' . $dt_nasc[1] . '-' . $dt_nasc[0];

		}else{ $dt_nasc=''; }

		if($data->data_desligamento!=''){
			$dt_desl = explode('/',$data->data_desligamento);
			$data->data_desligamento = $dt_desl[2] . '-' . $dt_desl[1] . '-' . $dt_desl[0];

		}else{ $dt_desl=''; }

		if($data->data_associacao!=''){
			$dt_ass = explode('/',$data->data_associacao);
			$data->data_associacao = $dt_ass[2] . '-' . $dt_ass[1] . '-' . $dt_ass[0];
		
		}else{ $dt_ass=''; }		

		$data->id_tipo_pessoa = 1;
		$data->data_cadastro = date("Y-m-d h:i:s");
		$data->associado = 0;
		$data->beneficiario = 0;
		$data->parentesco = 0;
		$data->proprietario = 0;
		$data->donatario = 0;
		$data->fornecedor = 0;
		$data->aluno = 0;
		$data->funcionario = 1;

		if (property_exists($data, 'id_tipo_funcionario')){
			if($data->id_tipo_funcionario == 1){
				$data->professor = 1;
			}
		}

		$retorno = $this->postGeral('Pessoa',$data);
		$id_pessoa = $retorno['id'];

		$userSes = fSession::get('user');			
		$login_usuario = $this->setUsuario($id_pessoa, $data->nome, $alteracao);
		
		$id_documento_cpf=''; 
		$id_documento_rg='';

		if (property_exists($data, 'id_papel')){

			$papelPessoa = new stdClass();
			$papelPessoa->id_pessoa = $id_pessoa;
			$papelPessoa->id_papel 	= $data->id_papel;
			$papelPessoa->id_tipo_entidade = $userSes['user']['idTipoEntidade'];

			$sqlq = "SELECT id FROM papel_pessoa WHERE id_pessoa = ".$id_pessoa;

			$retpp = array();
			$rspp = $this->_getDb()->query($sqlq);		
			foreach ($rspp as $key => $value){ $retpp[] = $value; }
			$rspp = $this->_getDb()->close();

			if(count($retpp)>0){ $papelPessoa->id = $retpp[0]['id']; };

			$retorno = $this->postGeral('papel_pessoa',$papelPessoa);
		}   

		if (property_exists($data, 'rg')){

			if($data->data_rg_emissao!=''){
				$data_rg_emissao = explode('/',$data->data_rg_emissao);
				$dataRgEmissao = $data_rg_emissao[2] . '-' . $data_rg_emissao[1] . '-' . $data_rg_emissao[0];

			}else{ $dataRgEmissao=''; }

			$doc = new stdClass();
			$doc->id_tipo_documento = 1;
			$doc->id_pessoa 		= $id_pessoa;
			$doc->numero 			= $data->rg;
			$doc->data_emissao 		= $dataRgEmissao;
			$doc->estado_emissor 	= $data->estado_rg_emissor;
			$doc->id_orgao_emissor	= $data->id_orgao_rg_emissor;
			$doc->ativo 			= 1;

			$sqlq = "SELECT id FROM documento WHERE id_pessoa = ".$id_pessoa." AND id_tipo_documento = 1";

			$retd = array();
			$rsd = $this->_getDb()->query($sqlq);		
			foreach ($rsd as $key => $value){ $retd[] = $value; }
			$rsd = $this->_getDb()->close();

			if(count($retd)>0){ $doc->id = $retd[0]['id']; };	

			$retorno = $this->postGeral('documento',$doc);
			$id_documento_rg = $retorno['id']; 
		}

		if (property_exists($data, 'cpf')){

			$sqlq = "SELECT id FROM documento WHERE id_pessoa = ".$id_pessoa." AND id_tipo_documento = 2";

			$retd2 = array();
			$rsd2 = $this->_getDb()->query($sqlq);
			foreach ($rsd2 as $key => $value){ $retd2[] = $value; }
			$rsd2 = $this->_getDb()->close();

			$cpf = str_replace(".", "", $data->cpf);
			$cpf = str_replace("-", "", $cpf);

			$doc2 = new stdClass();
			$doc2->id_tipo_documento = 2;
			$doc2->id_pessoa		 = $id_pessoa;
			$doc2->numero 			 = $cpf;
			$doc2->ativo 			 = 1;

			if(count($retd2)>0){ $doc2->id = $retd2[0]['id']; };

			$retorno = $this->postGeral('Documento',$doc2);
			$id_documento_cpf = $retorno['id'];
		}	
			
		$arrMensagem = array('error' => 0, 
			'id' => $id_pessoa, 
			'id_documento_rg' => $id_documento_rg, 
			'id_documento_cpf' => $id_documento_cpf, 
			'login' => $login_usuario, 
			'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die();
	}
}

	/*
	Módulo: Escola
	Descrição: Obter Funcionario da Escola
	Método: GET
	URL: http://localhost/sig/api/index.php/funcionarioescola/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/10/2015
	Autor: Fabio Roberto Haydn
	*/

	public function getFuncionarioEscola($tipo = "",$id = "",$full = false) 
	{
		$sqlq = "SELECT 
				 p.id,
				 ep.id_entidade id_entidade,
				 p.nome,
				 COALESCE(DATE_FORMAT(p.data_nascimento,'%d/%m/%Y'),'') data_nascimento,
				 p.naturalidade,
				 p.estado_nascimento,
				 p.nacionalidade,
				 p.id_religiao,
				 r.descricao religiao,
				 p.id_estado_civil,
				 ec.descricao estado_civil,
				 p.sexo,
				 u.login login,
				 p.renda,
				 p.foto,
				 p.email,
				 COALESCE(DATE_FORMAT(p.data_cadastro 	 ,'%d/%m/%Y'),'') data_cadastro,
				 COALESCE(DATE_FORMAT(p.data_associacao  ,'%d/%m/%Y'),'') data_associacao,
				 COALESCE(DATE_FORMAT(p.data_desligamento,'%d/%m/%Y'),'') data_desligamento,
				 p.funcionario,
				 p.habilitacao,
				 p.faculdade,
				 f.id_tipo_funcionario id_tipo_funcionario,
				 tf.descricao tipo_funcionario,
				 f.id id_funcao,
				 f.descricao funcao,
				 pl.id id_papel,
				 pl.descricao papel,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN d.numero 		  ELSE '' END),'') rg,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN d.arquivo 		  ELSE '' END),'') rg_arquivo,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN DATE_FORMAT(d.data_emissao,'%d/%m/%Y') ELSE '' END),'') data_rg_emissao,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN d.estado_emissor   ELSE '' END),'') estado_rg_emissor,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN d.id_orgao_emissor ELSE '' END),'') id_orgao_rg_emissor,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=1 THEN oe.descricao 	  ELSE '' END),'') orgao_rg_emissor,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=2 THEN d.numero 		  ELSE '' END),'') cpf,
				 COALESCE(MAX(CASE WHEN d.id_tipo_documento=2 THEN d.arquivo 		  ELSE '' END),'') cpf_arquivo,
				 p.observacao,
				 p.registro_docente,
				 p.ativo,
				 CASE WHEN p.valor_hora IS NOT NULL THEN p.valor_hora ELSE dp.valor_hora END valor_hora,
				 p.forma_pagamento
				 FROM pessoa p
				 LEFT JOIN estado_civil 	ec ON ec.id 				 = p.id_estado_civil
				 LEFT JOIN religiao 		r  ON r.id 					 = p.id_religiao
				 LEFT JOIN funcao 			f  ON f.id 					 = p.id_funcao
				 LEFT JOIN tipo_funcionario tf ON tf.id 				 = f.id_tipo_funcionario
				 LEFT JOIN papel_pessoa 	pp ON pp.id_pessoa 			 = p.id
				 LEFT JOIN papel 			pl ON pl.id 				 = pp.id_papel
				 LEFT JOIN documento 		d  ON d.id_pessoa 			 = p.id
				 LEFT JOIN orgao_emissor 	oe ON oe.id 				 = d.id_orgao_emissor
				 LEFT JOIN usuario 			u  ON u.id_pessoa 			 = p.id
				 LEFT JOIN entidade_pessoa 	ep ON ep.id_pessoa 			 = p.id
				 LEFT JOIN curso_professor 	cp on cp.id_pessoa_professor = p.id
				 LEFT JOIN disciplina  		dp ON dp.id 				 = cp.id_disciplina
				 WHERE p.funcionario=1".(($tipo==1) ? " AND p.professor=1" : '').(($id!='') ? " AND p.id=".$id : '')." 
				 GROUP BY 
				 p.id, ep.id_entidade, p.nome, p.data_nascimento, p.naturalidade, p.estado_nascimento, p.nacionalidade, p.id_religiao, r.descricao, p.id_estado_civil, ec.descricao, p.sexo, p.renda, p.foto, 
				 p.email, p.data_cadastro, p.data_associacao, p.data_desligamento, p.funcionario, p.habilitacao, p.faculdade, f.id_tipo_funcionario, tf.descricao, f.id, f.descricao, pl.id, pl.descricao, 
				 p.observacao, p.registro_docente, p.ativo, p.valor_hora, p.forma_pagamento";
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }			
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado.");
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'pessoa' => $retorno );
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
		
	}


	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Tipo de Disciplina para Curso
	Método: POST
	URL: http://localhost/sig/api/index.php/tipodisciplinacurso/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/03/2015
	Autor: THIAGO MALLON
	Versão: 1.0
	*/
	public function postTipoDisciplinaCurso() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipodisciplinacurso = new TipoDisciplinaCurso($data->id);

			$aSearch = array();
			$aSearch['id='] = $data->id;

			$mensagem = "Tipo de disciplina para curso alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$tipodisciplinacurso = new TipoDisciplinaCurso();
			$mensagem = "Tipo de disciplina para curso incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){

				$tipodisciplinacursoAnt = '';

				if($alteracao==1){
					$tipodisciplinacursoAnt = $tipodisciplinacurso->getDescricao();
				}

				$tipodisciplinacurso->setDescricao($data->descricao);

				$this->setAuditoria('TipoDisciplinaCurso', 'Descricao', $tipodisciplinacursoAnt, $data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$tipodisciplinacurso->setAtivo($data->ativo);
			}

			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$countDescricao = fRecordset::build('TipoDisciplinaCurso', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Tipo de disciplina do curso já existe");
					fJSON::output($arrMensagem);
					die();
				} 
				else{
					$tipodisciplinacurso->store();
				}

			} 
			else {
				$tipodisciplinacurso->store();
			}

			$id_tipodisciplinacurso = $tipodisciplinacurso->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_tipodisciplinacurso, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipo de Disciplina do Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/tipodisciplinacurso
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/03/2015
	Autor: THIAGO MALLON
	Versão: 1.0
	Data de Alteração: 22/03/2015
	Autor: Luciano Almeida
	*/
	public function getTipoDisciplinaCurso($id_consulta="",$id="", $full = false) {

		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$tipodisciplinacurso = fRecordSet::build('TipoDisciplinaCurso', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aTipoDisciplinaCurso = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aTipoDisciplinaCurso[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Novo Tipo de Disciplina de Curso",
					'ativo' => ""
					);
			}

			foreach ($tipodisciplinacurso->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aTipoDisciplinaCurso[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aTipoDisciplinaCurso) == 0) {
				$aTipoDisciplinaCurso[] = array('error' => -1, 'mensagem' => "Nenhum Tipo de Disciplina de Curso encontrado.");
			} 
			else {
				$aTipoDisciplinaCurso = array(
					'error' => 0,
					'tipodisciplinacurso' => $aTipoDisciplinaCurso
					);
			}

			fJSON::output($aTipoDisciplinaCurso);
		} 
		else {
			return $tipodisciplinacurso[0];
		}  
	}  

/*
Módulo: Mesquita
Descrição: Obter Lista de Produtos Servicos e seus Fornecedores
Método: GET
URL: http://localhost/sig/api/index.php/produtosfornecedores/
Autenticação: Não
Resposta: JSON
Data de Criação: 19/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
public function getProdutosFornecedores($id_produtos_servicos="", $full = false) {
	$aSearch = array();
	if ($id_produtos_servicos != "") {
		$aSearch['id_produtos_servicos='] = $id_produtos_servicos;
	}

	$produtosServicos = fRecordSet::build('ProdutosServicos', $aSearch, array('id' => 'asc'));
	$produtos_servicos = array();
	$aSearchIdFornecedores = array();

	foreach ($produtosServicos->getRecords() as $keyps => $valueps) {
		$aSearchIdProduto = array();
		$aSearchIdProduto['id_produtos_servicos='] = $valueps->getId();
		$produtosFornecedores = fRecordSet::build('ProdutosServicosFornecedor', $aSearchIdProduto, array('id' => 'asc'));
		$idFornecedores = array();

		foreach ($produtosFornecedores->getRecords() as $keypf => $valuepf) {
			$idFornecedores[] = $valuepf->getIdPessoa();
		}

		$aSearchIdFornecedores['id='] = $idFornecedores;
		$arrFornecedores = array();
		$fornecedoresPessoas = fRecordSet::build('Pessoa', $aSearchIdFornecedores, array('id' => 'asc'));

		foreach ($fornecedoresPessoas->getRecords() as $keyfp => $valuefp) {
			$arrFornecedores[] = array(
				'id_fornecedor' => $valuefp->getId(),
				'nome_fornecedor' => $valuefp->getNome()
				);
		}

		$aProdutosServicos[] = array(
			'id' => $valueps->getId(),
			'nome_produto' => $valueps->getDescricao(),
			'fornecedores' => $arrFornecedores
			);

	}

	fJSON::output($aProdutosServicos);
}

/*
Módulo: Escola
Descrição: Cadastrar um novo tipo de curso
Método: GET
URL: http://localhost/sig/api/index.php/tipocurso/
Autenticação: Não
Resposta: JSON
Data de Criação: 21/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
public function postTipoCurso() {
	$data = json_decode(file_get_contents("php://input"));

	if (property_exists($data, 'id')) {
		$tipocurso = new TipoCurso($data->id);
		$aSearch = array();
		$aSearch['id='] = $data->id;
		$mensagem = "Tipo de Curso alterado com sucesso!";
		$alteracao=1;
	}else{
		$tipocurso = new TipoCurso();
		$mensagem = "Tipo de Curso incluído com sucesso!";
		$alteracao=0;
	}

	try {
		if (property_exists($data, 'descricao')){
			$tipocursoAnt = '';

			if($alteracao==1){
				$tipocursoAnt = $tipocurso->getDescricao();
			}

			$tipocurso->setDescricao($data->descricao);
			$this->setAuditoria('TipoCurso', 'Descrição', $tipocursoAnt, $data->descricao);
		}
		if (property_exists($data, 'ativo')){
			$tipocurso->setAtivo($data->ativo);
		}

		if ($alteracao!=1) {
			$aSearch = array();
			$aSearch['descricao='] = $data->descricao;
			$countDescricao = fRecordset::build('TipoCurso', $aSearch);

			if($countDescricao->count() > 0){
				$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de curso já existe");
				fJSON::output($arrMensagem);
				die();
			}else{
				$tipocurso->store();
			}
		} else {
			$tipocurso->store();
		} 
		$id_tipocurso = $tipocurso->getId();

		$arrMensagem = array('error' => 0, 'id' => $id_tipocurso, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die();
	}
}  

/*
Módulo: Escola
Descrição: Obter Lista de Tipo de Curso
Método: GET
URL: http://localhost/sig/api/index.php/tipocurso/<tipocurso>
Autenticação: Não
Resposta: JSON
Data de Criação: 21/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
public function getTipoCurso($id_consulta="",$id="", $full = false) {
	$aSearch = array();
	if ($id != "") {
		$aSearch['id='] = $id;
	}

	$tipocurso = fRecordSet::build('TipoCurso', $aSearch, array('descricao' => 'asc'));

	if ($full == false) {
		$aTipoCurso = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aTipoCurso[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Tipo de Curso",
				'ativo' => ""
				);
		}

		foreach ($tipocurso->getRecords() as $key => $value) {
			if ($value->getAtivo()==1) {
				$status = "Ativo";
			} else if ($value->getAtivo()==0) {
				$status = "Inativo";
			}

			$aTipoCurso[] = array(
				'tipo' => "Tipo de Curso",
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'ativo' => $value->getAtivo(),
				'status' => $status
				);
		}

		if (count($aTipoCurso) == 0) {
			$aTipoCurso[] = array('error' => -1, 'mensagem' => "Nenhum tipo de curso encontrado.");
		} else {
			$aTipoCurso = array(
				'error' => 0,
				'tipocurso' => $aTipoCurso
				);
		}

		fJSON::output($aTipoCurso);
	}
	else {
		return $tipocurso[0];
	}
}

/*
Módulo: Escola
Descrição: Cadastrar um novo curso
Método: POST
URL: http://localhost/sig/api/index.php/curso/
Autenticação: Não
Resposta: JSON
Data de Criação: 22/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
public function postCurso() {

	$data = json_decode(file_get_contents("php://input"));
	
	if (property_exists($data, 'id')) {
		$curso = new Curso($data->id);
		$aSearch = array();
		$aSearch['id='] = $data->id;
		$mensagem = "Curso alterado com sucesso!";
		$alteracao=1;
	}else{
		$curso = new Curso();
		$mensagem = "Curso incluído com sucesso!";
		$alteracao=0;
	}

	try {
		if (property_exists($data, 'id_ciclo')){
			$idCicloAnt = '';

			if($alteracao==1){
				$idCicloAnt = $curso->getIdCiclo();
			}

			$curso->setIdCiclo($data->id_ciclo);
			$this->setAuditoria('Curso', 'Id Ciclo', $idCicloAnt, $data->id_ciclo);
		}
		if (property_exists($data, 'id_tipo_curso')){
			$idTipoCursoAnt = '';

			if($alteracao==1){
				$idTipoCursoAnt = $curso->getIdTipoCurso();
			}

			$curso->setIdTipoCurso($data->id_tipo_curso);
			$this->setAuditoria('Curso', 'Id Tipo Curso', $idTipoCursoAnt, $data->id_tipo_curso);
		}
		if (property_exists($data, 'id_proximo_curso')){
			$idProximoCursoAnt = '';

			if($alteracao==1){
				$idProximoCursoAnt = $curso->getIdProximoCurso();
			}

			$curso->setIdProximoCurso($data->id_proximo_curso);
			$this->setAuditoria('Curso', 'Id Proximo Curso', $idProximoCursoAnt, $data->id_proximo_curso);
		}
		if (property_exists($data, 'id_proximo_periodo')){
			$idProximoPeriodoAnt = '';

			if($alteracao==1){
				$idProximoPeriodoAnt = $curso->getIdProximoPeriodo();
			}

			$curso->setIdProximoPeriodo($data->id_proximo_periodo);
			$this->setAuditoria('Curso', 'Id Proximo Periodo', $idProximoPeriodoAnt, $data->id_proximo_periodo);
		}
		if (property_exists($data, 'id_pessoa_coordenador')){
			$idPessoaCoordenadorAnt = '';

			if($alteracao==1){
				$idPessoaCoordenadorAnt = $curso->getIdPessoaCoordenador();
			}

			$curso->setIdPessoaCoordenador($data->id_pessoa_coordenador);
			$this->setAuditoria('Curso', 'Id Pessoa Coordenador', $idPessoaCoordenadorAnt, $data->id_pessoa_coordenador);
		}
		if (property_exists($data, 'id_tipo_disciplina_curso')){
			$idTipoDisciplinaCursoAnt = '';

			if($alteracao==1){
				$idTipoDisciplinaCursoAnt = $curso->getIdTipoDisciplinaCurso();
			}

			$curso->setIdTipoDisciplinaCurso($data->id_tipo_disciplina_curso);
			$this->setAuditoria('Curso', 'Id Tipo Disciplina Curso', $idTipoDisciplinaCursoAnt, $data->id_tipo_disciplina_curso);
		}
		if (property_exists($data, 'codigo_curso')){
			$codigoCursoAnt = '';

			if($alteracao==1){
				$codigoCursoAnt = $curso->getCodigoCurso();
			}

			$curso->setCodigoCurso($data->codigo_curso);
			$this->setAuditoria('Curso', 'CodigoCurso', $codigoCursoAnt, $data->codigo_curso);
		}		
		if (property_exists($data, 'nome')){
			$nomeAnt = '';

			if($alteracao==1){
				$nomeAnt = $curso->getNome();
			}

			$curso->setNome($data->nome);
			$this->setAuditoria('Curso', 'Nome', $nomeAnt, $data->nome);
		}
		if (property_exists($data, 'abreviatura')){
			$abreviaturaAnt = '';

			if($alteracao==1){
				$abreviaturaAnt = $curso->getAbreviatura();
			}

			$curso->setAbreviatura($data->abreviatura);
			$this->setAuditoria('Curso', 'Abreviatura', $abreviaturaAnt, $data->abreviatura);
		}
		if (property_exists($data, 'duracao')){
			$duracaoAnt = '';

			if($alteracao==1){
				$duracaoAnt = $curso->getDuracao();
			}

			$curso->setDuracao($data->duracao);
			$this->setAuditoria('Curso', 'Duracao', $duracaoAnt, $data->duracao);
		}
		if (property_exists($data, 'primeira_serie')){
			$primeiraSerieAnt = '';

			if($alteracao==1){
				$primeiraSerieAnt = $curso->getPrimeiraSerie();
			}

			$curso->setPrimeiraSerie($data->primeira_serie);
			$this->setAuditoria('Curso', 'Primeira Serie', $primeiraSerieAnt, $data->primeira_serie);
		}
		if (property_exists($data, 'ultima_serie')){
			$ultimaSerieAnt = '';

			if($alteracao==1){
				$ultimaSerieAnt = $curso->getUltimaSerie();
			}

			$curso->setUltimaSerie($data->ultima_serie);
			$this->setAuditoria('Curso', 'Ultima Serie', $ultimaSerieAnt, $data->ultima_serie);
		}
		if (property_exists($data, 'carga_horaria')){
			$cargaHorariaAnt = '';

			if($alteracao==1){
				$cargaHorariaAnt = $curso->getCargaHoraria();
			}

			$curso->setCargaHoraria($data->carga_horaria);
			$this->setAuditoria('Curso', 'Carga Horaria', $cargaHorariaAnt, $data->carga_horaria);
		}

		$userSes = fSession::get('user');
		$curso->setIdEntidade($userSes['user']['entidadePessoa']);

		if ($alteracao!=1) {
			$aSearch = array();
			$aSearch['id_ciclo='] = $data->id_ciclo;
			$aSearch['id_tipo_curso='] = $data->id_tipo_curso;
			$aSearch['id_proximo_curso='] = $data->id_proximo_curso;
			$aSearch['id_proximo_periodo='] = $data->id_proximo_periodo;
			$aSearch['id_pessoa_coordenador='] = $data->id_pessoa_coordenador;
			$aSearch['id_tipo_disciplina_curso='] = $data->id_tipo_disciplina_curso;
			$aSearch['nome='] = $data->nome;
			$aSearch['abreviatura='] = $data->abreviatura;
			$aSearch['duracao='] = $data->duracao;
			$aSearch['primeira_serie='] = $data->primeira_serie;
			$aSearch['ultima_serie='] = $data->ultima_serie;
			$aSearch['carga_horaria='] = $data->carga_horaria;
			$countDescricao = fRecordset::build('Curso', $aSearch);

			if($countDescricao->count() > 0){
				$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Curso já existe");
				fJSON::output($arrMensagem);
				die();
			}else{
				$curso->store();
			}
		} else {
			$curso->store();
		}

		$id_curso = $curso->getId();
		$arrMensagem = array('error' => 0, 'id' => $id_curso, 'mensagem' => $mensagem);

		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die();
	}
}  

	 /*
	Módulo: Mesquita
	Descrição: Obter lista de movimentações para tela movimentação financeira
	Método: GET
	URL: http://localhost/sig/api/index.php/movimentacao/<id_consulta>/<id_curso>//<id_etapa>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/10/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getCurso($id_consulta = 0, $id = 0,$id_etapa = 0, $full = false) { 

		$userSes = fSession::get('user');
		$search = '';
		
		if($id_etapa > 0){
			$search = ' AND c.id in(select id_curso from curso_complemento where id_etapa=' .$id_etapa.')';
		}

		if($id > 0){
			$search = ' AND c.id = ' .$id;
		}
		
		if (($id_consulta==0) && ($id==0 && $id_etapa==0)) 
		{
			$aCurso[] = array(	'tipo'=>"Ação",
								'id' => "-1",
								'descricao' => ":: Cadastrar Novo Curso",
								'ativo' => "");
		}

		$consulta = "SELECT
					 'Curso' tipo,
					 COALESCE(c.id,0) id,
					 COALESCE(c.id_ciclo,0) id_ciclo,
					 COALESCE(c.id_tipo_curso,0) id_tipo_curso,
					 COALESCE(c.id_proximo_curso,0) id_proximo_curso,
					 COALESCE(c.id_pessoa_coordenador,0) id_pessoa_coordenador,
				 	 COALESCE(c.id_tipo_disciplina_curso,0) id_tipo_disciplina_curso,
					 COALESCE(c.codigo_curso,'') codigo_curso,
					 COALESCE(c.nome,'') nome,
					 COALESCE(c.abreviatura,'') abreviatura,
					 COALESCE(c.duracao,'') duracao,
					 COALESCE(c.primeira_serie,'') primeira_serie,
					 COALESCE(c.ultima_serie,'') ultima_serie,
					 COALESCE(c.carga_horaria,'') carga_horaria,
					 COALESCE((SELECT descricao FROM periodo_aula 			WHERE id = c.id_proximo_periodo 		LIMIT 1),'') id_proximo_periodo,
					 COALESCE((SELECT descricao FROM ciclo 					WHERE id = c.id_ciclo 					LIMIT 1),'') ciclo_descricao,
					 COALESCE((SELECT descricao FROM tipo_curso 			WHERE id = c.id_tipo_curso 				LIMIT 1),'') tipo_curso_descricao,
					 COALESCE((SELECT nome 		FROM curso 					WHERE id = c.id_proximo_curso 			LIMIT 1),'') proximo_curso_descricao,
					 COALESCE((SELECT descricao FROM periodo_aula 			WHERE id = c.id_proximo_periodo 		LIMIT 1),'') proximo_periodo_descricao,
					 COALESCE((SELECT nome 		FROM pessoa 				WHERE id = c.id_pessoa_coordenador 		LIMIT 1),'') pessoa_coordenador_descricao,
					 COALESCE((SELECT descricao FROM tipo_disciplina_curso 	WHERE id = c.id_tipo_disciplina_curso 	LIMIT 1),'') tipo_disciplina_curso_descricao
					 FROM curso c WHERE c.id_entidade = ".$userSes['user']['entidadePessoa']." @W";


		
		$sqlq = $consulta;
		$sqlq = str_replace("@W", $search, $sqlq);

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value)
		{ 
			$retorno[] = $value;
			$retorno[$key]['complemento'] = array();
			
			$sqlq = "SELECT id,id_etapa,id_boletim,id_ficha,numero_fases,nome_fase,nome_serie FROM curso_complemento WHERE id_curso = ".$retorno[$key]['id'];
									
			$rsc = $this->_getDb()->query($sqlq); 
			foreach ($rsc as $k => $val)
			{
				$retorno[$key]['complemento'][] = $val;
			}
			$rsc = $this->_getDb()->close();
						
		}
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: Curso");
			fJSON::output($retorno);
			die();
		}
		
		if($full==false) { 
			$retorno = array( 'error' => 0, 'curso' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }		
	} 

/*
Módulo: Escola
Descrição: Obter Lista de Curso
Método: GET
URL: http://localhost/sig/api/index.php/curso/
Autenticação: Não
Resposta: JSON
Data de Criação: 22/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
/*
public function getCurso($id_consulta="",$id="", $full = false) {

	$userSes = fSession::get('user');
	$aSearch = array();
	if ($id != "") {
		$aSearch['id='] = $id;
	}

	$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];

	$curso = fRecordSet::build('Curso', $aSearch, array('id' => 'asc'));

	
		$aCurso = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aCurso[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Curso",
				'ativo' => ""
			);
		}

		foreach ($curso->getRecords() as $key => $value) {

			$aSearch = array();
			$aSearch['id_curso='] = $value->getId();

			$cursoComplemento = fRecordSet::build('CursoComplemento', $aSearch, array('id' => 'asc'));
			$aCursoComplemento = array();
			foreach ($cursoComplemento->getRecords() as $item) {
				$aCursoComplemento[] = array(
					'id' => $item->getId(),
					'id_etapa' => $item->getIdEtapa(),
					'id_boletim' => $item->getIdBoletim(),
					'id_ficha' => $item->getIdFicha(),
					'numero_fases' => $item->getNumeroFases(),
					'nome_fase' => $item->getNomeFase(),
					'nome_serie' => $item->getNomeSerie(),
				);
			}	

			$id_proximo_curso = "";
			if( $value->getIdProximoCurso() != "" ){
				$id_proximo_curso = $value->getIdProximoCurso();
			}

			$id_proximo_periodo = "";
			if( $value->getIdProximoPeriodo() != "" ){
				$id_proximo_periodo = $value->getIdProximoPeriodo();
			}

			$ciclo = '';
			if($value->getIdCiclo() != "" ){
				$ciclo = $this->getCiclo(0, $value->getIdCiclo(), true);
				$ciclo = $ciclo[0]['descricao'];
			}

			$tipo_curso = '';

			if($value->getIdTipoCurso() != "" ){
				$tipo_curso = $this->getTipoCurso(true, $value->getIdTipoCurso(), true);
				$tipo_curso = $tipo_curso->getDescricao();
			}

			$proximo_curso = '';

			$proximo_curso = new Curso($value->getIdProximoCurso());
			$descricao_proximo_curso = $proximo_curso->getNome();

			$proximo_periodo = '';
			if($value->getIdProximoPeriodo() != ""){
				$proximo_periodo = $this->getPeriodoAula(0, $value->getIdProximoPeriodo(), true);
				$proximo_periodo = $proximo_periodo[0]->getDescricao();
			}

			$pessoa_coordenador = '';
			if($value->getIdPessoaCoordenador() != ""){
				$pessoa_coordenador = $this->getPessoa($value->getIdPessoaCoordenador(), true);
				$pessoa_coordenador = $pessoa_coordenador->getNome();
			}

			$tipo_disciplina_curso = '';
			if($value->getIdTipoDisciplinaCurso() != ""){
				$tipo_disciplina_curso = $this->getTipoDisciplinaCurso($value->getIdTipoDisciplinaCurso(), true, true);
				$tipo_disciplina_curso = $tipo_disciplina_curso->getDescricao();
			}

			$aCurso[] = array(
				'tipo' => "Curso",
				'id' => $value->getId(),
				'id_ciclo' => $value->getIdCiclo(),
				'id_tipo_curso' => $value->getIdTipoCurso(),
				'id_proximo_curso' => $value->getIdProximoCurso(),
				'id_proximo_periodo' => $id_proximo_periodo,
				'id_pessoa_coordenador' => $value->getIdPessoaCoordenador(),
				'id_tipo_disciplina_curso' => $value->getIdTipoDisciplinaCurso(),
				'codigo_curso' => $value->getCodigoCurso(),
				'nome' => $value->getNome(),
				'abreviatura' => $value->getAbreviatura(),
				'duracao' => $value->getDuracao(),
				'primeira_serie' => $value->getPrimeiraSerie(),
				'ultima_serie' => $value->getUltimaSerie(),
				'carga_horaria' => $value->getCargaHoraria(),
				'ciclo_descricao' => $ciclo,
				'tipo_curso_descricao' => $tipo_curso,
				'proximo_curso_descricao' => $descricao_proximo_curso,
				'proximo_periodo_descricao' => $proximo_periodo,
				'pessoa_coordenador_descricao' => $pessoa_coordenador,
				'tipo_disciplina_curso_descricao' => $tipo_disciplina_curso,
				'complemento' => $aCursoComplemento,
				
				);
			
		}

		if (count($aCurso) == 0) {
			$aCurso[] = array('error' => -1, 'mensagem' => "Nenhum Curso encontrado.");
		} else {
			$aCurso = array(
				'error' => 0,
				'curso' => $aCurso
				);
		}

	if ($full == false) {
		fJSON::output($aCurso);
	}
	else {
		return $curso;
	}
}
*/
	/*
	Módulo: Escola
	Descrição: Obter Lista de Documentos Pendentes
	Método: GET
	URL: http://localhost/sig/api/index.php/documentopendente
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	*/
	public function getDocumentoPendente($id_pessoa="", $full = false){
		$aSearchMain = array();
		//$aSearchMain['ativo='] = 1;
		$listaDocumento = fRecordset::build('ListaDocumento', $aSearchMain, array('descricao' => 'asc'));
		foreach ($listaDocumento as $key => $value) {
			$id = $value->getId();
			$pendente = false;
			$id_pessoa_documento_pendente = 0;

			$aSearch = array();
			$aSearch['id_lista_documento='] = $id;
			//$aSearch['ativo='] = 1;
			if ( $id_pessoa > 0 ){
				$aSearch['id_pessoa='] = $id_pessoa;
				$pessoaDocumentoPendente = fRecordset::build('PessoaDocumentoPendente',$aSearch);
				foreach ($pessoaDocumentoPendente as $keyPessoa => $valuePessoa) {
					$id_pessoa_documento_pendente = $valuePessoa->getId();
					if ($valuePessoa->getAtivo() == 1){
						$pendente = true;
					}
				}
			}

			$aListaPendente[] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'id_pessoa_documento_pendente' => $id_pessoa_documento_pendente,
				'pendente' => $pendente,
				'ativo' => $value->getAtivo()
				);
		}
		if($full == false){
			fJSON::output($aListaPendente);
			die();
		}
	}



	/*
	Módulo Geral
	Descrição: Cadastrar documentos de pessoas pendente
	Método: POST
	URL: http://localhost/sig/api/index.php/pendentedocumento
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	*/
	public function postDocumentoPessoaPendente($id = "", $full = false){
		$data = json_decode(file_get_contents("php://input"));

		$acao = 0;
		$mensagem = "Entrega marcada com sucesso!";

		if (property_exists($data, 'id')) {
			if($data->id > 0){
				//$obj['id'] = $data->id_pessoa_documento_pendente;
				$acao = 1;

				$aSearch['id='] = $data->id;
				$tb = fRecordSet::build('PessoaDocumentoPendente', $aSearch);
				foreach ($tb as $key => $value) {
					$tb[$key]->delete();
				}

				$id = 0;
				$mensagem = "Registro de entrega desmarcada com sucesso!";
			}
		}

		try {
			if($acao == 0){
				$tb = new PessoaDocumentoPendente();
				
				$tb->setIdPessoa($data->id_pessoa);
				$tb->setIdListaDocumento($data->id_lista_documento);
				$tb->setAtivo($data->ativo);
				$tb->setDataEntregaDocumento(date('Y-m-d'));
				$tb->store();

				$id = $tb->getId();
			}

			$arrMensagem = array('error' => 0, 
				'id' => $id,
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die(); 
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Ocorrencia da pessoa
	Método: GET
	URL: http://localhost/sig/api/index.php/ocorrenciapessoa
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/03/2015
	Autor: Ricardo S. Nakadomari
	Versão: 1.0
	*/
	public function getPessoaOcorrencia($id_pessoa="", $full = false){
		$aSearch = array();
		$aOcorrencia = array();
		if ( $id_pessoa > 0 ){
			$aSearch['id_pessoa='] = $id_pessoa;
		}
		//$aSearchMain['ativo='] = 1;
		$pessoaOcorrencia = fRecordset::build('PessoaOcorrencia', $aSearch);
		if($full == false){
			foreach ($pessoaOcorrencia as $key => $value) {
				//buscar nomes dos campos que precisam de valores
				$grupo_ocorrencia = "";
				$tipo_ocorrencia = "";
				$texto_grupo_ocorrencia = "";
				$disciplina = "";
				$responsavel = "";
				$data_ocorrencia = "";
				$data_desbloqueio_ocorrencia = "";
				if ( $value->getIdGrupoOcorrencia() > 0 ){
					$grupoOcorrencia = $this->getGrupoOcorrencia(0,$value->getIdGrupoOcorrencia(), true);
					$grupo_ocorrencia = $grupoOcorrencia->getDescricao();
				}
				if ( $value->getIdTipoOcorrencia() > 0 ){
					$tipoOcorrencia = $this->getTipoOcorrencia(0,$value->getIdTipoOcorrencia(), 0, true);
					$tipo_ocorrencia = $tipoOcorrencia->getDescricao();
				}
				if ( $value->getIdTextoGrupoOcorrencia() > 0 ){
					$textoGrupoOcorrencia = $this->getTextoGrupoOcorrencia(0,$value->getIdTextoGrupoOcorrencia(), 0, true);
					$texto_grupo_ocorrencia = $textoGrupoOcorrencia->getDescricao();
				}
				if ( $value->getIdDisciplina() > 0 ){
					$disciplinaObj = $this->getDisciplina(0, $value->getIdDisciplina(), true);
					$disciplina = $disciplinaObj->getNome();
				}
				if ( $value->getIdResponsavel() > 0 ){
					$responsavelObj = $this->getPessoa($value->getIdResponsavel(), true);
					$responsavel = $responsavelObj['nome'];
				}

				$dataOcorrencia = "";
				$dataDesbloqueioOcorrencia = "";
				if ($value->getDataOcorrencia() != null) {
					$dataOcorrencia = $value->getDataOcorrencia()->format('Y-m-d') . " 00:00:00";
				}
				if ($value->getDataDesbloqueioOcorrencia() != null) {
					$dataDesbloqueioOcorrencia = $value->getDataDesbloqueioOcorrencia()->format('Y-m-d') . " 00:00:00";
				}

				$aOcorrencia[] = array(
					'id' => $value->getId(),
					'id_pessoa' => $value->getIdPessoa(),
					'id_grupo_ocorrencia' => $value->getIdGrupoOcorrencia(),
					'grupo_ocorrencia' => $grupo_ocorrencia,
					'id_tipo_ocorrencia' => $value->getIdTipoOcorrencia(),
					'tipo_ocorrencia' => $tipo_ocorrencia,
					'id_texto_grupo_ocorrencia' => $value->getIdTextoGrupoOcorrencia(),
					'texto_grupo_ocorrencia' => $texto_grupo_ocorrencia,
					'id_disciplina' => $value->getIdDisciplina(),
					'disciplina' => $disciplina,
					'id_responsavel' => $value->getIdResponsavel(),
					'responsavel' => $responsavel,
					'data_ocorrencia' => $dataOcorrencia,
					'data_desbloqueio_ocorrencia' => $dataDesbloqueioOcorrencia,
					'texto_alterado' => $value->getTextoAlterado(),
					'ativo' => $value->getAtivo()
					);
			}
			if (count($aOcorrencia) == 0) {
				$aOcorrencia[] = array(
					'error' => "-1",
					'mensagem' => "Nenhuma ocorrência encontrada."
					);
				fJSON::output($aOcorrencia);
				die();
			}
			else {
				$aOcorrencia = array(
					'error' => 0,
					'ocorrencia' => $aOcorrencia
					);
				fJSON::output($aOcorrencia);
			}
		}else {
			return $pessoaOcorrencia;
		}
	}


/*
Módulo Geral
Descrição: Cadastrar ocorrencia da pessoa
Método: POST
URL: http://localhost/sig/api/index.php/ocorrenciapessoa
Autenticação: Não
Resposta: JSON
Data de Criação: 23/03/2015
Autor: Ricardo S. Nakadomari
Versão: 1.0
*/
public function postPessoaOcorrencia($id = "", $full = false){
	$data = json_decode(file_get_contents("php://input"));
	$alteracao = 0;

	if (property_exists($data, 'id')) {
		if ($data->id > 0){
			$pessoaOcorrencia = new PessoaOcorrencia($data->id);
			$mensagem = "Ocorrência atualizada com sucesso!";
			$alteracao = 1;
				//atualizar dados do documento
		}
	}
	if($alteracao == 0){
		$pessoaOcorrencia = new PessoaOcorrencia();
		$mensagem = "Ocorrência cadastrada com sucesso!";
			//cadastrar novo documento
	}
	try {
		if (property_exists($data, 'id_pessoa')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdPessoa();
				$this->setAuditoria('Ocorrência', 'Aluno', $pessoaOcorrenciaAnt, $data->id_pessoa);
			}
			$pessoaOcorrencia->setIdPessoa($data->id_pessoa);
		}
		if (property_exists($data, 'id_grupo_ocorrencia')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdGrupoOcorrencia();
				$this->setAuditoria('Ocorrência', 'Grupo de Ocorrência', $pessoaOcorrenciaAnt, $data->id_grupo_ocorrencia);
			}
			$pessoaOcorrencia->setIdGrupoOcorrencia($data->id_grupo_ocorrencia);
		}
		if (property_exists($data, 'id_tipo_ocorrencia')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdTipoOcorrencia();
				$this->setAuditoria('Ocorrência', 'Tipo de Ocorrência', $pessoaOcorrenciaAnt, $data->id_tipo_ocorrencia);
			}
			$pessoaOcorrencia->setIdTipoOcorrencia($data->id_tipo_ocorrencia);
		}
		if (property_exists($data, 'id_texto_grupo_ocorrencia')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdTextoGrupoOcorrencia();
				$this->setAuditoria('Ocorrência', 'Texto Grupo de Ocorrência', $pessoaOcorrenciaAnt, $data->id_texto_grupo_ocorrencia);
			}
			$pessoaOcorrencia->setIdTextoGrupoOcorrencia($data->id_texto_grupo_ocorrencia);
		}
		if (property_exists($data, 'id_disciplina')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdDisciplina();
				$this->setAuditoria('Ocorrência', 'Disciplina', $pessoaOcorrenciaAnt, $data->id_disciplina);
			}
			$pessoaOcorrencia->setIdDisciplina($data->id_disciplina);
		}
		if (property_exists($data, 'id_responsavel')){
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getIdResponsavel();
				$this->setAuditoria('Ocorrência', 'Responsável', $pessoaOcorrenciaAnt, $data->id_responsavel);
			}
			$pessoaOcorrencia->setIdResponsavel($data->id_responsavel);
		}
		if (property_exists($data, 'data_ocorrencia')){
			$pessoaOcorrenciaAnt = '';
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getDataOcorrencia();
			}
			$data_ocorrencia = $data->data_ocorrencia;
			if ( strrpos($data_ocorrencia, 'GMT') > 0 ){
				$dt = explode('GMT', $data_ocorrencia);
				$data_ocorrencia = $dt[0];
			}
			$date = new fDate($data_ocorrencia);
			$pessoaOcorrencia->setDataOcorrencia($date);
			$this->setAuditoria('Ocorrência', 'Data Ocorrência', $pessoaOcorrenciaAnt, $date);
		}
		if (property_exists($data, 'data_desbloqueio_ocorrencia')){
			$pessoaOcorrenciaAnt = '';
			if($alteracao==1){
				$pessoaOcorrenciaAnt = $pessoaOcorrencia->getDataDesbloqueioOcorrencia();
			}
			$data_desbloqueio_ocorrencia = $data->data_desbloqueio_ocorrencia;
			if ( strrpos($data_desbloqueio_ocorrencia, 'GMT') > 0 ){
				$dt = explode('GMT', $data_desbloqueio_ocorrencia);
				$data_desbloqueio_ocorrencia = $dt[0];
			}
			$date = new fDate($data_desbloqueio_ocorrencia);
			$pessoaOcorrencia->setDataDesbloqueioOcorrencia($date);
			$this->setAuditoria('Ocorrência', 'Data Desbloqueio Ocorrência', $pessoaOcorrenciaAnt, $date);
		}

		if (property_exists($data, 'texto_alterado')){
			$pessoaOcorrencia->setTextoAlterado($data->texto_alterado);
		}
		if (property_exists($data, 'ativo')){
			$pessoaOcorrencia->setAtivo($data->ativo);
		}
		$pessoaOcorrencia->store();

		$id = $pessoaOcorrencia->getId();

		$arrMensagem = array('error' => 0, 
			'id' => $id,
			'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$error = $this->errorMessage("Erro na inclusão",$e);
		$arrMensagem = array('error' => -1, 'mensagem' => $error);
		fJSON::output($arrMensagem);
		die(); 
	}
}


/*
Módulo Geral
Descrição: Cadastrar documentos de pessoas
Método: POST
URL: http://localhost/sig/api/index.php/documento
Autenticação: Não
Resposta: JSON
Data de Criação: 19/03/2015
Autor: Ricardo S. Nakadomari
Versão: 1.0
*/
public function postDocumentoPessoa($id = "", $full = false){
	$data = json_decode(file_get_contents("php://input"));


	if ((property_exists($data, 'id')) && ($data->id!='')) {
		$documento = new Documento($data->id);
		$aSearch = array();
		$aSearch['id='] = $data->id;
		$mensagem = "Documento alterado com sucesso!";
		$alteracao=1;
		//atualizar dados do documento
	}else{
		$documento = new Documento();
		$documento->setAtivo(1);
		$mensagem = "Documento incluído com sucesso!";
		$alteracao=0;
		//cadastrar novo documento
	}

	try {
		if (property_exists($data, 'id_tipo_documento')){
			if($alteracao==1){
				$documentoAnt = $documento->getIdTipoDocumento();
				$this->setAuditoria('Documento', 'Tipo de Documento', $documentoAnt, $data->id_tipo_documento);
			}
			$documento->setIdTipoDocumento($data->id_tipo_documento);
		}
		if (property_exists($data, 'id_orgao_emissor')){
			if ($data->id_orgao_emissor != null){
				if($alteracao==1){
					$documentoAnt = $documento->getIdOrgaoEmissor();
					$this->setAuditoria('Documento', 'Orgão Emissor', $documentoAnt, $data->id_orgao_emissor);
				}
				$documento->setIdOrgaoEmissor($data->id_orgao_emissor);
			}
		}
		if (property_exists($data, 'id_pessoa')){
			if($alteracao==1){
				$documentoAnt = $documento->getIdPessoa();
				$this->setAuditoria('Documento', 'Pessoa', $documentoAnt, $data->id_pessoa);
			}
			$documento->setIdPessoa($data->id_pessoa);
		}
		if (property_exists($data, 'numero')){
			if($alteracao==1){
				$documentoAnt = $documento->getNumero();
				$this->setAuditoria('Documento', 'Número', $documentoAnt, $data->numero);
			}
			$documento->setNumero($data->numero);
		}
		if (property_exists($data, 'estado_emissor')){
			if ($data->estado_emissor != null){
				if($alteracao==1){
					$documentoAnt = $documento->getEstadoEmissor();
					$this->setAuditoria('Documento', 'Estado Emissor', $documentoAnt, $data->estado_emissor);
				}
				$documento->setEstadoEmissor($data->estado_emissor);
			}
		}
		if (property_exists($data, 'data_emissao')){
			if ($data->data_emissao != null){
				if ($data->data_emissao != '') {
					$data_emissao = $data->data_emissao;
					if ( strrpos($data_emissao, 'GMT') > 0 ){
						$dt = explode('GMT', $data_emissao);
						$data_emissao = $dt[0];
					}
					$dataEmissao = new fDate($data_emissao);
					if($alteracao==1){
						$documentoAnt = $documento->getDataEmissao();
						$this->setAuditoria('Documento', 'Data de Emissão', $documentoAnt, $dataEmissao);
					}
					$documento->setDataEmissao($dataEmissao);
				}
			}
		}

		if (property_exists($data, 'data_entrada_pais')){
			$dt = implode('-', array_reverse(explode('/', $data->data_entrada_pais)));
			if($alteracao==1){
				$documentoAnt = $documento->getDataEntradaPais();
				$this->setAuditoria('Documento', 'DataEntradaPais', $documentoAnt, $dt);
			}
			$documento->setDataEntradaPais($dt);
		}

		if (property_exists($data, 'complemento')){
			$documento->setComplemento($data->complemento);
		}
		if (property_exists($data, 'ativo')){
			$documento->setAtivo($data->ativo);
		}
		$documento->store();

		$id = $documento->getId();

			$resultTipoDocumento = $this->getTipoDocumento($documento->getIdTipoDocumento(), true); //Obtem Tipo do Documento
			$tipoDoc = '';
			if (!array_key_exists('error', $resultTipoDocumento)) {
				$tipoDoc = $resultTipoDocumento[0]['descricao'];
			}

			$arrMensagem = array('error' => 0, 
				'id' => $id,
				'documento' => $tipoDoc,
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die(); 
		}
	}

/*
Módulo: Geral
Descrição: Altera o estado de ativo do telefone da pessoa
Método: POST
URL: http://localhost/sig/api/index.php/updatetelefoneativo/<id>
Autenticação: Não
Resposta: JSON
Data de Criação: 29/03/2015
Autor: Luciano Almeida
*/
public function updateTelefoneAtivo($id){
	$telefone = new Telefone($id);
	try{
		if($telefone->getAtivo() == 0){
			$telefone->setAtivo(1);
			$mensagem = "Telefone ativado com sucesso!";
		}
		else {
			$telefone->setAtivo(0);
			$mensagem = "Telefone desativado com sucesso!";
		}
		$telefone->store();
		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);

	} catch (fExpectedException $e) {
		$arrMensagem = array('error' => -1, 'mensagem' => "Erro ao Ativar/Desativar");
		fJSON::output($arrMensagem);
		die();
	}
}

/*
Módulo: Geral
Descrição: Altera o estado de principal do telefone da pessoa
Método: POST
URL: http://localhost/sig/api/index.php/updatetelefoneprincipal/<id>
Autenticação: Não
Resposta: JSON
Data de Criação: 29/03/2015
Autor: Luciano Almeida
*/
public function updateTelefonePrincipal($id){
	$telefone = new Telefone($id);
	try{
		if($telefone->getPrincipal() == 0){
			$telefone->setPrincipal(1);
			$mensagem = "Telefone principal ativado com sucesso!";
		}
		else {
			$telefone->setPrincipal(0);
			$mensagem = "Telefone principal desativado com sucesso!";
		}
		$telefone->store();
		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);

	} catch (fExpectedException $e) {
		$arrMensagem = array('error' => -1, 'mensagem' => "Erro ao Ativar/Desativar o principal");
		fJSON::output($arrMensagem);
		die();
	}
}

/*
Módulo: GERAL
Descrição: Deleta um registro da tabela telefone
Método: delTelefone
URL: api/index.php/deltelefone/
Autenticação: Não
Resposta: JSON
Data de Criação: 29/03/2015
Autor: Luciano Almeida
Versão: 1.0
*/
public function delTelefone() {
	$data = json_decode(file_get_contents("php://input"));
	$aSearch = array();
	$aSearch['id='] = $data->id;
	$telefone = fRecordSet::build('Telefone', $aSearch);
	$mensagem = "Telefone excluído com sucesso!";        

	try {
		$telefone[0]->delete();
		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();
	}
	catch (fValidationException $e) {
		$arrMensagem = array('error' => -1, 'mensagem' => "Erro ao deletar telefone");
		fJSON::output($arrMensagem);
		die();
	}
}

	/*
	Módulo: Geral
	Descrição: Obter Documento Caixa
	Método: GET
	URL: http://localhost/sig/api/index.php/documentocaixa
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/04/2015
	Autor: Luciano Almeida
	Versão: 1.0
	*/
	public function getDocumentoCaixa($id_caixa = "", $id_documento = "", $full = false) {
		$this->acessoApi();
		$aSearch = array();
		
		if ($id_caixa != "") {
			$aSearch['id_caixa='] = $id_caixa;
		}

		if ($id_documento != "") {
			$aSearch['id='] = $id_documento;
		}

		$documentoCaixa = fRecordSet::build('DocumentoCaixa', $aSearch);

		$aDocumentoCaixa = array();

		
		foreach ($documentoCaixa->getRecords() as $key => $value) {
			$aDocumentoCaixa[] = array(
				'id' => $value->getId(),
				'id_caixa' => $value->getIdCaixa(),
				'descricao' => $value->getDescricao(),
				'tipo' => $value->getTipo(),
				'arquivo' => $value->getArquivo()
				);
		}

		if ($full == false) {
			fJSON::output($aDocumentoCaixa);
		}else{
			return $aDocumentoCaixa;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Localidade de Bens
	Método: GET
	URL: http://localhost/sig/api/index.php/recorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/04/2015
	*/

	public function getRecorrencia($id_consulta="",$id="", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$recorrencia = fRecordSet::build('Recorrencia', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aRecorrencia = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aRecorrencia[] = array('tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Recorrencia",
					'ativo' => ""
					);   
			}      
			$status = array("Inativo", "Ativo");
			foreach ($recorrencia as $key => $value) {        
				$aRecorrencia[] = array(
					'tipo' => "Recorrencias",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'periodicidade' => $value->getPeriodicidade(),
					'ativo' => $value->getAtivo(),
					'status' => $status[$value->getAtivo()]
					);
			}

			if (count($aRecorrencia) == 0) {
				$aRecorrencia[] = array('error' => -1, 'mensagem' => "Nenhuma localidade de bens encontrada.");
			}

			$aRecorrencia = array(
				'recorrencia' => $aRecorrencia
				);          

			fJSON::output($aRecorrencia);
		}
		else {
			return $aRecorrencia;
		}
	} 

	/*
	Módulo: Doação
	Descrição: Cadastro de evento recorrente
	Método: GET
	URL: http://localhost/sig/api/index.php/eventorecorrente/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/01/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/03/2015
	*/

	private function dataRecorrente($dia, $data_start, $periodicidade) {
		$m = date('m', strtotime($data_start));
		$y = date('Y', strtotime($data_start));

		$data_start_ini = $data_start;
		$prox_m = date("m", mktime(0,0,0, $m+1, '01', $y));
		$ultimo_dia = date("t", mktime(0,0,0, $prox_m, '01', $y));

		if($periodicidade == '1 month' && $ultimo_dia <= $dia){
			$data_start = date('Y-m-d', strtotime("+" .$ultimo_dia ." day", strtotime($data_start)));
		}else{
			$data_start = date('Y-m-d', strtotime("+" .$periodicidade, strtotime($data_start)));
		}

		return $data_start;
	}

	public function postEventoRecorrente() {
		$data = json_decode(file_get_contents("php://input"));
		
		$mensagem = "Evento recorrente incluído com sucesso!";
		
		try {
		//******** Grava informações na Tabela de doação
			$evento = new Evento($data->id_evento);
			$data_start = substr($evento->getStart(), 0, 10);
			$data_end = substr($evento->getEnd(), 0, 10);
			$dia = date('d', strtotime($data_start));
			for($a = 1; $a <= $data->quantidade; $a++){
				$data_start = $this->dataRecorrente($dia, $data_start, $data->periodicidade);
				$data_end = $this->dataRecorrente($dia, $data_end, $data->periodicidade);
				
				$novoEvento = new Evento();
				$novoEvento->setIdDepartamento($evento->getIdDepartamento());
				$novoEvento->setIdTipoEvento($evento->getIdTipoEvento());
				$novoEvento->setTitle($evento->getTitle());
				$novoEvento->setDescription($evento->getDescription());
				$novoEvento->setStart($data_start .substr($evento->getStart(), 10));
				$novoEvento->setEnd($data_end .substr($evento->getEnd(), 10));
				$novoEvento->setValor($evento->getValor());
				$novoEvento->setAllDay($evento->getAllDay());
				$novoEvento->setClassName($evento->getClassName());
				$novoEvento->setIcon($evento->getIcon());
				$novoEvento->setDataCadastro($evento->getDataCadastro());
				$novoEvento->setUrl($evento->getUrl());
				$novoEvento->store();
				

				$eventoRecorente = new EventoRecorrente();
				$eventoRecorente->setIdRecorrente($novoEvento->getId());

				if (property_exists($data, 'id_evento')){
					$ant = '';
					$this->setAuditoria('EventoRecorente', 'IdEvento', $ant, $data->id_evento);
					$eventoRecorente->setIdEvento($data->id_evento);
				}

				if (property_exists($data, 'id_recorrencia')){
					$ant = '';
					$this->setAuditoria('EventoRecorente', 'IdRecorrencia', $ant, $data->id_recorrencia);
					$eventoRecorente->setIdRecorrencia($data->id_recorrencia);
				}

				$eventoRecorente->store();

				$id_evento_recorente[$a] = $eventoRecorente->getId();
				//$id_evento_recorente[$a] = '';
			}

		//******** Fim - Grava informações na Tabela de doação

			$arrMensagem = array('error' => 0, 'id_evento_recorente' => $id_evento_recorente, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de eventos recorrente
	Método: GET
	URL: http://localhost/sig/api/index.php/eventorecorrente/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/04/2015
	*/

	public function getEventoRecorrente($id_evento="", $full = false) {

		$aSearch = array();
		if ($id_evento != "") {
			$aSearch['id_evento='] = $id_evento;
		}  

		$eventoRecorrente = fRecordSet::build('EventoRecorrente', $aSearch);

		// Relacionamentos
		$recorrencia = fRecordSet::build('Recorrencia');
		$aRecorrencia = array();
		$status = array("Inativo", "Ativo");
		foreach ($recorrencia as $key => $value) {        
			$aRecorrencia[$value->getId()] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'periodicidade' => $value->getPeriodicidade(),
				);
		}
		//Fim - Relacionamentos

		$aEventoRecorrente = array();

		foreach ($eventoRecorrente->getRecords() as $key => $value) {        
			$aSearch = array();
			$aSearch['id='] = $value->getIdRecorrente();
			$recorrente = fRecordSet::build('Evento', $aSearch);

			$start = '';
			if($recorrente[0]->getStart() != null){
				$start = date('d-m-Y', strtotime($recorrente[0]->getStart())) .' '
				.date('H:i:s', strtotime($recorrente[0]->getStart()));
			}
			$end = '';
			if($recorrente[0]->getEnd() != null){
				$end = date('d-m-Y', strtotime($recorrente[0]->getEnd())) .' '
				.date('H:i:s', strtotime($recorrente[0]->getEnd()));
			}

			$aEventoRecorrente[] = array(
				'id' => $value->getId(),
				'id_evento' => $value->getIdEvento(),
				'id_recorrente' => $recorrente[0]->getId(),
				'start_recorrente' => $start,
				'end_recorrente' => $end,
				'valor_recorrente' => $recorrente[0]->getValor(),
				'id_recorrencia' => $value->getIdRecorrencia(),
				'descricao_recorrencia' => $this->keyExists($value->getIdRecorrencia(), $aRecorrencia, 'descricao'),
				'periodicidade_recorrencia' => $this->keyExists($value->getIdRecorrencia(), $aRecorrencia, 'periodicidade'),
				);
		}

		$aEventoRecorrente = array(
			'eventorecorrente' => $aEventoRecorrente
			);          
		
		if ($full == false) {
			fJSON::output($aEventoRecorrente);
		}
		else {
			return $aEventoRecorrente;
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Exclui um Evento recorrente
	Método: GET
	URL: http://localhost/sig/api/index.php/deleventorecorrente/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 14/04/2015
	*/
	public function delEventoRecorrente() {

		$data = json_decode(file_get_contents("php://input"));
		
		$mensagem = '';
		$data_inicio = implode(array_reverse(explode('-',substr($data->start_recorrente, 0, 10))));
		if($data_inicio <= date('Ymd')){
			$mensagem = 'Este evento já foi realizado!';
		}elseif(count(fRecordSet::build('EventoAgenda', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem agenda cadastrada!';
		}elseif(count(fRecordSet::build('EventoAta', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem uma ata cadastrada!';
		}elseif(count(fRecordSet::build('EventoFrequencia', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem Frequencias cadastrada!';
		}elseif(count(fRecordSet::build('EventoInformativo', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem Informativos cadastrado!';
		}elseif(count(fRecordSet::build('EventoInscricao', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem inscrições cadastrada!';
		}elseif(count(fRecordSet::build('EventoLista', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem Listas cadastrada!';
		}elseif(count(fRecordSet::build('EventoPessoa', array('id_evento=' => $data->id_recorrente))) > 0){
			$mensagem = 'Este evento tem pessoa cadastrada!';
		}

		if(strlen($mensagem) > 0){
			$arrMensagem = array('error' => -1, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
		}else{
			$eventoRecorente = new EventoRecorrente($data->id);
			$evento = new Evento($data->id_recorrente);
			$mensagem = "Evento recorente excluído com sucesso!";        

			try {
			//******** Excluí informações na Tabela de pessoa_socio            
				$eventoRecorente->delete();
				$evento->delete();
			//******** Fim - Excluí informações na Tabela de departamento_pessoa
				$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
				fJSON::output($arrMensagem);
				die();
			}
			catch (fValidationException $e) {
				$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
				fJSON::output($arrMensagem);
				die();
			}    
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Efetuar o acerto de pagamento de donatarios em almoço
	Método: POST
	URL: http://localhost/sig/api/index.php/eventofrequenciaacertodonatario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 17/04/2015
	*/

	public function postEventoFrequenciaAcertoDonatario() {
		$userSes = fSession::get('user');
		$idEntidade = $userSes['user']['entidadePessoa'];
		$id_caixa = '';

		$data = json_decode(file_get_contents("php://input"));

		$mensagem = "Pagante incluído com sucesso!";

		try {
		//******** Altera id_pessoa_pagante na Tabela Evento_Frequencia
			$aEventoFrequencia = array();
			foreach ($data as $key => $value) {        
				$eventoFrequencia = new EventoFrequencia($value->id);
				$eventoFrequencia->setIdPessoaPagante($value->id_pessoa_pagante);
				$eventoFrequencia->setIdFormaPagamento(4);
				$eventoFrequencia->setIsento(1);
				$eventoFrequencia->store();

				$aEventoFrequencia[] = array(
					'id' => $eventoFrequencia->getId(),
					'id_caixa' => $eventoFrequencia->getIdCaixa(),
					);
			}
		//******** Fim - Altera id_pessoa_pagante na Tabela Evento_Frequencia

			$arrMensagem = array('error' => 0, 
				'evento_frequencia' => $aEventoFrequencia,
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Doação
	Descrição: Caixa (Despesas / Recebimentos / Transferências)
	Método: POST
	URL: http://localhost/sig/api/index.php/caixa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fabio Roberto Haydn	
	*/

	public function postCaixa() 
	{
		$data = json_decode(file_get_contents("php://input"));
		fJSON::output($this->postGeral('caixa',$data));
	}

	/*
	Módulo: Mesquita
	Descrição: Obter eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/caixaevento/<evento>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getCaixaEvento($id_evento = 0, $full = false) {

		$sqlq = "SELECT 
				 c.id,
				 c.id_evento,
				 c.id_pessoa,
				 c.valor,
				 COALESCE(DATE_FORMAT(c.data_vencimento,'%Y-%m-%d'),'') data_vencimento
				 FROM caixa c
				 @W";
				 	
		$sqlq = ($id_evento>0) ? str_replace("@W", "WHERE c.id_evento=".$id_evento, $sqlq) : "";

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Doação
	Descrição: Cadastro de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/delcaixaeventofrequencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/04/2015
	*/

	public function delCaixaEventoFrequencia() {
		$data = json_decode(file_get_contents("php://input"));
		
		$caixa = new Caixa($data->id);
		
		try {
		//******** Grava informações na Tabela de caixa
			$caixa->setValor($data->valor);
			$caixa->store();
			$id_caixa = $caixa->getId();

			$mensagem = "Caixa subtraida com sucesso!";

			if($caixa->getValor() <= 0){
				$aSearch = array();
				$aSearch['id='] = $data->id;

				$caixaEvento = fRecordSet::build('Caixa', $aSearch);
				$caixaEvento[0]->delete();
				
				$id_caixa = null;

				$mensagem = "Caixa excluida com sucesso!";
			}
			
		//******** Fim - Grava informações na Tabela de caixa
			$arrMensagem = array('error' => 0,
				'id' => $id_caixa,
				'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Tipo de Disciplina para Curso
	Método: POST
	URL: http://localhost/sig/api/index.php/cursoprofessor/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function postCursoProfessor() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$cursoProfessor = new CursoProfessor($data->id);

			$aSearch = array();
			$aSearch['id='] = $data->id;

			$mensagem = "Professor alterado do curso com sucesso!";
			$alteracao=1;
		}
		else{
			$cursoProfessor = new CursoProfessor();
			$mensagem = "Professor incluido do curso com sucesso!";
			$alteracao=0;
		}

		try {
			if (property_exists($data, 'id_curso')){
				$Ant = '';
				if($alteracao==1){
					$Ant = $cursoProfessor->getIdCurso();
				}
				$cursoProfessor->setIdCurso($data->id_curso);
				$this->setAuditoria('CursoProfessor', 'IdCurso', $Ant, $data->id_curso);
			}

			if (property_exists($data, 'id_disciplina')){
				$Ant = '';
				if($alteracao==1){
					$Ant = $cursoProfessor->getIdDisciplina();
				}
				$cursoProfessor->setIdDisciplina($data->id_disciplina);
				$this->setAuditoria('CursoProfessor', 'IdDisciplina', $Ant, $data->id_disciplina);
			}

			if (property_exists($data, 'id_pessoa_professor')){
				$Ant = '';
				if($alteracao==1){
					$Ant = $cursoProfessor->getIdPessoaProfessor();
				}
				$cursoProfessor->setIdPessoaProfessor($data->id_pessoa_professor);
				$this->setAuditoria('CursoProfessor', 'IdPessoaProfessor', $Ant, $data->id_pessoa_professor);
			}

			if (property_exists($data, 'serie')){
				$Ant = '';
				if($alteracao==1){
					$Ant = $cursoProfessor->getSerie();
				}
				$cursoProfessor->setSerie($data->serie);
				$this->setAuditoria('CursoProfessor', 'Serie', $Ant, $data->serie);
			}
			
			$cursoProfessor->store();

			$id_curso_professor = $cursoProfessor->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_curso_professor, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: Doação
	Descrição: Obter Lista de Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/professorcurso/<id_curso>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/04/2015
	*/

	public function getCursoProfessor($id="", $full = false) {

		$aSearch = '';
		if ($id != "") {
			$aSearch = ' WHERE id_curso = ' .$id;
		}  

		$sql = 'SELECT
		cur_pro.id,
		cur_pro.id_curso,
		cur_pro.id_disciplina,
		dis.nome AS disciplina,
		cur_pro.serie,
		cur_pro.id_pessoa_professor,
		pes_pro.nome AS pessoa_professor,
		cur.id_pessoa_coordenador,
		pes_coo.nome AS pessoa_coordenador
		FROM curso_professor cur_pro
		LEFT JOIN disciplina dis on(cur_pro.id_disciplina = dis.id)
		LEFT JOIN curso cur on(cur_pro.id_curso = cur.id)
		LEFT JOIN pessoa pes_pro on(cur_pro.id_pessoa_professor = pes_pro.id)
		LEFT JOIN pessoa pes_coo on(cur.id_pessoa_coordenador = pes_coo.id)';
		
		$cursoProfessor = $this->_getDb()->query($sql .$aSearch);


		$aCursoProfessor = array();
		foreach ($cursoProfessor as $key => $value) {
			$aCursoProfessor[] = array(
				'id' => $value['id'],
				'id_curso' => $value['id_curso'],
				'id_disciplina' => $value['id_disciplina'],
				'disciplina' => $value['disciplina'],
				'serie' => $value['serie'],
				'id_pessoa_professor' => $value['id_pessoa_professor'],
				'pessoa_professor' => $value['pessoa_professor'],
				'id_pessoa_coordenador' => $value['id_pessoa_coordenador'],
				'pessoa_coordenador' => $value['pessoa_coordenador'],
				);
		}

		$cursoProfessor = $this->_getDb()->close();

		if (count($aCursoProfessor) == 0) {
			$aCursoProfessor[] = array('error' => -1, 'mensagem' => "Nenhuma Disciplina ou Professor encontrado no curso.");
			fJSON::output($aCursoProfessor);
			die;
		}

		$aCursoProfessor = array(
			'curso_professor' => $aCursoProfessor
			);          
		
		if ($full == false) {
			fJSON::output($aCursoProfessor);
		} else {
			return $aCursoProfessor;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Exclui um professor de um Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/professorcurso/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 20/04/2015
	*/
	public function delCursoProfessor() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();

		$aSearch['id='] = $data->id;
		
		$cursoProfessor = fRecordSet::build('CursoProfessor', $aSearch);

		$mensagem = "Professor excluído do curso com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$cursoProfessor[0]->delete();
		//******** Fim - Excluí informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}

	/*
	Módulo: Cemitério
	Descrição: Obter lista de status das Gavetas
	Método: GET
	URL: http://localhost/sig/api/index.php/statusunidadearmazenagem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getStatusUnidadeArmazenagem($aSearch = array(), $full = false){
		$userSes = fSession::get('user');
		$idEntidade = $userSes['user']['entidadePessoa'];
		
		$aStatus = array();

		if($idEntidade == 2){
			
			$strQueryUa = "SELECT * FROM unidade_armazenagem WHERE 1 ".$aSearch;
			$status = $this->_getDb()->query($strQueryUsuario);

			foreach ($status as $key => $value) {
				$data_fim_armazenagem = '';
				if($value['data_fim_armazenagem'] != null){
					$data_fim_armazenagem = date("d/m/Y", strtotime($value['data_fim_armazenagem']));
				}

				$aStatus[] = array(
					'id' => $value['id'],
					'descricao' => $value['descricao'],
					'numero_tumulo' => $value['numero_tumulo'],
					'data_fim_armazenagem' => $data_fim_armazenagem,
					);
			}

			$status = $this->_getDb()->close();
		}


		if($full == false){
			fJSON::output($aStatus);
		}else{
			return $aStatus;
		}
	}

	/***********************************************************************************************************************/
	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Boletim
	Método: POST
	URL: http://localhost/sig/api/index.php/boletim/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	Data de Alteração: 22/04/2015
	*/

	public function postBoletim() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$boletim = new Boletim($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Boletim alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$boletim = new Boletim();
			$mensagem = "Boletim incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {

		// --------- Grava informações na Tabela de Cargo ----------- 

			if (property_exists($data, 'descricao')){
				$boletimAnt = '';
				if($alteracao==1){
					$boletimAnt = $boletim->getDescricao();
				}
				$this->setAuditoria('Boletim', 'Descricao', $boletimAnt, $data->descricao, $id);

				$boletim->setDescricao($data->descricao);
			}

			if (property_exists($data, 'ativo')){
				$boletim->setAtivo($data->ativo);
			}

			if (property_exists($data, 'tipo')){
				$boletim->setTipo($data->tipo);
			}
			
			/* ---FRH - Rotina para controle de existentes (Em 20150506)----------------------------------------- */
			
			if($alteracao != 1){

				$aSearch = array();
				$aSearch['descricao='] 	= $data->descricao;				

				$countBoletim = fRecordset::build('Boletim',$aSearch);

				if($countBoletim->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Boletim já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{ $boletim->store(); }
			}
			else{ $boletim->store(); }

			/* ------------------------------------------------------------------------------------------------- */

			$id_boletim = $boletim->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_boletim, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de boletim
	Método: GET
	URL: http://localhost/sig/api/index.php/boletim/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	Data de Alteração: 22/04/2015
	*/
	public function getBoletim($id = "", $id_consulta = "",$full = false) {	
		
		$aSearch = array();

		// boletim/0 <- tipo = 1 (da Tabela Boletim, somente Boletins -> Usado na getCursoComplemento L:38715)
		// boletim/2 <- tipo = 0 (da Tabela Boletim, somente Fichas -> Usado na getCursoComplemento L:38715)

		if (($id != '') && ($id!=0)){ 
			$aSearch['id='] = $id; 
		} 

		if ($id_consulta!='') { 
			if ($id_consulta==0) { 
				$aSearch['tipo='] = 1; 
			} else if ($id_consulta==2) { 
				$aSearch['tipo='] = 0; 
			}
		}

		$boletim = fRecordSet::build('Boletim', $aSearch, array('descricao' => 'asc'));

		$aBoletim = array();      


		$aStatusAtivo = array("Inativo", "Ativo");
		$aStatusTipo = array("Ficha", "Boletim");

		foreach ($boletim as $key => $value) {

			$aBoletim[] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'tipo' => $value->getTipo(),
				'status_tipo' => $aStatusTipo[$value->getTipo()],
				'ativo' => $value->getAtivo(),
				'status_ativo' => $aStatusAtivo[$value->getAtivo()],
				);
		}

		if ($full == false) {

			if (count($aBoletim) == 0) {
				$aBoletim[] = array('error' => -1, 'mensagem' => "Nenhum boletim encontrado.");
				fJSON::output($aBoletim);
				die();
			}

			$aBoletim = array(
				'error' => 0, 
				'boletim' => $aBoletim
				);

			
			fJSON::output($aBoletim);
		} else {
			return $aBoletim;
		}
	} 




	/***********************************************************************************************************************/
	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Motivo de desativação
	Método: POST
	URL: http://localhost/sig/api/index.php/motivosdesativacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/05/2015
	Autor: Fabio Roberto Haydn
	*/

	public function postMotivosDesativacao() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {			
			$motivos = new MotivosDesativacao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Motivo de Desativação alterado com sucesso!";
			$alteracao = 1;	
			$id = $data->id;
		}else{			
			$motivos = new MotivosDesativacao();
			$mensagem = "Motivo de Desativação incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {
			
			if (property_exists($data, 'descricao'))
			{	
				$motivosAnt = '';

				if($alteracao==1)
				{
					$motivosAnt = $motivos->getDescricao();
				}

				$this->setAuditoria('MotivosDesativacao', 'Descricao', $motivosAnt, $data->descricao, $id);
				$motivos->setDescricao($data->descricao);
			}

			if (property_exists($data, 'ativo'))
			{
				$motivos->setAtivo($data->ativo);
			}
			
			/* ---FRH - Rotina para controle de existentes (Em 20150506)----------------------------------------- */
			
			if($alteracao != 1){

				$aSearch = array();
				$aSearch['descricao='] 	= $data->descricao;

				$countMotivosDesativacao = fRecordset::build('MotivosDesativacao',$aSearch);

				if($countMotivosDesativacao->count() > 0)
				{
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Motivo de Desativação já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{ $motivos->store(); }
			}
			else{ $motivos->store(); }

			/* ------------------------------------------------------------------------------------------------- */

			$id_motivos = $motivos->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_motivos, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) 
		{
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de Motivos de desativação
	Método: GET
	URL: http://localhost/sig/api/index.php/motivosdesativacao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	Data de Alteração: 22/04/2015
	*/

	public function getMotivosDesativacao($id="", $full = false) {	
		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$motivos = fRecordSet::build('MotivosDesativacao', $aSearch, array('descricao' => 'asc'));
		$aMotivos = array();      

		$aStatusAtivo = array("Inativo", "Ativo");		

		foreach ($motivos as $key => $value) {

			$aMotivos[] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),								
				'ativo' => $value->getAtivo(),
				'status_ativo' => $aStatusAtivo[$value->getAtivo()],
				);
		}

		if ($full == false) {

			if (count($aMotivos) == 0) {
				$aMotivos[] = array('error' => -1, 'mensagem' => "Nenhum Motivo de desativação encontrado.");
				fJSON::output($aMotivos);
				die();
			}

			$aMotivos = array(
				'error' => 0, 
				'motivos' => $aMotivos
				);
			
			fJSON::output($aMotivos);
		} else {
			return $aMotivos;
		}
	} 


	/************************************************************************************************************************/
	/*
	Módulo: Cemitério
	Descrição: Cadastrar um novo Tamanho de lote
	Método: POST
	URL: http://localhost/sig/api/index.php/tamanholotes/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0	
	*/

	public function postTamanhoLotes() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));		


		if (property_exists($data, 'id')) {
			$tamanholotes = new TamanhoLotes($data->id);
			$mensagem = "Tamanho de Lote alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$tamanholotes = new TamanhoLotes();
			$mensagem = "Tamanho de Lote incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {		
			// FRH - Auditoria do campo Descrição
			if (property_exists($data, 'descricao')){
				$descrAnt = '';
				if($alteracao==1){
					$descrAnt = $tamanholotes->getDescricao();
				}
				$this->setAuditoria('TamanhoLotes', 'Descricao', $descrAnt, $data->descricao, $id);
				$tamanholotes->setDescricao($data->descricao);
			}

			// FRH - Auditoria do campo Tamanho
			if (property_exists($data, 'tamanho')){
				$descrAnt = '';
				if($alteracao==1){
					$descrAnt = $tamanholotes->getTamanho();
				}
				$this->setAuditoria('TamanhoLotes', 'tamanho', $descrAnt, $data->tamanho, $id);
				$tamanholotes->setTamanho($data->tamanho);
			}


			if (property_exists($data, 'ativo')){
				$tamanholotes->setAtivo($data->ativo);
			}

			/* ---FRH - Rotina para controle de existentes (Em 20150506)----------------------------------------- */

			if($alteracao != 1){

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$countTamanhoLotes = fRecordset::build('TamanhoLotes',$aSearch);

				if($countTamanhoLotes->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tamanho de lote já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{ $tamanholotes->store(); }
			}
			else{ $tamanholotes->store(); }

			/* ------------------------------------------------------------------------------------------------- */

			$arrMensagem = array('error' => 0, 'id_tamanholotes' => $id_tamanholotes, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tamanho de lote
	Método: GET
	URL: http://localhost/sig/api/index.php/tamanholotes/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0	
	*/

	public function getTamanhoLotes($id_consulta="", $id="", $full = false) {	
		

		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$tamanholotes = fRecordSet::build('TamanhoLotes', $aSearch, array('tamanho' => 'asc'));
		$aTamanhoLotes = array();      
		$aStatusAtivo = array("Inativo", "Ativo");
		
		if (($id_consulta != 1) && ($id=="")) {
			$aTamanhoLotes[] = array(
				'tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Tamanho de Lote",
				'ativo' => "",
				'status' => ""
				);   
		} 

		foreach ($tamanholotes as $key => $value) {

			$aTamanhoLotes[] = array(
				'tipo' 			=> 'Tamanho de lotes',				
				'id' 			=> $value->getId(),				
				'descricao' 	=> $value->getDescricao(),
				'tamanho' 		=> $value->getTamanho(),
				'ativo' 		=> $value->getAtivo(),
				'status' 	=> $aStatusAtivo[$value->getAtivo()],
				);
		}


		if ($full == false) {

			if (count($aTamanhoLotes) == 0) {
				$aTamanhoLotes[] = array('error' => -1, 'mensagem' => "Nenhum registro encontrado.");
				fJSON::output($aTamanhoLotes);
				die();
			}

			$aTamanhoLotes = array(
				'error' => 0, 
				'tamanholotes' => $aTamanhoLotes
				);
			
			fJSON::output($aTamanhoLotes);

		} else {
			return $aTamanhoLotes;
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro uma data ou do dia de atual
	Método: GET
	URL: http://localhost/sig/api/index.php/hojestatusfinanceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusUnidadeArmazenagemHoje($data="", $full = false) {		
		if($data == ""){
			$data_atual = date('Y-m-d');			
			$aSearch = " and data_fim_armazenagem = '".$data_atual."'";
		}else{			
			$aSearch = " and data_fim_armazenagem = '".$data."'";
		}

		$aStatus = array(
			'hoje' => $this->getStatusUnidadeArmazenagem($aSearch, true),
			); 

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro vencido
	Método: GET
	URL: http://localhost/sig/api/index.php/vencidostatusfinanceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusUnidadeArmazenagemVencido($data="", $full = false) {		

		$data_atual = date('Y-m-d');
		
		$aSearch = " and data_fim_armazenagem < '".$data_atual."'";

		$aStatus = array(
			'vencido' => $this->getStatusUnidadeArmazenagem($aSearch, true),
			); 

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista do Status Financeiro a vencer
	Método: GET
	URL: http://localhost/sig/api/index.php/vencerstatusfianceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 12/02/2015
	*/
	public function getStatusUnidadeArmazenagemVencer($data="", $full = false) {
		
		$data_atual = date('Y-m-d');
		$data_fim = date("Y-m-d", strtotime("+3 day"));

		$aSearch = " and data_fim_armazenagem > '".$data_atual."'";		
		$aSearch .= " and data_fim_armazenagem <= '".$data_fim."'";

		$aStatus = array(
			'vencer' => $this->getStatusUnidadeArmazenagem($aSearch, true),
			); 

		if ($full == false) {
			fJSON::output($aStatus);
			die;
		}else{
			return $aStatus;
		}
	}

	/*
	Módulo: Excluir arquivos (foto)
	Descrição: Excluir arquivos
	Método: Post
	URL: /uploadfile
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 27/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 27/04/2015
	*/

	public function removeFileDocumentoCaixa($id) {
		$documentoCaixa = new DocumentoCaixa($id);
		$dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/financeiro/";
		if(file_exists ($dir .$documentoCaixa->getArquivo()) && $documentoCaixa->getArquivo() != ""){
			unlink($dir .$documentoCaixa->getArquivo());//apaga a foto
		}
		$documentoCaixa->delete();

		$messagem['error'] = 0;
		$messagem['mensagem'] = 'Arquivo excluido com sucesso!';

		fJSON::output($messagem);
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de condiçoes
	Método: GET
	URL: http://localhost/sig/api/index.php/condicao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCondicao($id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];

		$condicao = fRecordSet::build('Condicao', $aSearch, array('descricao' => 'asc'));

		//Relacionamento
		$tipoCondicao = fRecordSet::build('TipoCondicao');
		$aTipoCondicao = array();
		foreach ($tipoCondicao as $key => $value) {
			$aTipoCondicao[$value->getId()] = array(
				'descricao' => $value->getDescricao(),
				);
		}
		//Fim Relacionamento
		
		$aCondicao = array();

		$aStatus = array("Inativo", "Ativo");
		$aStatusTipo = array("Frequência", "Nota");

		foreach ($condicao as $key => $value) {
			$aCondicao[] = array(
				'id' => $value->getId(),
				'codigo' => $value->getCodigo(),
				'id_tipo_condicao' => $value->getIdTipoCondicao(),
				'tipo_condicao' => $this->keyExists($value->getIdTipoCondicao(), $aTipoCondicao, 'descricao'),
				'descricao' => $value->getDescricao(),
				'condicao' => $value->getCondicao(),
				'tipo' => $value->getTipo(),
				'status_tipo' => $aStatusTipo[$value->getTipo()],
				'numero' => $value->getNumero(),
				'ativo' => $value->getAtivo(),
				'status' => $aStatus[$value->getAtivo()],
				);
		}

		if (count($aCondicao) == 0) {
			$aCondicao[] = array('error' => -1, 'mensagem' => "Nenhuma condição encontrado.");
			fJSON::output($aCondicao);
			die();
		}

		$aCondicao = array(
			'error' => 0, 
			'condicao' => $aCondicao
			);
		
		if ($full == false) {
			fJSON::output($aCondicao);
		} else {
			return $aCondicao;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/arredondamento/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getArredondamento($id_consulta="", $id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$arredondamento = fRecordSet::build('Arredondamento', $aSearch, array('descricao' => 'asc'));

		$aArredondamento = array();

		if (($id_consulta != 1) && ($id=="")) {
			$aArredondamento[] = array(
				'tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Novo Arredondamento",
				'ativo' => "",
				'status' => ""
				);
		}      


		$aStatus = array("Inativo", "Ativo");

		foreach ($arredondamento as $key => $value) {
			$aArredondamento[] = array(
				'tipo' => "Arredondamento",
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'ativo' => $value->getAtivo(),
				'status' => $aStatus[$value->getAtivo()],
				);
		}

		if (count($aArredondamento) == 0) {
			$aArredondamento[] = array('error' => -1, 'mensagem' => "Nenhum arredondamento encontrado.");
			fJSON::output($aArredondamento);
			die();
		}

		$aArredondamento = array(
			'error' => 0, 
			'arredondamento' => $aArredondamento
			);

		if ($full == false) {
			fJSON::output($aArredondamento);
		}
		else {
			return $aArredondamento;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar uma Nova nota
	Método: POST
	URL: http://localhost/sig/api/index.php/nota/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postNota() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$componente = new Componente($data->id);
			$mensagem = "Nota alterada com sucesso!";
			$alteracao=1;
		}
		else {
			$componente = new Componente();
			$mensagem = "Nota incluída com sucesso!";
			$alteracao=0;
		}

		try {

		//******** Grava informações na Tabela de nota
			if (property_exists($data, 'id_condicao')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getIdCondicao();
				}
				$this->setAuditoria('Componente', 'IdCondicao', $ant, $data->id_condicao);
				$componente->setIdCondicao($data->id_condicao);        
			}

			if (property_exists($data, 'id_arredondamento')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getIdArredondamento();
				}
				$this->setAuditoria('Componente', 'IdArredondamento', $ant, $data->id_arredondamento);
				$componente->setIdArredondamento($data->id_arredondamento);        
			}

			if (property_exists($data, 'codigo')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getCodigo();
				}
				$this->setAuditoria('Componente', 'Codigo', $ant, $data->codigo);
				$componente->setCodigo($data->codigo);        
			}

			if (property_exists($data, 'descricao')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getDescricao();
				}
				$this->setAuditoria('Componente', 'Descricao', $ant, $data->descricao);
				$componente->setDescricao($data->descricao);        
			}

			if (property_exists($data, 'abreviatura')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getAbreviatura();
				}
				$this->setAuditoria('Componente', 'Abreviatura', $ant, $data->abreviatura);
				$componente->setAbreviatura($data->abreviatura);        
			}

			if (property_exists($data, 'nota_informada')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getNotaInformada();
				}
				$this->setAuditoria('Componente', 'NotaInformada', $ant, $data->nota_informada);
				$componente->setNotaInformada($data->nota_informada);        
			}

			if (property_exists($data, 'formula')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getFormula();
				}
				$this->setAuditoria('Componente', 'Formula', $ant, $data->formula);
				$componente->setFormula($data->formula);
			}

			if (property_exists($data, 'fase')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getFase();
				}
				$this->setAuditoria('Componente', 'Fase', $ant, $data->fase);
				$componente->setFase($data->fase);        
			}

			if (property_exists($data, 'valor_minimo_aprovacao')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getValorMinimoAprovacao();
				}
				$this->setAuditoria('Componente', 'ValorMinimoAprovacao', $ant, $data->valor_minimo_aprovacao);
				$componente->setValorMinimoAprovacao($data->valor_minimo_aprovacao);        
			}

			if (property_exists($data, 'valor_maximo')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getValorMaximo();
				}
				$this->setAuditoria('Componente', 'ValorMaximo', $ant, $data->valor_maximo);
				$componente->setValorMaximo($data->valor_maximo);        
			}

			if (property_exists($data, 'peso')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getPeso();
				}
				$this->setAuditoria('Componente', 'Peso', $ant, $data->peso);
				$componente->setPeso($data->peso);        
			}

			if (property_exists($data, 'peso_media')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getPesoMedia();
				}
				$this->setAuditoria('Componente', 'PesoMedia', $ant, $data->peso_media);
				$componente->setPesoMedia($data->peso_media);        
			}

			if (property_exists($data, 'ordem')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getOrdem();
				}
				$this->setAuditoria('Componente', 'Ordem', $ant, $data->ordem);
				$componente->setOrdem($data->ordem);        
			}

			if (property_exists($data, 'recuperacao')){
				$ant = '';
				if($alteracao==1){
					$ant = $componente->getRecuperacao();
				}
				$this->setAuditoria('Componente', 'Recuperacao', $ant, $data->recuperacao);
				$componente->setRecuperacao($data->recuperacao);
			}

			$componente->setAtivo(1);

			$userSes = fSession::get('user');
			$componente->setIdEntidade($userSes['user']['entidadePessoa']);	
			
			//echo '<pre>'.print_r($componente).'</pre>';

			$componente->store();

			//******** Fim - Grava informações na Tabela de Entidade

			$id_componente = $componente->getId();

			/* ================================================= */
			/* ====== FRH - Nova tabela componente_detalhe ===== */
			/* ================================================= */
			$pesq = array();
			$pesq['id_componente_formula='] = $id_componente;

			$rsp = fRecordSet::build('ComponenteDetalhe', $pesq);
			foreach ($rsp->getRecords() as $key => $value) {
				$rsd = new ComponenteDetalhe($value->getId());
				$rsd->delete();
			}

			if (property_exists($data, 'formula')){

				$tmp = preg_split('/[\+\-\*\/\<\>\=\(\)]+/',preg_replace('/\s+/','',$data->formula));
				
				foreach($tmp as $value){

					$retcd = '';				
					$sqlcd = "SELECT id FROM componente WHERE descricao LIKE '%".$value."%'";
					$rscd = $this->_getDb()->query($sqlcd);
					foreach ($rscd as $key => $value){ $retcd = $value['id']; }
					$rscd = $this->_getDb()->close();

					$rs = new ComponenteDetalhe();
					$rs->setIdComponenteFormula($id_componente);
					$rs->setIdComponenteItem($retcd);
					$rs->store();
				}
			}
			/* ================================================= */

			$arrMensagem = array('error' => 0, 'id' => $id_componente, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Erro: " . $e);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Nota
	Método: GET
	URL: http://localhost/sig/api/index.php/nota/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getNota($id=0, $nota_informada = '', $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}

		if ($nota_informada != '') {
			$aSearch['nota_informada='] = $nota_informada;
		}
		
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		$componente = fRecordSet::build('Componente', $aSearch, array('ordem' => 'asc'));
		
		$aComponente = array();
		$aStatus = array("Inativo", "Ativo");
		$aRecup = array("Não", "Sim");
		$aStatusNotaInformada = array("Não", "Sim");

		foreach ($componente as $key => $value) {

			$aComponente[] = array(
				'id' => $value->getId(),
				'id_condicao' => $value->getIdCondicao(),
				'condicao' => $value->getIdCondicao(),
				'id_arredondamento' => $value->getIdArredondamento(),
				'arredondamento' => $value->getIdArredondamento(),
				'codigo' => $value->getCodigo(),
				'descricao' => $value->getDescricao(),
				'abreviatura' => $value->getAbreviatura(),
				'nota_informada' => $value->getNotaInformada(),
				'status_nota_informada' => $aStatusNotaInformada[$value->getNotaInformada()],
				'formula' => $value->getFormula(),
				'fase' => $value->getFase(),
				'valor_minimo_aprovacao' => $value->getValorMinimoAprovacao(),
				'valor_maximo' => $value->getValorMaximo(),
				'peso' => $value->getPeso(),
				'peso_media' => $value->getPesoMedia(),
				'ordem' => $value->getOrdem(),
				'ativo' => $value->getAtivo(),
				'recuperacao' => $value->getRecuperacao(),
				'status' => $aStatus[$value->getAtivo()],
				);
		}

		if (count($aComponente) == 0) {
			$aComponente[] = array('error' => -1, 'mensagem' => "Nenhum componente encontrado.");
			fJSON::output($aComponente);
			die();
		}

		$aComponente = array(
			'error' => 0, 
			'nota' => $aComponente
			);
		
		if ($full == false) {
			fJSON::output($aComponente);
		} else {
			return $aComponente;
		}
	}

	/***********************************************************************************************************************/
	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Horario
	Método: POST
	URL: http://localhost/sig/api/index.php/horario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/05/2015
	Autor: Fabio Roberto Haydn
	*/

	public function postHorario() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$horario = new Horario($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Horário alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$horario = new Horario();
			$mensagem = "Horário incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {			

			if (property_exists($data, 'descricao')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getDescricao();
				}

				$this->setAuditoria('Horario', 'Descricao', $horarioAnt, $data->descricao, $id);
				$horario->setDescricao($data->descricao);
			}

			if (property_exists($data, 'hora_inicial')){

				$HorarioAnt = '';
				if($alteracao==1){
					$HorarioAnt = $horario->getHoraInicial();
				}

				$horario->setHoraInicial($data->hora_inicial);
				$this->setAuditoria('Horario', 'Hora de Início', $HorarioAnt, $data->hora_inicial);
			}
			if (property_exists($data, 'hora_final')){

				$HorarioAnt = '';
				if($alteracao==1){
					$HorarioAnt = $horario->getHoraFinal();
				}

				$horario->setHoraFinal($data->hora_final);
				$this->setAuditoria('Horario', 'Hora de Fim', $HorarioAnt, $data->hora_final);
			}

			if (property_exists($data, 'ativo')){
				$horario->setAtivo($data->ativo);
			}
			
			$userSes = fSession::get('user');
			$horario->setIdEntidade($userSes['user']['entidadePessoa']);	

			/* ---FRH - Rotina para controle de existentes (Em 20150506)----------------------------------------- */
			
			if($alteracao != 1){

				$aSearch = array();
				$aSearch['descricao='] 	= $data->descricao;	
				$aSearch['hora_inicial='] = $data->hora_inicial;
				$aSearch['hora_final='] = $data->hora_final;			

				$countHorario = fRecordset::build('Horario',$aSearch);

				if($countHorario->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Horário já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{ $horario->store(); }
			}
			else{ $horario->store(); }

			/* ------------------------------------------------------------------------------------------------- */
			
			$id_horario = $horario->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_horario, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de horários
	Método: GET
	URL: http://localhost/sig/api/index.php/horario/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/04/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0	
	*/

	public function getHorario($id="", $full = false) {	
		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$userSes = fSession::get('user');
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		$horario = fRecordSet::build('Horario', $aSearch, array('descricao' => 'asc'));
		
		if ($full == false) {

			$aHorario = array();      

			$aStatusAtivo = array("Inativo", "Ativo");		

			foreach ($horario as $key => $value) {

				$aHorario[] = array(
					'id' 			=> $value->getId(),
					'descricao' 	=> $value->getDescricao(),
					'hora_inicial' 	=> $value->getHoraInicial(),
					'hora_final' 	=> $value->getHoraFinal(),
					'ativo' 		=> $value->getAtivo(),
					'status_ativo' 	=> $aStatusAtivo[$value->getAtivo()],
					);
			}		

			if (count($aHorario) == 0) {
				$aHorario[] = array('error' => -1, 'mensagem' => "Nenhum Horário encontrado.");
				fJSON::output($aHorario);
				die();
			}

			$aHorario = array(
				'error' => 0, 
				'horario' => $aHorario
				);
			
			fJSON::output($aHorario);
		} else {
			return $horario;
		}
	} 
	
	/***********************************************************************************************************************/
	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova turma
	Método: POST
	URL: http://localhost/sig/api/index.php/turma/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/05/2015
	Autor: Fabio Roberto Haydn
	*/
	
	public function postTurma() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$turma = new Turma($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Turma alterada com sucesso!";
			$alteracao=1;
		}else{
			$turma = new Turma();
			$mensagem = "Turma incluída com sucesso!";
			$alteracao=0;
		}

		try {

			
			if (property_exists($data, 'id_etapa'))
			{ 
				$idEtapaAnt = ''; 
				if($alteracao==1){ $idEtapaAnt = $turma->getIdEtapa(); } 
				$turma->setIdEtapa($data->id_etapa); 
				$this->setAuditoria('Turma', 'id_etapa', $idEtapaAnt, $data->id_etapa);
			}
			if (property_exists($data, 'id_curso'))
			{ 
				$idCursoAnt = '';
				if($alteracao==1){ $idCursoAnt = $turma->getIdCurso(); } 
				$turma->setIdCurso($data->id_curso); 
				$this->setAuditoria('Turma', 'id_curso', $idCursoAnt, $data->id_curso);
			}
			if (property_exists($data, 'id_periodo_aula'))
			{ 
				$idPeriodoAulaAnt = '';  
				if($alteracao==1){ $idPeriodoAulaAnt = $turma->getIdPeriodoAula(); } 
				$turma->setIdPeriodoAula($data->id_periodo_aula); 
				$this->setAuditoria('Turma', 'id_periodo_aula', $idPeriodoAulaAnt, $data->id_periodo_aula);
			}
			if (property_exists($data, 'id_tipo_turma'))
			{ 
				$idTipoTurmaAnt = '';  
				if($alteracao==1){ $idTipoTurmaAnt = $turma->getIdTipoTurma(); } 
				$turma->setIdTipoTurma($data->id_tipo_turma); 
				$this->setAuditoria('Turma', 'id_tipo_turma', $idTipoTurmaAnt, $data->id_tipo_turma);
			}
			if (property_exists($data, 'codigo'))
			{ 
				$codigoAnt = '';  
				if($alteracao==1){ $codigoAnt = $turma->getCodigo(); } 
				$turma->setCodigo($data->codigo); 
				$this->setAuditoria('Turma', 'codigo', $codigoAnt, $data->codigo);
			}
			if (property_exists($data, 'nome'))
			{ 
				$nomeAnt = '';  
				if($alteracao==1){ $nomeAnt = $turma->getNome(); } 
				$turma->setNome($data->nome); 
				$this->setAuditoria('Turma', 'nome', $nomeAnt, $data->nome);
			}
			if (property_exists($data, 'abreviatura'))
			{ 
				$abreviaturaAnt = '';  
				if($alteracao==1){ $abreviaturaAnt = $turma->getAbreviatura(); } 
				$turma->setAbreviatura($data->abreviatura); 
				$this->setAuditoria('Turma', 'abreviatura', $abreviaturaAnt, $data->abreviatura);
			}
			if (property_exists($data, 'serie'))
			{ 
				$serieAnt = '';  
				if($alteracao==1){ $serieAnt = $turma->getSerie(); } 
				$turma->setSerie($data->serie); 
				$this->setAuditoria('Turma', 'serie', $serieAnt, $data->serie);
			}
			if (property_exists($data, 'sala'))
			{ 
				$salaAnt = '';  
				if($alteracao==1){ $salaAnt = $turma->getSala(); } 
				$turma->setSala($data->sala); 
				$this->setAuditoria('Turma', 'sala', $salaAnt, $data->sala);
			}
			if (property_exists($data, 'quantidade_maxima_aluno'))
			{ 
				$quantidadeMaximaAlunoAnt = '';  
				if($alteracao==1){ $quantidadeMaximaAlunoAnt = $turma->getQuantidadeMaximaAluno(); } 
				$turma->setQuantidadeMaximaAluno($data->quantidade_maxima_aluno); 
				$this->setAuditoria('Turma', 'quantidade_maxima_aluno', $quantidadeMaximaAlunoAnt, $data->quantidade_maxima_aluno);
			}
			if (property_exists($data, 'observacao'))
			{ 
				$observacaoAnt = '';  
				if($alteracao==1){ $observacaoAnt = $turma->getObservacao(); } 
				$turma->setObservacao($data->observacao); 
				$this->setAuditoria('Turma', 'observacao', $observacaoAnt, $data->observacao);
			}
			if (property_exists($data, 'ativo')){
				$turma->setAtivo($data->ativo);
			}

			$userSes = fSession::get('user');
			$turma->setIdEntidade($userSes['user']['entidadePessoa']);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['id_etapa='] 				 = $data->id_etapa;
				$aSearch['id_curso='] 				 = $data->id_curso;
				$aSearch['id_periodo_aula='] 		 = $data->id_periodo_aula;
				$aSearch['id_tipo_turma='] 			 = $data->id_tipo_turma;
				$aSearch['codigo='] 				 = $data->codigo;
				$aSearch['nome='] 					 = $data->nome;
				$aSearch['abreviatura='] 			 = $data->abreviatura;
				$aSearch['serie='] 					 = $data->serie;
				$aSearch['sala='] 					 = $data->sala;
				$aSearch['quantidade_maxima_aluno='] = $data->quantidade_maxima_aluno;
				if (property_exists($data, 'observacao')){
					$aSearch['observacao='] 			 = $data->observacao;
				}
				$aSearch['ativo='] 			 		 = $data->ativo;

				$countObj = fRecordset::build('Turma', $aSearch);


				if($countObj->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A turma já existe");
					fJSON::output($arrMensagem);
					die();
				}else{
					$turma->store();
				}
			} else {
				$turma->store();
			}

			$id_turma = $turma->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_turma, 'mensagem' => $mensagem);

			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
		
	}
	
	/*
	Módulo: Escola
	Descrição: Obter Lista de Turma
	Método: GET
	URL: http://localhost/sig/api/index.php/turma/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/05/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0	
	*/
	
	public function getTurma($id_consulta="",$id=0, $id_curso=0, $full = false) {

		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		
		if ($id_curso > 0) {
			$aSearch['id_curso='] = $id_curso;
		}

		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];

		$turma = fRecordSet::build('Turma', $aSearch, array('nome' => 'asc'));
		
		$aTurma = array();

		if (($id_consulta != "1") && ($id=="")) {
			$aTurma[] = array(	'tipo'		=>"Ação",
				'id' 		=> "-1",
				'descricao' => ":: Cadastrar Nova Turma",
				'ativo' 	=> "");
		}

		$aStatusAtivo = array("Inativo", "Ativo");		

		foreach ($turma->getRecords() as $key => $value) {
			$id_etapa		 		 = "";	
			$id_curso			 	 = "";
			$id_periodo_aula		 = "";
			$id_tipo_turma			 = "";
			$codigo				 	 = "";
			$nome				 	 = "";
			$abreviatura			 = "";
			$serie				 	 = "";
			$turma				 	 = "";
			$sala				 	 = "";
			$quantidade_maxima_aluno = "";
			$observacao			 	 = "";
			
			$id_etapa		 		 = $value->getIdEtapa();	
			$id_curso			 	 = $value->getIdCurso();
			$id_periodo_aula		 = $value->getIdPeriodoAula();
			$id_tipo_turma			 = $value->getIdTipoTurma();

			$etapa_descricao = new Etapa($value->getIdEtapa());
			
			if (count($etapa_descricao)>0) {
				$etapa_descricao 	 = $etapa_descricao->getDescricao();
			}

			$curso_nome 		 	 = $this->getCurso(1, $value->getIdCurso(), 0, true);	
			if (count($curso_nome)>0) {				
				$curso_nome = $curso_nome[0]['nome'];
			}

			$periodoaula_descricao   = $this->getPeriodoAula(1, $value->getIdPeriodoAula(), true);	
			if (count($periodoaula_descricao)>0) {
				$periodoaula_descricao = $periodoaula_descricao[0]->getDescricao();
			}

			$tipoturma_descricao = new TipoTurma($value->getIdTipoTurma());

			if (count($tipoturma_descricao)>0) {
				$tipoturma_descricao = $tipoturma_descricao->getDescricao();				
			}

			$codigo				 	 = $value->getCodigo();
			$nome				 	 = $value->getNome();
			$abreviatura			 = $value->getAbreviatura();
			$serie				 	 = $value->getSerie();
			$sala				 	 = $value->getSala();
			$quantidade_maxima_aluno = $value->getQuantidadeMaximaAluno();
			$observacao			 	 = $value->getObservacao();				
			
			$aTurma[] = array(

				'tipo' 						=>"Turma",
				'id' 						=>$value->getId(),
				'id_etapa'					=>$id_etapa,
				'id_curso'					=>$id_curso,
				'id_periodo_aula'			=>$id_periodo_aula,
				'id_tipo_turma'				=>$id_tipo_turma,
				'etapa_descricao'			=>$etapa_descricao,
				'curso_nome'				=>$curso_nome,
				'periodoaula_descricao'		=>$periodoaula_descricao,
				'tipoturma_descricao'		=>$tipoturma_descricao,
				'codigo'					=>$codigo,
				'nome'						=>$nome,
				'abreviatura'				=>$abreviatura,
				'serie'						=>$serie,
				'sala'						=>$sala,
				'quantidade_maxima_aluno'	=>$quantidade_maxima_aluno,
				'observacao'				=>$observacao,
				'ativo'		 				=>$value->getAtivo(),
				'status_ativo' 				=>$aStatusAtivo[$value->getAtivo()]);
		}

		if (count($aTurma) == 0) {
			$aTurma[] = array('error' => -1, 'mensagem' => "Nenhuma Turma encontrada.");
		} 
		else 
		{
			$aTurma = array('error' => 0, 'turma' => $aTurma);
		}

		if ($full == false) {
			fJSON::output($aTurma);
		}
		else {
			return $aTurma;
		}
	} 
	
	/************************************************************************************************************************/

	/*
	Módulo: escola
	Descrição: Obter Lista de tipo de condição
	Método: GET
	URL: http://localhost/sig/api/index.php/tipocondicao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getTipoCondicao($id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id != '') {
			$aSearch['id='] = $id;
		}

		$tipoCondicao = fRecordSet::build('TipoCondicao', $aSearch, array('descricao' => 'asc'));

		$aTipoCondicao = array();     

		$aStatus = array("Inativo", "Ativo");

		foreach ($tipoCondicao as $key => $value) {
			$aTipoCondicao[] = array(
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'ativo' => $value->getAtivo(),
				'status' => $aStatus[$value->getAtivo()],
				);
		}

		if (count($aTipoCondicao) == 0) {
			$aTipoCondicao[] = array('error' => -1, 'mensagem' => "Nenhum tipo de condição encontrada.");
			fJSON::output($aTipoCondicao);
			die();
		}

		$aTipoCondicao = array(
			'error' => 0, 
			'tipo_condicao' => $aTipoCondicao
			);

		if ($full == false) {
			fJSON::output($aTipoCondicao);
		}
		else {
			return $aTipoCondicao;
		}
	}


	/*
	Módulo: Escola
	Descrição: Cadastrar uma Nova condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/condicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCondicao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$condicao = new Condicao($data->id);
			$mensagem = "Condição alterada com sucesso!";
			$alteracao=1;
		}
		else {
			$condicao = new Condicao();
			$mensagem = "Condição incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de nota
			if (property_exists($data, 'id_tipo_condicao')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getIdTipoCondicao();
				}
				$this->setAuditoria('Condicao', 'IdTipoCondicao', $ant, $data->id_tipo_condicao);
				$condicao->setIdTipoCondicao($data->id_tipo_condicao);        
			}

			if (property_exists($data, 'codigo')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getCodigo();
				}
				$this->setAuditoria('Condicao', 'Codigo', $ant, $data->codigo);
				$condicao->setCodigo($data->codigo);        
			}

			if (property_exists($data, 'descricao')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getDescricao();
				}
				$this->setAuditoria('Condicao', 'Descricao', $ant, $data->descricao);
				$condicao->setDescricao($data->descricao);        
			}

			if (property_exists($data, 'tipo')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getTipo();
				}
				$this->setAuditoria('Condicao', 'Tipo', $ant, $data->tipo);
				$condicao->setTipo($data->tipo);        
			}

			if (property_exists($data, 'condicao')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getCondicao();
				}
				$this->setAuditoria('Condicao', 'Condicao', $ant, $data->condicao);
				$condicao->setCondicao($data->condicao);        
			}
			
			if (property_exists($data, 'numero')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getNumero();
				}
				$this->setAuditoria('Condicao', 'Numero', $ant, $data->numero);
				$condicao->setNumero($data->numero);        
			}

			$condicao->setAtivo(1);

			$userSes = fSession::get('user');
			$condicao->setIdEntidade($userSes['user']['entidadePessoa']);

			$condicao->store();
			//******** Fim - Grava informações na Tabela de condicao

			$id_condicao = $condicao->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_condicao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

    /*
	Módulo: Escola
	Descrição: Cadastrar uma Novo curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/cursocondicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCursoCondicao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$condicao = new CursoCondicao($data->id);
			$mensagem = "Condição alterada do curso com sucesso!";
			$alteracao=1;
		}
		else {
			$condicao = new CursoCondicao();
			$mensagem = "Condição incluída no curso com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de nota
			if (property_exists($data, 'id_condicao')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getIdCondicao();
				}
				$this->setAuditoria('CursoCondicao', 'IdCondicao', $ant, $data->id_condicao);
				$condicao->setIdCondicao($data->id_condicao);        
			}
			
			if (property_exists($data, 'id_curso')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getIdCurso();
				}
				$this->setAuditoria('CursoCondicao', 'IdCurso', $ant, $data->id_curso);
				$condicao->setIdCurso($data->id_curso);        
			}

			if (property_exists($data, 'ordem')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getOrdem();
				}
				$this->setAuditoria('CursoCondicao', 'Ordem', $ant, $data->ordem);
				$condicao->setOrdem($data->ordem);        
			}
			
			$condicao->store();
			//******** Fim - Grava informações na Tabela de condicao

			$id_condicao = $condicao->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_condicao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: escola
	Descrição: Obter Lista de curso condição
	Método: GET
	URL: http://localhost/sig/api/index.php/cursocondicao/<id>/<id_curso>/<id_condicao>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/04/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCursoCondicao($id=0, $id_curso=0, $id_condicao=0, $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		if ($id_curso > 0) {
			$aSearch['id_curso='] = $id_curso;
		}
		if ($id_condicao > 0) {
			$aSearch['id_condicao='] = $id_condicao;
		}

		$cursoCondicao = fRecordSet::build('CursoCondicao', $aSearch, array('ordem' => 'asc'));
		
		$aCursoCondicao = array();

		$aStatus = array("Inativo", "Ativo");
		$aStatusTipo = array("Frequência", "Nota");

		foreach ($cursoCondicao as $key => $value) {
			//Relacionamento
			$aSearchCondicao  = array();
			$aSearchCondicao['id='] = $value->getIdCondicao();

			$condicao = fRecordSet::build('Condicao', $aSearchCondicao);
			$aCondicao = array();
			foreach ($condicao as $key => $value2) {
				$aCondicao[$value2->getId()] = array(
					'descricao' => $value2->getDescricao(),
					'tipo' => $value2->getTipo(),
					);
			}
			
			$aSearchCurso  = array();
			$aSearchCurso['id='] = $value->getIdCurso();
			
			$curso = fRecordSet::build('Curso', $aSearchCurso);
			$aCurso = array();
			foreach ($curso as $key => $value3) {
				$aCurso[$value3->getId()] = array(
					'nome' => $value3->getNome(),
					);
			}
			//Fim - Relacionamento

			$aCondTip = $this->keyExists($value->getIdCondicao(), $aCondicao, 'tipo');
			$aStaCondTip = "";
			if($aCondTip == 0){
				$aStaCondTip = "Nota";
			}elseif($aCondTip == 1){
				$aStaCondTip = "Frequência";
			}
			
			//$this->keyExists($value->getIdCondicao(), $aCondicao, 'tipo');

			$aCursoCondicao[] = array(
				'id' => $value->getId(),
				'id_curso' => $value->getIdCurso(),
				'curso' => $this->keyExists($value->getIdCurso(), $aCurso, 'nome'),
				'id_condicao' => $value->getIdCondicao(),
				'condicao' => $this->keyExists($value->getIdCondicao(), $aCondicao, 'descricao'),
				'condicao_tipo' => $aCondTip,
				'condicao_tipo_status' => $aStaCondTip,
				'ordem' => $value->getOrdem(),
				);
		}
		/*
		'codigo' => $value->getCodigo(),
				'id_tipo_condicao' => $value->getIdTipoCondicao(),
				'tipo_condicao' => $this->keyExists($value->getIdTipoCondicao(), $aTipoCondicao, 'descricao'),
				'descricao' => $value->getDescricao(),
				'condicao' => $value->getCondicao(),
				'tipo' => $value->getTipo(),
				'status_tipo' => $aStatusTipo[$value->getTipo()],
				'numero' => $value->getNumero(),
				'ativo' => $value->getAtivo(),
				'status' => $aStatus[$value->getAtivo()],
		*/
				if (count($aCursoCondicao) == 0) {
					$aCursoCondicao[] = array('error' => -1, 'mensagem' => "Nenhuma condição encontrado para o curso.");
					fJSON::output($aCursoCondicao);
					die();
				}

				$aCursoCondicao = array(
					'error' => 0, 
					'curso_condicao' => $aCursoCondicao
					);
				
				if ($full == false) {
					fJSON::output($aCursoCondicao);
				} else {
					return $aCursoCondicao;
				}
			}

	/*
	Módulo: Escola
	Descrição: Ordena o curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/cursocondicaoordenacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCursoCondicaoOrdenacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id') && property_exists($data, 'id_destino')) {
			$cursoCondicao = new CursoCondicao($data->id);
			$cursoCondicaoDestino = new CursoCondicao($data->id_destino);

			$mensagem = "Ordem da condição alterada com sucesso!";
			$alteracao=1;
		}

		try {
			//******** Grava informações na Tabela de condicao
			$ordem = $cursoCondicao->getOrdem();
			$ordem_destino = $cursoCondicaoDestino->getOrdem();

			$cursoCondicao->setOrdem($ordem_destino);        
			$cursoCondicaoDestino->setOrdem($ordem);        
			
			$cursoCondicao->store();
			$cursoCondicaoDestino->store();
			//******** Fim - Grava informações na Tabela de condicao

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Deleta o curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/cursocondicaoordenacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/05/2015
	Autor: Fabio da Silva
	*/

	public function delCursoCondicao() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$cursoCondicao = fRecordSet::build('CursoCondicao', $aSearch);

		$mensagem = "Condição excluída do curso com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$cursoCondicao[0]->delete();

			$aSearch = array();
			$aSearch['id_curso='] = $data->id_curso;

			$resultCursoCondicao = fRecordSet::build('CursoCondicao', $aSearch, array('ordem' => 'asc'));			
			foreach ($resultCursoCondicao as $key => $value) {
				$resultCursoCondicao[$key]->setOrdem($key+1);
				$resultCursoCondicao[$key]->store();
			}

		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}

	/*
	Módulo: escola
	Descrição: Obter Lista de curso nota
	Método: GET
	URL: http://localhost/sig/api/index.php/cursonota/<id>/<id_curso>/<id_nota>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 3008/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCursoNota($id=0, $id_curso=0, $id_nota=0, $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		if ($id_curso > 0) {
			$aSearch['id_curso='] = $id_curso;
		}
		if ($id_nota > 0) {
			$aSearch['id_componente='] = $id_nota;
		}

		$cursoCondicao = fRecordSet::build('CursoNota', $aSearch, array('ordem' => 'asc'));
		
		$aCursoCondicao = array();

		$aStatus = array("Inativo", "Ativo");
		$aStatusTipo = array("Frequência", "Nota");

		foreach ($cursoCondicao as $key => $value) {
			//Relacionamento
			$aSearchComponente  = array();
			$aSearchComponente['id='] = $value->getIdComponente();

			$componente = fRecordSet::build('Componente', $aSearchComponente);
			$aComponente = array();
			foreach ($componente as $key => $value2) {
				$aComponente[$value2->getId()] = array(
					'descricao' => $value2->getDescricao(),
					'abreviatura' => $value2->getAbreviatura(),
					'fase' => $value2->getFase(),
					'valor_minimo_aprovacao' => $value2->getValorMinimoAprovacao(),
					'valor_maximo' => $value2->getValorMaximo(),
				);
			}
			
			$aSearchCurso  = array();
			$aSearchCurso['id='] = $value->getIdCurso();
			
			$curso = fRecordSet::build('Curso', $aSearchCurso);
			$aCurso = array();
			foreach ($curso as $key => $value3) {
				$aCurso[$value3->getId()] = array(
					'nome' => $value3->getNome(),
					);
			}
			//Fim - Relacionamento

			$aStatusCondicaoTipo = array('Nota', 'Frequência');

			$tmp = $value->getDataLimite();
			
			$aCursoCondicao[] = array(
				'id' => $value->getId(),
				'id_curso' => $value->getIdCurso(),
				'curso' => $this->keyExists($value->getIdCurso(), $aCurso, 'nome'),
				'id_componente' => $value->getIdComponente(),
				'componente' => $this->keyExists($value->getIdComponente(), $aComponente, 'descricao'),
				'abreviatura' => $this->keyExists($value->getIdComponente(), $aComponente, 'abreviatura'),
				'ordem' => $value->getOrdem(),
				'fase' => $this->keyExists($value->getIdComponente(), $aComponente, 'fase'),
				'valor_minimo_aprovacao' => $this->keyExists($value->getIdComponente(), $aComponente, 'valor_minimo_aprovacao'),
				'valor_maximo' => $this->keyExists($value->getIdComponente(), $aComponente, 'valor_maximo'),
				'data_limite' => (!is_null($tmp)) ? $tmp->format('d/m/Y') : ''
			);
		}

		if (count($aCursoCondicao) == 0) {
			$aCursoCondicao[] = array('error' => -1, 'mensagem' => "Nenhuma nota encontrada para o curso.");
			fJSON::output($aCursoCondicao);
			die();
		}

		$aCursoCondicao = array(
			'error' => 0, 
			'curso_nota' => $aCursoCondicao
			);
		
		if ($full == false) {
			fJSON::output($aCursoCondicao);
		} else {
			return $aCursoCondicao;
		}
	}


	/*
	Módulo: Escola
	Descrição: Cadastrar uma Novo curso nota
	Método: POST
	URL: http://localhost/sig/api/index.php/cursonota/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCursoNota() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$condicao = new CursoNota($data->id);
			$mensagem = "Nota alterada do curso com sucesso!";
			$alteracao=1;
		}
		else {
			$condicao = new CursoNota();
			$mensagem = "Nota incluída no curso com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de nota
			if (property_exists($data, 'id_nota')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getIdComponente();
				}
				$this->setAuditoria('CursoNota', 'IdComponente', $ant, $data->id_nota);
				$condicao->setIdComponente($data->id_nota);        
			}
			
			if (property_exists($data, 'id_curso')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getIdCurso();
				}
				$this->setAuditoria('CursoCondicao', 'IdCurso', $ant, $data->id_curso);
				$condicao->setIdCurso($data->id_curso);        
			}

			if (property_exists($data, 'ordem')){
				$ant = '';
				if($alteracao==1){
					$ant = $condicao->getOrdem();
				}
				$this->setAuditoria('CursoCondicao', 'Ordem', $ant, $data->ordem);
				$condicao->setOrdem($data->ordem);        
			}
			
			if (property_exists($data, 'data_limite')){
				$condicao->setDataLimite($data->data_limite);
			}

			$condicao->store();
			//******** Fim - Grava informações na Tabela de condicao

			$id_condicao = $condicao->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_condicao, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Escola
	Descrição: Ordena o curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/cursocomponenteordenacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCursoNotaOrdenacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id') && property_exists($data, 'id_destino')) {
			$cursoComponente = new CursoNota($data->id);
			$cursoComponenteDestino = new CursoNota($data->id_destino);

			$mensagem = "Ordem da nota alterada com sucesso!";
			$alteracao=1;
		}

		try {
			//******** Grava informações na Tabela de condicao
			$ordem = $cursoComponente->getOrdem();
			$ordem_destino = $cursoComponenteDestino->getOrdem();

			$cursoComponente->setOrdem($ordem_destino);        
			$cursoComponenteDestino->setOrdem($ordem);        
			
			$cursoComponente->store();
			$cursoComponenteDestino->store();
			//******** Fim - Grava informações na Tabela de condicao

			$arrMensagem = array('error' => 0, 'mensagem' => "oi".$mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

/*
	Módulo: Escola
	Descrição: Deleta o curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/delcursonota/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 07/05/2015
	Autor: Fabio da Silva
	*/

	public function delCursoNota() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$cursoNota = fRecordSet::build('CursoNota', $aSearch);

		$mensagem = "Nota excluída do curso com sucesso!";        

		try {
		//******** Excluí informações na Tabela de curso nota          
			$cursoNota[0]->delete();

			$aSearch = array();
			$aSearch['id_curso='] = $data->id_curso;

			$resultCursoNota = fRecordSet::build('CursoNota', $aSearch, array('ordem' => 'asc'));			
			foreach ($resultCursoNota as $key => $value) {
				$resultCursoNota[$key]->setOrdem($key+1);
				$resultCursoNota[$key]->store();
			}

		//******** Fim - Excluí informações na Tabela de curso nota

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}

	/*
	Módulo: Escola
	Descrição: Cadastrar um novo Horario
	Método: POST
	URL: http://localhost/sig/api/index.php/cursohorario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/05/2015
	Autor: Fabio da Silva
	*/

	public function postCursoHorario() {
		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$horario = new CursoHorario($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Horário alterado com sucesso!";
			$alteracao = 1;
			$id = $data->id;
		}else{
			$horario = new CursoHorario();
			$mensagem = "Horário incluído com sucesso!";
			$alteracao = 0;
			$id = "";
		}

		try {			

			if (property_exists($data, 'id_curso')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getIdCurso();
				}

				$this->setAuditoria('CursoHorario', 'IdCurso', $horarioAnt, $data->id_curso, $id);
				$horario->setIdCurso($data->id_curso);
			}

			if (property_exists($data, 'id_disciplina')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getIdDisciplina();
				}

				$this->setAuditoria('CursoHorario', 'IdDisciplina', $horarioAnt, $data->id_disciplina, $id);
				$horario->setIdDisciplina($data->id_disciplina);
			}

			if (property_exists($data, 'id_historico_parte')){
				$historicoParteAnt = '';
				if($alteracao==1){
					$historicoParteAnt = $horario->getIdHistoricoParte();
				}

				$this->setAuditoria('CursoHorario', 'IdHistoricoParte', $historicoParteAnt, $data->id_historico_parte, $id);
				$horario->setIdHistoricoParte($data->id_historico_parte);
			}			

			if (property_exists($data, 'serie')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getSerie();
				}

				$this->setAuditoria('CursoHorario', 'Serie', $horarioAnt, $data->serie, $id);
				$horario->setSerie($data->serie);
			}

			if (property_exists($data, 'peso')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getPeso();
				}

				$this->setAuditoria('CursoHorario', 'Peso', $horarioAnt, $data->peso, $id);
				$horario->setPeso($data->peso);
			}

			if (property_exists($data, 'conceito_nota')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getConceitoNota();
				}

				$this->setAuditoria('CursoHorario', 'ConceitoNota', $horarioAnt, $data->conceito_nota, $id);
				$horario->setConceitoNota($data->conceito_nota);
			}

			if (property_exists($data, 'ordem')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getOrdem();
				}

				$this->setAuditoria('CursoHorario', 'Ordem', $horarioAnt, $data->ordem, $id);
				$horario->setOrdem($data->ordem);
			}

			if (property_exists($data, 'carga_horaria')){
				$horarioAnt = '';
				if($alteracao==1){
					$horarioAnt = $horario->getCargaHoraria();
				}

				$this->setAuditoria('CursoHorario', 'CargaHoraria', $horarioAnt, $data->carga_horaria, $id);
				$horario->setCargaHoraria($data->carga_horaria);
			}

			if (property_exists($data, 'carga_horaria_02')){
				$horario->setCargaHoraria_02($data->carga_horaria_02);
			}			
			
			$horario->store();

			/* ------------------------------------------------------------------------------------------------- */
			
			$id_horario = $horario->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_horario, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: escola
	Descrição: Obter Lista de curso horario
	Método: GET
	URL: http://localhost/sig/api/index.php/cursohorario/<id>/<id_curso>/<id_horario>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCursoHorario($id=0, $id_curso=0, $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		if ($id_curso > 0) {
			$aSearch['id_curso='] = $id_curso;
		}

		$cursoHorario = fRecordSet::build('CursoHorario', $aSearch, array('ordem' => 'asc'));
		
		$aCursoHorario = array();

		$aStatus = array("Inativo", "Ativo");
		$aStatusTipo = array("Frequência", "Nota");

		foreach ($cursoHorario as $key => $value) {
			//Relacionamento
			$aSearchDisciplina  = array();
			$aSearchDisciplina['id='] = $value->getIdDisciplina();

			$disciplina = fRecordSet::build('Disciplina', $aSearchDisciplina);
			$aDisciplina = array();
			foreach ($disciplina as $key => $value2) {
				$aDisciplina[$value2->getId()] = array(
					'nome' => $value2->getNome(),
					);
			}
			
			$aSearchCurso  = array();
			$aSearchCurso['id='] = $value->getIdCurso();
			
			$curso = fRecordSet::build('Curso', $aSearchCurso);
			$aCurso = array();
			foreach ($curso as $key => $value3) {
				$aCurso[$value3->getId()] = array(
					'nome' => $value3->getNome(),
					);
			}
			//Fim - Relacionamento

			$aStatusConceitoNota = array('Nota', 'Conceito','Relatório');

			if ($value->getIdHistoricoParte()==1) {
				$aStatusIndicadorParte = "Parte Comum";				
			} else {
				$aStatusIndicadorParte = "Parte Diversificada";				
			}

			$aCursoHorario[] = array(
				'id' => $value->getId(),
				'id_curso' => $value->getIdCurso(),
				'curso' => $this->keyExists($value->getIdCurso(), $aCurso, 'nome'),
				'id_disciplina' => $value->getIdDisciplina(),
				'id_historico_parte' => $value->getIdHistoricoParte(),
				'historico_parte' =>$aStatusIndicadorParte,
				'disciplina' => $this->keyExists($value->getIdDisciplina(), $aDisciplina, 'nome'),
				'serie' => $value->getSerie(),
				'peso' => $value->getPeso(),
				'conceito_nota' => $value->getConceitoNota(),
				'conceito_nota_status' => $aStatusConceitoNota[$value->getConceitoNota()],
				'ordem' => $value->getOrdem(),
				'carga_horaria' => $value->getCargaHoraria(),
				'carga_horaria_02' => $value->getCargaHoraria_02(),
				);
		}

		if (count($aCursoHorario) == 0) {
			$aCursoHorario[] = array('error' => -1, 'mensagem' => "Nenhum horario encontrado para o curso.");
			fJSON::output($aCursoHorario);
			die();
		}

		$aCursoHorario = array(
			'error' => 0, 
			'curso_horario' => $aCursoHorario
			);
		
		if ($full == false) {
			fJSON::output($aCursoHorario);
		} else {
			return $aCursoHorario;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Exclui um horario de um Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/delcursohorario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function delCursoHorario() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();

		$aSearch['id='] = $data->id;
		
		$cursoHorario = fRecordSet::build('CursoHorario', $aSearch);

		$mensagem = "Horário excluído do curso com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$cursoHorario[0]->delete();

			$aSearch = array();
			$aSearch['id_curso='] = $data->id_curso;

			$resultCursoHorario = fRecordSet::build('CursoHorario', $aSearch, array('ordem' => 'asc'));			
			foreach ($resultCursoHorario as $key => $value) {
				$resultCursoHorario[$key]->setOrdem($key+1);
				$resultCursoHorario[$key]->store();
			}
		//******** Fim - Excluí informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}


/*
	Módulo: Escola
	Descrição: Ordena o curso condicao
	Método: POST
	URL: http://localhost/sig/api/index.php/cursohorarioordenacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCursoHorarioOrdenacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id') && property_exists($data, 'id_destino')) {
			$cursoHorario = new CursoHorario($data->id);
			$cursoHorarioDestino = new CursoHorario($data->id_destino);

			$mensagem = "Ordem do horário alterada com sucesso!";
			$alteracao=1;
		}

		try {
			//******** Grava informações na Tabela de condicao
			$ordem = $cursoHorario->getOrdem();
			$ordem_destino = $cursoHorarioDestino->getOrdem();

			$cursoHorario->setOrdem($ordem_destino);        
			$cursoHorarioDestino->setOrdem($ordem);        
			
			$cursoHorario->store();
			$cursoHorarioDestino->store();
			//******** Fim - Grava informações na Tabela de condicao

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}
	

	 /*
	Módulo: Mesquita
	Descrição: Obter Lista de Itens a partir de uma categoria
	Método: GET
	URL: http://localhost/sig/api/index.php/itenscategoria/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/11/2015
	Autor: Fábio Roberto Haydn
	*/
	
	public function getItensCategoria($id_categoria = "", $full = false) {


		$userSes = fSession::get('user');
		$id_entidade = '';
		$id_entidade = $userSes['user']['entidadePessoa'];

		if($id_entidade!=3){

			$campos = array("id","id_categoria","descricao","ativo","CASE WHEN ativo=1 THEN 'Ativo' ELSE 'Inativo' END status");

			$consulta = "SELECT %S FROM %F WHERE %W ORDER BY %O";
			$tabela   = "produtos_servicos";
			$condicao = ($id_categoria!="") ? "id_categoria = ".$id_categoria : '';
			$ordem 	  = "id";

			$sqlq = $consulta;
			$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
			$sqlq = str_replace("%F", $tabela 				, $sqlq);
			$sqlq = str_replace("%W", $condicao 			, $sqlq);
			$sqlq = str_replace("%O", $ordem 				, $sqlq);

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $key => $value){ $retorno[] = $value; }
			$rs = $this->_getDb()->close();	

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
				fJSON::output($retorno);
				die();
			}
			
			if($full==false) { 
				$retorno = array( 'error' => 0, 'retorno' => $retorno, 'id_entidade' => $id_entidade );
				fJSON::output($retorno);

			}else{ return $retorno; }

		}else{ $retorno[] = array('error'=>-1, 'mensagem'=>"Escola não existem itens"); }
	}



	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Itens a partir de uma categoria
	Método: GET
	URL: http://localhost/sig/api/index.php/itenscategoria/<id_categoria>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/05/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 12/05/2015
	*/
	/*
	public function getItensCategoria($id_categoria = "",$full = false) {
		$this->acessoApi();
		$aSearch='';

		if ($id_categoria != "") {
			$aSearch = ' WHERE id_categoria = ' .$id_categoria;
		}                 

		$sql = "SELECT * FROM produtos_servicos ".$aSearch;

		$produtosServicos = fRecordSet::build('ProdutosServicos', $aSearch);

		$db = $this->_getDb()->query($sql);

		$aProdutosServicos = array();
		foreach ($db as $key => $value) {

			if ($value['ativo']==1) {
				$status = "Ativo";
			} else if ($value['ativo']==0) {
				$status = "Inativo";
			}

			$aProdutosServicos[] = array(
				'id' => $value['id'],
				'id_categoria' => $value['id_categoria'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' => $status
			);
		}

		$db = $this->_getDb()->close();

		if (count($aProdutosServicos) == 0) {
			$aProdutosServicos[] = array('error' => -1, 'mensagem' => "Nenhum item encontrado.");
		} else {
			$aProdutosServicos = array(
				'error' => 0,
				'item' => $aProdutosServicos
			);  
		}
		
		if ($full == false) {
			fJSON::output($aProdutosServicos);
		}
		else {
			return $produtosServicos[0];
		}   
	}  	
	*/

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/despesasreceitas/<id_evento>/<data_inicio>/<data_fim>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getDespesasReceitas($id=0, $data_inicio="", $data_final="", $full = false) {

		$aSearch = array();
		if($id > 0){
			$aSearch['id='] = $id;
		}

		if ($data_inicio != "") {
			$data_atual_inicio = implode('-', array_reverse(explode('-', $data_inicio))) .'-01T00:00:00-000Z';
			$aSearch['start>='] = $data_atual_inicio;
		}

		if ($data_final != "") {
			$dt_final = explode('-', $data_final);
			$ultimo_dia = date("t", mktime(0,0,0,$dt_final[0],'01',$dt_final[1]));
			$data_atual_fim = implode('-', array_reverse($dt_final)) .'-' .$ultimo_dia .'T23:59:59-999Z';
			$aSearch['start<='] = $data_atual_fim;
		}
		
		$evento = fRecordSet::build('Evento', $aSearch);
		$receitaTotal = 0;
		$despesaTotal = 0;
		$despesa = array();
		$receita = array();
		foreach ($evento->getRecords() as $key1 => $value1) {

			$aSearchReceita = array();
			$aSearchReceita['id_evento='] = $value1->getId();
			$aSearchReceita['id_tipo_lancamento='] = array(1, 7);
			$receita = fRecordSet::build('Caixa', $aSearchReceita);
			foreach ($receita->getRecords() as $key => $value) {
				$receitaTotal = $receitaTotal + $value->getValor();
			}
			
			$aSearchDespesa = array();
			$aSearchDespesa['id_evento='] = $value1->getId();
			$aSearchDespesa['id_tipo_lancamento='] = array(2, 3, 5);
			$despesa = fRecordSet::build('Caixa', $aSearchDespesa);
			foreach ($despesa->getRecords() as $key => $value) {
				$despesaTotal = $despesaTotal + $value->getValor();
			}

		}

		$aDespesaReceita = array();
		if(count($despesa) > 0 || count($receita) > 0){
			$percentualDespesa = 0;
			$percentualReceita = 0;

			$total = $despesaTotal + $receitaTotal;
			
			if($despesaTotal > 0){
				$percentualDespesa = $despesaTotal / $total * 100;
			}

			if($receitaTotal > 0){
				$percentualReceita = $receitaTotal / $total * 100;
			}

			$aDespesaReceita = array(
				array(
					'key' => "Despesas",
					'x' => $despesaTotal,
					'y' => round($percentualDespesa, 2),
					),
				array(
					'key' => "Receitas",
					'x' => $receitaTotal,
					'y' => round($percentualReceita, 2),
					)
				);
		}

		if ($full == false) {
			fJSON::output($aDespesaReceita);
		}
		else {
			return $aDespesaReceita;
		}
	}

	/*
	Módulo: escola
	Descrição: Obter Lista de curso nota
	Método: GET
	URL: http://localhost/sig/api/index.php/statusdetalhe/<id>/<data_inicio>/<data_final>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getStatusDetalhe($id=0,$data_inicio="",$data_final="", $full = false) {
		
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}

		if ($data_inicio != "") {
			$data_atual_inicio = implode('-', array_reverse(explode('-', $data_inicio))) .'-01T00:00:00-000Z';
			$aSearch['start>='] = $data_atual_inicio;
		}

		if ($data_final != "") {
			$dt_final = explode('-', $data_final);
			$ultimo_dia = date("t", mktime(0,0,0,$dt_final[0],'01',$dt_final[1]));
			$data_atual_fim = implode('-', array_reverse($dt_final)) .'-' .$ultimo_dia .'T23:59:59-999Z';
			$aSearch['start<='] = $data_atual_fim;
		}


		$evento = fRecordSet::build('Evento', $aSearch);

		$aEvento = array();

		foreach ($evento as $key => $value) {
			$aSearchCaixa  = array();
			$aSearchCaixa['id_evento='] = $value->getId();

			$caixa = fRecordSet::build('Caixa', $aSearchCaixa);
			$aCaixa = array();
			foreach ($caixa as $key => $value2) {
				$aCaixa[] = array(
					'id' => $value2->getId(),
					'id_tipo_lancamento' => $value2->getIdTipoLancamento(),
					'descricao' => $value2->getDescricao(),
					'valor' => $value2->getValor(),
					);
			}

			if(count($caixa) > 0){
				$aEvento[] = array(
					'id' => $value->getId(),
					'title' => $value->getTitle(),
					'caixa' => $aCaixa,
					);
			}
		}

		if (count($aEvento) == 0) {
			$aEvento[] = array('error' => -1, 'mensagem' => "Nenhum gasto ou receita encontrado.");
			fJSON::output($aEvento);
			die();
		}

		$aEvento = array(
			'error' => 0, 
			'status_detalhe' => $aEvento
			);
		
		if ($full == false) {
			fJSON::output($aEvento);
		} else {
			return $aEvento;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/statushistorico/<data_inicio>/<data_fim>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getStatusHistorico($data_inicio="", $data_final="", $full = false) {

		$aEvento = array();
		if ($data_inicio != "" && $data_final != "") {
			$aSearch = array();

			$data_atual_inicio = implode('-', array_reverse(explode('-', $data_inicio))) .'-01T00:00:00-000Z';
			$aSearch['start>='] = $data_atual_inicio;
			
			$dt_final = explode('-', $data_final);
			$ultimo_dia = date("t", mktime(0,0,0,$dt_final[0],'01',$dt_final[1]));
			$data_atual_fim = implode('-', array_reverse($dt_final)) .'-' .$ultimo_dia .'T23:59:59-999Z';
			$aSearch['start<='] = $data_atual_fim;
			
			$evento = fRecordSet::build('Evento', $aSearch, array('start' => 'asc'));

			$aMesAnoGasto = array();
			$aMesAnoReceita = array();
			$data = '';
			$total_mes_gastos = 0;
			$total_mes_receitas = 0;
			foreach ($evento as $key => $value) {
				if(substr($value->getStart(), 0, 7) != $data && $value->getValor() > 0){

					$data = substr($value->getStart(), 0, 7);

					$aSearch = array();
					$aSearch['id_evento='] = $value->getId();

					$aSearchGasto = $aSearch;
					$aSearchGasto['id_tipo_lancamento='] = array(2, 3, 5);
					$gasto = fRecordSet::build('Caixa', $aSearchGasto);
					foreach ($gasto as $key1 => $value1) {
						$total_mes_gastos = $total_mes_gastos + $value1->getValor();
					}

					$aSearchReceita = $aSearch;
					$aSearchReceita['id_tipo_lancamento='] = array(1, 7);
					$receita = fRecordSet::build('Caixa', $aSearchReceita);
					foreach ($receita as $key1 => $value1) {
						$total_mes_receitas = $total_mes_receitas + $value1->getValor();
					}

					$aMesAnoGasto[] = array(
						$data,
						$total_mes_gastos,
						);

					$aMesAnoReceita[] = array(
						$data,
						$total_mes_receitas,
						);
				}
			}

			$aEvento[] = array(
				'key' => "Gastos",
				'values' => $aMesAnoGasto
				);
			
			$aEvento[] = array(
				'key' => "Receitas",
				'values' => $aMesAnoReceita
				);
		}

		$aEvento = array(
			'error' => 0, 
			'status_historico' => $aEvento
			);

		if ($full == false) {
			fJSON::output($aEvento);
		} else {
			return $aEvento;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: POST
	URL: http://localhost/sig/api/index.php/statusgastoreceitas/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postStatusGastosReceitas() {
		$data = json_decode(file_get_contents("php://input"));

		$id_evento = "";
		if (property_exists($data, 'id_evento')){
			$id_evento = $data->id_evento;
		}

		$data_inicio = "";
		if (property_exists($data, 'data_inicio')){
			if ($data->data_inicio != 'undefined' || $data->data_inicio != null){
				$data_inicio = str_replace('/', '-', $data->data_inicio);
			}
		}

		$data_fim = "";
		if (property_exists($data, 'data_fim')){
			if ($data->data_fim != 'undefined' || $data->data_fim != null){
				$data_fim = str_replace('/', '-', $data->data_fim);
			}
		}

		$resultDespesasReceitas = $this->getDespesasReceitas($id_evento, $data_inicio, $data_fim, true);
		$resultStatusDetalhe = $this->getStatusDetalhe($id_evento, $data_inicio, $data_fim, true);
		$resultStatusHistorico = $this->getStatusHistorico($data_inicio, $data_fim, true);

		if(count($resultDespesasReceitas) == 0){
			$aStatusGastosReceitas[] = array('error' => -1, 'mensagem' => "Não foi encontrado gastos ou receitas.");
		}else{
			$aStatusGastosReceitas[] = array(
				'error' => 0,
				'despesa_receita' => $resultDespesasReceitas,
				'detalhe' => $resultStatusDetalhe['status_detalhe'],
				'historico' => $resultStatusHistorico['status_historico'],
				);
		}

		fJSON::output($aStatusGastosReceitas);
	}


	/*
	Módulo: Empregos
	Descrição: Cadastro de Status
	Método: POST
	URL: http://localhost/sig/api/index.php/status/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postStatus() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$status = new StatusVaga($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "	Status alterado com sucesso!";
			$alteracao=1;
		}else{
			$status = new StatusVaga();
			$mensagem = "Status incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){
				$statusAnt = '';
				if($alteracao==1){
					$statusAnt = $status->getDescricao();
				}

				$status->setDescricao($data->descricao);
				$this->setAuditoria('Status Vaga', 'Descrição', $statusAnt, $data->descricao);
			}						
			if (property_exists($data, 'ativo')){
				$status->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countStatus = fRecordset::build('StatusVaga', $aSearch);

				if($countStatus->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O status já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$status->store();
				}     
			} else {
				$status->store();
			} 
		//******** Fim - Grava informações na Tabela de disciplina
			$id_status = $status->getId();

			$arrMensagem = array('error' => 0, 'id_status' => $id_status, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


		/*
	Módulo: Empregos
	Descrição: Cadastro de Tipo de Vaga
	Método: POST
	URL: http://localhost/sig/api/index.php/tipovaga/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postTipoVaga() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tipovaga = new TipoVaga($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "	Tipo de vaga alterado com sucesso!";
			$alteracao=1;
		}else{
			$tipovaga = new TipoVaga();
			$mensagem = "Tipo de vaga incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){
				$tipovagaAnt = '';
				if($alteracao==1){
					$tipovagaAnt = $tipovaga->getDescricao();
				}

				$tipovaga->setDescricao($data->descricao);
				$this->setAuditoria('Tipo Vaga', 'Descrição', $tipovagaAnt, $data->descricao);
			}						
			if (property_exists($data, 'ativo')){
				$tipovaga->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countTipoVaga = fRecordset::build('TipoVaga', $aSearch);

				if($countTipoVaga->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O tipo de vaga já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$tipovaga->store();
				}     
			} else {
				$tipovaga->store();
			} 
			$id_tipovaga = $tipovaga->getId();

			$arrMensagem = array('error' => 0, 'id_tipovaga' => $id_tipovaga, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


			/*
	Módulo: Empregos
	Descrição: Cadastro de Faixa Salarial
	Método: POST
	URL: http://localhost/sig/api/index.php/faixasalarial/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postFaixaSalarial() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$faixasalarial = new FaixaSalarial($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Faixa Salarial alterada com sucesso!";
			$alteracao=1;
		}else{
			$faixasalarial = new FaixaSalarial();
			$mensagem = "Faixa Salarial incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){
				$faixasalarialAnt = '';
				if($alteracao==1){
					$faixasalarialAnt = $faixasalarial->getDescricao();
				}

				$faixasalarial->setDescricao($data->descricao);
				$this->setAuditoria('Faixa Salarial', 'Descrição', $faixasalarialAnt, $data->descricao);
			}						
			if (property_exists($data, 'ativo')){
				$faixasalarial->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countFaixaSalarial = fRecordset::build('FaixaSalarial', $aSearch);

				if($countFaixaSalarial->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A faixa salarial já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$faixasalarial->store();
				}     
			} else {
				$faixasalarial->store();
			} 
			$id_faixasalarial = $faixasalarial->getId();

			$arrMensagem = array('error' => 0, 'id_faixasalarial' => $id_faixasalarial, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}



				/*
	Módulo: Empregos
	Descrição: Cadastro de Ramo de atividade
	Método: POST
	URL: http://localhost/sig/api/index.php/ramo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postRamoEmpresa() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$ramo = new RamoEmpresa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Ramo da Empresa alterada com sucesso!";
			$alteracao=1;
		}else{
			$ramo = new RamoEmpresa();
			$mensagem = "Ramo da Empresa incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'descricao')){
				$ramoAnt = '';
				if($alteracao==1){
					$ramoAnt = $ramo->getDescricao();
				}

				$ramo->setDescricao($data->descricao);
				$this->setAuditoria('Ramo Empresa', 'Descrição', $ramoAnt, $data->descricao);
			}						
			if (property_exists($data, 'ativo')){
				$ramo->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countRamo = fRecordset::build('RamoEmpresa', $aSearch);

				if($countRamo->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A faixa salarial já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$ramo->store();
				}     
			} else {
				$ramo->store();
			} 
			$id_ramo = $ramo->getId();

			$arrMensagem = array('error' => 0, 'id_ramo' => $id_ramo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


					/*
	Módulo: Empregos
	Descrição: Cadastro empresas
	Método: POST
	URL: http://localhost/sig/api/index.php/empresa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postEmpresa() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$empresa = new Empresa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Empresa alterada com sucesso!";
			$alteracao=1;
		}else{
			$empresa = new Empresa();
			$mensagem = "Empresa incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'nome')){
				$empresaAnt = '';
				if($alteracao==1){
					$empresaAnt = $empresa->getNome();
				}

				$empresa->setNome($data->nome);
				$this->setAuditoria('Empresa', 'Nome', $empresaAnt, $data->nome);
			}
			if(property_exists($data, 'id_ramo_empresa')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getIdRamoEmpresa();
				}
				$empresa->setIdRamoEmpresa($data->id_ramo_empresa);
				$this->setAuditoria('Empresa', 'Ramo Empresa', $empresaAnt, $data->id_ramo_empresa);
			}

			if(property_exists($data, 'logotipo')){
				$empresa->setLogotipo($data->logotipo);
			}

			if(property_exists($data, 'website')){
				$empresa->setWebsite($data->website);
			}

			if(property_exists($data, 'breve_descricao')){
				$empresa->setBreveDescricao($data->breve_descricao);
			}

			if (property_exists($data, 'ativo')){
				$empresa->setAtivo($data->ativo);
			}

			if ($alteracao!=1) {
				$aSearch = array();
				$aSearch['nome='] = $data->nome;

				$countEmpresa = fRecordset::build('Empresa', $aSearch);
				if($countEmpresa->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A empresa já existe");
					fJSON::output($arrMensagem);
					die();
				}else{
					$empresa->store();
				}
			} else {
				$empresa->store();
			} 
			$id_empresa = $empresa->getId();

			$arrMensagem = array('error' => 0, 'id_empresa' => $id_empresa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


		/*
	Módulo: Geral
	Descrição: Obter Lista de ramos de empresa
	Método: GET
	URL: http://localhost/sig/api/index.php/ramoempresa/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getRamoEmpresa($id = "", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$ramo = fRecordSet::build('RamoEmpresa', $aSearch);

		if ($full == false) {

			$aRamoEmpresa = array();

			foreach ($ramo->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}         

				$aRamoEmpresa[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status              
					);
			}

			if (count($aRamoEmpresa) == 0) {
				$aRamoEmpresa[] = array('error' => -1, 'mensagem' => "Nenhuma Ramo encontrado.");
			}else{  $aRamoEmpresa   = array('error' =>  0, 'ramoempresa'  => $aRamoEmpresa);}

			fJSON::output($aRamoEmpresa);
		}
		else {
			return $ramo[0];
		}
	}    



		/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfile
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 09/03/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	Data de Alteração: 09/03/2015
	*/

	public function uploadLogo($id) {
		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$target_dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/img/logotipos/";
		$extensao = explode('.', $_FILES['file']['name']);
		$date = new DateTime();
		$target_dir = $target_dir . $date->getTimestamp() . '.' . $extensao[1];

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        
		//$falecido = new Falecido($id);
		//$falecido->setCertidaoObito($date->getTimestamp() . '.' . $extensao[1]); //Armazena o nome da imagem no objeto falecido
		// $falecido->store();

			$doc_caixa = new Empresa($id);
			$doc_caixa->setLogotipo($date->getTimestamp() . '.' . $extensao[1]);
			$doc_caixa->store();

			$messagem['error'] = 0;
			$messagem['mensagem'] = 'Arquivo submetido com sucesso';
			$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
		}
		fJSON::output($messagem);
	}



		/*
	Módulo: Geral
	Descrição: Obter Lista de status da vaga
	Método: GET
	URL: http://localhost/sig/api/index.php/status/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getStatusVaga($id = "", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$statusvaga = fRecordSet::build('StatusVaga', $aSearch);

		if ($full == false) {

			$aStatusVaga = array();

			foreach ($statusvaga->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}         

				$aStatusVaga[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status              
					);
			}

			if (count($aStatusVaga) == 0) {
				$aStatusVaga[] = array('error' => -1, 'mensagem' => "Nenhum Status de vaga encontrado.");
			}else{  $aStatusVaga   = array('error' =>  0, 'statusvaga'  => $aStatusVaga);}

			fJSON::output($aStatusVaga);
		}
		else {
			return $statusvaga[0];
		}
	}


			/*
	Módulo: Geral
	Descrição: Obter Lista de faixa salarial
	Método: GET
	URL: http://localhost/sig/api/index.php/faixasalarial/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getFaixaSalarial($id = "", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$faixasalarial = fRecordSet::build('FaixaSalarial', $aSearch);

		if ($full == false) {

			$aFaixaSalarial = array();

			foreach ($faixasalarial->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aFaixaSalarial[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aFaixaSalarial) == 0) {
				$aFaixaSalarial[] = array('error' => -1, 'mensagem' => "Nenhuma Faixa Salarial encontrada.");
			}
			else{
				$aFaixaSalarial   = array('error' =>  0, 'faixasalarial'  => $aFaixaSalarial);}

				fJSON::output($aFaixaSalarial);
			}
			else {
				return $faixasalarial[0];
			}
		}


				/*
	Módulo: Geral
	Descrição: Obter Lista dos tipos de vaga
	Método: GET
	URL: http://localhost/sig/api/index.php/tipovaga/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getTipoVaga($id = "", $full = false) {
		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$vaga = fRecordSet::build('TipoVaga', $aSearch);

		if ($full == false) {

			$avaga = array();

			foreach ($vaga->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$avaga[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($avaga) == 0) {
				$avaga[] = array('error' => -1, 'mensagem' => "Nenhum tipo de vaga encontrado.");
			}
			else{
				$avaga   = array('error' =>  0, 'tipovaga'  => $avaga);}

				fJSON::output($avaga);
			}
			else {
				return $vaga[0];
			}
		}

	/*
	Módulo: Geral
	Descrição: Obter Lista das empresas
	Método: GET
	URL: http://localhost/sig/api/index.php/empresas/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getEmpresa($id = "", $full = false) {

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$empresa = fRecordSet::build('Empresa', $aSearch);

		if ($full == false) {

			$aEmpresa = array();

			foreach ($empresa->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}         

				$aEmpresa[] = array(
					'id' => $value->getId(),
					'id_ramo_empresa' => $value->getIdRamoEmpresa(),
					'nome' => $value->getNome(),
					'logotipo' => $value->getLogotipo(),
					'website' => $value->getWebsite(),
					'breve_descricao' => $value->getBreveDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status              
					);
			}

			if (count($aEmpresa) == 0) {
				$aEmpresa[] = array('error' => -1, 'mensagem' => "Nenhuma Empresa encontrada.");
			}else{  $aEmpresa   = array('error' =>  0, 'empresa'  => $aEmpresa);}

			fJSON::output($aEmpresa);
		}
		else {
			return $empresa;
		}
	}

	/*
	Módulo: Empregos
	Descrição: Cadastro de contatos da empresa
	Método: POST
	URL: http://localhost/sig/api/index.php/contatoempresa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postContatoEmpresa() {

		$data = json_decode(file_get_contents("php://input"));


		if (property_exists($data, 'id')) {
			$empresa = new EmpresaContato($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Contato da Empresa alterada com sucesso!";
			$alteracao=1;
		}else{
			$empresa = new EmpresaContato();
			$mensagem = "Contato da Empresa incluída com sucesso!";
			$alteracao=0;
		}

		try {
			if(property_exists($data, 'id_empresa')){
				$empresa->setIdEmpresa($data->id_empresa);
			}

			if (property_exists($data, 'cargo')){
				$empresaAnt = '';
				if($alteracao==1){
					$empresaAnt = $empresa->getCargo();
				}
				$empresa->setCargo($data->cargo);
				$this->setAuditoria('Empresa Contato', 'Cargo', $empresaAnt, $data->cargo);
			}
			if(property_exists($data, 'id_departamento')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getIdDepartamento();
				}
				$empresa->setIdDepartamento($data->id_departamento);
				$this->setAuditoria('Empresa Contato', 'Id Departamento', $empresaAnt, $data->id_departamento);
			}

			if(property_exists($data, 'nome')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getNome();
				}
				$empresa->setNome($data->nome);
				$this->setAuditoria('Empresa Contato', 'Nome', $empresaAnt, $data->nome);
			}

			if(property_exists($data, 'email')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getEmail();
				}
				$empresa->setEmail($data->email);
				$this->setAuditoria('Empresa Contato', 'Email', $empresaAnt, $data->email);
			}

			if(property_exists($data, 'ddd')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getDdd();
				}
				$empresa->setDdd($data->ddd);
				$this->setAuditoria('Empresa Contato', 'DDD', $empresaAnt, $data->ddd);
			}

			if(property_exists($data, 'telefone')){
				$empresaAnt = '';
				if($alteracao == 1){
					$empresaAnt = $empresa->getTelefone();
				}
				$empresa->setTelefone($data->telefone);
				$this->setAuditoria('Empresa Contato', 'Telefone', $empresaAnt, $data->telefone);
			}

			$empresa->setAtivo($data->ativo);

			// if ($alteracao!=1) {
			// 	$aSearch = array();

			// 	$aSearch['cargo='] = $data->cargo;
			// 	$countEmpresa = fRecordset::build('EmpresaContato', $aSearch);

			// 	if($countEmpresa->count() > 0){
			// 		$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O cargo já existe");
			// 		fJSON::output($arrMensagem);
			// 		die();            
			// 	}else{
			// 		$empresa->store();
			// 	}     
			// } else {
			$empresa->store();
			//} 
			$id_contato_empresa = $empresa->getId();

			$arrMensagem = array('error' => 0, 'id_contato_empresa' => $id_contato_empresa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}



	/*Módulo: Empregos
	Descrição: Cadastro de vagas
	Método: POST
	URL: http://localhost/sig/api/index.php/vaga/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/05/2015
	Autor: Daniel Swater de Castro
	Versão: 1.0
	*/
	public function postVaga() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$vaga = new Vaga($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Vaga alterada com sucesso!";
			$alteracao=1;
		}else{
			$vaga = new Vaga();
			$mensagem = "Vaga incluída com sucesso!";
			$alteracao=0;
		}

		try {
			if(property_exists($data, 'id_status_vaga')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getIdStatusVaga();
				}
				$vaga->setIdStatusVaga($data->id_status_vaga);
				$this->setAuditoria('Vagas', 'Id Status Vaga', $vagaAnt, $data->id_status_vaga);
			}

			if(property_exists($data, 'id_faixa_salarial')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getIdFaixaSalarial();
				}
				$vaga->setIdFaixaSalarial($data->id_faixa_salarial);
				$this->setAuditoria('Vagas', 'Faixa Salarial', $vagaAnt, $data->id_faixa_salarial);
			}

			if(property_exists($data, 'id_tipo_vaga')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getIdTipoVaga();
				}
				$vaga->setIdTipoVaga($data->id_tipo_vaga);
				$this->setAuditoria('Vagas', 'Tipo Vaga', $vagaAnt, $data->id_tipo_vaga);
			}

			if(property_exists($data, 'titulo_vaga')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getIdTipoVaga();
				}
				$vaga->setTituloVaga($data->titulo_vaga);
				$this->setAuditoria('Vagas', 'Titulo vaga Vaga', $vagaAnt, $data->titulo_vaga);
			}

			if(property_exists($data, 'id_empresa')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getIdEmpresa();
				}
				$vaga->setIdEmpresa($data->id_empresa);
				$this->setAuditoria('Vagas', 'Id Empresa', $vagaAnt, $data->id_empresa);
			}

			if(property_exists($data, 'localizacao_vaga')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getLocalizacaoVaga();
				}
				$vaga->setLocalizacaoVaga($data->localizacao_vaga);
				$this->setAuditoria('Vagas', 'Id Empresa', $vagaAnt, $data->localizacao_vaga);
			}

			if(property_exists($data, 'data_anuncio')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getDataAnuncio();
				}
				$vaga->setDataAnuncio($data->data_anuncio);
				$this->setAuditoria('Vagas', 'Data Anuncio', $vagaAnt, $data->data_anuncio);
			}

			if(property_exists($data, 'descricao')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getDataAnuncio();
				}
				$vaga->setDescricao($data->descricao);
				$this->setAuditoria('Vagas', 'Descrição', $vagaAnt, $data->descricao);
			}

			if(property_exists($data, 'data_fim_anuncio')){
				$vagaAnt = '';
				if($alteracao == 1){
					$vagaAnt = $vaga->getDataFimAnuncio();
				}
				$vaga->setDataFimAnuncio($data->data_fim_anuncio);
				$this->setAuditoria('Vagas', 'Data Fim Anuncio', $vagaAnt, $data->data_fim_anuncio);
			}
			if(property_exists($data, 'ativo')){
				$vaga->setAtivo($data->ativo);
			}
			
			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['titulo_vaga='] = $data->titulo_vaga;
				$aSearch['id_tipo_vaga='] = $data->id_tipo_vaga;
				$aSearch['id_empresa='] = $data->id_empresa;

				$countVaga = fRecordset::build('Vaga', $aSearch);

				if($countVaga->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A vaga já existe");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$vaga->store();
				}     
			} else {
				$vaga->store();
			} 
			$id_vaga = $vaga->getId();

			if(property_exists($data, 'tags2')){
				if($alteracao == 1){
					$tagSearch = fRecordset::build('MarcadoresVagas', array('id_vaga=' => $id_vaga));
					foreach ($tagSearch as $key3 => $value3) {
						$tag3 = new MarcadoresVagas($value3->getId());
						$tag3->delete();
					}
				}
				$count = count($data->tags2);
				for($i = 0; $i < $count; $i++){
					$marcadores = new MarcadoresVagas();
					$marcadores->setIdVaga($id_vaga);
					$marcadores->setDescricao($data->tags2[$i]);
					$marcadores->setAtivo(1);
					$marcadores->store();
				}
			}

			$arrMensagem = array('error' => 0, 'id_vaga' => $id_vaga, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista das vagas
	Método: GET
	URL: http://localhost/sig/api/index.php/vaga/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 19/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getVaga($id="", $full = false) {

		$aSearch = array();
		$aSearchVaga = array();

		if ($id != "") {
			$aSearch['id='] = $id;
			$aSearchVaga['id_vaga='] = $id;
		}

		$aTags = array();

		$tags = fRecordset::build('MarcadoresVagas', $aSearchVaga);

		foreach ($tags as $key1 => $value1) {
			if($value1->getAtivo() == 1){
				$status1 = 'Ativo';
			}
			else{
				$status1 = 'Inativo';
			}

			$aTags[] = array(
				'id' => $value1->getId(),
				'id_vaga' => $value1->getIdVaga(),
				'descricao' => $value1->getDescricao(),
				'status' => $status1,
				'ativo' => $value1->getAtivo()
				);
		}

		$vaga = fRecordSet::build('Vaga', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {
			$aVaga = array();

			foreach ($vaga->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$txt_status_vaga = new StatusVaga($value->getIdStatusVaga());
				$status_vaga = $txt_status_vaga->getDescricao();

				$txt_faixa_salarial = new FaixaSalarial($value->getIdFaixaSalarial());
				$faixa_salarial = $txt_faixa_salarial->getDescricao();

				$txt_tipo_vaga = new TipoVaga($value->getIdTipoVaga());
				$tipo_vaga = $txt_tipo_vaga->getDescricao();

				$txt_empresa = new Empresa($value->getIdEmpresa());
				$empresa = $txt_empresa->getNome();
				$site = $txt_empresa->getWebsite();

				$aVaga[] = array(
					'tipo' => "Vagas",
					'id' => $value->getId(),
					'id_status_vaga' => $value->getIdStatusVaga(),
					'status_vaga' => $status_vaga,
					'id_faixa_salarial' => $value->getIdFaixaSalarial(),
					'faixa_salarial' => $faixa_salarial,
					'id_tipo_vaga' => $value->getIdTipoVaga(),
					'tipo_vaga' => $tipo_vaga,
					'id_empresa' => $value->getIdEmpresa(),
					'empresa' => $empresa,
					'site' => $site,
					'titulo_vaga' => $value->getTituloVaga(),
					'localizacao_vaga' => $value->getLocalizacaoVaga(),
					'descricao' => $value->getDescricao(),
					'data_anuncio' => $value->getDataAnuncio()->format('Y-m-d'),
					'data_fim_anuncio' => $value->getDataFimAnuncio()->format('Y-m-d'),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					'tags' => $aTags
					);
			}

			if (count($aVaga) == 0) {
				$aVaga[] = array('error' => -1, 'mensagem' => "Nenhuma vaga encontrada.");
				fJSON::output($aVaga);
				die();
			}

			$aVaga = array(
				'error' => 0,
				'vagas' => $aVaga
				);

			fJSON::output($aVaga);
		} else {
			return $vaga[0];
		}
	}


						/*
	Módulo: Geral
	Descrição: Obter Lista das vagas em aberto
	Método: GET
	URL: http://localhost/sig/api/index.php/painelvagas/<evento>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/05/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getPainelVagas($full = false) {

		$vaga = fRecordSet::build('Vaga', array('id_status_vaga=' => 1), array('descricao' => 'asc'));
		if ($full == false) {
			$aVaga = array();

			foreach ($vaga->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$txt_status_vaga = new StatusVaga($value->getIdStatusVaga());
				$status_vaga = $txt_status_vaga->getDescricao();

				$txt_faixa_salarial = new FaixaSalarial($value->getIdFaixaSalarial());
				$faixa_salarial = $txt_faixa_salarial->getDescricao();

				$txt_tipo_vaga = new TipoVaga($value->getIdTipoVaga());
				$tipo_vaga = $txt_tipo_vaga->getDescricao();

				$txt_empresa = new Empresa($value->getIdEmpresa());
				$empresa = $txt_empresa->getNome();
				$logotipo = $txt_empresa->getLogotipo();
				$site = $txt_empresa->getWebsite();

				$txt_ramo = new RamoEmpresa($txt_empresa->getIdRamoEmpresa());
				$ramo = $txt_ramo->getDescricao();

				$txt_empresa_contato = fRecordset::build('EmpresaContato', array('id_empresa=' => $value->getIdEmpresa()));
				foreach ($txt_empresa_contato as $key4 => $value4) {
					$nome_contato = $value4->getNome();
					$email_contato = $value4->getEmail();
					$tel_contato = $value4->getDdd(). " " .$value4->getTelefone();
				}

				$tags = fRecordset::build('MarcadoresVagas', array('id_vaga=' => $value->getId()));

				$aTags = array();

				foreach ($tags as $key1 => $value1) {
					if($value1->getAtivo() == 1){
						$status1 = 'Ativo';
					}
					else{
						$status1 = 'Inativo';
					}

					$aTags[] = array(
						'id' => $value1->getId(),
						'id_vaga' => $value1->getIdVaga(),
						'descricao' => $value1->getDescricao(),
						'status' => $status1,
						'ativo' => $value1->getAtivo()
						);
				}

				$aVaga[] = array(
					'tipo' => "Vagas",
					'id' => $value->getId(),
					'id_status_vaga' => $value->getIdStatusVaga(),
					'status_vaga' => $status_vaga,
					'id_faixa_salarial' => $value->getIdFaixaSalarial(),
					'faixa_salarial' => $faixa_salarial,
					'id_tipo_vaga' => $value->getIdTipoVaga(),
					'tipo_vaga' => $tipo_vaga,
					'id_empresa' => $value->getIdEmpresa(),
					'empresa' => $empresa,
					'logotipo' => $logotipo,
					'site' => $site,
					'ramo' => $ramo,
					'nome_contato' => $nome_contato,
					'email_contato' => $email_contato,
					'telefone' => $tel_contato,
					'titulo_vaga' => $value->getTituloVaga(),
					'localizacao_vaga' => $value->getLocalizacaoVaga(),
					'descricao' => $value->getDescricao(),
					'data_anuncio' => $value->getDataAnuncio()->format('Y-m-d'),
					'data_fim_anuncio' => $value->getDataFimAnuncio()->format('Y-m-d'),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					'tags' => $aTags
					);
			}

			if (count($aVaga) == 0) {
				$aVaga[] = array('error' => -1, 'mensagem' => "Nenhuma vaga encontrada.");
				fJSON::output($aVaga);
				die();
			}

			$aVaga = array(
				'error' => 0,
				'painelvagas' => $aVaga
				);

			fJSON::output($aVaga);
		} else {
			return $vaga[0];
		}
	}


	public function getContatoEmpresa($id_empresa = "", $full = false) {
		$aSearch = array();

		if ($id_empresa != "") {
			$aSearch['id_empresa='] = $id_empresa;
		}

		$contatoEmpresa = fRecordSet::build('EmpresaContato', $aSearch);
		if ($full == false) {
			$aContatoEmpresa = array();

			foreach ($contatoEmpresa->getRecords() as $key => $value) {
				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else {
					$status = "Inativo";
				}

				$empresa = $this->getEmpresa($value->getIdEmpresa(), true);
				$empresa_nome = '';
				if(count($empresa) > 0){
					$empresa_nome = $empresa[0]->getNome();
				}

				$departamento = $this->getDepartamento($value->getIdDepartamento(), true);
				$departamento_descricao = '';
				if(count($departamento) > 0){
					$departamento_descricao = $departamento['departamento'][0]["descricao"];
				}

				$aContatoEmpresa[] = array(
					'id' => $value->getId(),
					'id_empresa' => $value->getIdEmpresa(),
					'empresa' => $empresa_nome,
					'cargo' => $value->getCargo(),
					'id_departamento' => $value->getIdDepartamento(),
					'departamento' => $departamento_descricao,
					'nome' => $value->getNome(),
					'email' => $value->getEmail(),
					'ddd' => $value->getDdd(),
					'telefone' => $value->getTelefone(),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					);
			}

			if (count($aContatoEmpresa) == 0) {
				$aContatoEmpresa[] = array('error' => -1, 'mensagem' => "Nenhum contato encontrado.");
				fJSON::output($aContatoEmpresa);
				die();
			}

			$aContatoEmpresa = array(
				'error' => 0,
				'contato_empresa' => $aContatoEmpresa
				);

			fJSON::output($aContatoEmpresa);
		} else {
			return $aContatoEmpresa;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Tipo de Receita
	Método: GET
	URL: http://localhost/sig/api/index.php/tiporeceita/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postTipoReceita() {
		
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$tiporeceita = new TipoReceita($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de receita alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$tiporeceita = new TipoReceita();
			$mensagem = "Tipo de receita incluído com sucesso!";
			$alteracao=0;
		}

		try {


			if (property_exists($data, 'descricao')){
				$tiporeceitaAnt = '';

				if($alteracao==1){
					$tiporeceitaAnt = $tiporeceita->getDescricao(); 
				}

				$this->setAuditoria('TipoReceita', 'Descricao', $tiporeceitaAnt, $data->descricao); 
				$tiporeceita->setDescricao($data->descricao);
			}
			

			if (property_exists($data, 'ativo')){
				$tiporeceita->setAtivo($data->ativo);
			}

			if (property_exists($data, 'id_centro_custo')){
				$tiporeceitaAnt = '';

				if($alteracao==1){
					$tiporeceitaAnt = $tiporeceita->getIdCentroCusto();
				}

				$this->setAuditoria('TipoReceita', 'IdCentroCusto', $tiporeceitaAnt, $data->id_centro_custo);
				$tiporeceita->setIdCentroCusto($data->id_centro_custo);
			}
			if (property_exists($data, 'descricao')){
				$tiporeceitaAnt = '';

				if($alteracao==1){
					$tiporeceitaAnt = $tiporeceita->getDescricao();
				}

				$this->setAuditoria('TipoReceita', 'descricao', $tiporeceitaAnt, $data->descricao);
				$tiporeceita->setDescricao($data->descricao);
			}
			if (property_exists($data, 'abreviatura')){
				$tiporeceitaAnt = '';

				if($alteracao==1){
					$tiporeceitaAnt = $tiporeceita->getAbreviatura();
				}

				$this->setAuditoria('TipoReceita', 'Abreviatura', $tiporeceitaAnt, $data->abreviatura);
				$tiporeceita->setAbreviatura($data->abreviatura);
				
			}
			
			
			if (property_exists($data, 'compoe_anuidade')){
				$tiporeceitaAnt = '';

				if($alteracao==1){
					$tiporeceitaAnt = $tiporeceita->getCompoeAnuidade();
				}

				//$this->setAuditoria('TipoReceita', 'CompoeAnuidade', $tiporeceitaAnt, $data->compoe_anuidade);
				$tiporeceita->setCompoeAnuidade($data->compoe_anuidade);
				
			}
			

			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('TipoReceita', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Tipo de Receita já existe");
					fJSON::output($arrMensagem);
					die();
				}
				else{					
					$tiporeceita->store();
				}

			} 
			else {				
				$tiporeceita->store();
			}

			$id_tiporeceita = $tiporeceita->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_tiporeceita, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}

	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipos de Receita
	Método: GET
	URL: http://localhost/sig/api/index.php/tiporeceita/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getTipoReceita($id="", $full = false) {
		
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$tiporeceita = fRecordSet::build('TipoReceita', $aSearch, array('descricao' => 'asc'));		

		if ($full == false) {

			$aTipoReceita = array();

			foreach ($tiporeceita->getRecords() as $key => $value) {


				$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";
				$statAnuidade = ($value->getCompoeAnuidade()==1) ? "Sim" : "Não";
				$centrocusto = new CentroCusto($value->getIdCentroCusto());

				$aTipoReceita[] = array(
					'id' => $value->getId(),
					'id_centro_custo' => $value->getIdCentroCusto(),
					'descricao_centro_custo' => $centrocusto->getDescricao(),
					'descricao' => $value->getDescricao(),
					'abreviatura' => $value->getAbreviatura(),
					'compoe_anuidade' => $value->getCompoeAnuidade(),
					'ativo' => $value->getAtivo(),
					'statAtivo' => $statAtivo,
					'statAnuidade' => $statAnuidade
					);

			}

			if (count($aTipoReceita) == 0) {
				$aTipoReceita[] = array('error' => -1, 'mensagem' => "Nenhum Tipo de Receita encontrado.");
			}
			else {
				$aTipoReceita = array(
					'error' => 0,
					'tiporeceita' => $aTipoReceita
					);
			}

			fJSON::output($aTipoReceita);
		}
		else {
			return $tiporeceita;
		}  	
	}  

	/*
	Módulo: Escola
	Descrição: Obter Lista de Motivos de Bolsa
	Método: GET
	URL: http://localhost/sig/api/index.php/motivobolsa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/	

	public function getMotivoBolsa($id = 0, $id_grupo_motivo_bolsa=0, $full = false) {

		$sqlq = "SELECT 
				 mb.id,
				 mb.descricao,
				 id_grupo_motivo_bolsa,
				 gm.descricao descGrupomotivobolsa,
				 mb.ativo,
				 CASE WHEN mb.ativo=1 THEN 'Sim' ELSE 'Não' END statAtivo,
				 mb.sem_pontualidade,
				 CASE WHEN mb.sem_pontualidade=1 THEN 'Sim' ELSE 'Não' END statPontual,
				 mb.gratuidade,
				 CASE WHEN mb.gratuidade=1 THEN 'Sim' ELSE 'Não' END statGratuito,
				 mb.bolsa_irmao,
				 CASE WHEN mb.bolsa_irmao=1 THEN 'Sim' ELSE 'Não' END statBolsaIrmao,
				 mb.perde_bolsa,
				 CASE WHEN mb.perde_bolsa=1 THEN 'Sim' ELSE 'Não' END statPerdeBolsa
				 FROM motivo_bolsa mb 
				 LEFT JOIN grupo_motivo_bolsa gm on gm.id=mb.id_grupo_motivo_bolsa
				 WHERE 1 ".(($id>0) ? " AND mb.id_aluno=".$id : "").(($id_grupo_motivo_bolsa>0) ? " AND mb.id_grupo_motivo_bolsa=".$id_grupo_motivo_bolsa : "");

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'motivo_bolsa' => $retorno );	
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Motivos de Bolsa
	Método: POST
	URL: http://localhost/sig/api/index.php/motivobolsa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postMotivoBolsa($id_consulta="",$id="", $full = false) 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$motivobolsa = new MotivoBolsa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Motivo de bolsa alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$motivobolsa = new MotivoBolsa();
			$mensagem = "Motivo de Bolsa incluído com sucesso!";
			$alteracao=0;
		}

		try {			  

			if (property_exists($data, 'ativo')){
				$motivobolsa->setAtivo($data->ativo);
			}

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'descricao')){
				$motivobolsaAnt = '';

				if($alteracao==1){
					$motivobolsaAnt = $motivobolsa->getDescricao(); 
				}

				$this->setAuditoria('MotivoBolsa', 'Descricao', $motivobolsaAnt, $data->descricao); 
				$motivobolsa->setDescricao($data->descricao);
			}

			$motivobolsa->setIdGrupoMotivoBolsa($data->id_grupo_motivo_bolsa);
			/*
			$motivobolsa->setSemPontualidade($data->sem_pontualidade);
			$motivobolsa->setGratuidade($data->gratuidade);
			$motivobolsa->setBolsaIrmao($data->bolsa_irmao);
			$motivobolsa->setPerdeBolsa($data->perde_bolsa);
			*/
			$motivobolsa->setSemPontualidade(0);
			$motivobolsa->setGratuidade(0);
			$motivobolsa->setBolsaIrmao(0);
			$motivobolsa->setPerdeBolsa(0);

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('MotivoBolsa', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Motivo de Bolsa já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $motivobolsa->store(); }

			}else{ $motivobolsa->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_motivobolsa = $motivobolsa->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_motivobolsa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Grupos de Motivos de Bolsa
	Método: GET
	URL: http://localhost/sig/api/index.php/grupomotivobolsa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getGrupoMotivoBolsa($id_consulta="",$id="", $full = false)
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  
		
		$grupomotivobolsa = fRecordSet::build('GrupoMotivoBolsa', $aSearch, array('descricao' => 'asc'));

		

			$aGrupoMotivoBolsa = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aGrupoMotivoBolsa[] = array('tipo'		=>"Ação",
					'id' 		=> "-1",
					'descricao'=> ":: Cadastrar Novo Grupo de Motivo de Bolsa",
					'ativo' 	=> "");   
			}  

			foreach ($grupomotivobolsa->getRecords() as $key => $value) {

				$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";
				
				$aGrupoMotivoBolsa[] = array('tipo' => "Grupo de Motivos de Bolsa",
					'id' => $value->getId(),										
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'statAtivo' => $statAtivo);										
			}

			if (count($aGrupoMotivoBolsa) == 0) {
				$aGrupoMotivoBolsa[] = array('error' => -1, 'mensagem' => "Nenhum Grupo de Motivo de Bolsa encontrado.");
			}
			else {
				$aGrupoMotivoBolsa = array(
					'error' => 0,
					'grupo_motivo_bolsa' => $aGrupoMotivoBolsa
					);
			}

		if ($full == false) {
			fJSON::output($aGrupoMotivoBolsa);
		}
		else {
			return $grupomotivobolsa;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Grupos de Motivos de Bolsa
	Método: POST
	URL: http://localhost/sig/api/index.php/grupomotivobolsa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postGrupoMotivoBolsa($id_consulta="",$id="", $full = false) 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$grupomotivobolsa = new GrupoMotivoBolsa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Grupo de Motivo de bolsa alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$grupomotivobolsa = new GrupoMotivoBolsa();
			$mensagem = "Grupo de Motivo de Bolsa incluído com sucesso!";
			$alteracao=0;
		}

		try {			  

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'ativo')){
				$grupomotivobolsa->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'descricao')){
				$grupomotivobolsaAnt = '';

				if($alteracao==1){
					$grupomotivobolsaAnt = $grupomotivobolsa->getDescricao(); 
				}

				$this->setAuditoria('GrupoMotivoBolsa', 'Descricao', $grupomotivobolsaAnt, $data->descricao); 
				$grupomotivobolsa->setDescricao($data->descricao);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('GrupoMotivoBolsa', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Grupo de Motivo de Bolsa já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $grupomotivobolsa->store(); }

			}else{ $grupomotivobolsa->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_grupomotivobolsa = $grupomotivobolsa->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_grupomotivobolsa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}		
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Tipos de Carnê
	Método: GET
	URL: http://localhost/sig/api/index.php/tipocarne/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getTipoCarne($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$TipoCarne = fRecordSet::build('TipoCarne', $aSearch, array('descricao' => 'asc'));
		$aTipoCarne = array();

		$userSes = fSession::get('user');
		$descEmpresa = '';
		$descEmpresa = $userSes['user']['entidadePessoa'];

		foreach ($TipoCarne->getRecords() as $key => $value) {

			$grupo_carne = new GrupoTipoCarne($value->getIdGrupoCarne());
			$tipo_receita = new TipoReceita($value->getIdTipoReceita());
			//$bloqueio_matricula = new TipoBloqueio($value->getIdBloqueioMatricula());

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";
			$statReciboAvulso = ($value->getReciboAvulso()==1) ? "Sim" : "Não";
			$statCalculaCorrecao = ($value->getCalculaCorrecao()==1) ? "Sim" : "Não";

			$aTipoCarne[] = array(  'tipo' 					=> 'Tipos de Carne',
				'id' 					=> $value->getId(),
				'descricao' 			=> $value->getDescricao(),
				'abreviatura' 			=> $value->getAbreviatura(),
				'id_empresa' 			=> $value->getIdEmpresa(),
				'id_tipo_receita' 		=> $value->getIdTipoReceita(),
				'id_grupo_carne' 		=> $value->getIdGrupoCarne(),
				'id_bloqueio_matricula' => $value->getIdBloqueioMatricula(),
				'descEmpresa' 			=> $descEmpresa,
				'descTipoReceita' 		=> $tipo_receita->getDescricao(),
				'descGrupoCarne' 		=> $grupo_carne->getDescricao(),
				'descBloqueioMatricula' => '',
				'recibo_avulso' 		=> $value->getReciboAvulso(),
				'calcula_correcao' 		=> $value->getCalculaCorrecao(),
				'ativo' 				=> $value->getAtivo(),
				'statReciboAvulso' 		=> $statReciboAvulso,
				'statCalculaCorrecao' 	=> $statCalculaCorrecao,
				'statAtivo' 			=> $statAtivo);
		}

		if (count($aTipoCarne) == 0) {
			$aTipoCarne[] = array('error' => -1, 'mensagem' => "Nenhum Tipo de Carnê encontrado.");
		}		
		else {
			$aTipoCarne = array('error' => 0,'tipo_carne' => $aTipoCarne);
		}

		if ($full == false) {
			fJSON::output($aTipoCarne);
		}
		else {
			return $aTipoCarne;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Tipos de Carnê
	Método: POST
	URL: http://localhost/sig/api/index.php/tipocarne/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postTipoCarne($id_consulta="",$id="", $full = false) 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$TipoCarne = new TipoCarne($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Tipo de Carnê alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$TipoCarne = new TipoCarne();
			$mensagem = "Tipo de Carnê incluído com sucesso!";
			$alteracao=0;
		}

		try {			  

			if (property_exists($data, 'ativo')){
				$TipoCarne->setAtivo($data->ativo);
			}

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'descricao')){
				$TipoCarneAnt = '';

				if($alteracao==1){
					$TipoCarneAnt = $TipoCarne->getDescricao(); 
				}

				$this->setAuditoria('TipoCarne', 'Descricao', $TipoCarneAnt, $data->descricao); 
				$TipoCarne->setDescricao($data->descricao);
			}
			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'abreviatura')){
				$TipoCarneAnt = '';

				if($alteracao==1){
					$TipoCarneAnt = $TipoCarne->getAbreviatura(); 
				}

				$this->setAuditoria('TipoCarne', 'Abreviatura', $TipoCarneAnt, $data->abreviatura); 
				$TipoCarne->setAbreviatura($data->abreviatura);
			}

			//$TipoCarne->setIdEmpresa($data->id_empresa);
			$userSes = fSession::get('user');
			$TipoCarne->setIdEmpresa($userSes['user']['entidadePessoa']);

			$TipoCarne->setIdGrupoCarne($data->id_grupo_carne);
			$TipoCarne->setIdTipoReceita($data->id_tipo_receita);
			$TipoCarne->setIdGrupoCarne($data->id_grupo_carne);
			$TipoCarne->setIdBloqueioMatricula($data->id_bloqueio_matricula);
			$TipoCarne->setReciboAvulso($data->recibo_avulso);
			$TipoCarne->setCalculaCorrecao($data->calcula_correcao);

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('TipoCarne', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Tipo de Carnê já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $TipoCarne->store(); }

			}else{ $TipoCarne->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_TipoCarne = $TipoCarne->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_TipoCarne, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Grupos de Tipos de Carnê
	Método: GET
	URL: http://localhost/sig/api/index.php/grupotipocarne/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getGrupoTipoCarne($id_consulta="",$id="", $full = false)
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  
		
		$grupoTipoCarne = fRecordSet::build('GrupoTipoCarne', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aGrupoTipoCarne = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aGrupoTipoCarne[] = array('tipo'		=>"Ação",
					'id' 		=> "-1",
					'descricao' => ":: Cadastrar Novo Grupo de Tipo de Carnê",
					'ativo' 	=> "");   
			}  

			foreach ($grupoTipoCarne->getRecords() as $key => $value) {

				$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";
				
				$aGrupoTipoCarne[] = array( 'tipo' 		=> "Tipos de Carnê",
					'id' 		=> $value->getId(),										
					'descricao' => $value->getDescricao(),
					'ativo'		=> $value->getAtivo(),
					'statAtivo' => $statAtivo);
			}

			if (count($aGrupoTipoCarne) == 0) {
				$aGrupoTipoCarne[] = array('error' => -1, 'mensagem' => "Nenhum Grupo de Tipo de Carnê encontrado.");
			}else{
				$aGrupoTipoCarne = array('error' => 0, 'grupo_tipo_carne' => $aGrupoTipoCarne);
			}

			fJSON::output($aGrupoTipoCarne);
		}
		else {
			return $grupoTipoCarne[0];
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Grupos de Tipos de Carnê
	Método: POST
	URL: http://localhost/sig/api/index.php/grupotipocarne/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postGrupoTipoCarne($id_consulta="",$id="", $full = false) 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$grupoTipoCarne = new GrupoTipoCarne($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Grupo de Tipo de Carnê alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$grupoTipoCarne = new GrupoTipoCarne();
			$mensagem = "Grupo de Tipo de Carnê incluído com sucesso!";
			$alteracao=0;
		}

		try {			  

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'ativo')){
				$grupoTipoCarne->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'descricao')){
				$grupoTipoCarneAnt = '';

				if($alteracao==1){
					$grupoTipoCarneAnt = $grupoTipoCarne->getDescricao(); 
				}

				$this->setAuditoria('GrupoTipoCarne', 'Descricao', $grupoTipoCarneAnt, $data->descricao); 
				$grupoTipoCarne->setDescricao($data->descricao);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('GrupoTipoCarne', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Grupo de Tipo de Carnê já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $grupoTipoCarne->store(); }

			}else{ $grupoTipoCarne->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_grupoTipoCarne = $grupoTipoCarne->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_grupoTipoCarne, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}		
	}

	

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Situação da Série
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaoserie/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function getSituacaoSerie($id_consulta="", $id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}

		$situacao = fRecordSet::build('SituacaoSerie', $aSearch, array('descricao' => 'asc'));

	

		$aSituacao = array();

		if (($id_consulta != 1) && ($id=="")) {
			$aSituacao[] = array(
				'tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Nova Situação",
				'ativo' => "",
				'status' => ""
				);
		}      


		$aStatus = array("Inativo", "Ativo");

		foreach ($situacao as $key => $value) {
			$aSituacao[] = array(
				'tipo' => "Situações",
				'id' => $value->getId(),
				'descricao' => $value->getDescricao(),
				'ativo' => $value->getAtivo(),
				'status' => $aStatus[$value->getAtivo()],
				);
		}

		if ($full == false) {

			if (count($aSituacao) == 0) {
				$aSituacao[] = array('error' => -1, 'mensagem' => "Nenhuma situação encontrada.");
				fJSON::output($aSituacao);
				die();
			}

			$aSituacao = array(
				'error' => 0, 
				'situacao_serie' => $aSituacao
			);
		
			fJSON::output($aSituacao);
		} else {
			return $aSituacao;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Situação da Série
	Método: POST
	URL: http://localhost/sig/api/index.php/situacaoserie/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postSituacaoSerie($id="", $full = false) 
	{
		/* FRH - Função get já criada por fsilva */
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$situacaoSerie = new SituacaoSerie($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Situação de Série alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$situacaoSerie = new SituacaoSerie();
			$mensagem = "Situação de Série incluído com sucesso!";
			$alteracao=0;
		}

		try {			  

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'ativo')){
				$situacaoSerie->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'descricao')){
				$situacaoSerieAnt = '';

				if($alteracao==1){
					$situacaoSerieAnt = $situacaoSerie->getDescricao(); 
				}

				$this->setAuditoria('SituacaoSerie', 'Descricao', $situacaoSerieAnt, $data->descricao); 
				$situacaoSerie->setDescricao($data->descricao);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('SituacaoSerie', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A Situação de Série já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $situacaoSerie->store(); }

			}else{ $situacaoSerie->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_situacaoSerie = $situacaoSerie->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_situacaoSerie, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}		
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Duração de Fase
	Método: GET
	URL: http://localhost/sig/api/index.php/duracaofase/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getDuracaoFase($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$userSes = fSession::get('user');
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];

		$DuracaoFase = fRecordSet::build('DuracaoFases', $aSearch, array('descricao' => 'asc'));
		$aDuracaoFase = array();

		foreach ($DuracaoFase->getRecords() as $key => $value) {

			
			//----------------------------------------------------------------------------------
			$descEtapa = '';
			$tmp = $value->getIdEtapa();
			$sqlq = "SELECT descricao FROM etapa WHERE id = ".$tmp;
			$rs_e = $this->_getDb()->query($sqlq);
			foreach ($rs_e as $ch_e => $val_e){ 
				$descEtapa = $val_e['descricao']; 
			}
			$rs_e = $this->_getDb()->close();
			//----------------------------------------------------------------------------------	
			$descCurso = '';
			$tmp = $value->getIdCurso();
			$sqlq = "SELECT nome FROM curso WHERE id = ".$tmp;
			$rs_c = $this->_getDb()->query($sqlq);
			foreach ($rs_c as $ch_c => $val_c){ 
				$descCurso = $val_c['nome']; 
			}
			$rs_c = $this->_getDb()->close();
			//----------------------------------------------------------------------------------	

			/*
			$objEtapa = new Etapa($value->getIdEtapa());
			$objCurso = $this->getCurso(1,$value->getIdCurso(),true);

			$descEtapa = (count($objEtapa)>0) ? $objEtapa->getDescricao() : '';
			$descCurso = (count($objCurso)>0) ? $objCurso[0]->getNome() : '';
			*/

			$data_inicial = self::formataData($value->getDataInicial());
			$data_final = self::formataData($value->getDataFinal());

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";

			$aDuracaoFase[] = array('tipo' 			=> 'Duração de Fase',
				'id' 			=> $value->getId(),
				'descricao' 	=> $value->getDescricao(),
				'id_curso'		=> $value->getIdCurso(),
				'fase'			=> $value->getFase(),
				'id_etapa' 		=> $value->getIdEtapa(),
				'descEtapa'		=> $descEtapa,
				'descCurso'		=> $descCurso,
				'data_inicial'	=> $data_inicial,
				'data_final'	=> $data_final,
				'stat_dtini'	=> $data_inicial,
				'stat_dtfim'	=> $data_final,
				'descricao'		=> $value->getDescricao(),
				'fase'	  		=> $value->getFase(),
				'ativo'			=> $value->getAtivo(),
				'statAtivo' 	=> $statAtivo);
		}

		if (count($aDuracaoFase) == 0) {
			$aDuracaoFase[] = array('error' => -1, 'mensagem' => "Nenhuma Duração de Fase encontrada.");
		}
		else {
			$aDuracaoFase = array(
				'error' => 0,
				'duracao_fase' => $aDuracaoFase
				);
		}
		

		if ($full == false) {
			fJSON::output($aDuracaoFase);
		}
		else {
			return $aDuracaoFase;
		}

	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Duração de Fase
	Método: POST
	URL: http://localhost/sig/api/index.php/duracaofase/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function postDuracaoFase($id="", $full = false) 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$DuracaoFase = new DuracaoFases($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Duração de Fase alterada com sucesso!";
			$alteracao=1;
		}
		else{
			$DuracaoFase = new DuracaoFases();
			$mensagem = "Duração de Fase incluída com sucesso!";
			$alteracao=0;
		}

		try {

			/* ----------------------------------------------------------------------------------- */
			$sqlq = "SELECT SUM(CASE WHEN id_curso = @X AND descricao LIKE '%@Y%' THEN 1 ELSE 0 END) res FROM duracao_fases";			
			$sqlq = str_replace("@X", $data->id_curso, $sqlq);
			$sqlq = str_replace("@Y", $data->descricao, $sqlq);

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $key => $value){ $retorno[] = $value; }
			$rs = $this->_getDb()->close();	
			/* ----------------------------------------------------------------------------------- */

			if ($retorno[0]['res'] == 0) { 

				if (property_exists($data, 'ativo')){
					$DuracaoFase->setAtivo($data->ativo);
				}
				
				if (property_exists($data, 'descricao')){
					$DuracaoFaseAnt = '';

					if($alteracao==1){
						$DuracaoFaseAnt = $DuracaoFase->getDescricao();
					}

					$this->setAuditoria('DuracaoFase', 'Descricao', $DuracaoFaseAnt, $data->descricao); 
					$DuracaoFase->setDescricao($data->descricao);
				}

				$data_inicial = self::formatDateDatebase($data->data_inicial);
				$data_final = self::formatDateDatebase($data->data_final);

				$DuracaoFase->setIdCurso($data->id_curso);
				$DuracaoFase->setIdEtapa($data->id_etapa);
				$DuracaoFase->setDataInicial($data_inicial);
				$DuracaoFase->setDataFinal($data_final);
				$DuracaoFase->setFase($data->fase);

				$userSes = fSession::get('user');
				$DuracaoFase->setIdEntidade($userSes['user']['entidadePessoa']);

				$DuracaoFase->store();

				$id_DuracaoFase = $DuracaoFase->getId();
				$arrMensagem = array('error' => 0, 'id' => $id_DuracaoFase, 'mensagem' => $mensagem);
				fJSON::output($arrMensagem);
				die();

			}else{
				
				$arrMensagem = array('error' => -1, 'mensagem' => "O registro já existe!");
				fJSON::output($arrMensagem);
				die();
			}
			/* ----------------------------------------------------------------------------------- */
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de Motorista
	Método: GET
	URL: http://localhost/sig/api/index.php/motorista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getMotorista($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$Motorista = fRecordSet::build('Motorista', $aSearch, array('nome' => 'asc'));
		$aMotorista = array();

		foreach ($Motorista->getRecords() as $key => $value) {

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";

			$aMotorista[] = array(	'tipo' 				=> 'Motorista',
				'id' 				=> $value->getId(),
				'nome' 				=> $value->getNome(),
				'rg'				=> $value->getRg(),
				'cpf' 				=> $value->getCpf(),
				'cpf_formatado' 	=> self::mask($value->getCpf(), '###.###.###-##'),
				'cnh'				=> $value->getCnh(),
				'permissao'			=> $value->getPermissao(),
				'email'				=> $value->getEmail(),
				'telefone_fixo'		=> $value->getTelefoneFixo(),
				'telefone_celular'	=> $value->getTelefoneCelular(),
				'foto'				=> $value->getFoto(),
				'codigo_postal'		=> $value->getCodigoPostal(),
				'logradouro'		=> $value->getLogradouro(),
				'numero'			=> $value->getNumero(),
				'bairro'			=> $value->getBairro(),
				'complemento'		=> $value->getComplemento(),
				'cidade'			=> $value->getCidade(),
				'estado'			=> $value->getEstado(),
				'ativo'				=> $value->getAtivo(),
				'statAtivo' 		=> $statAtivo);
		}

		if (count($aMotorista) == 0) {
			$aMotorista[] = array('error' => -1, 'mensagem' => "Nenhum Motorista encontrado.");
		}
		else {
			$aMotorista = array(
				'error' => 0,
				'motorista' => $aMotorista
				);
		}
		

		if ($full == false) {
			fJSON::output($aMotorista);
		}
		else {
			return $aMotorista;
		}

	}

		/*
	Módulo: Escola
	Descrição: Cadastrar Motorista
	Método: POST
	URL: http://localhost/sig/api/index.php/motorista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/05/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postMotorista() 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$Motorista = new Motorista($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Motorista alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$Motorista = new Motorista();
			$mensagem = "Motorista incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'ativo')){
				$Motorista->setAtivo($data->ativo);
			}

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'nome')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getNome(); }
				$this->setAuditoria('Motorista', 'Nome', $MotoristaAnt, $data->nome); 

				$Motorista->setNome($data->nome);
			}

			if (property_exists($data, 'rg')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getRg(); }
				$this->setAuditoria('Motorista', 'Rg', $MotoristaAnt, $data->rg); 

				$Motorista->setRg($data->rg);
			}
			if (property_exists($data, 'cpf')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getCpf(); }
				$this->setAuditoria('Motorista', 'Cpf', $MotoristaAnt, $data->cpf); 

				$Motorista->setCpf($data->cpf);
			}
			if (property_exists($data, 'cnh')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getCnh(); }
				$this->setAuditoria('Motorista', 'Cnh', $MotoristaAnt, $data->cnh); 

				$Motorista->setCnh($data->cnh);
			}
			if (property_exists($data, 'permissao')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getPermissao(); }
				$this->setAuditoria('Motorista', 'Permissao', $MotoristaAnt, $data->permissao); 

				$Motorista->setPermissao($data->permissao);
			}
			if (property_exists($data, 'email')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getEmail(); }
				$this->setAuditoria('Motorista', 'Email', $MotoristaAnt, $data->email); 

				$Motorista->setEmail($data->email);
			}
			if (property_exists($data, 'telefone_fixo')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getTelefoneFixo(); }
				$this->setAuditoria('Motorista', 'TelefoneFixo', $MotoristaAnt, $data->telefone_fixo); 

				$Motorista->setTelefoneFixo($data->telefone_fixo);
			}
			if (property_exists($data, 'telefone_celular')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getTelefoneCelular(); }
				$this->setAuditoria('Motorista', 'TelefoneCelular', $MotoristaAnt, $data->telefone_celular); 

				$Motorista->setTelefoneCelular($data->telefone_celular);
			}
			if (property_exists($data, 'codigo_postal')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getCodigoPostal(); }
				$this->setAuditoria('Motorista', 'CodigoPostal', $MotoristaAnt, $data->codigo_postal); 

				$Motorista->setCodigoPostal($data->codigo_postal);
			}
			if (property_exists($data, 'logradouro')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getLogradouro(); }
				$this->setAuditoria('Motorista', 'Logradouro', $MotoristaAnt, $data->logradouro); 

				$Motorista->setLogradouro($data->logradouro);
			}
			if (property_exists($data, 'numero')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getNumero(); }
				$this->setAuditoria('Motorista', 'Numero', $MotoristaAnt, $data->numero); 

				$Motorista->setNumero($data->numero);
			}
			if (property_exists($data, 'bairro')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getBairro(); }
				$this->setAuditoria('Motorista', 'Bairro', $MotoristaAnt, $data->bairro); 

				$Motorista->setBairro($data->bairro);
			}
			if (property_exists($data, 'complemento')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getComplemento(); }
				$this->setAuditoria('Motorista', 'Complemento', $MotoristaAnt, $data->complemento); 

				$Motorista->setComplemento($data->complemento);
			}
			if (property_exists($data, 'cidade')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getCidade(); }
				$this->setAuditoria('Motorista', 'Cidade', $MotoristaAnt, $data->cidade); 

				$Motorista->setCidade($data->cidade);
			}
			if (property_exists($data, 'estado')){

				$MotoristaAnt = '';
				if($alteracao==1){ $MotoristaAnt = $Motorista->getEstado(); }
				$this->setAuditoria('Motorista', 'Estado', $MotoristaAnt, $data->estado); 

				$Motorista->setEstado($data->estado);
			}								

			if(isset($data->foto)){			
				$tmp = explode('/', $data->foto);
				$Motorista->setFoto(end($tmp));
			}

			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['nome='] = $data->nome; 
				$countDescricao = fRecordset::build('Motorista', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Motorista já existe");
					fJSON::output($arrMensagem);
					die();
				}else{ 
					$Motorista->store();
				}

			}else{
				$Motorista->store(); 
			}
			
			/* ----------------------------------------------------------------------------------- */
			$id_Motorista = $Motorista->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_Motorista, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: escola
	Descrição: Obter Lista de matricula
	Método: GET
	URL: http://localhost/sig/api/index.php/matricula/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function getMatricula($id=0, $id_turma=0, $id_etapa=0, $id_aluno=0, $turmaXetapa=0, $full = false) {

		$sqlq = "SELECT ";

		$sqlq1=	"COALESCE(p.nome,'') aluno,
				 COALESCE(p.codigo,'') codigo,
				 COALESCE(p.foto,'') foto,
				 COALESCE(p.sexo,'') sexo,
				 COALESCE(c.nome,'') curso,
				 COALESCE(s.descricao,'') situacao_serie,
				 COALESCE(DATE_FORMAT(m.data_transferencia_escola,'%Y-%m-%d'),'') data_transferencia_escola,
				 COALESCE(DATE_FORMAT(m.data_contrato,'%Y-%m-%d'),'') data_contrato,
				 COALESCE(m.id,0) id,
				 COALESCE(m.id_aluno,0) id_aluno,				 
				 COALESCE(m.id_curso,0) id_curso,
				 COALESCE(m.id_etapa,0) id_etapa,
				 COALESCE(m.id_situacao_serie,0) id_situacao_serie,
				 COALESCE(m.serie,'') serie,
				 COALESCE(DATE_FORMAT(m.data_matricula,'%Y-%m-%d'),'') data_matricula,
				 COALESCE(m.numero_contrato,'') numero_contrato,
				 COALESCE(m.total_parcelas,0) total_parcelas";

		$sqlq2= "COALESCE(t.nome,'') turma,
				 COALESCE(m.id_turma,0) id_turma";

		$sqlq3= " FROM matricula m 
				 LEFT JOIN pessoa p ON p.id=m.id_aluno
				 LEFT JOIN turma t ON t.id=m.id_turma
				 LEFT JOIN curso c ON c.id=m.id_curso
				 LEFT JOIN situacao_serie s ON s.id=m.id_situacao_serie @W @G @O";

		$userSes = fSession::get('user');		
		
		$cond = ' WHERE m.id_entidade='.$userSes['user']['entidadePessoa'];
		$cond.= ($id > 0) ? ' AND m.id='.$id : '';
		$cond.= ($id_turma > 0) ? ' AND m.id_turma='.$id_turma : '';
		$cond.= ($id_etapa > 0) ? ' AND m.id_etapa='.$id_etapa : '';
		$cond.= ($id_aluno > 0) ? ' AND m.id_aluno='.$id_aluno : '';

		if($turmaXetapa==0){

			$sqlq.= $sqlq1.','.$sqlq2.$sqlq3;
			$group = '';
			$order = 'order by m.id';

		}else{
			$sqlq.= $sqlq2.$sqlq3;
			$group = 'group by t.nome,m.id_turma ';
			$order = 'order by t.nome,m.id_turma';
		}
		
		$sqlq = str_replace("@W", $cond, $sqlq);
		$sqlq = str_replace("@G", $group, $sqlq);
		$sqlq = str_replace("@O", $order, $sqlq);


		if ($full == false) {

			$retorno = array();
			$data_matricula = '';
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $key => $value){
				$matricula = self::formataData($value['data_matricula']);
				$value['data_matricula'] = $matricula;
				$retorno[] = $value;
			}
			$rs = $this->_getDb()->close();	

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro de matrícula disponível");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, 'matricula' => $retorno );
			fJSON::output($retorno);
		}
	} 

	/*
	Módulo: Escola
	Descrição: Cadastro de Matricula
	Método: GET
	URL: http://localhost/sig/api/index.php/matricula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function postMatricula() {


		$data = json_decode(file_get_contents("php://input"));

		$sqlq = "SELECT m.id FROM matricula m where m.id_aluno = ".$data->id_aluno." AND m.id_curso = ".$data->id_curso." AND m.id_etapa = ".$data->id_etapa." AND m.id_turma = ".$data->id_turma;
		$rep=false;
		
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $rep = (count($value)>0) ? true : false; }
		$rs = $this->_getDb()->close();	

		if(!$rep){

			$sqlq = "SELECT c.id FROM caixa c 
					 WHERE c.id_pessoa IN(SELECT ra.id_pessoa resp_financ FROM responsavel_aluno ra WHERE ra.id_pessoa_aluno=".$data->id_aluno." AND ra.responsavel_financeiro=1)				 
					 AND c.id_situacao IN(3,4) AND c.id_tipo_lancamento=1 AND CURDATE()>c.data_vencimento AND c.data_pagamento IS NULL
					 AND (select id_entidade from conta_bancaria where id=c.id_conta_bancaria)=3";
			
			$resp=false;
			
			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $resp = (count($value)>0) ? true : false; }
			$rs = $this->_getDb()->close();	

			if(!$resp){
			
				if ($data->data_matricula != '' && $data->data_matricula != null){
					$data->data_matricula = substr(implode("-", array_reverse(explode("/", $data->data_matricula))), 0, 10);}
				
				if ($data->data_contrato != '' && $data->data_contrato != null){
					$data->data_contrato = substr(implode("-", array_reverse(explode("/", $data->data_contrato))), 0, 10);}
				
				if ($data->data_transferencia_escola != '' && $data->data_transferencia_escola != null){
					$data->data_transferencia_escola = substr(implode("-", array_reverse(explode("/", $data->data_transferencia_escola))), 0, 10);}

				$userSes = fSession::get('user');
				$data->id_entidade = $userSes['user']['entidadePessoa'];
				
				$retorno = $this->postGeral('matricula',$data);
			
			}else{
				$retorno = array('error'=>-1, 'mensagem' => 'Não é possível efetuar a matrícula, procure o financeiro!' );
			}

		}else{
			$retorno = array('error'=>-1, 'mensagem' => 'Já existe uma matrícula para o aluno!' );
		}

		fJSON::output($retorno);
	}



	/*
	Módulo: Escola
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/diasemana/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getDiaSemana($id="",$full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		
		$diaSemana = fRecordSet::build('DiaSemana', $aSearch);

		if ($full == false) {

			$aDiaSemana = array();

			$aStatus = array("Inativo", "Ativo");

			foreach ($diaSemana as $key => $value) {

				$aDiaSemana[] = array(
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $aStatus[$value->getAtivo()],
					);
			}

			if (count($aDiaSemana) == 0) {
				$aDiaSemana[] = array('error' => -1, 'mensagem' => "Nenhum dia da semana encontrado.");
				fJSON::output($aDiaSemana);
				die();
			}

			$aDiaSemana = array(
				'error' => 0, 
				'dia_semana' => $aDiaSemana
				);

			fJSON::output($aDiaSemana);
		}
		else {
			return $diaSemana;
		}
	} 

	/*
	Módulo: Escola
	Descrição: Cadastro de Grade Horaria
	Método: GET
	URL: http://localhost/sig/api/index.php/horariagrade/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postGradeHorario() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$grade_horario = new GradeHorario($data->id);
			$mensagem = "Horário alterada com sucesso!";
			$alteracao=1;
		}else{
			$grade_horario = new GradeHorario();
			$mensagem = "Horário incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Grade Horario
			if (property_exists($data, 'id_grade')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade_horario->getIdGrade();
				}
				$this->setAuditoria('GradeHorario', 'IdGrade', $ant, $data->id_grade);
				$grade_horario->setIdGrade($data->id_grade);
			}

			if (property_exists($data, 'id_disciplina')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade_horario->getIdDisciplina();
				}
				$this->setAuditoria('GradeHorario', 'IdDisciplina', $ant, $data->id_disciplina);
				$grade_horario->setIdDisciplina($data->id_disciplina);
			}

			if (property_exists($data, 'id_horario')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade_horario->getIdHorario();
				}
				$this->setAuditoria('GradeHorario', 'IdHorario', $ant, $data->id_horario);
				$grade_horario->setIdHorario($data->id_horario);
			}

			if (property_exists($data, 'id_dia_semana')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade_horario->getIdDiaSemana();
				}
				$this->setAuditoria('GradeHorario', 'IdDiaSemana', $ant, $data->id_dia_semana);
				$grade_horario->setIdDiaSemana($data->id_dia_semana);
			}

			$grade_horario->setAtivo($data->ativo);

			$grade_horario->store();

			$id_grade_horario = $grade_horario->getId();

		//******** Fim - Grava informações na Tabela de grade horario

			$arrMensagem = array('error' => 0, 'id' => $id_grade_horario, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}
	
	/*
	Módulo: escola
	Descrição: Obter Lista de grade horaria
	Método: GET
	URL: http://localhost/sig/api/index.php/gradehorario/<id>/id_grade
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGradeHorario($id=0, $id_grade=0, $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}

		if ($id_grade > 0) {
			$aSearch['id_grade='] = $id_grade;
		}
		
		$gradeHorario = fRecordSet::build('GradeHorario', $aSearch);

		
		$aGradeHorario = array();    

		foreach ($gradeHorario as $key => $value) {
			$grade = '';
			$turma = '';
			$curso = '';
			$horario = array();

			$resultGrade = $this->getGrade($value->getIdGrade(), true);

			if(count($resultGrade['grade']) > 0){
				$resultTurma = $this->getTurma(1, $resultGrade['grade'][0]['id_turma'], 0, true);
				
				if($resultTurma['error'] == 0){
					$turma = $resultTurma['turma'][0]['nome'];
				}
				
				$resultCurso = $this->getCurso(1, $resultGrade['grade'][0]['id_curso'], 0, true);
				if($resultCurso != null){					
					$curso = $resultCurso[0]['nome'];
				}

				$resultHorario = $this->getHorario($value->getIdHorario(), true);
				if(count($resultHorario) > 0){
					$horario = array(
						'descricao' => $resultHorario[0]->getDescricao(),
						'hora_inicio' => $resultHorario[0]->getHoraInicial(),
						'hora_final' => $resultHorario[0]->getHoraFinal(),
						);
				}
			}	

			$dia_semana = '';
			$resultDiaSemana = $this->getDiaSemana($value->getIdDiaSemana(), true);
			if(count($resultDiaSemana) > 0){
				$dia_semana = $resultDiaSemana[0]->getDescricao();
			}

			$disciplina = '';
			$resultDisciplina = $this->getDisciplina(0, $value->getIdDisciplina(), true);
			if(count($resultDisciplina) > 0){
				$disciplina = $resultDisciplina->getNome();
			}
			
			if ($value->getAtivo()) {
				$status = "Ativo";
			} else {
				$status = "Inativo";
			}

			$aGradeHorario[] = array(
				'id' => $value->getId(),
				'id_turma' => $resultGrade['grade'][0]['id_turma'],
				'turma' => $turma,
				'id_curso' => $resultGrade['grade'][0]['id_curso'],
				'curso' => $curso,
				'id_etapa' => $resultGrade['grade'][0]['id_etapa'],
				'id_disciplina' => $value->getIdDisciplina(),
				'disciplina' => $disciplina,
				'id_dia_semana' => $value->getIdDiaSemana(),
				'dia_semana' => $dia_semana,
				'id_horario' => $value->getIdHorario(),
				'horario' => $horario,
				'ativo' => $value->getAtivo(),
				'status' => $status
				);
		}

		if (count($aGradeHorario) == 0) {
			$aGradeHorario[] = array('error' => -1, 'mensagem' => "Nenhuma grade de horario encontrada.");
			fJSON::output($aGradeHorario);
			die();
		}

		$aGradeHorario = array(
			'error' => 0, 
			'grade_horario' => $aGradeHorario
			);

		if ($full == false) {

			fJSON::output($aGradeHorario);
		}
		else {
			return $aGradeHorario;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/contaralunosprofessores/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 13/02/2015
	*/

	public function getContarAlunosProfessores($full = false) {

		$aSearch = array();
		$aSearch['aluno='] = 1;
		$alunos = fRecordSet::build('Pessoa', $aSearch);

		$aSearch = array();
		$aSearch['professor='] = 1;
		$professores = fRecordSet::build('Pessoa', $aSearch);

		$total = count($alunos) + count($professores);
		if ($total>0) {
			$total_alunos = count($alunos) / $total * 100;
			$total_professores = count($professores) / $total * 100;
		}
		$aPessoa = array(
			array(
				'key' => "Alunos",
				'x' => count($alunos),
				'y' => round($total_alunos, 2),
				),
			array(
				'key' => "Professores",
				'x' => count($professores),
				'y' => round($total_professores, 2),
				)
			);
		
		if ($full == false) {
			fJSON::output($aPessoa);
		} else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/contarstatisticaalunos/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getContarStatisticaAlunos($full = false) {
		$aSearch = array();
		$aSearch['aluno='] = 1;
		
		$aPessoaReturn = $this->getGraficoBarra($aSearch, 'Alunos', 'Alunos nos últimos 12 meses');

		if ($full == false) {
			fJSON::output($aPessoaReturn);
		}
		else {
			return $aPessoaReturn;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/dashboardgraficopizza/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getDashboardGraficoPizza($full = false) {

		$userSes = fSession::get('user');
		$aPessoa = array();
		$aPessoa['entidade_logada'] = $userSes['user']['idTipoEntidade'];
		
		switch ($userSes['user']['idTipoEntidade']) {
			case 1:
		    	//Mesquita
				//$aPessoa = $this->getContarAssociados(true);
				$aPessoa['pizza'] = $this->getDadosPizza();
			break;
			case 2:
		    	//Cemiterio
		    	//$aPessoa = $this->getContarAlunosProfessores(true);
			break;
			case 3:
		    	//Escola
				$aPessoa['pizza'] = $this->getContarAlunosProfessores(true);
			break;

			case 4:
			$aPessoa['pizza'] = $this->getDadosPizza();
			break;

		}
			
		if ($full == false) {
			fJSON::output($aPessoa);
		} else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter dados para gráfico de pizza em Mesquita (SBM)
	Método: GET		
	Resposta: JSON
	Data de Criação: 18/09/2015
	Autor: Fabio Haydn	
	*/

	public function getDadosPizza(){

		$consulta = "	SELECT
						y.ass,y.don,y.ent,y.fnc,y.fnd,y.nas,
						ROUND((y.ass*100)/tot,1) perc_ass,
						ROUND((y.don*100)/tot,1) perc_don,
						ROUND((y.ent*100)/tot,1) perc_ent,
						ROUND((y.fnc*100)/tot,1) perc_fnc,
						ROUND((y.fnd*100)/tot,1) perc_fnd,
						ROUND((y.nas*100)/tot,1) perc_nas
						FROM(SELECT x.ass,x.don,x.ent,x.fnc,x.fnd,x.nas, (x.ass+x.don+x.ent+x.fnc+x.fnd+x.nas) tot
						FROM(SELECT 
						SUM(associado) ass,
						SUM(donatario) don,
						SUM(entidade) ent,
						SUM(funcionario) fnc,
						SUM(fornecedor) fnd,
						SUM(CASE WHEN (CAST(associado AS UNSIGNED)+cast(donatario AS UNSIGNED)+cast(entidade AS UNSIGNED)+cast(funcionario AS UNSIGNED)+cast(fornecedor AS UNSIGNED))>0 THEN 0 ELSE 1 END) nas
						FROM pessoa p 
						LEFT OUTER JOIN entidade_pessoa e ON p.id=e.id_pessoa
						WHERE e.id_entidade=1)x)y";

		$sqlq = $consulta;		
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	
		
		return $retorno;
	}

	/*
	Módulo: Escola
	Descrição: Obter numero de associados
	Método: GET
	URL: http://localhost/sig/api/index.php/dashboardgraficobarra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getDashboardGraficoBarra($full = false) {
		$userSes = fSession::get('user');
		
		$aPessoa = array();

		switch ($userSes['user']['idTipoEntidade']) {
			case 1:
		    	//Mesquita
			$aPessoa = $this->getContarStatisticaAssociados(true);
			break;
			case 2:
		    	//Cemiterio
		    	//$aPessoa = $this->getContarAlunosProfessores(true);
			break;
			case 3:
		    	//Escola
			$aPessoa = $this->getContarStatisticaAlunos(true);
			break;
		}
		
		if ($full == false) {
			fJSON::output($aPessoa);
		}
		else {
			return $aPessoa;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaomatricula/<id_consulta>/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 16/03/2015
	Autor: Ricardo S. Nakadomari
	*/

	public function getSituacaoMatricula($id_consulta="", $id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		
		$cargo = fRecordSet::build('SituacaoMatricula', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aCargo = array();

			if (($id_consulta != 1) && ($id=="")) {
				$aCargo[] = array(
					'tipo'=>"Ação",
					'id' => "-1",
					'descricao' => ":: Cadastrar Nova Situação da Matrícula",
					'ativo' => "",
					'status' => ""
					);
			}      


			$aStatus = array("Inativo", "Ativo");

			foreach ($cargo as $key => $value) {

				$aCargo[] = array(
					'tipo' => "Situação da Matrícula",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $aStatus[$value->getAtivo()],
					);
			}

			if (count($aCargo) == 0) {
				$aCargo[] = array('error' => -1, 'mensagem' => "Nenhuma Situação de Matrícula encontrada.");
				fJSON::output($aCargo);
				die();
			}

			$aCargo = array(
				'error' => 0, 
				'situacao_matricula' => $aCargo
				);

			fJSON::output($aCargo);
		}
		else {
			return $cargo[0];
		}
	} 

	/*
	Módulo: Mesquita
	Descrição: Cadastrar um novo Situacao da Matrícula
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaomatricula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/02/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Alteração: Fábio Roberto Haydn
	Data Alteração: 11/06/2015 
	*/

	public function postSituacaoMatricula() {
		$userSes = fSession::get('user');

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$situacaoMatricula = new SituacaoMatricula($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Situação de Matrícula alterada com sucesso!";
			$alteracao = 1;
			
		}else{
			$situacaoMatricula = new SituacaoMatricula();
			$mensagem = "Situação de Matrícula incluída com sucesso!";
			$alteracao = 0;
			
		}

		try {

			//******** Grava informações na Tabela de Cargo

			if (property_exists($data, 'descricao')){
				$ant = '';
				if($alteracao==1){
					$ant = $situacaoMatricula->getDescricao();
					$this->setAuditoria('SituacaoMatricula', 'Descricao', $ant, $data->descricao, $data->id);
				}else{
					$this->setAuditoria('SituacaoMatricula', 'Descricao', $ant, $data->descricao);
				}
				

				$situacaoMatricula->setDescricao($data->descricao);
			}
			if (property_exists($data, 'ativo')){
				$situacaoMatricula->setAtivo($data->ativo);
			}
			
			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['descricao='] = $data->descricao;
				$countDescricao = fRecordset::build('SituacaoMatricula', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A situação de Matrícula já existe");
					fJSON::output($arrMensagem);
					die();
				}else{
					$situacaoMatricula->store();
				}     
			} else {
				$situacaoMatricula->store();
			} 

			//******** Fim - Grava informações na Tabela de Cargo

			$id_situacao_matricula = $situacaoMatricula->getId();

			$arrMensagem = array('error' => 0, 'id_situacao_matricula' => $id_situacao_matricula, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Mesquita
	Descrição: Exclui um horario de um Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/delcursohorario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 12/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function delContatoEmpresa() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();

		$aSearch['id='] = $data->id;
		
		$cursoHorario = fRecordSet::build('EmpresaContato', $aSearch);

		$mensagem = "Contato excluído da empresa com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$cursoHorario[0]->delete();
		//******** Fim - Excluí informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}

	/*
	Módulo: Escola, Mesquita e Cemiterio
	Descrição: Monta objeto para grafico de barras conforme o array indiccado
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/05/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGraficoBarra($aSearch = array(), $chave, $titulo) {
		//Este Metodo não esta vinculado a url pois ele só é utilizado para retorno em outros metodos
		$dt = date("Y-m-d", strtotime("+1 month"));
		$dt_inicio = date('Y-m', strtotime("-1 year", strtotime($dt))) .'-01';

		$mes = date("m");
		$ano = date("Y");
		$ultimo_dia = date("t", mktime(0,0,0,$mes,'01',$ano));
		$dt_termino = date("Y-m-d", mktime(0,0,0,$mes,$ultimo_dia,$ano));

		$aSearch1 = $aSearch;
		$aSearch1['data_cadastro>='] = $dt_inicio;
		$aSearch1['data_cadastro<='] = $dt_termino;
		
		$pessoa = fRecordSet::build('Pessoa', $aSearch1);
		$total = count($pessoa);

		$aData = array();
		for($a = 11; $a >= 0; $a--){
			$aData[] = date("Y-m", strtotime("-" .$a ." month"));
		}


		$aPessoa = array();
		$aPessoas = array();
		$aPessoaReturn = array();

		foreach ($aData as $key => $value) {
			$ano_mes = explode('-', $value);
			$ultimo_dia_mes = date("t", mktime(0,0,0,$ano_mes[1],'01',$ano_mes[0]));

			$aSearch2 = $aSearch;
			$aSearch2['data_cadastro>='] = $value .'-01';
			$aSearch2['data_cadastro<='] = $value .'-' .$ultimo_dia_mes;

			$pessoa_mes = fRecordSet::build('Pessoa', $aSearch2);

			/*if ($pessoa_mes->count()>0) {
				foreach ($pessoa_mes as $key2 => $value2) {
					$aPessoas[$value][] = array(
						'nome' => $value2->getNome(),            
						);  
				}          
			}*/       

			$aPessoa[] = array($value, count($pessoa_mes));
		}

		$aPessoaReturn[] = array(
			'title' => $titulo, 
			'key' => $chave, 
			'values' => $aPessoa,
			//'pessoas' => $aPessoas,
			'pessoas' => array(),
			);

		return $aPessoaReturn;
	}
	
	/*
	Módulo: Escola
	Descrição: Cadastro de Aluno Financeiro
	Método: GET
	URL: http://localhost/sig/api/index.php/alunofinanceiro/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2015
	Autor: Fábio Roberto Haydn
	*/

	public function postAlunoFinanceiro() 
	{		
		$data = json_decode(file_get_contents("php://input"));
		$userSes = fSession::get('user');
		$data->id_entidade = $userSes['user']['entidadePessoa'];

		if(!property_exists($data,'id')){

			$sqlq = "SELECT id FROM aluno_financeiro WHERE id_aluno=".$data->id_aluno." AND id_etapa=".$data->id_etapa." AND id_curso=".$data->id_curso;
			
			$resp=false;

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $resp = (count($value)>0) ? true : false; }
			$rs = $this->_getDb()->close();	

			if(!$resp){

				$retorno = $this->postGeral('aluno_financeiro',$data);
				//$retorno = array('error'=> 0, 'mensagem' => 'Registro incluído com sucesso!');
			}else{
				$retorno = array('error'=>-1, 'mensagem' => 'Aluno já possui um cadastro!' );
			}
		}
		else{
			$retorno = $this->postGeral('aluno_financeiro',$data);			
			//$retorno = array('error'=>-1, 'mensagem' => 'Aluno já possui um cadastro!' );
		}
		
		fJSON::output($retorno);
	}

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de cargo
	Método: GET
	URL: http://localhost/sig/api/index.php/alunofinanceiro/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/10/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function getAlunoFinanceiro($id=0, $id_aluno=0, $full = false) {

		$userSes = fSession::get('user');		
		$id_entidade = 0;
		$id_entidade = $userSes['user']['entidadePessoa'];

		$sqlq = "SELECT
				 af.id,
				 af.id_etapa,
				 e.descricao etapa,
				 af.id_curso,
				 c.nome curso,
				 af.id_faixa,
				 f.descricao faixa,
				 af.id_aluno,
				 (SELECT nome FROM pessoa p WHERE id=af.id_aluno) aluno,
				 af.id_tipo_carne,
				 af.id_responsavel,
				 (SELECT nome FROM pessoa p WHERE id=af.id_responsavel) responsavel,
				 af.dia_vencimento,
				 af.observacao,
				 af.ativo,
				 CASE WHEN af.ativo=1 THEN 'Ativo' ELSE 'Inativo' END status
				 FROM aluno_financeiro af
				 LEFT JOIN etapa e ON e.id=af.id_etapa
				 LEFT JOIN curso c ON c.id=af.id_curso
				 LEFT JOIN faixa f ON f.id=af.id_faixa
				 LEFT JOIN responsavel_aluno ra ON ra.id_pessoa=af.id_responsavel
				 WHERE 1 @C1 @C2 @C3 GROUP BY af.id";
	
		if($id_aluno>0)	  { $sqlq = str_replace("@C1", "AND af.id_aluno=".$id_aluno 	 , $sqlq); }else{ $sqlq = str_replace("@C1", "", $sqlq); };
		if($id>0)		  { $sqlq = str_replace("@C2", "AND af.id=".$id 				 , $sqlq); }else{ $sqlq = str_replace("@C2", "", $sqlq); };
		if($id_entidade>0){ $sqlq = str_replace("@C3", "AND af.id_entidade=".$id_entidade, $sqlq); }else{ $sqlq = str_replace("@C3", "", $sqlq); };			

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }			
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado."	);				
		}else{
			$retorno = array( 'error' => 0, 'aluno_financeiro' => $retorno );		
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Motivos de Bolsa a partir de um Grupo
	Método: GET
	URL: http://localhost/sig/api/index.php/carregamotivobolsagrupo/<id_grupo_motivo_bolsa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/06/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração:01/06/2015
	*/

	public function getMotivoBolsaGrupo($id_grupo_motivo_bolsa = "",$full = false) {
		$this->acessoApi();

		$aSearch = array();
		if ($id_grupo_motivo_bolsa != "") {
			$aSearch['id_grupo_motivo_bolsa='] = $id_grupo_motivo_bolsa;
		}                 

		$motivo_bolsa = fRecordSet::build('MotivoBolsa', $aSearch);

		if ($full == false) {

			$aMotivoBolsa = array();

			foreach ($motivo_bolsa->getRecords() as $key => $value) {

				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$resultMotivoBolsa = $this->getGrupoMotivoBolsa($value->getIdGrupoMotivoBolsa(), true);


				$aMotivoBolsa[] = array(
					'id' => $value->getId(),
					'id_grupo_motivo_bolsa' => $value->getIdGrupoMotivoBolsa(),
					'descricao_motivo_bolsa' => $resultMotivoBolsa[0]->getDescricao(),
					'descricao' => $value->getDescricao(),
					'ativo' => $value->getAtivo(),
					'status' => $status
					);
			}

			if (count($aMotivoBolsa) == 0) {
				$aMotivoBolsa[] = array('error' => -1, 'mensagem' => "Nenhum motivo de bolsa encontrado.");
				fJSON::output($aMotivoBolsa);
				die();
			}

			$aMotivoBolsa = array('error' => 0, 'lote' => $aMotivoBolsa);

			fJSON::output($aMotivoBolsa);
		}
		else {
			return $motivo_bolsa[0];
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastro de Bolsas
	Método: GET
	URL: http://localhost/sig/api/index.php/bolsa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fábio Roberto Haydn	
	Versão: 1.0
	*/

	public function postBolsa() 
	{
		$data = json_decode(file_get_contents("php://input"));
		fJSON::output($this->postGeral('bolsa',$data));
	}

	/*
	Módulo: escola
	Descrição: Obter Lista de bolsas
	Método: GET
	URL: http://localhost/sig/api/index.php/bolsa/<id_aluno>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/11/2015
	Autor: Fábio Roberto Haydn	
	*/

	public function getBolsa($id_aluno = 0, $full = false) {

		$sqlq = "SELECT
				 b.id,
				 b.id_aluno,
				 (SELECT nome FROM pessoa WHERE id=b.id_aluno) aluno,
				 b.id_curso,
				 c.nome curso,
				 b.id_grupo_motivo_bolsa,
				 gm.descricao grupo_motivo_bolsa,
				 b.id_motivo_bolsa,
				 mb.descricao motivo_bolsa,
				 b.id_pessoa_padrinho,
				 b.id_etapa,
				 (SELECT nome FROM pessoa WHERE id=b.id_pessoa_padrinho) padrinho, 
				 COALESCE(DATE_FORMAT(b.data_inicio_validade,'%d/%m/%Y'),'') data_inicio_validade,
				 COALESCE(DATE_FORMAT(b.data_final_validade,'%d/%m/%Y'),'') data_final_validade,
				 b.percentual_bolsa,
				 b.valor_fixo,
				 b.valor_desconto_fixo,
				 b.observacao,
				 b.ativo,
				 CASE WHEN b.ativo=1 THEN 'ativo' ELSE 'inativo' END status
				 FROM bolsa b
				 LEFT JOIN curso c ON c.id=b.id_curso
				 LEFT JOIN motivo_bolsa mb ON mb.id=b.id_grupo_motivo_bolsa
				 LEFT JOIN grupo_motivo_bolsa gm ON gm.id=b.id_grupo_motivo_bolsa 
				 @W";		
		

		$W = ($id_aluno>0) ? "WHERE b.id_aluno=".$id_aluno : "";
		$sqlq = str_replace("@W", $W, $sqlq);

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: ???
	Descrição: O que isso faz?
	Método: ???
	URL: ???
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ???
	Autor: ???
	Versão: ??
	Data de Alteração: ???
	*/

	public function delAlunoFinanceiro() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$alunoFinanceiro = fRecordSet::build('AlunoFinanceiro', $aSearch);

		$mensagem = "Financeiro do aluno excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$alunoFinanceiro[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}	


	/*
	Módulo: Escola
	Descrição: Cadastrar uma nova receita fixa do aluno
	Método: POST
	URL: http://localhost/sig/api/index.php/alunoreceitafixa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/06/2015
	Autor: fabio da Silva
	*/

	public function postAlunoReceitaFixa() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$receitaFixa = new AlunoReceitaFixa($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Receita fixa do aluno alterada com sucesso!";
			$alteracao=1;
		}else{
			$receitaFixa = new AlunoReceitaFixa ();
			$mensagem = "Receita fixa do aluno incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de religiao
			if (property_exists($data, 'id_aluno')){
				$ant = '';
				if($alteracao==1){
					$ant = $receitaFixa->getIdAluno();
				}

				$receitaFixa->setIdAluno($data->id_aluno);
				$this->setAuditoria('ReceitaFixa', 'IdAluno', $ant, $data->id_aluno);
			}

			if (property_exists($data, 'id_tipo_receita')){
				$ant = '';
				if($alteracao==1){
					$ant = $receitaFixa->getIdTipoReceita();
				}

				$receitaFixa->setIdTipoReceita($data->id_tipo_receita);
				$this->setAuditoria('ReceitaFixa', 'IdTipoReceita', $ant, $data->id_tipo_receita);
			}

			//FORMATAR ESSA DATA

			if (property_exists($data, 'data_inicio_validade')){
				$ant = '';
				if($alteracao==1){
					$ant = $receitaFixa->getDataInicioValidade();
				}				
				$dt = '';
				$dt = $data->data_inicio_validade.'T12:00:00';
				/*
				if ($data->data_inicio_validade != '' && $data->data_inicio_validade != null){
					//$dt = substr(implode("-", array_reverse(explode("/", $data->data_inicio_validade))), 0, 10);
					$mes = substr( $data->data_inicio_validade, 0, 2 );
					$ano = substr( $data->data_inicio_validade, 2, 4 );
					$dt = $ano . '-' . $mes . '-' . '01';

				}
				$this->setAuditoria('ReceitaFixa', 'DataInicioValidade', $ant, $dt);
				*/
				$this->setAuditoria('ReceitaFixa', 'DataInicioValidade', $ant, $dt);
				$receitaFixa->setDataInicioValidade($dt);
			}

			//FORMATAR ESSA DATA

			if (property_exists($data, 'data_final_validade')){
				$ant = '';
				if($alteracao==1){
					$ant = $receitaFixa->getDataFinalValidade();
				}
				$dt = '';
				$dt = $data->data_final_validade.'T12:00:00';				
				/*
				if ($data->data_final_validade != '' && $data->data_final_validade != null){
					//$dt = substr(implode("-", array_reverse(explode("/", $data->data_final_validade))), 0, 10);
					$mes = substr( $data->data_inicio_validade, 0, 2 );
					$ano = substr( $data->data_inicio_validade, 2, 4 );
					$dt = $ano . '-' . $mes . '-' . '01';
				}
				*/
				$this->setAuditoria('ReceitaFixa', 'DataFinalValidade', $ant, $dt);
				$receitaFixa->setDataFinalValidade($dt);
			}

			if (property_exists($data, 'valor')){
				$ant = '';
				if($alteracao==1){
					$ant = $receitaFixa->getValor();
				}

				$receitaFixa->setValor($data->valor);
				$this->setAuditoria('ReceitaFixa', 'Valor', $ant, $data->valor);
			}

			$receitaFixa->setAtivo(1);
			
			$receitaFixa->store();
		//******** Fim - Grava informações na Tabela de religiao
			$id_receita_fixa = $receitaFixa->getId();

			$arrMensagem = array('error' => 0, 'id' => $id_receita_fixa, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	} 

	/*
	Módulo: escola
	Descrição: Obter Lista de receita fixa do aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/alunoreceitafixa/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/06/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	*/

	public function getAlunoReceitaFixa($id=0, $id_aluno=0, $full = false) {

		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}

		if ($id_aluno > 0) {
			$aSearch['id_aluno='] = $id_aluno;
		}
		
		$alunoReceitaFixa = fRecordSet::build('AlunoReceitaFixa', $aSearch);

		if ($full == false) {

			$aAlunoReceitaFixa = array(); 

			foreach ($alunoReceitaFixa as $key => $value) {
				$aluno = '';
				$resultAluno = $this->getPessoa($value->getIdAluno(), true);
				
				if($resultAluno != null){
					$aluno = $resultAluno['pessoa'][0]['nome'];
				}

				$tipo_receita = '';				
				$strQueryTipoReceita = "SELECT descricao FROM tipo_receita WHERE id = ".$value->getIdTipoReceita()." ORDER BY descricao ";
				$rsTipoReceita = $this->_getDb()->query($strQueryTipoReceita);				
				foreach ($rsTipoReceita as $key => $valTipoReceita){ $tipo_receita = $valTipoReceita['descricao']; }
				$rsTipoReceita = $this->_getDb()->close();


				if ($value->getAtivo()==1) {
					$status = "Ativo";
				} else if ($value->getAtivo()==0) {
					$status = "Inativo";
				}

				$aAlunoReceitaFixa[] = array(
					'id' => $value->getId(),
					'id_aluno' => $value->getIdAluno(),
					'aluno' => $aluno,
					'id_tipo_receita' => $value->getIdTipoReceita(),
					'tipo_receita' => $tipo_receita,
					'data_inicio_validade' => $value->getDataInicioValidade()->format('Y-m'),
					'data_inicio_validade_formatada' => $value->getDataInicioValidade()->format('m/Y'),
					'data_final_validade' => $value->getDataFinalValidade()->format('Y-m'),
					'data_final_validade_formatada' => $value->getDataFinalValidade()->format('m/Y'),
					'valor' => $value->getValor(),
					'ativo' => $value->getAtivo(),
					'status' => $status,
					);
			}

			if (count($aAlunoReceitaFixa) == 0) {
				$aAlunoReceitaFixa[] = array('error' => -1, 'mensagem' => "Nenhuma receita do aluno encontrada.");
				fJSON::output($aAlunoReceitaFixa);
				die();
			}

			$aAlunoReceitaFixa = array(
				'error' => 0, 
				'aluno_receita_fixa' => $aAlunoReceitaFixa
				);

			fJSON::output($aAlunoReceitaFixa);
		}
		else {
			return $aAlunoReceitaFixa;
		}
	}


	/*
	Módulo: ???
	Descrição: O que isso faz?
	Método: ???
	URL: ???
	Autenticação: Não
	Resposta: JSON
	Data de Criação: ???
	Autor: ???
	Versão: ??
	Data de Alteração: ???
	*/

	public function delAlunoReceitaFixa() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$alunoReceitaFixa = fRecordSet::build('AlunoReceitaFixa', $aSearch);

		$mensagem = "Receita fixa do aluno excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$alunoReceitaFixa[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}

	}

	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfileTransporte
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 10/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/

	public function uploadFileVeiculo() {

		$mArq = explode('/', $_FILES['file']['name']);
		$arq = $mArq[count($mArq)-1];

		$ext = explode('.', $arq);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/img/veiculo/foto_'.$date->getTimestamp().'.'.$extensao;
		//$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/PHP/trunk/sig/img/veiculo/foto_'.$date->getTimestamp().'.'.$extensao;
		
		move_uploaded_file($_FILES['file']['tmp_name'], $caminho);
		$arrMensagem = array('caminho' => $caminho, 'arquivo' => $arq);
		fJSON::output($arrMensagem);
	}

	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfile
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 10/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	
	public function uploadFileMotorista() { 

		$mArq = explode('/', $_FILES['file']['name']);
		$arq = $mArq[count($mArq)-1];

		$ext = explode('.', $arq);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/img/motorista/foto_'.$date->getTimestamp().'.'.$extensao;
		//$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/PHP/trunk/sig/img/motorista/foto_'.$date->getTimestamp().'.'.$extensao;
		
		move_uploaded_file($_FILES['file']['tmp_name'], $caminho);
		$arrMensagem = array('caminho' => $caminho, 'arquivo' => $arq);
		fJSON::output($arrMensagem);			
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Veiculo
	Método: GET
	URL: http://localhost/sig/api/index.php/veiculo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getVeiculo($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$Veiculo = fRecordSet::build('Veiculo', $aSearch, array('descricao' => 'asc'));
		$aVeiculo = array();

		foreach ($Veiculo->getRecords() as $key => $value) {

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";

			$aVeiculo[] = array(	'tipo' 				=> 'Veiculo',
				'id' 				=> $value->getId(),
				'descricao'			=> $value->getDescricao(),
				'placa'				=> $value->getPlaca(),
				'quantidade_alunos' => $value->getQuantidadeAlunos(),
				'foto_veiculo'		=> $value->getFotoVeiculo(),
				'ativo'				=> $value->getAtivo(),
				'statAtivo' 		=> $statAtivo);
		}

		if (count($aVeiculo) == 0) 
		{
			$aVeiculo[] = array('error' => -1, 'mensagem' => "Nenhum Veiculo encontrado.");
		}
		else
		{
			$aVeiculo = array( 'error' => 0, 'veiculo' => $aVeiculo	);
		}
		
		if ($full == false) {
			fJSON::output($aVeiculo);
		}
		else {
			return $aVeiculo;
		}

	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Veiculo
	Método: POST
	URL: http://localhost/sig/api/index.php/veiculo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postVeiculo() 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$Veiculo = new Veiculo($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Veículo alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$Veiculo = new Veiculo();
			$mensagem = "Veículo incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'ativo')){
				$Veiculo->setAtivo($data->ativo);
			}

			/* ----------------------------------------------------------------------------------- */
			if (property_exists($data, 'descricao')){

				$VeiculoAnt = '';
				if($alteracao==1){ $VeiculoAnt = $Veiculo->getDescricao(); }
				$this->setAuditoria('Veiculo', 'Nome', $VeiculoAnt, $data->descricao); 

				$Veiculo->setDescricao($data->descricao);
			}

			if (property_exists($data, 'placa')){

				$VeiculoAnt = '';
				if($alteracao==1){ $VeiculoAnt = $Veiculo->getPlaca(); }
				$this->setAuditoria('Veiculo', 'Placa', $VeiculoAnt, $data->placa); 

				$Veiculo->setPlaca($data->placa);
			}
			if (property_exists($data, 'quantidade_alunos')){

				$VeiculoAnt = '';
				if($alteracao==1){ $VeiculoAnt = $Veiculo->getQuantidadeAlunos(); }
				$this->setAuditoria('Veiculo', 'Quantidade de Alunos', $VeiculoAnt, $data->quantidade_alunos); 

				$Veiculo->setQuantidadeAlunos($data->quantidade_alunos);
			}		
			
			$tmp = explode('/', $data->foto_veiculo);
			$Veiculo->setFotoVeiculo(end($tmp));

			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$aSearch['placa='] = $data->placa;
				$countDescricao = fRecordset::build('Veiculo', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Veículo já existe");
					fJSON::output($arrMensagem);
					die();
				}else{ 
					$Veiculo->store();
				}

			}else{
				$Veiculo->store(); 
			}
			
			/* ----------------------------------------------------------------------------------- */
			$id_veiculo = $Veiculo->getId();
			$arrMensagem = array('error' => 0, 'id_veiculo' => $id_veiculo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}



	/*
	Módulo: Escola
	Descrição: Obter Lista de $id_consulta=0 -> Motorista x Veiculos
							  $id_consulta=1 -> Veiculo x Motoristas
	Método: GET
	URL: http://localhost/sig/api/index.php/veiculomotorista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getVeiculoMotorista($id_consulta="",$id="", $full = false) 
	{
		$aSearch = array();

		$tipo = ($id_consulta == 0) ? 'veiculo' : 'motorista';
		$pesq = 'id_'.$tipo;

		if($id != ""){ $aSearch[$pesq.'='] = $id; }
		
		$VeiculoMotorista = fRecordSet::build('VeiculoMotorista', $aSearch, array($pesq => 'asc'));
		$aVeiculoMotorista = array();

		foreach ($VeiculoMotorista->getRecords() as $key => $value) {

			$aVeiculoMotorista[] = array('tipo' 		=> 'VeiculoMotorista',
				'id'			=> $value->getId(),
				'id_veiculo'   => $value->getIdVeiculo(),
				'id_motorista' => $value->getIdMotorista());
		}

		if (count($aVeiculoMotorista) == 0){
			$aVeiculoMotorista[] = array('error' => -1, 'mensagem' => "Nenhum ".ucfirst($tipo)." encontrado.");
		}
		else{
			$aVeiculoMotorista = array( 'error' => 0, $tipo => $aVeiculoMotorista);
		}		

		if ($full == false){
			fJSON::output($aVeiculoMotorista);
		}
		else{
			return $aVeiculoMotorista;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar relacionamento Veiculo x Motorista
	Método: POST
	URL: http://localhost/sig/api/index.php/veiculomotorista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postVeiculoMotorista() 
	{
		$data = json_decode(file_get_contents("php://input"));

		$Veiculo = new VeiculoMotorista();
		$mensagem = "Motorista incluído com sucesso!";		

		try {
			$Veiculo->setIdVeiculo($data->id_veiculo);
			$Veiculo->setIdMotorista($data->id_motorista);
			$Veiculo->store(); 


			$id_Veiculo = $Veiculo->getId();
			$arrMensagem = array('error' => 0, 'id_Veiculo' => $id_Veiculo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Motoristas JSON
	Método: GET
	URL: http://localhost/sig/api/index.php/stringmotorista/<stringmotorista>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getMotoristaString($id_motorista = "", $full = false) {

		$request = $this->_slimApp->request()->params();
		$aSearch = array();

		if (array_key_exists('string', $request) && $request['string'] != '') {
			$aSearch['nome~'] = $request['string'];
		}

		if ($id_motorista != "") {
			$aSearch['id='] = $id_motorista;
		}

		$motorista = fRecordSet::build('Motorista', $aSearch);

		if ($full == false) {

			$aMotorista = array();

			foreach ($motorista->getRecords() as $key => $value) {

				$aMotorista[] = array('tipo'=> "Motorista",
					'id' 	=> $value->getId(),
					'nome'=> $value->getNome());
			}

			if (count($aMotorista) == 0) {
				$aMotorista[] = array('error' => -1, 'mensagem' => "Nenhum Motorista encontrado.");
			}

			fJSON::output($aMotorista);
		}
		else {
			return $motorista[0];
		}
	} 

	/*
	Módulo: Escola
	Descrição: Exclui relacionamento na tabela veiculo_motorista
	Método: GET
	URL: http://localhost/sig/api/index.php/delveiculomotorista/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delVeiculoMotorista() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_veiculo='] = $data->id_veiculo;
		$aSearch['id_motorista='] = $data->id_motorista;

		$VeiculoMotorista = fRecordSet::build('VeiculoMotorista', $aSearch);
		$mensagem = "Motorista excluído com sucesso!";        

		try {

			$VeiculoMotorista[0]->delete();		

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Rotas
	Método: GET
	URL: http://localhost/sig/api/index.php/rota/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getRota($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}

		$Rota = fRecordSet::build('Rota', $aSearch, array('descricao' => 'asc'));
		$aRota = array();

		foreach ($Rota->getRecords() as $key => $value) {

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";

			$aRota[] = array(	'tipo' 		=> 'Rota',
				'id' 		=> $value->getId(),
				'descricao'	=> $value->getDescricao(),
				'ativo'		=> $value->getAtivo(),
				'statAtivo'	=> $statAtivo);
		}

		if (count($aRota) == 0) 
		{
			$aRota[] = array('error' => -1, 'mensagem' => "Nenhum Rota encontrado.");
		}
		else
		{
			$aRota = array( 'error' => 0, 'rota' => $aRota	);
		}
		
		if ($full == false) {
			fJSON::output($aRota);
		}
		else {
			return $aRota;
		}

	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Rota
	Método: POST
	URL: http://localhost/sig/api/index.php/rota/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postRota() 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$Rota = new Rota($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Rota alterada com sucesso!";
			$alteracao=1;
		}
		else{
			$Rota = new Rota();
			$mensagem = "Rota incluída com sucesso!";
			$alteracao=0;
		}

		try {

			/* ----------------------------------------------------------------------------------- */

			if (property_exists($data, 'ativo')){
				$Rota->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'descricao')){

				$RotaAnt = '';
				if($alteracao==1){ $RotaAnt = $Rota->getDescricao(); }
				$this->setAuditoria('Rota', 'Nome', $RotaAnt, $data->descricao); 

				$Rota->setDescricao($data->descricao);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('Rota', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A Rota já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $Rota->store(); }
			}else{ $Rota->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_rota = $Rota->getId();
			$arrMensagem = array('error' => 0, 'id_rota' => $id_rota, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Itinerários
	Método: GET
	URL: http://localhost/sig/api/index.php/itinerario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getItinerario($id="", $full = false) 
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id_rota='] = $id;
		}

		$Itinerario = fRecordSet::build('Itinerario', $aSearch, array('observacoes' => 'asc'));
		$aItinerario = array();

		foreach ($Itinerario->getRecords() as $key => $value) {

			$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";

			$aItinerario[] = array(	'tipo' 		 => 'Itinerario',
				'id' 		 => $value->getId(),
				'id_rota'	 => $value->getIdRota(),
				'rua'		 => $value->getRua(),
				'horario' 	 => $value->getHorario(),
				'observacoes'=> $value->getObservacoes(),
				'ativo'		 => $value->getAtivo(),
				'statAtivo'  => $statAtivo);
		}

		if (count($aItinerario) == 0) 
		{
			$aItinerario = array('error' => -1, 'mensagem' => "Nenhum Itinerário encontrado.");
		}
		else
		{
			$aItinerario = array( 'error' => 0, 'itinerario' => $aItinerario );
		}
		
		if ($full == false) {
			fJSON::output($aItinerario);
		}
		else {
			return $aItinerario;
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Itinerario
	Método: POST
	URL: http://localhost/sig/api/index.php/itinerario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postItinerario() 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$Itinerario = new Itinerario($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Itinerário alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$Itinerario = new Itinerario();
			$mensagem = "Itinerário incluído com sucesso!";
			$alteracao=0;
		}

		try {

			/* ----------------------------------------------------------------------------------- */

			if (property_exists($data, 'ativo')){
				$Itinerario->setAtivo($data->ativo);
			}			

			if (property_exists($data, 'id_rota')){
				$Itinerario->setIdRota($data->id_rota);
			}

			if (property_exists($data, 'rua')){

				$ItinerarioAnt = '';
				if($alteracao==1){ $ItinerarioAnt = $Itinerario->getRua(); }
				$this->setAuditoria('Itinerario', 'Rua', $ItinerarioAnt, $data->rua); 

				$Itinerario->setRua($data->rua);
			}
			if (property_exists($data, 'horario')){

				$ItinerarioAnt = '';
				if($alteracao==1){ $ItinerarioAnt = $Itinerario->getHorario(); }
				$this->setAuditoria('Itinerario', 'Horario', $ItinerarioAnt, $data->horario); 

				$Itinerario->setHorario($data->horario);
			}
			if (property_exists($data, 'observacoes')){

				$ItinerarioAnt = '';
				if($alteracao==1){ $ItinerarioAnt = $Itinerario->getObservacoes(); }
				$this->setAuditoria('Itinerario', 'Observações', $ItinerarioAnt, $data->observacoes); 

				$Itinerario->setObservacoes($data->observacoes);
			}

			/* ----------------------------------------------------------------------------------- */

			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['rua='] = $data->rua; 
				$countRua = fRecordset::build('Itinerario', $aSearch);

				if($countRua->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Itinerário já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $Itinerario->store(); }
			}else{ $Itinerario->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_itinerario = $Itinerario->getId();
			$arrMensagem = array('error' => 0, 'id_itinerario' => $id_itinerario, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Exclui registro na tabela "rota_percurso"
	Método: GET
	URL: http://localhost/sig/api/index.php/delitinerario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delItinerario() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;
		
		$Itinerario = fRecordSet::build('Itinerario', $aSearch);
		$mensagem = "Itinerário excluído com sucesso!";        

		try {

			$Itinerario[0]->delete();		

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Veiculo
	Método: GET
	URL: http://localhost/sig/api/index.php/usuario/<id>/<id_pedido>/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/06/2015
	Autor: Fábio da Silva
	Versão: 1.0
	*/
	public function getUsuario($id="", $id_pessoa=0, $full = false) 
	{		

		$aSearch = "";

		if ($id > 0) {
			$aSearch .= ' and id ='. $id;
		}
		if ($id_pessoa > 0) {
			$aSearch .= ' and id_pessoa ='. $id_pessoa;
		}
		
		$strQueryUsuario = "SELECT * FROM usuario WHERE 1 ".$aSearch;

		$usuario = $this->_getDb()->query($strQueryUsuario);

		$aUsuario = array();

		//if($usuario->countReturnedRows() > 0){

			foreach ($usuario as $key => $value) {
				$statAtivo = ($value['ativo']==1) ? "Ativo" : "Inativo";

				$aUsuario[] = array(	
					'id' 				=> $value['id'],
					'id_pessoa'			=> $value['id_pessoa'],
					'token'				=> $value['token'],
					'login'				=> $value['login'],
					'senha'				=> $value['senha'],
					'ativo'				=> $value['ativo'],
					'statAtivo' 		=> $statAtivo
					);
			}

		//}

		$usuario = $this->_getDb()->close();

		if(count($aUsuario) == 0){
			$aUsuario = array(
				'error' => -1, 
				'mensagem' => "Nenhum Usuário encontrado."
				);
		}else{
			$aUsuario = array(
				'error' => 0, 
				'usuario' => $aUsuario
				);
		}
		
		if ($full == false) {
			fJSON::output($aUsuario);
		} else {
			return $aUsuario;
		}

	}

	/*
	Módulo: Escola
	Descrição: Cadastro de Grade Horaria
	Método: GET
	URL: http://localhost/sig/api/index.php/grade/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postGrade() {
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')) {
			$grade = new Grade($data->id);
			$mensagem = "Grade alterada com sucesso!";
			$alteracao=1;
		}else{
			$grade = new Grade();
			$mensagem = "Grade incluída com sucesso!";
			$alteracao=0;
		}

		try {
		//******** Grava informações na Tabela de Grade Horario
			if (property_exists($data, 'id_etapa')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade->getIdEtapa();
				}
				$this->setAuditoria('Grade', 'IdEtapa', $ant, $data->id_etapa);
				$grade->setIdEtapa($data->id_etapa);
			}

			if (property_exists($data, 'id_curso')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade->getIdCurso();
				}
				$this->setAuditoria('Grade', 'IdCurso', $ant, $data->id_curso);
				$grade->setIdCurso($data->id_curso);
			}

			if (property_exists($data, 'id_turma')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade->getIdTurma();
				}
				$this->setAuditoria('Grade', 'IdTurma', $ant, $data->id_turma);
				$grade->setIdTurma($data->id_turma);
			}

			if (property_exists($data, 'serie')){
				$ant = '';
				if($alteracao==1){
					$ant = $grade->getSerie();
				}
				$this->setAuditoria('Grade', 'Serie', $ant, $data->serie);
				$grade->setSerie($data->serie);
			}

			$grade->setAtivo($data->ativo);
			
			$userSes = fSession::get('user');
			$grade->setIdEntidade($userSes['user']['entidadePessoa']);	

			$grade->store();

			$id_grade = $grade->getId();

		//******** Fim - Grava informações na Tabela de grade horario

			$arrMensagem = array('error' => 0, 'id' => $id_grade, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: escola
	Descrição: Obter Lista de grade horaria
	Método: GET
	URL: http://localhost/sig/api/index.php/horariograde/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGrade($id="", $full = false) {
		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}
		
		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		$grade = fRecordSet::build('Grade', $aSearch);

		$aGrade = array();

		foreach ($grade as $key => $value) {
			$turma = '';
			$resultTurma = $this->getTurma(1, $value->getIdTurma(), 0, true);
			if($resultTurma['error'] == 0){
				$turma = $resultTurma['turma'][0]['nome'];
			}

			$curso = '';
			$resultCurso = $this->getCurso(1, $value->getIdCurso(), 0, true);
			if($resultCurso != null){				
				$curso = $resultCurso[0]['nome'];
			}
			
			if ($value->getAtivo()) {
				$status = "Ativo";
			} else {
				$status = "Inativo";
			}

			$aGrade[] = array(
				'id' => $value->getId(),
				'id_turma' => $value->getIdTurma(),
				'turma' => $turma,
				'id_curso' => $value->getIdCurso(),
				'curso' => $curso,
				'id_etapa' => $value->getIdEtapa(),
				'serie' => $value->getSerie(),
				'ativo' => $value->getAtivo(),
				'status' => $status
				);
		}

		if (count($aGrade) == 0) {
			$aGrade[] = array('error' => -1, 'mensagem' => "Nenhuma grade de horario encontrada.");
			fJSON::output($aGrade);
			die();
		}
		
		$aGrade = array(
			'error' => 0, 
			'grade' => $aGrade
			);

		if ($full == false) {
			
			fJSON::output($aGrade);
		}
		else {
			return $aGrade;
		}
	}

	/*
	Módulo: Mesquita
	Descrição: Exclui um horario de um Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/delgradehorario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function delGradeHorario() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();

		$aSearch['id='] = $data->id;
		
		$gradeHorario = fRecordSet::build('GradeHorario', $aSearch);

		$mensagem = "Horário excluído da grade com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$gradeHorario[0]->delete();
		//******** Fim - Excluí informações na Tabela de departamento_pessoa
			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}    
	}


	private function setUsuario($id_pessoa, $nome, $alteracao=0){
		if($alteracao==1){
			$aSearch = array();
			$aSearch['id_pessoa='] = $id_pessoa;
			$usuario = fRecordSet::build('Usuario', $aSearch);
			if(count($usuario) > 0){
				return $usuario[0]->getLogin();
			}
		}

		$userSes = fSession::get('user');

		$usuario = new Usuario();
		$usuario->setIdPessoa($id_pessoa);

		$login = $this->criarLogin(strtolower($this->retira_acentos($nome)));

		$usuario->setLogin($login);      
		
		$usuario->store();

		$this->setPass($id_pessoa,'123mudar');

		$entidadePessoa = new EntidadePessoa();
		$entidadePessoa->setIdPessoa($id_pessoa);
		$entidadePessoa->setIdEntidade($userSes['user']['entidadePessoa']);
		$entidadePessoa->store();

		return $usuario->getLogin();
	}
	/*
	Módulo: Escola
	Descrição: Obter Lista de Bloqueio de Matrícula
	Método: GET
	URL: http://localhost/sig/api/index.php/bloqueiomatricula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getBloqueioMatricula($id_consulta="",$id="", $full = false)
	{
		$aSearch = array();

		if ($id != "") {
			$aSearch['id='] = $id;
		}  
		
		$BloqueioMatricula = fRecordSet::build('BloqueioMatricula', $aSearch, array('descricao' => 'asc'));

		if ($full == false) {

			$aBloqueioMatricula = array();

			if (($id_consulta != "1") && ($id=="")) {
				$aBloqueioMatricula[] = array(	'tipo'		=>"Ação",
					'id' 		=> "-1",
					'descricao' => ":: Cadastrar Novo Bloqueio de Matrícula",
					'ativo' 	=> "");   
			}  

			foreach ($BloqueioMatricula->getRecords() as $key => $value) {

				$statAtivo = ($value->getAtivo()==1) ? "Ativo" : "Inativo";
				
				$aBloqueioMatricula[] = array( 	'tipo' 		=> "Bloqueio de Matrícula",
					'id' 		=> $value->getId(),
					'descricao' => $value->getDescricao(),
					'ativo'		=> $value->getAtivo(),
					'statAtivo' => $statAtivo);
			}

			if (count($aBloqueioMatricula) == 0) {
				$aBloqueioMatricula[] = array('error' => -1, 'mensagem' => "Nenhum Bloqueio de Matrícula encontrado.");
			}else{
				$aBloqueioMatricula = array('error' => 0, 'bloqueiomatricula' => $aBloqueioMatricula);
			}

			fJSON::output($aBloqueioMatricula);
		}
		else {
			return $BloqueioMatricula[0];
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar BloqueioMatricula
	Método: POST
	URL: http://localhost/sig/api/index.php/bloqueiomatricula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postBloqueioMatricula() 
	{
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$BloqueioMatricula = new BloqueioMatricula($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Bloqueio de Matrícula alterada com sucesso!";
			$alteracao=1;
		}
		else{
			$BloqueioMatricula = new BloqueioMatricula();
			$mensagem = "Bloqueio de Matrícula incluída com sucesso!";
			$alteracao=0;
		}

		try {

			/* ----------------------------------------------------------------------------------- */

			if (property_exists($data, 'ativo')){
				$BloqueioMatricula->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'descricao')){

				$BloqueioMatriculaAnt = '';
				if($alteracao==1){ $BloqueioMatriculaAnt = $BloqueioMatricula->getDescricao(); }
				$this->setAuditoria('BloqueioMatricula', 'Nome', $BloqueioMatriculaAnt, $data->descricao); 

				$BloqueioMatricula->setDescricao($data->descricao);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao; 
				$countDescricao = fRecordset::build('BloqueioMatricula', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Bloqueio de Matrícula já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $BloqueioMatricula->store(); }
			}else{ $BloqueioMatricula->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_bloqueiomatricula = $BloqueioMatricula->getId();
			$arrMensagem = array('error' => 0, 'id_bloqueiomatricula' => $id_bloqueiomatricula, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Cadastro de Matricula
	Método: GET
	URL: http://localhost/sig/api/index.php/parametrocobranca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/11/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function postParametroCobranca() {

		try{
			$data = json_decode(file_get_contents("php://input"));
		
			if(property_exists($data, 'mes_ano')){
				$dt = '';
				$dt = $data->mes_ano;
				$dt = substr($dt,0,10);

				if ($dt!='' || $dt!=null){ $data->mes_ano=$this->formataDataMysql($dt,'date','01'); } 
			}

			if(property_exists($data, 'data_fixa_desconto')){
				$dt = '';
				$dt = $data->data_fixa_desconto;
				$dt = substr($dt,0,10);

				if ($dt!='' || $dt!=null){ $data->data_fixa_desconto=$this->formataDataMysql($dt,'date','01');; } 
			}
		
			if(property_exists($data, 'data_vencimento')){
				$dt = '';
				$dt = $data->data_vencimento;
				if ($dt!='' || $dt!=null){ $data->data_vencimento=$this->formataDataMysql($dt,'date'); } 
			}
		
			$userSes = fSession::get('user');
			$data->id_entidade = $userSes['user']['entidadePessoa'];

			fJSON::output($this->postGeral('parametro_cobranca',$data));

		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);			
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Parametro de Cobranca
	Método: GET
	URL: http://localhost/sig/api/index.php/parametrocobranca/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getParametroCobranca($id="", $full = false) {

		$userSes = fSession::get('user');

		$aSearch = array();
		if ($id != "") {
			$aSearch['id='] = $id;
		}  

		$aSearch['id_entidade='] = $userSes['user']['entidadePessoa'];
		
		$parametroCobranca = fRecordSet::build('ParametroCobranca', $aSearch);

		$aParametroCobranca = array();
		$aDoacao = array();
		$status = array('Inativo', 'Ativo');
		$desconto_especial_status = array('Nenhum', 'Até o vencimento', 'Data fixa de desconto especial');

		foreach ($parametroCobranca->getRecords() as $key => $value) {
			$aSearch = array();
			$aSearch['id='] = $value->getIdTipoCarne();
			$tipoCarne = fRecordSet::build('TipoCarne', $aSearch);
			$tipoCarneDescricao = '';
			if(count($tipoCarne) > 0){
				$tipoCarneDescricao = $tipoCarne[0]->getDescricao();
			}

			$data_fixa_desconto = '';			
			if ($value->getDataFixaDesconto() != null) {
				$data_fixa_desconto = implode("/", array_reverse(explode("-", $value->getDataFixaDesconto())));
			}

			$data_vencimento = '';			
			if ($value->getDataVencimento() != null) {
				$data_vencimento = implode("/", array_reverse(explode("-", $value->getDataVencimento())));
			}

			$mes_ano = explode("-", $value->getMesAno());
			$mes_ano = $mes_ano[1] . "/" . $mes_ano[0];

			$aParametroCobranca[] = array(
				'id' => $value->getId(),
				'id_tipo_carne' => $value->getIdTipoCarne(),
				'tipo_carne' => $tipoCarneDescricao,
				'mes_ano' => $mes_ano, 
				'data_vencimento' => $data_vencimento, 
				'desconto_especial' => $value->getDescontoEspecial(),
				'desconto_especial_status' => $desconto_especial_status[$value->getDescontoEspecial()],
				'data_fixa_desconto' => $data_fixa_desconto, 
				'porcentagem_desconto' => $value->getPorcentagemDesconto(),
				'valor_desconto' => $value->getValorDesconto(),
				'ativo' => $value->getAtivo(),
				'status' => $status[$value->getAtivo()],
				);
		}

		if (count($aParametroCobranca) == 0) {
			$aParametroCobranca[] = array('error' => -1, 'mensagem' => "Nenhum parametro de cobrança encontrado.");
			fJSON::output($aParametroCobranca);
			die;
		}

		$aParametroCobranca = array(
			'error' => 0,
			'parametro_cobranca' => $aParametroCobranca
			);          

		if ($full == false) {
			fJSON::output($aParametroCobranca);
		}
		else {
			return $aParametroCobranca;
		}
	}


	/*
	Módulo: Escola
	Descrição: Cadastrar Parametro de Cobranca Ocorrencia
	Método: POST
	URL: http://localhost/sig/api/index.php/parametrocobrancaocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/06/2015
	Autor: Fábio S. da Silva
	Versão: 1.0
	*/
	public function postParametroCobrancaOcorrencia($data = array(), $full = false) 
	{
		if(count($data) == 0){
			$data = json_decode(file_get_contents("php://input"));	
		}
		

		if (property_exists($data, 'id')) {
			$parametroCobrancaOcorrencia = new ParametroCobrancaOcorrencia($data->id);
			$id = $data->id;
			$mensagem = "Ocorrência alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$parametroCobrancaOcorrencia = new ParametroCobrancaOcorrencia();
			$id = '';
			$mensagem = "Ocorrência incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */			
			if (property_exists($data, 'id_parametro_cobranca')){
				$parametroCobrancaOcorrencia->setIdParametroCobranca($data->id_parametro_cobranca);
			}

			if (property_exists($data, 'id_tipo_receita')){
				$ant = '';
				if($alteracao==1){ 
					$ant = $parametroCobrancaOcorrencia->getIdTipoReceita(); 
				}
				$this->setAuditoria('parametroCobrancaOcorrencia', 'IdTipoReceita', $ant, $data->id_tipo_receita, $id); 
				$parametroCobrancaOcorrencia->setIdTipoReceita($data->id_tipo_receita);
			}

			if (property_exists($data, 'ativo')){
				$parametroCobrancaOcorrencia->setAtivo($data->ativo);
			}

			if(property_exists($data, 'receita_principal')){
				$parametroCobrancaOcorrencia->setReceitaPrincipal($data->receita_principal);
			}
			if(property_exists($data, 'faixa_preco')){
				$parametroCobrancaOcorrencia->setFaixaPreco($data->faixa_preco);
			}
			if(property_exists($data, 'desconto_bolsa')){
				$parametroCobrancaOcorrencia->setDescontoBolsa($data->desconto_bolsa);
			}
			if(property_exists($data, 'desconto_pontualidade')){
				$parametroCobrancaOcorrencia->setDescontoPontualidade($data->desconto_pontualidade);
			}

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {
				$aSearch = array();
				$aSearch['id_parametro_cobranca='] = $data->id_parametro_cobranca; 
				$aSearch['id_tipo_receita='] = $data->id_tipo_receita; 
				$countDescricao = fRecordset::build('ParametroCobrancaOcorrencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A ocorrência já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ 
					$parametroCobrancaOcorrencia->store(); 
				}
			}else{ 
				$parametroCobrancaOcorrencia->store(); 
			}
			
			/* ----------------------------------------------------------------------------------- */
			$id_parametro_cobranca_ocorrencia = $parametroCobrancaOcorrencia->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_parametro_cobranca_ocorrencia, 'mensagem' => $mensagem);
			
			if($full == false){
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}
			
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			
			if($full == false){
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}
		}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Parametro de Cobranca Ocorrencia
	Método: GET
	URL: http://localhost/sig/api/index.php/parametrocobrancaocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getParametroCobrancaOcorrencia($id=0,$id_parametro=0, $full = false) {

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}  

		if ($id_parametro > 0) {
			$aSearch['id_parametro_cobranca='] = $id_parametro;
		}  

		$ocorrencia = fRecordSet::build('ParametroCobrancaOcorrencia', $aSearch);
		$aOcorrencia = array();

		$status = array('Inativo', 'Ativo');
		$receitaPrincipalStatus = array('', 'Indicador de receita principal');
		$faixaPrecoStatus = array('', 'Faixa de preço');
		$descontoBolsaStatus = array('', 'Desconto de bolsa do aluno');
		$descontoPontualidadeStatus = array('', 'Desconto de pontualidade');


		foreach ($ocorrencia->getRecords() as $key => $value) {
			$aSearch = array();
			$aSearch['id='] = $value->getIdTipoReceita();
			$tipoReceita = fRecordSet::build('TipoReceita', $aSearch);
			$tipoReceitaDescricao = '';
			if(count($tipoReceita) > 0){
				$tipoReceitaDescricao = $tipoReceita[0]->getDescricao();
			}

			$aOcorrencia[] = array(
				'id' => $value->getId(),
				'id_parametro_cobranca' => $value->getIdParametroCobranca(),
				'id_tipo_receita' => $value->getIdTipoReceita(),
				'tipo_receita' => $tipoReceitaDescricao,
				'receita_principal' => $value->getReceitaPrincipal(),
				'receita_principal_status' => $receitaPrincipalStatus[$value->getReceitaPrincipal()],
				'faixa_preco' => $value->getFaixaPreco(),
				'faixa_preco_status' => $faixaPrecoStatus[$value->getFaixaPreco()],
				'valor_desconto_bolsa' => $value->getDescontoBolsa(),
				'desconto_bolsa_status' => $descontoBolsaStatus[$value->getDescontoBolsa()],
				'desconto_pontualidade' => $value->getDescontoPontualidade(),
				'desconto_pontualidade_status' => $descontoPontualidadeStatus[$value->getDescontoPontualidade()],
				'ativo' => $value->getAtivo(),
				'status' => $status[$value->getAtivo()],
			);
		}

		if (count($aOcorrencia) == 0) {
			$aOcorrencia[] = array('error' => -1, 'mensagem' => "Nenhum ocorrência encontrada.");
			fJSON::output($aOcorrencia);
			die;
		}

		$aOcorrencia = array(
			'error' => 0,
			'parametro_cobranca_ocorrencia' => $aOcorrencia
			);          

		if ($full == false) {
			fJSON::output($aOcorrencia);
		}
		else {
			return $aOcorrencia;
		}
	}


	/*
	Módulo: Escola
	Descrição: Cadastrar Cobranca preço
	Método: POST
	URL: http://localhost/sig/api/index.php/cobrancapreco/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/06/2015
	Autor: Fábio S. da Silva
	Versão: 1.0
	*/
	public function postCobrancaPreco($data = array(), $full = false) 
	{
		if(count($data) == 0){
			$data = json_decode(file_get_contents("php://input"));
		}


		if (property_exists($data, 'id')) {
			$cobrancaPreco = new CobrancaPreco($data->id);
			$id = $data->id;
			$mensagem = "Cobrança alterada com sucesso!";
			$alteracao=1;
		}
		else{
			$cobrancaPreco = new CobrancaPreco();
			$id = '';
			$mensagem = "Cobrança incluída com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */			
			if (property_exists($data, 'id_prametro_cobranca_ocorrencia')){
				$cobrancaPreco->setIdParametroCobrancaOcorrencia($data->id_prametro_cobranca_ocorrencia);
			}

			if (property_exists($data, 'id_curso')){
				$ant = '';
				if($alteracao==1){ 
					$ant = $cobrancaPreco->getIdCurso(); 
				}
				$this->setAuditoria('CobrancaPreco', 'IdCurso', $ant, $data->id_curso, $id); 
				$cobrancaPreco->setIdCurso($data->id_curso);
			}

			if (property_exists($data, 'serie')){
				$ant = '';
				if($alteracao==1){ 
					$ant = $cobrancaPreco->getSerie(); 
				}
				$this->setAuditoria('CobrancaPreco', 'Serie', $ant, $data->serie, $id); 
				$cobrancaPreco->setSerie($data->serie);
			}

			if (property_exists($data, 'valor_normal')){
				$cobrancaPreco->setValorNormal($data->valor_normal);
			}

			if (property_exists($data, 'valor_autorizado')){
				$cobrancaPreco->setValorAutorizado($data->valor_autorizado);
			}

			if (property_exists($data, 'porcentagem_desconto')){
				$cobrancaPreco->setPorcentagemDesconto($data->porcentagem_desconto);
			}

			if (property_exists($data, 'valor_desconto')){
				$cobrancaPreco->setValorDesconto($data->valor_desconto);
			}

			$cobrancaPreco->setAtivo($data->ativo);

			
			/* ----------------------------------------------------------------------------------- */
			/*if ($alteracao != 1) {
				$aSearch = array();
				$aSearch['id_parametro_cobranca='] = $data->id_parametro_cobranca; 
				$aSearch['id_tipo_receita='] = $data->id_tipo_receita; 
				$countDescricao = fRecordset::build('ParametroCobrancaOcorrencia', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. A ocorrência já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ 
					$parametroCobrancaOcorrencia->store(); 
				}
			}else{ 
				$parametroCobrancaOcorrencia->store(); 
			}*/
			$cobrancaPreco->store(); 
			/* ----------------------------------------------------------------------------------- */
			$id_cobranca_preco = $cobrancaPreco->getId();
			$arrMensagem = array('error' => 0, 'id' => $id_cobranca_preco, 'mensagem' => $mensagem);

			if($full == false){
				fJSON::output($arrMensagem);
				die();	
			}else{
				return $arrMensagem;
			}
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
		

			if($full == false){
				fJSON::output($arrMensagem);
				die();
			}else{
				return $arrMensagem;
			}
		}
	}


/*
	Módulo: Escola
	Descrição: Obter Lista de Parametro de Cobranca Ocorrencia
	Método: GET
	URL: http://localhost/sig/api/index.php/cobrancaopreco/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCobrancaPreco($id=0,$id_parametro_cobranca_ocorrencia=0, $full = false) {

		$aSearch = array();
		if ($id > 0) {
			$aSearch['id='] = $id;
		}  

		if ($id_parametro_cobranca_ocorrencia > 0) {
			$aSearch['id_parametro_cobranca_ocorrencia='] = $id_parametro_cobranca_ocorrencia;
		}  

		$db = fRecordSet::build('CobrancaPreco', $aSearch);
		$aDb = array();

		$status = array('Inativo', 'Ativo');
		$valorNormalStatus = array('', 'Valor Normal');
		
		foreach ($db->getRecords() as $key => $value) {
			$aSearch = array();
			$aSearch['id='] = $value->getIdCurso();
			$curso = fRecordSet::build('Curso', $aSearch);
			$cursoDescricao = '';
			if(count($curso) > 0){
				$cursoDescricao = $curso[0]->getNome();
			}

			$aDb[] = array(
				'id' => $value->getId(),
				'id_parametro_cobranca_ocorrencia' => $value->getIdParametroCobrancaOcorrencia(),
				'id_curso' => $value->getIdCurso(),
				'curso' => $cursoDescricao,
				'serie' => $value->getSerie(),
				'valor_normal' => $value->getValorNormal(),
				'valor_normal_status' => $valorNormalStatus[$value->getValorNormal()],
				'valor_autorizado' => $value->getValorAutorizado(),
				'porcentagem_desconto' => $value->getPorcentagemDesconto(),
				'valor_desconto' => $value->getValorDesconto(),
				'ativo' => $value->getAtivo(),
				'status' => $status[$value->getAtivo()],
				);
		}

		if (count($aDb) == 0) {
			$aDb[] = array('error' => -1, 'mensagem' => "Nenhum preço da cobrança encontrado.");
			fJSON::output($aDb);
			die;
		}

		$aDb = array(
			'error' => 0,
			'cobranca_preco' => $aDb
			);          

		if ($full == false) {
			fJSON::output($aDb);
		}
		else {
			return $aDb;
		}
	}


	/*
	Módulo: Escola
	Descrição: Exclui
	Método: POST
	URL: http://localhost/sig/api/index.php/delcobrancaopreco/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/06/2015
	Autor: Fabio S. da Silva
	Versão: 1.0
	*/

	public function delCobrancaPreco() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$db = fRecordSet::build('CobrancaPreco', $aSearch);

		$mensagem = "Preço excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			$db[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Exclui
	Método: POST
	URL: http://localhost/sig/api/index.php/delparametrocobrancaocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/06/2015
	Autor: Fabio S. da Silva
	Versão: 1.0
	*/

	public function delParametroCobrancaOcorrencia() {
		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;
		$db = fRecordSet::build('ParametroCobrancaOcorrencia', $aSearch);
		
		$aSearch = array();
		$aSearch['id_parametro_cobranca_ocorrencia='] = $data->id;		
		$cobrancaPessoa = fRecordSet::build('CobrancaPreco', $aSearch);

		$mensagem = "Ocorrência excluído com sucesso!";        

		try {
		//******** Excluí informações na Tabela de pessoa_socio            
			foreach ($cobrancaPessoa->getRecords() as $key => $value) {
				$cobrancaPessoa[$key]->delete();
			}

			$db[0]->delete();
		//******** Fim - Excluí informações na Tabela de pessoa_socio

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a aba "Complementos" da tela "Cadastro de Cursos" na tabela "gestaosbm"."curso_complemento"
	Método: POST
	URL: http://localhost/sig/api/index.php/cursocomplmento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postComplementoCurso() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$CursoComplemento = new CursoComplemento($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Complemento de Curso alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$CursoComplemento = new CursoComplemento();
			$mensagem = "Complemento de Curso incluído com sucesso!";
			$alteracao=0;
		}

		try {

			/* ----------------------------------------------------------------------------------- */

			if (property_exists($data, 'ativo')){
				$CursoComplemento->setAtivo($data->ativo);
			}
			
			if (property_exists($data, 'nome_fase')){

				$CursoComplementoAnt = '';
				if($alteracao==1){ $CursoComplementoAnt = $CursoComplemento->getNomeFase(); }
				$this->setAuditoria('CursoComplemento', 'Nome', $CursoComplementoAnt, $data->nome_fase); 

				$CursoComplemento->setNomeFase($data->nome_fase);
			}

			if (property_exists($data, 'nome_serie')){

				$CursoComplementoAnt = '';
				if($alteracao==1){ $CursoComplementoAnt = $CursoComplemento->getNomeSerie(); }
				$this->setAuditoria('CursoComplemento', 'Nome', $CursoComplementoAnt, $data->nome_serie); 

				$CursoComplemento->setNomeSerie($data->nome_serie);
			}

			$CursoComplemento->setIdEtapa($data->id_etapa);
			$CursoComplemento->setIdBoletim($data->id_boletim);
			$CursoComplemento->setIdFicha($data->id_ficha);
			$CursoComplemento->setIdCurso($data->id_curso);
			$CursoComplemento->setNumeroFases($data->numero_fases);

			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch["id_curso="] = $data->id_curso;
				$aSearch['nome_fase='] = $data->nome_fase; 
				$aSearch['nome_serie='] = $data->nome_serie; 
				$countDescricao = fRecordset::build('CursoComplemento', $aSearch);

				if($countDescricao->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O Complemento do Curso já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $CursoComplemento->store(); }
			}else{ $CursoComplemento->store(); }
			
			/* ----------------------------------------------------------------------------------- */
			$id_cursocomplemento = $CursoComplemento->getId();
			$arrMensagem = array('error' => 0, 'id_cursocomplemento' => $id_cursocomplemento, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Recupera os registros referentes a aba "Complementos" da tela "Cadastro de Cursos" na tabela "gestaosbm"."curso_complemento"
	Método: POST
	URL: http://localhost/sig/api/index.php/complementocurso/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function getComplementoCurso($id = "", $full = false) {

		$aSearch = array();
		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE id_curso = '.$id;
		}

		$aCursoComplemento = array();
		$strQueryCursoComplemento = "SELECT id,id_curso,id_etapa,id_boletim,id_ficha,numero_fases,nome_fase,nome_serie,ativo FROM curso_complemento ".$aSearch." ORDER BY id ";
		$rsCursoComplemento = $this->_getDb()->query($strQueryCursoComplemento);		
		
		foreach ($rsCursoComplemento as $key => $value) {
			$statAtivo = ($value['ativo'] == 1)? 'Ativo': 'Inativo'; 
			
			$strQueryBoletim = "SELECT descricao FROM boletim WHERE tipo = 1 and id = ".$value['id_boletim'];

			$rsBoletim = $this->_getDb()->query($strQueryBoletim);
			foreach ($rsBoletim as $key => $valBoletim) { $boletim_descricao = $valBoletim['descricao']; }
			if(!isset($boletim_descricao)){$boletim_descricao='';}
			$rsBoletim = $this->_getDb()->close();
			
			$strQueryFicha = "SELECT descricao FROM boletim WHERE tipo = 0 and id = ".$value['id_ficha'];
			$rsFicha = $this->_getDb()->query($strQueryFicha);
			foreach ($rsFicha as $key => $valFicha) { $ficha_descricao = $valFicha['descricao']; }
			if(!isset($ficha_descricao)){$ficha_descricao='';}
			$rsFicha   = $this->_getDb()->close();

			$strQueryEtapa = "SELECT descricao FROM etapa WHERE id = ".$value['id_etapa'];
			$rsEtapa = $this->_getDb()->query($strQueryEtapa);
			foreach ($rsEtapa as $key => $valEtapa) { $etapa_descricao = $valEtapa['descricao']; }

			if(!isset($etapa_descricao)){$etapa_descricao='';}

			$aCursoComplemento[] = array('tipo'			 	=> "Complemento de Curso",
										 'id' 			 	=> $value['id'],
										 'id_curso'		 	=> $value['id_curso'],
										 'id_etapa'		 	=> $value['id_etapa'],
										 'id_boletim'	 	=> $value['id_boletim'],
										 'id_ficha'		 	=> $value['id_ficha'],
										 'numero_fases' 	=> $value['numero_fases'],
										 'nome_serie' 	 	=> $value['nome_serie'],
										 'nome_fase' 	 	=> $value['nome_fase'],
										 'ativo'			=> $value['ativo'],
										 'statAtivo' 	 	=> $statAtivo,
										 'etapa_descricao'	=> $etapa_descricao,
										 'boletim_descricao'=> $boletim_descricao,
										 'ficha_descricao'	=> $ficha_descricao);
		}

		$rsCursoComplemento = $this->_getDb()->close();

		if (count($aCursoComplemento) == 0) {
			$aCursoComplemento[] = array('error' => -1, 'mensagem' => "Nenhum Complemento de Curso encontrado.");
		}else{
			$aCursoComplemento = array('error' => 0, 'curso_complemento' => $aCursoComplemento);
		}
		
		if ($full == false) {
			fJSON::output($aCursoComplemento);
		} else {
			return $aCursoComplemento;
		}
	}

	/*
	Módulo: Escola
	Descrição: Excluir registro na tabela "curso_complemento"
	Método: POST
	URL: http://localhost/sig/api/index.php/delcomplementocurso/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delComplementoCurso() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;
		
		$Complemento = fRecordSet::build('CursoComplemento', $aSearch);
		$mensagem = "Complemento do Curso excluído com sucesso!";        

		try {

			$Complemento[0]->delete();		

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Administrador
	Descrição: Obter registros da tabela situacao_ocorrencia
	Método: GET
	URL: http://localhost/sig/api/index.php/situacaoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getSituacaoOcorrencia($id = "", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "situacao_ocorrencia";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}
	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a tabela "situacao_ocorrencia"
	Método: POST
	URL: http://localhost/sig/api/index.php/situacaoocorrencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postSituacaoOcorrencia() {

		$descTabela = "Situação de Ocorrência";
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$objTab = new SituacaoOcorrencia($data->id);
			$mensagem = $descTabela." alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$objTab = new SituacaoOcorrencia();
			$mensagem = $descTabela." incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */
			
			if (property_exists($data, 'descricao'	)){ $objTab->setDescricao($data->descricao); }
			if (property_exists($data, 'ativo'		)){ $objTab->setAtivo($data->ativo); }
			
			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$ct = fRecordset::build('SituacaoOcorrencia', $aSearch);

				if($ct->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. ".$descTabela." já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $objTab->store(); }
			}else{ $objTab->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_retorno = $objTab->getId();
			$arrMensagem = array('error' => 0, 'id_retorno' => $id_retorno, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}
	/*
	Módulo: Administrador
	Descrição: Obter registros da tabela grupo_tipo_avaliacao_periodica
	Método: GET
	URL: http://localhost/sig/api/index.php/grupotipoavaliacaoperiodica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getGrupoTipoAvaliacaoPeriodica($id="", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "grupo_tipo_avaliacao_periodica";		
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma ".$tabela." encontrada."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}
	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a tabela "grupo_tipo_avaliacao_periodica"
	Método: POST
	URL: http://localhost/sig/api/index.php/grupotipoavaliacaoperiodica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postGrupoTipoAvaliacaoPeriodica() {

		$descTabela = "Grupo Tipo de Avaliação Periódica";
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$objTab = new GrupoTipoAvaliacaoPeriodica($data->id);
			$mensagem = $descTabela." alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$objTab = new GrupoTipoAvaliacaoPeriodica();
			$mensagem = $descTabela." incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */
			
			if (property_exists($data, 'descricao'	)){ $objTab->setDescricao($data->descricao); }
			if (property_exists($data, 'ativo'		)){ $objTab->setAtivo($data->ativo); }
			
			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$ct = fRecordset::build('GrupoTipoAvaliacaoPeriodica', $aSearch);

				if($ct->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. ".$descTabela." já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $objTab->store(); }
			}else{ $objTab->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_retorno = $objTab->getId();
			$arrMensagem = array('error' => 0, 'id_retorno' => $id_retorno, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}
	/*
	Módulo: Administrador
	Descrição: Obter registros da tabela tipo_avaliacao_periodica
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoavaliacaoperiodica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getTipoAvaliacaoPeriodica($id = "", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "tipo_avaliacao_periodica";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma ".$tabela." encontrada."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}
	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a tabela "grupo_tipo_avaliacao_periodica"
	Método: POST
	URL: http://localhost/sig/api/index.php/tipoavaliacaoperiodica/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postTipoAvaliacaoPeriodica() {

		$descTabela = "Tipo de Avaliação Periódica";
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$objTab = new TipoAvaliacaoPeriodica($data->id);
			$mensagem = $descTabela." alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$objTab = new TipoAvaliacaoPeriodica();
			$mensagem = $descTabela." incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */
			
			if (property_exists($data, 'descricao'	)){ $objTab->setDescricao($data->descricao); }
			if (property_exists($data, 'ativo'		)){ $objTab->setAtivo($data->ativo); }
			
			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$ct = fRecordset::build('TipoAvaliacaoPeriodica', $aSearch);

				if($ct->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. ".$descTabela." já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $objTab->store(); }
			}else{ $objTab->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_retorno = $objTab->getId();
			$arrMensagem = array('error' => 0, 'id_retorno' => $id_retorno, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Administrador
	Descrição: Obter registros da tabela tipo_itens_publicacao
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoitenspublicacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getTipoItensPublicacao($id = "", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "tipo_itens_publicacao";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";		
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma ".$tabela." encontrada."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}

	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a tabela "tipo_itens_publicacao"
	Método: POST
	URL: http://localhost/sig/api/index.php/tipoitenspublicacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postTipoItensPublicacao() {

		$descTabela = "Tipo de Itens de Publicação";
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$objTab = new TipoItensPublicacao($data->id);
			$mensagem = $descTabela." alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$objTab = new TipoItensPublicacao();
			$mensagem = $descTabela." incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */
			
			if (property_exists($data, 'descricao'	)){ $objTab->setDescricao($data->descricao); }
			if (property_exists($data, 'ativo'		)){ $objTab->setAtivo($data->ativo); }
			
			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$ct = fRecordset::build('TipoItensPublicacao', $aSearch);

				if($ct->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. ".$descTabela." já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $objTab->store(); }
			}else{ $objTab->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_retorno = $objTab->getId();
			$arrMensagem = array('error' => 0, 'id_retorno' => $id_retorno, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Escola
	Descrição: Verificar a parametros de cobrança para Gerar Parcelas
	Método: GET
	URL: http://localhost/sig/api/index.php/gerarparcelaparametrocobranca
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	private function getGerarParcelaDescontos($valor, $porcentagem_desconto, $valor_desconto) {
		//Efetua o desconto, priorizando a porcentagem
		$vlr_desconto = 0;
		if($porcentagem_desconto > 0){
			$vlr_desconto = $valor / 100 * $porcentagem_desconto;
		}elseif($valor_desconto > 0 && ($valor > $valor_desconto)){
			$vlr_desconto = $valor_desconto;
		}

		return $vlr_desconto;
	}

	private function getGerarParcelaDescontosEspecial($tipo, $valor, $data_vencimento, $data_vencimento_fixa, $porcentagem_desconto, $valor_desconto) {
		//Metodo privado utilizado para processar o desconto conforme data e criterio de valor e porcentagem
		$vlr_desconto = 0;
		$dt_desconto = '';

		switch ($tipo) {
			case 1:
			$dt_desconto = $data_vencimento;
			break;
			case 2:
			$dt_desconto = $data_vencimento_fixa;
			break;
		}

		$vlr_desconto = $this->getGerarParcelaDescontos($valor, $porcentagem_desconto, $valor_desconto);

		$aDesconto = array(
			'data' => $dt_desconto, 
			'valor' => $vlr_desconto,
			);

		return $aDesconto;
	}
	
	
	private function getGerarParcelaDescontoBolsa($id_aluno, $data_inicio, $data_final, $valor) {
		$sql = "SELECT 
		id, id_aluno, percentual_bolsa, valor_fixo, valor_desconto_fixo, 
		data_inicio_validade, data_final_validade
		FROM bolsa 
		WHERE id_aluno = " .$id_aluno ."
		AND data_inicio_validade <='" .$data_inicio ."' 
		AND data_final_validade >= '" .$data_final ."'";
		
		$bolsa = $this->_getDb()->query($sql);
		
		$bolsa_desconto = 0;

		foreach ($bolsa as $key => $value) {
			//$aBolsa = $bolsa->fetchRow();

			$percentual_bolsa = $value['percentual_bolsa'];
			if($value['valor_fixo'] != null || $value['valor_fixo'] != ''){
				//Caso o campo valor_fixo da tabela bolsa for preenchido converte o valor fixo em porcentagem 
				if($value['valor_fixo'] >= $valor){
				//Caso o valor da bolsa for maior que o valor do produto retorna a porcentagem 
				//100% para não retornar negativo
					$percentual_bolsa = 100;
				}else{
					$percentual_bolsa = $value['valor_fixo'] / $valor * 100;	
				}
			}

			$bolsa_desconto = $this->getGerarParcelaDescontos($valor, 
				$percentual_bolsa, 
				$value['valor_desconto_fixo']);	
			
		}

		$bolsa = $this->_getDb()->close();

		return $bolsa_desconto; 

	}


	public function getGerarParcelaParametroCobranca($id_tipo_carne, $id_etapa, $id_aluno, $mes_ano, $full = false) {

		$sql = "SELECT 
		pc.id, pc.id_tipo_carne, pc.mes_ano, pc.data_vencimento, pc.desconto_especial, 
		pc.data_fixa_desconto, pc.porcentagem_desconto as principal_porcentagem_desconto, 
		pc.valor_desconto as principal_valor_desconto,
		pco.id_tipo_receita, pco.receita_principal, pco.faixa_preco,
		pco.desconto_bolsa, pco.desconto_pontualidade,
		cp.id_curso, cp.valor_normal, cp.valor_autorizado, 
		cp.porcentagem_desconto, cp.valor_desconto,
		m.serie
		FROM parametro_cobranca pc 
		INNER JOIN parametro_cobranca_ocorrencia pco ON pc.id = pco.id_parametro_cobranca
		INNER JOIN cobranca_preco cp ON pco.id = cp.id_parametro_cobranca_ocorrencia
		INNER JOIN matricula m ON m.id_curso = cp.id_curso and m.serie = cp.serie
		WHERE pc.mes_ano='" .$mes_ano ."-01'
		AND pc.id_tipo_carne = " .$id_tipo_carne ."
		AND m.id_etapa = " .$id_etapa ."
		AND m.id_aluno = " .$id_aluno;

		$parametroCobranca = $this->_getDb()->query($sql);

		$aParametroCobranca = array();


		$tipo_desconto = 0;
		$principal_valor = 0;
		$data_vencimento = '';
		$data_fixa_desconto = '';
		$valor_desconto = 0;
		$valor_desconto_bolsa = 0;
		$principal_porcentagem_desconto = '';
		$principal_valor_desconto = '';
		$counter = 0;

		foreach ($parametroCobranca as $key => $value) {
			$counter++;
			$valor_desconto+= $this->getGerarParcelaDescontos($value['valor_autorizado'], 
				$value['porcentagem_desconto'], 
				$value['valor_desconto']
				);

			if($value['desconto_bolsa'] == 1){
				$desconto_bolsa = $this->getGerarParcelaDescontoBolsa($id_aluno, 
					$mes_ano .'-01', 
					$mes_ano .'-20', 
					$value['valor_autorizado']);
				$valor_desconto_bolsa+=$desconto_bolsa;	
			}

			$data_vencimento = $value['data_vencimento'];
			$tipo_desconto = $value['desconto_especial'];
			$principal_valor+= $value['valor_autorizado'];
			$data_vencimento = $value['data_vencimento'];
			$data_fixa_desconto = $value['data_fixa_desconto'];
			$principal_porcentagem_desconto = $value['principal_porcentagem_desconto'];
			$principal_valor_desconto = $value['principal_valor_desconto'];
			
		}

			//Método para verificar se existe registro retornado, se não houver registro retornado, retorna o array setado anteriormente
		if($counter > 0){
			$desconto_especial = $this->getGerarParcelaDescontosEspecial($tipo_desconto, 
				$principal_valor, 
				$data_vencimento, 
				$data_fixa_desconto, 
				$principal_porcentagem_desconto, 
				$principal_valor_desconto
				);

			$aParametroCobranca[] = array(
				'principal_data_vencimento' => $data_vencimento,
				'principal_data_vencimento_desconto' => $desconto_especial['data'],//Verifica a data de vencimento do desconto conforme o (campo desconto_especial)
				'principal_valor_desconto' => $desconto_especial['valor'],//Desconto aplicado na soma de todos os valores conforme a (tabela => parametro_cobranca) e os (campos => porcentagem o valor) da mesma.
				'valor_desconto' => $valor_desconto,//Desconto aplicado de forma individual conforme a (tabela => cobranca_preco) e os (campos => porcentagem o valor) da mesma.
				'valor_bruto' => $principal_valor,
				'valor_desconto_bolsa' => $valor_desconto_bolsa,
				);

			$aParametroCobranca = array(
				'error' => 0,
				'parametro_cobranca' => $aParametroCobranca
				);
		}
		else{
			$aParametroCobranca = array(
				'error' => -1,
				'mensagem' => 'Não foi encontrado parametro de cobrança!'
				);
		}

		$parametroCobranca = $this->_getDb()->close();

		if($full == false){
			fJSON::output($aParametroCobranca);
		}else{
			return $aParametroCobranca;
		}
	}

	/*
	Módulo: Escola
	Descrição: Gerar Parcelas com descontos, bolsa e etc
	Método: GET
	URL: http://localhost/sig/api/index.php/gerarparcela
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGerarParcela($id_tipo_carne, $ano_mes, $id_aluno=0, $posicao='', $pacote='', $full = false) {

		$ano_mes = array_reverse(explode('/', $ano_mes));    

		$Y = $ano_mes[0];
		$M = $ano_mes[1];

		$ultimo_dia = array(date("t", mktime(0,0,0,$Y,'01',$M)));// retorna ultimo dia do mes
		$dia=array('01');

		$data_inicio = implode('-', array_merge($ano_mes,$dia));
		$data_final = implode('-', array_merge($ano_mes,$ultimo_dia));
		$ano_mes_prm = implode('-', $ano_mes);
		
		if($id_aluno>0){
			$W = "AND p.id = '".$id_aluno."'";
		}else{
			$W = '';
		}

		$sql = "SELECT 
				p.id as id_aluno,  
				p.nome, 
				p.codigo,  
				m.id as id_matricula,  
				m.id_etapa,  
				e.descricao as etapa, 
				t.id_curso, 
				t.serie,  
				t.nome as turma, 
 				af.dia_vencimento,  
				af.id_responsavel, 
				sum(arf.valor) as valor_receita_fixa 
				FROM matricula m 
				LEFT JOIN turma t ON m.id_turma = t.id 
				LEFT JOIN etapa e ON m.id_etapa = e.id 
				LEFT JOIN pessoa p ON m.id_aluno = p.id AND p.aluno = 1 
				LEFT JOIN aluno_financeiro af ON af.id_aluno = m.id_aluno 
				LEFT JOIN aluno_receita_fixa arf ON (arf.id_aluno = m.id_aluno AND arf.data_inicio_validade<='".$data_inicio."' AND arf.data_final_validade>='".$data_final."') 
				WHERE e.ano = '".$Y."' ".$W."  
				GROUP BY p.id, p.nome, p.codigo, m.id, m.id_etapa, e.descricao, t.id_curso, t.serie, t.nome, af.dia_vencimento, af.id_responsavel 
				ORDER BY t.id_curso, t.serie, p.nome";

		if($posicao != '' || $pacote != ''){
			$sql.= " LIMIT " .$posicao ."," .$pacote;
		}

		$aParcela = array();
		$aGerarParcela = array();

		$matricula = $this->_getDb()->query($sql);


		foreach ($matricula as $key => $value) {

			$valor = 0;
			$valor_bruto = 0;
			$desconto_diverso = 0;
			$desconto_bolsa = 0;
			$valor_liquido = 0;		
			$data_vencimento_desconto = '';
			$data_vencimento = '';

			$aGerarParcela = $this->getGerarParcelaParametroCobranca($id_tipo_carne,
				$value['id_etapa'],
				$value['id_aluno'],
				$ano_mes_prm, 
				true
			);

			$valor_receita_fixa = 0;
			if($value['valor_receita_fixa'] != null || $value['valor_receita_fixa'] != ''){
				$valor_receita_fixa = floatval($value['valor_receita_fixa']);
			}

			if($aGerarParcela['error'] == 0){
				$valor = $aGerarParcela['parametro_cobranca'][0]['valor_bruto'];
				$valor_bruto = $valor + $valor_receita_fixa;
				$desconto_diverso = $aGerarParcela['parametro_cobranca'][0]['principal_valor_desconto'] + $aGerarParcela['parametro_cobranca'][0]['valor_desconto'];
				$valor_desconto_bolsa = $aGerarParcela['parametro_cobranca'][0]['valor_desconto_bolsa'];
				$valor_liquido = $valor_bruto - $desconto_diverso;

				if($value['dia_vencimento'] != null || $value['dia_vencimento'] != ''){
					$data_vencimento = date('Y-m-') .$value['dia_vencimento'];
					$data1 = strtotime($data_vencimento);
					$data2 = strtotime(date('Y-m-d'));

					if($data1 <= $data2){
						$data_vencimento = date('Y-m-d', strtotime('+1 months', strtotime(date($data_vencimento))));
					}

				}else{
					$data_vencimento = $aGerarParcela['parametro_cobranca'][0]['principal_data_vencimento'];	
				}

				$data_vencimento_desconto = $aGerarParcela['parametro_cobranca'][0]['principal_data_vencimento_desconto'];
			}

			$aParcela[] = array(
				'id_aluno' => $value['id_aluno'],
				'codigo' => $value['codigo'],
				'nome' => $value['nome'],
				'ano' => $Y,
				'mes' => $M,
				'id_tipo_carne' => $id_tipo_carne,
				'id_curso' => $value['id_curso'],
				'serie' => $value['serie'],
				'valor' => $valor,
				'valor_receita_fixa' => $valor_receita_fixa,
				'valor_bruto' => $valor_bruto,
				'desconto_diverso' => $desconto_diverso,
				'valor_desconto_bolsa' => $valor_desconto_bolsa,
				'valor_liquido' => $valor_liquido - $desconto_bolsa,
				'data_vencimento_desconto' => $data_vencimento_desconto,
				'data_vencimento' => $data_vencimento,
				);
		}

		$matricula = $this->_getDb()->close();

		if(count($aParcela) > 0){
			$aParcela = array(
				'error' => 0,
				'parcela' => $aParcela
			);          	          
		}else{
			$aParcela = array(
				'error' => -1,
				'mensagem' => 'Não foi possivel gerar nenhuma parcela! Verifique a Etapa.',
				'parcela' => $aParcela
			);
		}

		if($full == false){
			fJSON::output($aParcela);
		}else{
			return $aParcela;
		}
	}

	/*
	Módulo: Escola
	Descrição: Gerar Parcelas com descontos, bolsa e etc
	Método: POST
	URL: http://localhost/sig/api/index.php/gerarparcela
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/06/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postGerarParcela() {

		$data = json_decode(file_get_contents("php://input"));

		try {			

			if(property_exists($data, 'id_aluno')){
				$id_aluno = $data->id_aluno;
			}else{
				$id_aluno = '';
			}

			$parcela = $this->getGerarParcela($data->id_tipo_carne, 
				$data->mes_ano, 
				$id_aluno,
				$data->posicao,
				$data->pacote,
				true
				);

			$aParcela = array();	
			foreach ($parcela['parcela'] as $key => $value) {

				$aSearch = array();
				$aSearch['id_aluno='] = $value['id_aluno'];
				$aSearch['id_tipo_carne='] = $value['id_tipo_carne'];
				$aSearch['ano='] = $value['ano'];
				$aSearch['mes='] = $value['mes'];


				$verificaParcela = fRecordSet::build('Parcela', $aSearch);
				
				$status = false;
				$resultado = '';
				$id_parcela = '';
				
				if(count($verificaParcela) > 0){
					// verifica se existe outras parcelas gerada
					$status = false;
					$resultado = 'Erro! Já existe parcela gerada!';
				}elseif($value['valor_bruto'] == '' && $value['valor_liquido'] == '' && $value['data_vencimento'] == ''){
					// Verifica se retornou valores no parametro cobrança 
					$status = false;
					$resultado = 'Erro! Não foi encontrado parametros de cobrança!';
				}else{
					// cadastra a parcela e envia o status
					$status = true;
					$resultado = 'Parcela gerada com sucesso!';

					$inserirParcela = new Parcela();
					$inserirParcela->setIdAluno($value['id_aluno']);
					$inserirParcela->setIdTipoCarne($value['id_tipo_carne']);
					$inserirParcela->setIdStatusParcela(1);
					$inserirParcela->setIdCurso($value['id_curso']);
					$inserirParcela->setAno($value['ano']);
					$inserirParcela->setMes($value['mes']);
					$inserirParcela->setSerie($value['serie']);
					$inserirParcela->setValorBruto($value['valor_bruto']);
					$inserirParcela->setValorDescontoBolsa($value['valor_desconto_bolsa']);
					$inserirParcela->setValorLiquido($value['valor_liquido']);
					$inserirParcela->setDataVencimento($value['data_vencimento']);

					$inserirParcela->store();
					
					$id_parcela = $inserirParcela->getId();
				}

				$aParcela[] = array(
					'id' => $id_parcela, 
					'id_aluno' => $value['id_aluno'], 
					'nome' => $value['nome'], 
					'codigo' => $value['codigo'], 
					'data_vencimento' => $value['data_vencimento'],
					'resultado' => $resultado,
					'status' => $status,
					);
			}
			
			if(count($aParcela) > 0){
				$aParcela = array(
					'error' => 0,
					'parcela' => $aParcela,
					'processado' => count($aParcela),
					//'processo' => ($data->posicao + count($aParcela)) / $data->pacote,
					//'processo' => ($data->posicao + count($aParcela)) / $data->total * 100,
					);          	          
			}else{
				$aParcela = array(
					'error' => -1,
					'mensagem' => 'Não foi possivel gerar nenhuma parcela!'
					);
			}

			fJSON::output($aParcela);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão: " . $e);
			fJSON::output($arrMensagem);
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter ID e Nome da pessoa por Tipo (1=Associado, 2=Beneficiario, 3=Funcionario, 4=Parentesco, 5=Proprietario)
	Método: GET
	URL: http://localhost/sig/api/index.php/carregapessoa/<pessoa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/07/2015
	Autor: Ricardo Bruno
	Versão: 1.0
*/
	public function getCarregaPessoa($tipo = "") {
		$this->acessoApi();
		$aSearch = "";
		$userSes = fSession::get('user');
		$varEntidade = $userSes['user']['entidadePessoa'];

		if ($tipo!="") {            
			switch ($tipo) {
				case '1':
				$strQueryPessoa = "SELECT DISTINCT p.id,p.nome,p.donatario , d.numero, p.ativo,e.cidade,e.estado, p.codigo, '' as funcionario,'' as data_nascimento,p.data_associacao,c.valor, '' as login
				FROM pessoa p LEFT OUTER JOIN documento d ON p.id = d.id_pessoa AND (d.id_tipo_documento = 2 OR d.id_tipo_documento=5)
				LEFT OUTER JOIN endereco e ON p.id = e.id_pessoa AND e.id_tipo_endereco = 1
				LEFT OUTER JOIN contribuicao c ON p.id = c.id_pessoa
				WHERE p.associado=1
				ORDER BY p.nome";
				break;  
				case '2':
				$aSearch = 'WHERE beneficiario = 1';
				break;              
				case '3':
				$aSearch = 'WHERE parentesco = 1';
				break;
				case '4':
				$varEntidade = $userSes['user']['entidadePessoa'];
				$strQueryPessoa = "SELECT p.id,p.nome,p.donatario , d.numero, p.ativo,e.cidade,e.estado, p.codigo, 1 as funcionario,'' as data_nascimento,p.data_associacao,'' as valor, '' as login
				FROM pessoa p LEFT OUTER JOIN documento d ON p.id = d.id_pessoa AND d.id_tipo_documento = 2
				LEFT OUTER JOIN endereco e ON p.id = e.id_pessoa AND e.id_tipo_endereco = 1
				INNER JOIN entidade_pessoa ep ON p.id = ep.id_pessoa
				WHERE p.funcionario=1 AND ep.id_entidade=" . $varEntidade . "
				ORDER BY p.nome"; 
				break;  
				case '5':
				$aSearch = 'WHERE proprietario = 1';
				break;  
				case '6':
				$strQueryPessoa = "SELECT p.id,p.nome,p.donatario , d.numero, p.ativo,e.cidade,e.estado, p.codigo, '' as funcionario,'' as data_nascimento,'' as data_associacao,'' as valor, '' as login
				FROM pessoa p LEFT OUTER JOIN documento d ON p.id = d.id_pessoa AND d.id_tipo_documento = 5
				LEFT OUTER JOIN endereco e ON p.id = e.id_pessoa AND e.id_tipo_endereco = 1
				WHERE p.donatario=1 OR p.funcionario=1 OR p.entidade=1
				ORDER BY p.nome";
				break;  
				case '7':
				$aSearch = 'WHERE associado = 0 
				AND beneficiario = 0
				AND parentesco = 0
				AND funcionario=0
				AND proprietario=0
				AND donatario=0
				AND fornecedor=0';
				break; 
				case '8':
				$aSearch = 'WHERE fornecedor = 1';
				break;                                                                               
				case '9':
				$aSearch = 'WHERE associado = 1 AND beneficiario=1';  								
				break;                                                                               
				case '10': //busca apenas alunos
							$strQueryPessoa = " SELECT p.id,p.nome,p.donatario , d.numero, p.ativo,e.cidade,e.estado, p.codigo, '' as funcionario,p.data_nascimento,'' as data_associacao,'' as valor, '' as login
												FROM pessoa p 
												LEFT OUTER JOIN documento d ON p.id = d.id_pessoa AND d.id_tipo_documento = 1
												LEFT OUTER JOIN endereco e  ON p.id = e.id_pessoa AND e.id_tipo_endereco  = 1
												LEFT OUTER JOIN entidade_pessoa ep ON p.id=ep.id_pessoa WHERE p.aluno=1 and ep.id_entidade = ".$userSes['user']['entidadePessoa']."
												group by p.id,p.nome,p.donatario , d.numero, p.ativo,e.cidade,e.estado, p.codigo, p.data_nascimento";
				break;
				case '11': //busca apenas entidade
				$aSearch = 'WHERE entidade = 1';
				break;
				case '12': //busca apenas entidade
				$aSearch = 'WHERE funcionario = 1';
				break;
				case '13': 
				$aSearch = 'WHERE associado = 0 
				AND beneficiario = 0
				AND parentesco = 1';
				break;
				case '14':
				$aSearch = 'WHERE associado = 1 
				OR beneficiario = 1
				OR donatario = 1';				
				break;
				case '15': //busca apenas entidade
				$aSearch = 'WHERE padrinho = 1';
				break;
				case '16': //exibe tudo menos donatario
				$aSearch = 'WHERE donatario = 0';				
				break;									
				case '17': //exibe Proprietário e Responsável
				$strQueryPessoa = "SELECT p.id,p.donatario,p.nome,d.numero, p.ativo,e.cidade,e.estado, p.codigo, '' as funcionario,'' as data_nascimento,'' as data_associacao,'' as valor, '' as login
				FROM pessoa p 
				LEFT OUTER JOIN documento d ON p.id = d.id_pessoa AND d.id_tipo_documento = 5
				LEFT OUTER JOIN endereco e ON p.id = e.id_pessoa AND e.id_tipo_endereco = 1
				WHERE p.proprietario=1 or p.responsavel_proprietario=1
				ORDER BY p.nome";
				break;
				case '18':
					$aSearch = 'WHERE associado = 1 or fornecedor = 1';
				break;
				case '19': //FRH - busca apenas id e alunos da tabela pessoa sem join para maior rapidez
							$strQueryPessoa = " SELECT p.id, p.nome
												FROM pessoa p 
												LEFT OUTER JOIN entidade_pessoa ep ON p.id=ep.id_pessoa 
												WHERE p.aluno=1 and ep.id_entidade = ".$userSes['user']['entidadePessoa']." ORDER BY p.nome";
				break;
			}
		}

		if ($tipo!=6 && $tipo!=17 && $tipo!=10 && $tipo!=1  && $tipo!=4) {
			$strQueryPessoa = "SELECT id,nome,donatario,'' as numero,ativo, '' as cidade, '' as estado,  '' as codigo, funcionario,'' as data_nascimento,'' as data_associacao,'' as valor, '' as login FROM pessoa " . $aSearch . " ORDER BY nome";
		}

		$pessoa = $this->_getDb()->query($strQueryPessoa);
		$aPessoa = array();

		$dtNascimento="";
		$dtAssociacao="";
		
		foreach ($pessoa as $key => $value){

			$ativobol = false;
			if ($value['ativo']==1) {
				$ativobol = true;      
			}

			$dtNascimento = implode('/', array_reverse(explode('-',substr($value['data_nascimento'], 0,10))));			
			$dtAssociacao = implode('/', array_reverse(explode('-',substr($value['data_associacao'], 0,10))));

			if (strlen($value['valor'])>0){
				$valor_show = number_format($value['valor'], 2, ',', '.');
			}else{
				$valor_show = '';
			}

			switch($tipo)
			{
				case 19:
						$aPessoa[] = array(	'id' => $value['id'],'nome' => $value['nome']);

				break;
				default:
						$aPessoa[] = array(	'id' => $value['id'],
											'nome' => $value['nome'],
											'codigo' => $value['codigo'],
											'donatario' => $value['donatario'],
											'numero' => $value['numero'],
											'ativo' => $value['ativo'],
											'ativobol' => $ativobol,
											'cidade' => $value['cidade'],
											'estado' => $value['estado'],
											'data_nascimento' => $dtNascimento,
											'data_associacao' => $dtAssociacao,
											'contribuicaovalor' => $valor_show,
											'funcionario' => $value['funcionario'],
											'login' => $value['login']);
				break;
			}
		}

		$pessoa = $this->_getDb()->close();	

		if (count($aPessoa) == 0) {
			$aPessoa = array('error' => -1, 'mensagem' => "Nenhuma pessoa encontrada.");
		} else {
			$aPessoa = array('error' => 0, 'pessoa' => $aPessoa);
		}


		//if ($full == false) {
		fJSON::output($aPessoa);		
		//}
		//else {
		//	return $aPessoa;
		//}
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de parcela
	Método: GET
	URL: http://localhost/sig/api/index.php/Parcela/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getParcela($id = '', $full = false) {

		$aSearch = '';
		
		if ($id != "") {
			$aSearch = ' and d.id = '. $id;
		}

		$sql= "SELECT 
		par.id, par.id_aluno, par.valor_bruto, par.valor_desconto_bolsa, par.data_vencimento,
		pes_alu.nome as aluno, pes_alu.codigo,
		pes_res.nome as id_responsavel, pes_res.nome as responsavel,
		end_res.logradouro, end_res.numero, end_res.complemento, end_res.bairro, end_res.cidade, end_res.estado, end_res.codigo_postal
		FROM parcela par
		INNER JOIN responsavel_aluno res_alu on res_alu.id_pessoa_aluno = par.id_aluno and res_alu.responsavel_financeiro = 1
		INNER JOIN pessoa pes_alu on pes_alu.id = res_alu.id_pessoa_aluno 
		INNER JOIN pessoa pes_res on pes_res.id = res_alu.id_pessoa
		LEFT JOIN endereco end_res on end_res.id_pessoa = pes_res.id
		WHERE par.id_status_parcela = 1
		" .$aSearch ."
		ORDER BY responsavel ASC";

		$tabela = $this->_getDb()->query($sql);
		$aTabela = array();		

		foreach ($tabela as $key => $value){

			$aTabela[] = array(
				'id' => $value['id'],
				'id_aluno' => $value['id_aluno'],
				'aluno' => $value['aluno'],
				'codigo' => $value['codigo'],
				'valor_bruto' => $value['valor_bruto'],
				'desconto_bolsa' => $value['valor_desconto_bolsa'],
				'data_vencimento' => $value['data_vencimento'],
				'id_responsavel' => $value['id_responsavel'],
				'responsavel' => $value['responsavel'],
				'logradouro' => $value['logradouro'],
				'numero' => $value['numero'],
				'complemento' => $value['complemento'],
				'bairro' => $value['bairro'],
				'cidade' => $value['cidade'],
				'estado' => $value['estado'],
				'codigo_postal' => $value['codigo_postal'],
				);
		}

		$tabela = $this->_getDb()->close();

		if (count($aTabela) == 0) {
			$aTabela = array('error' => -1, 'mensagem' => "Nenhuma parcela encontrada.");
		} else {
			$aTabela = array('error' => 0, 'parcela_boleto' => $aTabela);
		}

		if ($full == false) {
			fJSON::output($aTabela);
		} else {
			return $aTabela;
		}	
	}

	/*
	Módulo: Escola
	Descrição: Obter Gera boletos em um arquivo html e guarda no cervidor
	Método: GET
	URL: http://localhost/sig/api/index.php/geraboleto
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	private function sqlGerarBoleto($id_tipo_carne, $mes, $ano, $posicao, $pacote, $id_responsavel = ''){
		//Este metodo é usado em dois lugares por favor não apague.

		$userSes = fSession::get('user');

		$search = '';
		if ($id_responsavel != ''){
			$search = ' and pes_res.id = ' .$id_responsavel;
		}

		$sql = "SELECT 
				par.id_status_parcela, 
				par.data_vencimento, 
				sum(par.valor_bruto) as valor_bruto, 
				sum(par.valor_liquido) as valor_liquido, 
				sum(par.valor_desconto_bolsa) as desconto_bolsa, 
				pes_res.id as id_responsavel, 
				pes_res.nome as responsavel, 
				coalesce(end_res.logradouro,'') logradouro, 
				coalesce(end_res.numero,0) numero, 
				coalesce(end_res.complemento,'') complemento, 
				coalesce(end_res.bairro,'') bairro, 
				coalesce(end_res.cidade,'') cidade, 
				coalesce(end_res.estado,'') estado, 
				coalesce(end_res.codigo_postal,0) codigo_postal, 
				coalesce(doc.numero,0) as cpf,
				GROUP_CONCAT(pes_alu.nome) nome_aluno,
				GROUP_CONCAT(pes_alu.id) id_aluno,
				GROUP_CONCAT(pes_alu.codigo) codigo_aluno,					
				GROUP_CONCAT((SELECT nome FROM turma WHERE id=(SELECT id_turma FROM matricula WHERE id_aluno=pes_alu.id LIMIT 1))) turma,
				GROUP_CONCAT((SELECT valor_autorizado FROM cobranca_preco WHERE id_curso=(SELECT id_curso FROM matricula WHERE id_aluno=pes_alu.id LIMIT 1) GROUP BY valor_autorizado)) mensalidade,
				GROUP_CONCAT((SELECT CASE WHEN EXISTS(SELECT valor_fixo FROM bolsa WHERE id_aluno=pes_alu.id) THEN CASE WHEN valor_fixo IS NOT NULL THEN valor_fixo ELSE CASE WHEN percentual_bolsa IS NOT NULL THEN percentual_bolsa ELSE 0 END END ELSE 0 END FROM bolsa LIMIT 1)) desconto,
				GROUP_CONCAT((SELECT CASE WHEN EXISTS(SELECT valor_fixo FROM bolsa WHERE id_aluno=pes_alu.id) THEN CASE WHEN valor_fixo IS NOT NULL THEN 0 ELSE CASE WHEN percentual_bolsa IS NOT NULL THEN 1 ELSE 2 END END ELSE 2 END FROM bolsa LIMIT 1)) tipo_percentual,
				GROUP_CONCAT((4.00)) seg_resp_civel,
				(SELECT CONCAT(COALESCE(nome,''),',',COALESCE(logradouro,''),',',COALESCE(numero,''),',',COALESCE(bairro,''),',',COALESCE(complemento,''),',',COALESCE(cidade,''),',',COALESCE(estado,''),',',COALESCE(codigo_postal,''),',',COALESCE(cnpj,''),',',COALESCE(telefone,'')) FROM entidade WHERE id=".$userSes['user']['entidadePessoa'].") quadro_entidade,
				GROUP_CONCAT(CASE WHEN EXISTS(SELECT 1 FROM aluno_receita_fixa WHERE id_aluno=pes_alu.id LIMIT 1) AND (SELECT 1 FROM aluno_receita_fixa WHERE id_aluno=pes_alu.id LIMIT 1) IS NOT NULL THEN (SELECT GROUP_CONCAT(CONCAT((SELECT descricao FROM tipo_receita WHERE id=id_tipo_receita),'-',valor) SEPARATOR ';') FROM aluno_receita_fixa WHERE id_aluno=pes_alu.id) ELSE 0 END) receita_fixa
				FROM parcela par 
				INNER JOIN responsavel_aluno res_alu 	ON res_alu.id_pessoa_aluno 	= par.id_aluno AND res_alu.responsavel_financeiro = 1 
				INNER JOIN pessoa pes_alu 				ON pes_alu.id 				= res_alu.id_pessoa_aluno 
				INNER JOIN pessoa pes_res 				ON pes_res.id 				= res_alu.id_pessoa 
				LEFT JOIN aluno_bloqueio alu_blo 		ON pes_alu.id 				= alu_blo.id_aluno 
				LEFT JOIN documento doc 				ON doc.id_pessoa 			= pes_res.id AND id_tipo_documento = 2 
				LEFT JOIN endereco end_res 				ON end_res.id_pessoa 		= pes_alu.id 
				WHERE 
				alu_blo.id_tipo_bloqueio is NULL 
				and par.id_tipo_carne = " .$id_tipo_carne ."
				and par.mes = '" .(int) $mes ."'
				and par.ano = '" .(int) $ano ."'
				" .$search ."
				GROUP BY id_responsavel 
				ORDER BY responsavel ASC";

		if($posicao != '' || $pacote != ''){
			$sql.= " LIMIT " .$posicao ."," .$pacote;
		}

		$tabela = $this->_getDb()->query($sql);
		$retorno = $tabela;
		$tabela = $this->_getDb()->close();
		return $retorno;
	}

	public function postGerarBoleto() {
		$data = json_decode(file_get_contents("php://input"));

		$userSes = fSession::get('user');
		$id_entidade = $userSes['user']['idTipoEntidade'];

		$aTabela = array();	
		$aEntidade = array();	
		$content = '';
		
		$arquivo = '';

		$sql= "SELECT 
		ent.nome, ent.cnpj, ent.logradouro, ent.numero,
		ent.complemento, ent.bairro, ent.cidade, ent.estado,
		ent.codigo_postal,
		con_ban.id as id_conta_bancaria, con_ban.agencia, con_ban.numero as conta
		FROM entidade ent
		INNER JOIN conta_bancaria con_ban on con_ban.id_entidade = ent.id AND con_ban.principal = 1
		INNER JOIN banco ban on ban.id = con_ban.id_banco
		WHERE ent.id_tipo_entidade = " .$id_entidade;

		$entidade = $this->_getDb()->query($sql);

		foreach ($entidade as $key => $value){
			$aEntidade[] = array(
				'nome' => $value['nome'],
				'cnpj' => $value['cnpj'],
				'logradouro' => $value['logradouro'],
				'numero' => $value['numero'],
				'complemento' => $value['complemento'],
				'bairro' => $value['bairro'],
				'cidade' => $value['cidade'],
				'estado' => $value['estado'],
				'cep' => $value['codigo_postal'],
				'agencia' => $value['agencia'],
				'conta' => $value['conta'],
				'id_conta_bancaria' => $value['id_conta_bancaria'],
			);
		}

		$entidade = $this->_getDb()->query($sql);

		try{
			if(count($aEntidade) > 0){
				$id_responsavel = '';
				if (property_exists($data, 'id_responsavel')) {
					$id_responsavel = $data->id_responsavel;
				}

				$aMesAno = explode('/', $data->mes_ano);

				$arrEntidadeConta = explode('-', $aEntidade[0]['conta']);
				
				$entidade = $this->_getDb()->close();

				$tabela = $this->sqlGerarBoleto($data->id_tipo_carne, 
												$aMesAno[0], 
												$aMesAno[1], 
												$data->posicao, 
												$data->pacote, 
												$id_responsavel);
				
				foreach ($tabela as $key => $value){
					if($value['id_status_parcela'] == 1){
						// Verifica se a parcela esta em situação 'Gerar parcela'
						// Caso o parcela esteja fora deste status não gera parcela.

						$dtVencimento = implode('/', array_reverse(explode('-',substr($value['data_vencimento'], 0,10))));

						$dias_de_prazo_para_pagamento = 0;
						$taxa_boleto = 0.00;
						$data_venc = $dtVencimento;  // Prazo de X dias  OU  informe data: "13/04/2006"  OU  informe "" se Contra Apresentacao;
						$valor_cobrado = $value['valor_bruto']; // Valor - REGRA: Sem pontos na milhar e tanto faz com "." ou "," ou com 1 ou 2 ou sem casa decimal
						
						$valor_desconto = $value['valor_bruto'] - $value['valor_liquido']; 
						$valor_desconto = number_format($valor_desconto, 2, ',', '');

						$valor_cobrado = str_replace(",", ".",$valor_cobrado);
						$valor_boleto = number_format($valor_cobrado+$taxa_boleto, 2, ',', '');
						$dadosboleto["inicio_nosso_numero"] = "24";  // 24 - Padrão da Caixa Economica Federal
						$dadosboleto["nosso_numero"] = "00000001";  // Nosso numero sem o DV - REGRA: Máximo de 8 caracteres!
						$dadosboleto["numero_documento"] = $value['cpf'];	// Num do pedido ou do documento
						$dadosboleto["data_vencimento"] = $data_venc; // Data de Vencimento do Boleto - REGRA: Formato DD/MM/AAAA
						$dadosboleto["data_documento"] = date("d/m/Y"); // Data de emissão do Boleto
						$dadosboleto["data_processamento"] = date("d/m/Y"); // Data de processamento do boleto (opcional)
						$dadosboleto["valor_boleto"] = $valor_boleto; 	// Valor do Boleto - REGRA: Com vírgula e sempre com duas casas depois da virgula
						// DADOS DO SEU CLIENTE
						$dadosboleto["sacado"] = $value['responsavel'];
						$dadosboleto["endereco1"] = $value['logradouro'] .' nº.:' .$value['numero'] .' - ' .$value['complemento'] .' - ' .$value['bairro'];
						$dadosboleto["endereco2"] = $value['cidade'] .' - ' .$value['estado'] .' - ' .' CEP:' .$value['codigo_postal'];
						// INFORMACOES PARA O CLIENTE
						$dadosboleto["demonstrativo1"] 		= "";
						if($valor_desconto > 0){
							$dadosboleto["demonstrativo2"] 		= "ATÉ " .$data_venc ." DESCONTO DE " .$valor_desconto;	
						}else{
							$dadosboleto["demonstrativo2"] 		= "";	
						}
						$dadosboleto["demonstrativo3"] 		= "MULTA DE 15% APOS 10 DIAS DO VENCIMENTO.";

						// INSTRUÇÕES PARA O CAIXA
						$dadosboleto["instrucoes1"] = "";
						$dadosboleto["instrucoes2"] = $dadosboleto["demonstrativo2"];
						$dadosboleto["instrucoes3"] = $dadosboleto["demonstrativo3"];
						$dadosboleto["instrucoes4"] = "";
						// DADOS OPCIONAIS DE ACORDO COM O BANCO OU CLIENTE
						$dadosboleto["quantidade"] = "";
						$dadosboleto["valor_unitario"] = "";
						$dadosboleto["aceite"] = "";
						$dadosboleto["especie"] = "R$";
						$dadosboleto["especie_doc"] = "";
						// ---------------------- DADOS FIXOS DE CONFIGURAÇÃO DO SEU BOLETO --------------- //
						// DADOS DA SUA CONTA - CEF
						$dadosboleto["agencia"] = $aEntidade[0]['agencia']; // Num da agencia, sem digito
						$dadosboleto["conta"] = $arrEntidadeConta[0]; 	// Num da conta, sem digito
						$dadosboleto["conta_dv"] = $arrEntidadeConta[1]; 	// Digito do Num da conta
						// DADOS PERSONALIZADOS - CEF
						$dadosboleto["conta_cedente"] = $arrEntidadeConta[0]; // ContaCedente do Cliente, sem digito (Somente Números)
						$dadosboleto["conta_cedente_dv"] = $arrEntidadeConta[1]; // Digito da ContaCedente do Cliente
						$dadosboleto["carteira"] = "SR";  // Código da Carteira: pode ser SR (Sem Registro) ou CR (Com Registro) - (Confirmar com gerente qual usar)
						// SEUS DADOS
						$dadosboleto["identificacao"] = "BoletoPhp - Código Aberto de Sistema de Boletos";
						$dadosboleto["cpf_cnpj"] = $aEntidade[0]['cnpj'];
						$dadosboleto["endereco"] = $aEntidade[0]['logradouro'] .' nº.:' .$aEntidade[0]['numero'] .' - ' .$aEntidade[0]['complemento'] .' - ' .$aEntidade[0]['bairro'];
						$dadosboleto["cidade_uf"] = $aEntidade[0]['cidade'] .' - ' .$aEntidade[0]['estado'] .' Cep.:' .$aEntidade[0]['cep'];
						$dadosboleto["cedente"] = $aEntidade[0]['nome'];

						// FRH - Dados para o quadro informativo no meio do boleto
						// Os dados virão com GROUP_CONCAT: Os alunos separados por virgula
						// Em receita fixa todos os itens do aluno virão no formato: descr-valor;descr-valor,...  <--próximo aluno separado por virgula

						$dadosboleto['responsavel'] 	= $value['responsavel'];
						$dadosboleto['logradouro'] 		= $value['logradouro'];
						$dadosboleto['numero'] 			= $value['numero'];
						$dadosboleto['complemento'] 	= $value['complemento'];
						$dadosboleto['bairro'] 			= $value['bairro'];
						$dadosboleto['cidade'] 			= $value['cidade'];
						$dadosboleto['estado'] 			= $value['estado'];
						$dadosboleto['codigo_postal'] 	= $value['codigo_postal'];
						$dadosboleto['cpf'] 			= $value['cpf'];

						$dadosboleto['nome_aluno'] 		= $value['nome_aluno'];
						$dadosboleto['id_aluno'] 		= $value['id_aluno'];
						$dadosboleto['codigo_aluno'] 	= $value['codigo_aluno'];
						$dadosboleto['turma'] 			= $value['turma']; 
						$dadosboleto['mensalidade'] 	= $value['mensalidade'];
						$dadosboleto['desconto'] 		= $value['desconto'];
						$dadosboleto['tipo_percentual'] = $value['tipo_percentual']; 
						$dadosboleto['seg_resp_civel'] 	= $value['seg_resp_civel'];
						$dadosboleto['receita_fixa'] 	= $value['receita_fixa'];
						

						// FRH - Dados para o quadro de entidade no meio do boleto
						$dadosboleto['quadro_entidade'] = $value['quadro_entidade'];

						// NÃO ALTERAR!
						//print_r($dadosboleto);
						$boleto = new boletophp_master($dadosboleto);
						$content = $boleto->show($dadosboleto, $data_venc);

						//Grava arquivo
						$arquivo = $value['id_responsavel'];
						$url = '../download/' .substr(str_replace('/', '-', $data->mes_ano), 0, 7);
						if (!is_dir($url)) {// testa se a pasta existe
							mkdir($url, 0777);//Grava uma pasta com o id do registro para salvar todos os pdf  no diretorio	
						}else{
							if (file_exists($url .'/' .'etiqueta.pdf')) {// caso exista o diretorio e tenha sido gerado uma etiqueta exclui a mesma para uma nova sequencia
								unlink($url .'/' .'etiqueta.pdf');
							}
						}

						$fp = fopen($url .'/' .$arquivo .'.html', "a");
						$escreve = fwrite($fp, $content);
						fclose($fp);

						if (file_exists($url .'/' .$arquivo .'.html')) {// Testa se a arquivo foi criado
							//Grava Dados no Banco
							$boletoArquivo = new BoletoArquivo();
							$boletoArquivo->setIdPessoaResponsavel($value['id_responsavel']);
							$boletoArquivo->setMesAno(substr($data->mes_ano, 0, 7));
							$boletoArquivo->setArquivo($arquivo);
							$boletoArquivo->store(); 

							$sql_parcela = "SELECT  
							par.id
							FROM responsavel_aluno res_alu 
							INNER JOIN parcela par on par.id_aluno = res_alu.id_pessoa_aluno
							WHERE res_alu.id_pessoa = " .$value['id_responsavel'];
							
							$parcela = $this->_getDb()->query($sql_parcela);
							
							foreach ($parcela as $keyParcela => $valueParcela){
								$parcela = new Parcela($valueParcela['id']);
								$parcela->setIdStatusParcela(3);
								$parcela->setNumeroDocumento($dadosboleto["nosso_numero"]);
								$parcela->store();
							}

							$caixa = new Caixa();
							
							$caixa->setIdSituacao(1);
							$caixa->setIdMoeda(1);
							$caixa->setIdTipoLancamento(1);
							$caixa->setIdCategoria(66);
							$caixa->setIdContaBancaria($aEntidade[0]['id_conta_bancaria']);
							$caixa->setIdPessoa($value['id_responsavel']);
							$caixa->setIdFormaPagamento(1);
							$caixa->setIdCentroCusto(6);
							

							$caixa->setNumeroDocumento($dadosboleto["nosso_numero"]);
							$caixa->setDataVencimento($value['data_vencimento']);
							$caixa->setValorFinal($valor_cobrado);
							$caixa->setDataLancamento(date('Y-m-d'));
							$caixa->setAtivo(1);

							$caixa->store();

							$parcela = $this->_getDb()->close();

							$status = true;	
						}else{
							$status = false;
						}

						$aTabela[] = array(
							'id' => $value['id_responsavel'],
							'responsavel' => $value['responsavel'],
							'data_vencimento' => $dadosboleto["data_vencimento"],
							'valor' => $dadosboleto["valor_boleto"],
							'status' => $status,
							);
					}

					$tabela = $this->_getDb()->close();
				}
			}

			$aGerarBoleto = array(
				'error' => 0,
				'boleto' => $aTabela,
				'processado' => count($aTabela),
				'arquivo' => $arquivo,
			);
			
			fJSON::output($aGerarBoleto);
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Boleto não pode ser gerado: " . $e);
			fJSON::output($arrMensagem);
		}
		
	}

	/*
	Módulo: Escola
	Descrição: baixa um boleto
	Método: GET
	URL: http://localhost/sig/api/index.php/geraboletodownload/<arquivo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGeraBoletoDownload($arquivo = '', $full = false) {
		try
		{
			$url = '../download/' .$arquivo;
			$file_all = file_get_contents($url .'.html');

			$html2pdf = new HTML2PDF('P', 'A4', 'fr', true, 'UTF-8', 3);
			$html2pdf->pdf->SetDisplayMode('fullpage');
			$html2pdf->writeHTML($file_all);
			$html2pdf->Output($url .'.pdf', 'D');

			header('Cache-Control: no-cache');
			header('Pragma: no-cache');


		}
		catch(HTML2PDF_exception $e) {
			echo $e;
			exit;
		}
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de Responsaveis conforme parcelas
	Método: GET
	URL: http://localhost/sig/api/index.php/parcelaresponsavel/<id_parcela>/<id_responsavel>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getParcelaResponsavel($id_parcela=0, $id_responsavel=0, $full = false) {

		$sql = 'SELECT  
					distinct
					par.ano, par.mes, 
					pes_res.id as id_responsavel, pes_res.nome
				FROM parcela par
				INNER JOIN responsavel_aluno res_alu on res_alu.id_pessoa_aluno = par.id_aluno and res_alu.responsavel_financeiro = 1
				INNER JOIN pessoa pes_res on pes_res.id = res_alu.id_pessoa
				WHERE par.id_status_parcela = 1';

		if ($id_parcela > 0) {
			$sql.= ' and par.id = ' .$id_parcela;
		}  
		if ($id_responsavel > 0) {
			$sql.= ' and pes_res.id = ' .$id_responsavel;
		}

		$db = $this->_getDb()->query($sql);
		$dbResult = $db;
		$db = $this->_getDb()->close();

		if ($full == false) {
			$status = array('Inativo', 'Ativo');

			$aDb = array();		
			foreach ($dbResult as $key => $value) {
				$aDb[] = $value;
			}

			if (count($aDb) == 0) {
				$aDb[] = array('error' => -1, 'mensagem' => "Nenhum responsável encontrado para gerar boleto.");
				fJSON::output($aDb);
				die;
			}

			$aDb = array(
				'error' => 0,
				'parcela_responsavel' => $aDb
				);          

			fJSON::output($aDb);
		}
		else {
			return $aDb;
		}
	}


	/*
	Módulo: Upload de arquivo (foto)
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploadfileevento
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 02/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	
	public function uploadFileEvento() { 

		try{

			$mArq = explode('/', $_FILES['file']['name']);
			$arq = $mArq[count($mArq)-1];

			$ext = explode('.', $arq);
			$extensao = $ext[count($ext)-1];

			$date = new DateTime();
			$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/img/evento/doc_'.$date->getTimestamp().'.'.$extensao;
		//$caminho = $_SERVER['DOCUMENT_ROOT'].'/sig/PHP/trunk/sig/img/evento/doc_'.$date->getTimestamp().'.'.$extensao;

			move_uploaded_file($_FILES['file']['tmp_name'], $caminho);
			$arrMensagem = array('error' => 0, 'caminho' => $caminho, 'arquivo' => $arq);

			fJSON::output($arrMensagem);

		}
		catch (fValidationException $e) {

			$arrMensagem = array('error' => -1, 'mensagem' => "Erro ao gravar o documento: " . $e);
			fJSON::output($arrMensagem);
		}
	}

	/*
	Módulo: Administrador
	Descrição: Obter Lista de Descritivos e nomes-de-arquivo de Documentos de Eventos armazenados
	Método: GET
	URL: http://localhost/sig/api/index.php/arquivoevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getArquivoEvento($id_evento = "", $full = false) {

		$campos = array('id'	   ,
			'id_evento',
			'descricao',
			'arquivo'  ,
			'ativo');

		$consulta = "SELECT %S FROM %F WHERE %W ORDER BY %O";
		$tabela   = "evento_arquivo";
		$condicao = "id_evento = ".$id_evento;
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma ".$tabela." encontrada."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	}

	/*
	Módulo: Escola
	Descrição: Armazena os registros referentes a documentos de eventos
	Método: POST
	URL: http://localhost/sig/api/index.php/arquivoevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/06/2015
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/
	public function postArquivoEvento() {

		$descTabela = "Arquivos de Eventos";
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$objTab = new EventoArquivo($data->id);
			$mensagem = $descTabela." alterado com sucesso!";
			$alteracao=1;
		}
		else{
			$objTab = new EventoArquivo();
			$mensagem = $descTabela." incluído com sucesso!";
			$alteracao=0;
		}

		try {
			/* ----------------------------------------------------------------------------------- */
			
			if (property_exists($data, 'id_evento'	)){ $objTab->setIdEvento($data->id_evento); }
			if (property_exists($data, 'descricao'	)){ $objTab->setDescricao($data->descricao); }
			if (property_exists($data, 'arquivo'	)){ $objTab->setArquivo($data->arquivo); }
			if (property_exists($data, 'ativo'		)){ $objTab->setAtivo($data->ativo); }
			
			/* ----------------------------------------------------------------------------------- */
			if ($alteracao != 1) {

				$aSearch = array();
				$aSearch['descricao='] = $data->descricao;

				$ct = fRecordset::build('EventoArquivo', $aSearch);

				if($ct->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. ".$descTabela." já existe");
					fJSON::output($arrMensagem);
					die();

				}else{ $objTab->store(); }
			}else{ $objTab->store(); }
			
			/* ----------------------------------------------------------------------------------- */

			$id_retorno = $objTab->getId();
			$arrMensagem = array('error' => 0, 'id_retorno' => $id_retorno, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Tipo de Plano UA
	Método: GET
	URL: http://localhost/sig/api/index.php/tipoplanoua/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	Data de Alteração: 10/07/2015
	*/

	public function getTipoPlanoUa($id = "", $full = false) {

		$aSearch = '';

		if ($id != "") {
			$aSearch = 'WHERE id = '.$id;
		}

		$strQueryTipoPlanoUa = "SELECT id,descricao,ativo FROM tipo_plano_ua ".$aSearch." ORDER BY descricao ";
		$tipo_plano_ua = $this->_getDb()->query($strQueryTipoPlanoUa);
		$aTipoPlanoUa = array();

		$status = array('Inativo', 'Ativo');

		foreach ($tipo_plano_ua as $key => $value){
			$aTipoPlanoUa[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo'],
				'status' =>$status[$value['ativo']]
				);
		}

		$tipo_plano_ua = $this->_getDb()->close();

		if (count($aTipoPlanoUa) == 0) {
			$aTipoPlanoUa = array('error' => -1, 'mensagem' => "Nenhum tipo de plano encontrado.");
		} else {
			$aTipoPlanoUa = array('error' => 0, 'tipo_plano_ua' => $aTipoPlanoUa);
		}

		if ($full == false) {
			fJSON::output($aTipoPlanoUa);
		}
		else {
			return $aTipoPlanoUa;
		}		
	}	

	/*
	Módulo: Administrador
	Descrição: Obter Lista de estoque por doações
	Método: GET
	URL: http://localhost/sig/api/index.php/estoquedoacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getDoacoesEstoque($id_tipo = "", $id_local = "", $status = 2, $full = false) {

		//Query para Relatório Sintético (Totais)
		$sqls = "SELECT 
				 IFNULL(d.descricao, 'Total') doacao, 
				 CASE WHEN d.descricao IS null THEN '' else lad.descricao end local_armazenamento, 
				 SUM(CASE md.tipo_entrada WHEN 0 THEN md.quantidade ELSE 0 END) qtd_saida,
				 SUM(CASE md.tipo_entrada WHEN 1 THEN md.quantidade ELSE 0 END) qtd_entrada,
				 SUM(CASE md.tipo_entrada WHEN 1 THEN md.quantidade ELSE 0 END) - sum(CASE md.tipo_entrada WHEN 0 THEN md.quantidade ELSE 0 END) estoque
				 FROM movimentacao_doacao md
				 INNER JOIN local_armazenamento_doacao lad ON lad.id = md.id_local_armazenamento_doacao 
				 INNER JOIN doacao d ON d.id = md.id_doacao 
				 %W 
				 GROUP BY d.descricao WITH ROLLUP;";

		//Query para Relatório Analítico (Descritivo)
		$sqla = "SELECT 
				 d.descricao doacao, 
				 d.quantidade qtd_inicial,
				 CASE md.tipo_entrada WHEN 0 THEN 'Saída' ELSE 'Entrada' END tipo_entrada,
				 md.quantidade,
				 td.descricao tipo_doacao, 
				 lad.descricao local_armazenamento,
				 CASE WHEN md.id_pessoa IS NOT NULL THEN (SELECT nome FROM pessoa WHERE ID = md.id_pessoa) ELSE '' END doador,
				 CASE WHEN md.id_pessoa_donatario IS NOT NULL THEN (SELECT nome FROM pessoa WHERE id = md.id_pessoa_donatario) ELSE '' END donatario,
				 CASE WHEN md.id_pessoa IS NOT NULL THEN data_entrada ELSE data_saida END data
				 FROM doacao d
				 INNER JOIN movimentacao_doacao md ON md.id_doacao = d.id
				 INNER JOIN tipo_doacao td ON td.id = d.id_tipo_doacao
				 INNER JOIN local_armazenamento_doacao lad ON lad.id = md.id_local_armazenamento_doacao 
				 %W 
				 ORDER BY md.id, md.id_doacao, md.tipo_entrada;";

		//Monta a condição de acordo com os parâmetros enviados

		if($id_tipo >0){ $B1 = true; $C1 = "d.id_tipo_doacao = ".$id_tipo;					}else{ $B1 = false; $C1 = "";}
		if($id_local>0){ $B2 = true; $C2 = "md.id_local_armazenamento_doacao = ".$id_local;	}else{ $B2 = false; $C2 = "";}
		if($status  >0){ $B3 = true; $C3 = "d.ativo = ".(($status==2) ? '0' : '1');			}else{ $B3 = false; $C3 = "";} //<-- $Status 0: Todos, 1:Ativo, 2:Inativo

		// Montar cláusula WHERE
		if($B1||$B2||$B3){

			$c = '%W %C1 %E1 %C2 %E2 %C3';
			$c=str_replace("%W", ' WHERE ', $c);
			
			if($B1&&$B2){ $c=str_replace("%E1", ' AND ', $c); };
			if($B2&&$B3){ $c=str_replace("%E2", ' AND ', $c); };

			if($B1){ $c=str_replace("%C1", $C1, $c); };
			if($B2){ $c=str_replace("%C2", $C2, $c); };
			if($B3){ $c=str_replace("%C3", $C3, $c); };

			$c=str_replace("%W",  '', $c);
			$c=str_replace("%C1", '', $c);
			$c=str_replace("%C2", '', $c);
			$c=str_replace("%C3", '', $c);
			$c=str_replace("%E1", '', $c);
			$c=str_replace("%E2", '', $c);

			$condicao=$c;			
			
			$sqls = str_replace("%W", $condicao, $sqls);
			$sqla = str_replace("%W", $condicao, $sqla);

		}else{
			$sqls = str_replace("%W", '', $sqls);
			$sqla = str_replace("%W", '', $sqla);
		}

		//Abre conexões
		$rst = $this->_getDb()->query($sqls);
		$rsa = $this->_getDb()->query($sqla);

		$rsaa = array();
		$rsta = array();

		$status = array('Inativo', 'Ativo');

		//Compõe Array de Objetos para envio
		foreach ($rsa as $key => $value){

			$tmp = new DateTime($value['data']);				

			$rsaa[] = array('doacao' 				=> $value['doacao'],
				'qtd_inicial' 			=> $value['qtd_inicial'],
				'tipo_entrada' 			=> $value['tipo_entrada'],
				'quantidade' 			=> $value['quantidade'],
				'tipo_doacao' 			=> $value['tipo_doacao'],
				'local_armazenamento'	=> $value['local_armazenamento'],
				'doador' 				=> $value['doador'],
				'donatario' 			=> $value['donatario'],
				'data'					=> $tmp->format('d/m/Y'));
		}

		foreach ($rst as $key => $value){
			$rsta[] = array('doacao' 			  => $value['doacao'],
				'qtd_saida' 		  => $value['qtd_saida'],
				'qtd_entrada' 		  => $value['qtd_entrada'],
				'estoque' 			  => $value['estoque'],
				'local_armazenamento' => $value['local_armazenamento']);
		}
		
		//Encerra conexões
		$rst = $this->_getDb()->close();
		$rsa = $this->_getDb()->close();

		//Retorno de erro ou sem registros
		if (count($rsta) == 0) { 
			$retorno[] = array('error' => -1, 'mensagem' => "Nenhum registro para relatório Sintético encontrado.");
			fJSON::output($retorno);
			die();
		}
		if (count($rsaa) == 0) { 
			$retorno[] = array('error' => -1, 'mensagem' => "Nenhum registro para relatório Analítico encontrado.");
			fJSON::output($retorno);
			die();
		}

		//Retorno da Matriz de Objetos
		$retorno = array( 'error' => 0, 'doacao_estoque_sintetico' => $rsta, 'doacao_estoque_analitico' => $rsaa);

		if ($full == false) {
			fJSON::output($retorno);
		}else {
			return $retorno;
		}

	}


	/*
	Módulo: Administrador
	Descrição: Gerar Relatório Sintético de Estoque por Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/relatoriosintetico/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function relatorioSinteticoEstoqueDoacao($id_tipo, $id_local, $status){

		$aDoacaoEstoque = $this->getDoacoesEstoque($id_tipo, $id_local, $status, true);
		
		$buffer  = '<meta charset=UTF-8><html><head>';

		$buffer .= '<style type="text/css">
					table{ font-family: Arial;font-size: 12px;}
					table tr td{ border-top: none; border-left:none; border-right: none; border-color: #eaeaea;}
					.titulo{ padding: 10px; font-size: 15px; font-weight: bold;	background-color: #337ab7; color: #fff;}
					.bold{ font-weight: bold; color: #000000; background-color: #EEEEEE; text-align:center;}
					.total{	background-color: #6EB2DA; color: #fff;}
					</style>';

		$buffer .= '</head><body><table width=700px border=1><tr><td align="center" colspan=8 class="titulo">RELAT&Oacute;RIO SINT&Eacute;TICO DE ESTOQUE DE DOA&Ccedil;&Atilde;O</td></tr>';
		$buffer .= '<tr><td align="center" class="bold">DOAÇÃO</td><td align="center" class="bold">QTD SAÍDA</td><td align="center" class="bold">QTD ENTRADA</td><td align="center" class="bold">ESTOQUE</td><td align="center" class="bold">LOCAL DE ARMAZENAMENTO</td></tr>';

		foreach ($aDoacaoEstoque['doacao_estoque_sintetico'] as $reg) {

			$buffer .= '<tr><td>'.$reg['doacao'].'</td><td align=center>'.$reg['qtd_saida'].'</td><td align=center>'.$reg['qtd_entrada'].'</td><td align=center>'.$reg['estoque'].'</td><td>'.$reg['local_armazenamento'].'</td></tr>';
		}		

		$buffer .= '</table></body></html>';

		try
		{		  			  		
			$html2pdf = new HTML2PDF('P', 'A4', 'fr', true, 'UTF-8', 3);
			$html2pdf->pdf->SetDisplayMode('fullpage');
			$html2pdf->writeHTML($buffer);
			$html2pdf->Output('Relatorio_sintetico.pdf','D');
		}
		catch(HTML2PDF_exception $e){
			echo $e;
			exit;
		}
	}

	/*
	Módulo: Administrador
	Descrição: Gerar Relatório Analítico de Estoque por Doação
	Método: GET
	URL: http://localhost/sig/api/index.php/relatorioanalitico/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function relatorioAnaliticoEstoqueDoacao($id_tipo, $id_local, $status){

		$tmp_doacao = '';
		$entrada = 0;
		$saida = 0;

		$aDoacaoEstoque = $this->getDoacoesEstoque($id_tipo, $id_local, $status, true);

		$buffer  = '<meta charset=UTF-8><html><head>';

		$buffer .= '<style type="text/css">
		table{ font-family: Arial;font-size: 12px;}
		table tr td{ border-top: none; border-left:none; border-right: none; border-color: #eaeaea;}
		.titulo{ padding: 10px; font-size: 15px; font-weight: bold;	background-color: #337ab7; color: #fff;}
		.bold{ font-weight: bold; color: #000000; background-color: #EEEEEE; text-align:center;}
		.total{	background-color: #6EB2DA; color: #fff;}
		</style>';

		$buffer .= '</head><body><table width=700px border=1><tr><td align="center" colspan=8 class="titulo">RELAT&Oacute;RIO ANAL&Iacute;TICO DE ESTOQUE DE DOA&Ccedil;&Atilde;O</td></tr>';
		$buffer .= '<tr><td align="center" class="bold">DOAÇÃO</td><td align="center" class="bold">TIPO</td><td align="center" class="bold">QUANTIDADE</td><td align="center" class="bold">TIPO DE DOAÇÃO</td><td align="center" class="bold">ARMAZENAMENTO</td><td align="center" class="bold">DOADOR</td><td align="center" class="bold">DONATÁRIO</td><td align="center" class="bold">DATA</td></tr>';

		$i = 0;
		$len = count($aDoacaoEstoque['doacao_estoque_analitico']);
		$total = '';
		$tmp = '';

		foreach ($aDoacaoEstoque['doacao_estoque_analitico'] as $reg) {			

			$total  = '<tr rowspan=2 class="total"><td>%D</td><td>Entrada</td><td align="center">%E</td><td colspan=5>&nbsp;</td></tr>';
			$total .= '<tr class="total"><td>&nbsp;</td><td>Saída</td><td align="center">%S</td><td colspan=5>&nbsp;</td></tr>';

			$tmp_entrada = ($reg['tipo_entrada'] == 'Entrada') ? $reg['qtd_inicial'] : 0;
			$tmp_saida 	 = ($reg['tipo_entrada'] == 'Saída')   ? $reg['qtd_inicial'] : 0;

			$tmp = '<tr><td>'.$reg['doacao'].'</td><td align="center">'.$reg['tipo_entrada'].'</td><td align="center">'.$reg['quantidade'].'</td><td>'.$reg['tipo_doacao'].'</td><td>'.$reg['local_armazenamento'].'</td><td>'.$reg['doador'].'</td><td>'.$reg['donatario'].'</td><td>'.$reg['data'].'</td></tr>';

			if($tmp_doacao==''){$tmp_doacao=$reg['doacao'];}

			if($tmp_doacao != $reg['doacao']){				

				$tot = $total;
				$tot = str_replace("%D", $tmp_doacao, $tot);
				$tot = str_replace("%E", $entrada, $tot);
				$tot = str_replace("%S", $saida, $tot);

				$tmp_doacao = $reg['doacao'];
				$buffer	.= $tmp; 
				$entrada = $tmp_entrada;
				$saida 	 = $tmp_saida;
			}else{
				$buffer  .= $tmp;
				$entrada += $tmp_entrada;
				$saida 	 += $tmp_saida;
			}
		}		

		$buffer .= '</table></body></html>';		

		try
		{
			$html2pdf = new HTML2PDF('L', 'A4', 'fr', true, 'UTF-8', 3);
			$html2pdf->pdf->SetDisplayMode('fullpage');
			$html2pdf->writeHTML($buffer);
			$html2pdf->Output('Relatorio_analitico.pdf','D');
		}
		catch(HTML2PDF_exception $e){
			echo $e;
			exit;
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Causa Mortis
	Método: GET
	URL: http://localhost/sig/api/index.php/stringcausamortis
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	*/

	public function getCausaMortisString($causamortis = "", $full = false) {

		$request = $this->_slimApp->request()->params();
		$aSearch = array();

		if (array_key_exists('string', $request) && $request['string'] != '') {
			$aSearch['descricao~'] = $request['string'];
		}

		if ($causamortis != "") {
			$aSearch['id='] = $causamortis;
		}

		$causamortis = fRecordSet::build('CausaMortis', $aSearch);

		if ($full == false) {

			$aCausaMortis = array();
			
			$aCausaMortis[] = array('tipo'=>"Ação",
				'id' => "-1",
				'descricao' => ":: Cadastrar Nova Causa Mortis",
				'ativo' => ""
				);   
			

			foreach ($causamortis->getRecords() as $key => $value) {

				$aCausaMortis[] = array(
					'tipo' => "CausaMortis",
					'id' => $value->getId(),
					'descricao' => $value->getDescricao()
					);
			}

			if (count($aCausaMortis) == 0) {
				$aCausaMortis[] = array('error' => -1, 'mensagem' => "Nenhuma Causa Mortis encontrada.");
			}

			fJSON::output($aCausaMortis);
		}
		else { return $causamortis[0]; }
	} 

	/*
	Módulo: Cemitério
	Descrição: Obter Lista de Causa Mortis
	Método: GET
	URL: http://localhost/sig/api/index.php/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	*/

	public function getFalecidoCausaMortis($id_falecido = '', $full = false){

		$condicao = ($id_falecido!='') ? "WHERE id_falecido = ".$id_falecido : '';
		
		$sqlq = "SELECT 
		fcm.id_causa_mortis,
		cm.descricao 
		FROM falecido_causa_mortis fcm
		JOIN causa_mortis cm ON cm.id = fcm.id_causa_mortis 
		%W;";

		$sqlq = str_replace("%W", $condicao, $sqlq);
		
		$rs = $this->_getDb()->query($sqlq);

		$retorno=array();

		// FRH - Campos abaixo (id,descricao) são chaves do Array que será passado como parâmetro na função "refresh.." do controller		
		foreach ($rs as $key => $value){

			$retorno[] = array(	'id'=>$value['id_causa_mortis'],
				'descricao'=>$value['descricao']);			
		}

		$rs = $this->_getDb()->close();

		if ($full == false) {			

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela falecido_causa_mortis encontrado."	);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, 'falecido_causa_mortis' => $retorno );
			fJSON::output($retorno);

		}else{ return $retorno; }
	}

		/*
	Módulo: Escola
	Descrição: Carregar lista de turmas de uma determinada pessoa (Professor, Coordenador, Secretaria)
	Método: GET
	URL: http://localhost/sig/api/index.php/turmapessoa<tipo>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaComboPessoaTurma($id_curso = ""){

		$this->acessoApi();
		$user = fSession::get('user');
		$id_pessoa = $user['user']['id'];
		$tipoUsuario = $user['user']['idTipoUsuario'];

		$ano = date('Y');

		switch($tipoUsuario){

			case 2 :
			if($id_curso == ""){
				$query = "select c.id,c.nome,c.abreviatura, cp.id_pessoa_professor, cp.serie, t.codigo, t.nome as turma, t.id as id_turma, t.abreviatura as abreviatura_turma".
				" from curso c INNER JOIN curso_professor cp ON c.id = cp.id_curso".
				" INNER JOIN turma t ON c.id = t.id_curso AND cp.serie = t.serie".
				" INNER JOIN etapa e ON e.id = t.id_etapa".
				" WHERE cp.id_pessoa_professor = ".$id_pessoa.
				" AND e.ano = ".$ano.
				" GROUP BY id_turma ORDER BY c.nome, cp.serie,t.nome;";
			}
			else{
				$query = "select c.id,c.nome,c.abreviatura, cp.id_pessoa_professor, cp.serie, t.codigo, t.nome as turma, t.id as id_turma, t.abreviatura as abreviatura_turma".
				" from curso c INNER JOIN curso_professor cp ON c.id = cp.id_curso".
				" INNER JOIN turma t ON c.id = t.id_curso AND cp.serie = t.serie".
				" INNER JOIN etapa e ON e.id = t.id_etapa".
				" WHERE cp.id_pessoa_professor = ".$id_pessoa.
				" AND e.ano = ".$ano." AND c.id = ".$id_curso.
				" ORDER BY c.nome, cp.serie,t.nome;";
			}
			break;

			case 3 :
			$query = "select c.id,c.nome,c.abreviatura, t.codigo, t.id as id_turma, t.nome as turma,  t.abreviatura, t.serie".
			" from curso c INNER JOIN turma t ON c.id = t.id_curso".
			" INNER JOIN etapa e ON e.id = t.id_etapa".
			" WHERE e.ano = ".$ano.
			" ORDER BY c.nome, t.serie,t.nome;";
			break;

			case 'coordenador' :
			$query = "select c.id,c.nome,c.abreviatura, t.codigo, t.nome as turma,  t.abreviatura,".
			" t.serie,c.id_pessoa_coordenador".
			" from curso c INNER JOIN turma t ON c.id = t.id_curso".
			" INNER JOIN etapa e ON e.id = t.id_etapa".
			" WHERE e.ano = ".$ano.
			" AND c.id_pessoa_coordenador = ".$id_pessoa.
			" ORDER BY c.nome, t.serie,t.nome;";
			break;
		}

		$turma = $this->_getDb()->query($query);
		$aTipoUsuario = array();

		if($tipoUsuario == 2){
			foreach ($turma as $key => $value){

				$aTipoUsuario[] = array(
					'id' => $value['id'],
					'nome' => $value['nome'],
					'abreviatura' => $value['abreviatura'],
					'id_pessoa_professor' => $value['id_pessoa_professor'],
					'serie' => $value['serie'],
					'codigo' => $value['codigo'],
					'turma' => $value['turma'],
					'id_turma' => $value['id_turma'],
					'abreviatura_turma' => $value['abreviatura_turma'],
					'label' => $value['serie']."º - ".$value['turma']
					);
			}
		}
		if($tipoUsuario == 3){
			foreach ($turma as $key => $value){
				$aTipoUsuario[] = array(
					'id' => $value['id'],
					'nome' => $value['nome'],
					'abreviatura' => $value['abreviatura'],
					'serie' => $value['serie'],
					'codigo' => $value['codigo'],
					'turma' => $value['turma'],
					'id_turma' => $value['id_turma'],
					'label' => $value['serie']."º - ".$value['turma']
					);
			}
		}

		$turma = $this->_getDb()->close();	

		if (count($aTipoUsuario) == 0) {
			$aTipoUsuario = array('error' => -1, 'mensagem' => "Nenhuma usuário encontrado.");
		} else {
			$aTipoUsuario = array('error' => 0, 'turma' => $aTipoUsuario);
		}
		
		fJSON::output($aTipoUsuario);

	}

	/*
	Módulo: Escola
	Descrição: Lista todos os alunos de uma determinada turma
	Método: GET
	URL: http://localhost/sig/api/index.php/alunoturma/<id_turma>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaAlunoTurma($id_turma){

		$this->acessoApi();

		$query = "SELECT p.id,p.nome,p.codigo,p.foto FROM pessoa p INNER JOIN matricula m ON p.id = m.id_aluno ".
		"WHERE m.id_turma = '".$id_turma."' ORDER BY p.nome;";

		$aluno = $this->_getDb()->query($query);
		$aAlunoTurma = array();

		foreach ($aluno as $key => $value){

			$aAlunoTurma[] = array(
				'id' => $value['id'],
				'nome' => $value['nome'],
				'codigo' => $value['codigo'],
				'foto' => $value['foto']
				);
		}

		$aluno = $this->_getDb()->close();	

		if (count($aAlunoTurma) == 0) {
			$aAlunoTurma = array('error' => -1, 'mensagem' => "Nenhum aluno encontrado.");
		} else {
			$aAlunoTurma = array('error' => 0, 'alunos' => $aAlunoTurma);
		}

		fJSON::output($aAlunoTurma);
	}



	public function getMatriculaString() {
		$request = $this->_slimApp->request()->params();

		$aSearch = "";
		
		if (array_key_exists('aluno', $request)) {			
			$aSearch .= ' and aluno = 1';
		}  

		$aSearch .= " and codigo like '%".$request['string']."%'";
		
		$strQueryPessoa = "SELECT * FROM pessoa WHERE 1 ".$aSearch." order by nome asc";

		$pessoa = $this->_getDb()->query($strQueryPessoa);

		$aPessoa = array(); 

		if ($pessoa->countReturnedRows() > 0) {

			foreach ($pessoa as $key => $value) {

				$dataAssociacao = '';
				$dataCadastro = '';
				$dataDesligamento = '';
				$dataNascimento = '';

				if ($value['data_associacao'] != null) {					
					$dataAssociacao = date("d/m/Y", strtotime($value['data_associacao']));
				}
				if ($value['data_cadastro'] != null) {
				$dataCadastro = date("d/m/Y", strtotime($value['data_cadastro']));
				}
				if ($value['data_nascimento'] != null) {
					$dataNascimento = date("d/m/Y", strtotime($value['data_nascimento']));
				}
				if ($value['data_desligamento'] != null) {
					$dataDesligamento = date("d/m/Y", strtotime($value['data_desligamento']));
				}

		$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value['id'], "", true, 1); //Lista Documentos da Pessoa

		if (strlen($resultDocumentoPessoaRG[0]["mensagem"]) > 0) {
			$rg = "";
		}else{
			$rg = $resultDocumentoPessoaRG[0]["numero"];
		}

		$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value['id'], "", true, 2);

		if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
			$cpf = "";
		}else{
			$cpf = self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
		}

		$resultDocumentoPessoaRNE = $this->getDocumentoPessoa($value['id'], "", true, 3);

		if (strlen($resultDocumentoPessoaRNE[0]["mensagem"]) > 0) {
			$rne = "";
		}else{
			$rne = $resultDocumentoPessoaRNE[0]["numero"];
		}

		$resultDocumentoPessoaPassaporte = $this->getDocumentoPessoa($value['id'], "", true, 4);

		if (strlen($resultDocumentoPessoaPassaporte[0]["mensagem"]) > 0) {
			$passaporte = "";
		}else{
			$passaporte = $resultDocumentoPessoaPassaporte[0]["numero"];
		}

		$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value['id'], "", true, 5);

		if (strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
			$cnpj = "";
		}else{
			$cnpj = self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
		}

		$resultDocumentoPessoaIE = $this->getDocumentoPessoa($value['id'], "", true, 6);

		if (strlen($resultDocumentoPessoaIE[0]["mensagem"]) > 0) {
			$inscricaoEstadual = "";
		}else{
			$inscricaoEstadual = $resultDocumentoPessoaIE[0]["numero"];
		}

		$resultDocumentoPessoaIdentificacaoInternacional = $this->getDocumentoPessoa($value['id'], "", true, 7);

		if (strlen($resultDocumentoPessoaIdentificacaoInternacional[0]["mensagem"]) > 0) {
			$identificacao_internacional = "";
		}else{
			$identificacao_internacional = $resultDocumentoPessoaIdentificacaoInternacional[0]["numero"];
		}   
		
		$token = '';
		$login = '';
		$senha = '';

		$resultUsuario = $this->getUsuario(0, $value['id'], true);
		if($resultUsuario['error'] == 0){
			$token = $resultUsuario['usuario']['0']['token'];
			$login = $resultUsuario['usuario']['0']['login'];
			$senha = $resultUsuario['usuario']['0']['senha'];
		}

		$aPessoa[] = array(
			'id' => $value['id'],
			'nome' => $value['nome'],
			'apelido' => $value['apelido'],
			'nome_tradicao' => $value['nome_tradicao'],
			'data_nascimento' => $dataNascimento,
			'nacionalidade' => $value['nacionalidade'],
			'sexo' => $value['sexo'],
			'empresa' => $value['empresa'],
			'ocupacao' => $value['ocupacao'],
			'login' => $login,
			'senha' => $senha,
			'email' => $value['email'],
			'foto' => $value['foto'],
			'codigo' => $value['codigo'],
			'data_associacao' => $dataAssociacao,
			'token' => $token,
			'associado' => $value['associado'],
			'ativo' => $value['ativo'],
			'data_cadastro' => $dataCadastro,                                        
			'rg' => $rg,
			'cpf' => $cpf,
			'rne' => $rne,
			'passaporte' => $passaporte,
			'identificacao_internacional' => $identificacao_internacional,
			'donatario' => $value['donatario'],
			'fornecedor' => $value['fornecedor'],
			);
	};
}

if (count($aPessoa) == 0) {
	$aPessoa = array(
		'error' => "-1",
		'pessoa' => $aPessoa,
		'mensagem' => "Nenhuma pessoa encontrada."
		);
	fJSON::output($aPessoa);
	die;
}

$aPessoa = array(
	'pessoa' => $aPessoa
	);

fJSON::output($aPessoa);      
}



/*
	Módulo: Escola
	Descrição: Cadastra uma sala virtual
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrasalavirtual
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function postSalaVirtual() {

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');

		$user_id = $user['user']['id'];

		$data_publicacao = explode('/', $data->data_publicacao);
		$data_publicacao = $data_publicacao[2].'-'.$data_publicacao[1].'-'.$data_publicacao[0];

		$data_entrega = explode('/', $data->data_entrega);
		$data_entrega = $data_entrega[2].'-'.$data_entrega[1].'-'.$data_entrega[0];

		if (property_exists($data, 'id')) {
			$salavirtual = new SalaVirtual($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "	Sala Virtual alterada com sucesso!";
			$alteracao=1;
		}else{
			$salavirtual = new SalaVirtual();
			$mensagem = "Sala Virtual incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'id_categoria_sala_virtual')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getIdCategoriaSalaVirtual();
				}

				$salavirtual->setIdCategoriaSalaVirtual($data->id_categoria_sala_virtual);
				//$this->setAuditoria('Sala Virtual', 'ID Categoria', $salavirtualAnt, $data->id_categoria_sala_virtual);
			}

			if (property_exists($data, 'titulo')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getTitulo();
				}
				$salavirtual->setTitulo($data->titulo);
				$this->setAuditoria('Sala Virtual', 'Titulo', $salavirtualAnt, $data->titulo);
			}

			if (property_exists($data, 'descricao_interna')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getDescricaoInterna();
				}
				$salavirtual->setDescricaoInterna($data->descricao_interna);
				$this->setAuditoria('Sala Virtual', 'Descricao Interna', $salavirtualAnt, $data->descricao_interna);
			}

			if (property_exists($data, 'descricao_aluno')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getDescricaoAluno();
				}
				$salavirtual->setDescricaoAluno($data->descricao_aluno);
				$this->setAuditoria('Sala Virtual', 'Descricao Aluno', $salavirtualAnt, $data->descricao_aluno);
			}

			if (property_exists($data, 'data_publicacao')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getDataPublicacao();
				}
				$salavirtual->setDataPublicacao($data_publicacao);
				$this->setAuditoria('Sala Virtual', 'Data Publicação', $salavirtualAnt, $data_publicacao);
			}

			if (property_exists($data, 'data_entrega')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getDataEntrega();
				}
				$salavirtual->setDataEntrega($data_entrega);
				$this->setAuditoria('Sala Virtual', 'Data Entrega', $salavirtualAnt, $data_entrega);
			}

			if (property_exists($data, 'publicado')){
				$salavirtualAnt = '';
				if($alteracao==1){
					$salavirtualAnt = $salavirtual->getPublicado();
				}
				$salavirtual->setPublicado($data->publicado);
				//$this->setAuditoria('Sala Virtual', 'Publicado', $salavirtualAnt, $data->publicado);
			}

			$salavirtual->setIdPessoaPublicacao($user_id);
			$salavirtual->setAtivo(1);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['titulo='] = $data->titulo;
				$aSearch['id_categoria_sala_virtual='] = $data->id_categoria_sala_virtual;
				$countSalaVirtual = fRecordset::build('SalaVirtual', $aSearch);

				if($countSalaVirtual->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Sala Virtual já cadastrada");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$salavirtual->store();
				}     
			} else {
				$salavirtual->store();
			}

			$id_salavirtual = $salavirtual->getId();

			$arrMensagem = array('error' => 0, 'id_salavirtual' => $id_salavirtual, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}



	/*
	Módulo: Escola
	Descrição: Carregar lista de tipo de publicação
	Método: GET
	URL: http://localhost/sig/api/index.php/listatipoitempublicacao
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSalaTipoItensPublicacao(){

		$this->acessoApi();

		$query = "SELECT * FROM `tipo_itens_publicacao`";

		$item_publicacao = $this->_getDb()->query($query);
		$aTipoItemPublicacao = array();

		foreach ($item_publicacao as $key => $value){

			$aTipoItemPublicacao[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo']
				);
		}

		$item_publicacao = $this->_getDb()->close();	

		if (count($aTipoItemPublicacao) == 0) {
			$aTipoItemPublicacao = array('error' => -1, 'mensagem' => "Nenhuma ítem encontrado.");
		} else {
			$aTipoItemPublicacao = array('error' => 0, 'item' => $aTipoItemPublicacao);
		}
		fJSON::output($aTipoItemPublicacao);
	}



	/*
	Módulo: Escola
	Descrição: Cadastra ítens de publicação em uma sala virtual
	Método: POST
	URL: http://localhost/sig/api/index.php/salavirtualitempublicacao
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function postSalaVirtualItemPublicacao() {

		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {
			$item = new SalaVirtualItem($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "	Ítens alterado com sucesso!";
			$alteracao=1;
		}else{
			$item = new SalaVirtualItem();
			$mensagem = "ítens incluído com sucesso!";
			$alteracao=0;
		}

		try {

			if (property_exists($data, 'id_sala_virtual')){
				$item->setIdSalaVirtual($data->id_sala_virtual);
			}

			if (property_exists($data, 'id_tipo_itens_publicacao')){
				$item->setIdTipoItensPublicacao($data->id_tipo_itens_publicacao);
			}

			if (property_exists($data, 'titulo')){
				$itemAnt = '';
				if($alteracao==1){
					$itemAnt = $item->getTitulo();
				}
				$item->setTitulo($data->titulo);
				$this->setAuditoria('Ítens Publicação Sala', 'Titulo', $itemAnt, $data->titulo);
			}

			if (property_exists($data, 'publicar_titulo')){
				$item->setPublicarTitulo($data->publicar_titulo);
			}

			if (property_exists($data, 'texto_artigo')){
				$itemAnt = '';
				if($alteracao==1){
					$itemAnt = $item->getTextoArtigo();
				}
				$item->setTextoArtigo($data->texto_artigo);
				$this->setAuditoria('Ítens Publicação Sala', 'Texto Artigo', $itemAnt, $data->texto_artigo);
			}

			if (property_exists($data, 'codigo_objeto_video')){
				$itemAnt = '';
				if($alteracao==1){
					$itemAnt = $item->getCodigoObjetoVideo();
				}
				$item->setCodigoObjetoVideo($data->codigo_objeto_video);
				$this->setAuditoria('Ítens Publicação Sala', 'Video', $itemAnt, $data->codigo_objeto_video);
			}

			$item->setAtivo(1);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['titulo='] = $data->titulo;
				$countItem = fRecordset::build('SalaVirtualItem', $aSearch);

				if($countItem->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. O ítem já está incluso");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$item->store();
				}     
			} else {
				$item->store();
			}

			$id_item = $item->getId();

			$arrMensagem = array('error' => 0, 'id_item' => $id_item, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


		/*
	Módulo: Upload de arquivo
	Descrição: Simples upload. Renomeia o nome do arquivo para time do upload
	Método: Post
	URL: /uploaditempublicacao
	Autenticação: Não
	Resposta: Sim
	Data de Criação: 21/10/2014
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 10/07/2015
	*/

	public function uploadFilePublicacao($id) {

		$mensagem = array();
		$type = explode('/', $_FILES['file']['type']);
		$dir = $_SERVER['DOCUMENT_ROOT'] . "/sig/academico/publicacoes/";

		$ext = explode('.', $_FILES['file']['name']);
		$extensao = $ext[count($ext)-1];

		$date = new DateTime();
		$target_dir = $dir . 'file' .$date->getTimestamp() . '.' . $extensao;
		

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {

			$sala_virtual_item = new SalaVirtualItem($id);

			$sala_virtualAnt = $sala_virtual_item->getArquivoDownload();
			if(file_exists ($dir .$sala_virtualAnt) && $sala_virtualAnt != ""){
				unlink($dir .$sala_virtualAnt);//apaga a foto anterior
			}

			$sala_virtual_item->setArquivoDownload('file_' .$date->getTimestamp() . '.' . $extensao); //Armazena o nome da imagem no objeto sala_virtual_item
			$sala_virtual_item->store();

			$messagem['error'] = 0;
			$messagem['mensagem'] = 'arquivo submetido com sucesso';
			$messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao;
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
		}

		fJSON::output($messagem);
	}


		/*
	Módulo: Escola
	Descrição: Carregar salas virtuais
	Método: GET
	URL: http://localhost/sig/api/index.php/salavirtual
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSalaVirtual(){

		$this->acessoApi();

		$query = "SELECT * FROM `sala_virtual`";

		$salavirtual = $this->_getDb()->query($query);
		$aSalaVirtual = array();

		foreach ($salavirtual as $key => $value){

			$query_pessoa = "SELECT nome FROM pessoa WHERE id = ".$value['id_pessoa_publicacao'];

			$pessoa = $this->_getDb()->query($query_pessoa);

			$aPessoa = array();

			foreach($pessoa as $key2 => $value2){
				$nome_pessoa_publicacao = $value2['nome'];
			}

			$datapublicacao = explode('-',$value['data_publicacao']);
			$dataentrega = explode('-',$value['data_entrega']);
			$dia_publicacao = $datapublicacao[2];
			$dia_entrega = $dataentrega[2];
			$mesentrega = $dataentrega[1];
			$mes = $datapublicacao[1];

			switch($mes) {
				case 01:
				$mes_publicacao = "Janeiro";
				break;
				case 02:
				$mes_publicacao = "Fevereiro";
				break;
				case 03:
				$mes_publicacao = "Março";
				break;
				case 04:
				$mes_publicacao = "Abril";
				break;
				case 05:
				$mes_publicacao = "Maio";
				break;
				case 06:
				$mes_publicacao = "Junho";
				break;
				case 07:
				$mes_publicacao = "Julho";
				break;
				case 08:
				$mes_publicacao = "Agosto";
				break;
				case 09:
				$mes_publicacao = "Setembro";
				break;
				case 10:
				$mes_publicacao = "Outubro";
				break;
				case 11:
				$mes_publicacao = "Novembro";
				break;
				case 12:
				$mes_publicacao = "Dezembro";
				break;
			}

			switch($mesentrega) {
				case 01:
				$mes_entrega = "Janeiro";
				break;
				case 02:
				$mes_entrega = "Fevereiro";
				break;
				case 03:
				$mes_entrega = "Março";
				break;
				case 04:
				$mes_entrega = "Abril";
				break;
				case 05:
				$mes_entrega = "Maio";
				break;
				case 06:
				$mes_entrega = "Junho";
				break;
				case 07:
				$mes_entrega = "Julho";
				break;
				case 08:
				$mes_entrega = "Agosto";
				break;
				case 09:
				$mes_entrega = "Setembro";
				break;
				case 10:
				$mes_entrega = "Outubro";
				break;
				case 11:
				$mes_entrega = "Novembro";
				break;
				case 12:
				$mes_entrega = "Dezembro";
				break;
			}

			$aSalaVirtual[] = array(
				'id' => $value['id'],
				'id_categoria_sala_virtual' => $value['id_categoria_sala_virtual'],
				'titulo' => $value['titulo'],
				'descricao_interna' => $value['descricao_interna'],
				'descricao_aluno' => $value['descricao_aluno'],
				'data_publicacao' => $value['data_publicacao'],
				'mes_publicacao' => $mes_publicacao,
				'dia_publicacao' => $dia_publicacao,
				'publicado' => $value['publicado'],
				'data_entrega' => $value['data_entrega'],
				'dia_entrega' => $dia_entrega,
				'mes_entrega' => $mes_entrega,
				'id_pessoa_publicacao' => $value['id_pessoa_publicacao'],
				'nome_pessoa_publicacao' => $nome_pessoa_publicacao,
				'ativo' => $value['ativo']
				);
		}

		$salavirtual = $this->_getDb()->close();	

		if (count($aSalaVirtual) == 0) {
			$aSalaVirtual = array('error' => -1, 'mensagem' => "Nenhuma Sala Virtual encontrada.");
		} else {
			$aSalaVirtual = array('error' => 0, 'salavirtual' => $aSalaVirtual);
		}
		fJSON::output($aSalaVirtual);
	}



	/*
	Módulo: Escola
	Descrição: Exibe detalhes de uma sala virtual
	Método: GET
	URL: http://localhost/sig/api/index.php/salavirtualdetalhes/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/12/2014
	Autor: Daniel Swater
	Versão: 1.0
	Data de Alteração: 11/07/2015
	*/

	public function getSalaVirtualDetalhes($id_sala_virtual = "", $full = false) {

		$this->acessoApi();

		$aSearch = array();

		if ($id_sala_virtual != "") {
			$aSearch['id_sala_virtual='] = $id_sala_virtual;
		}

		$item = fRecordSet::build('SalaVirtualItem', $aSearch);

		$aSalaItem = array();

		if ($item->count() == 0) {

			$aSalaItem = array(
				'error' => "-1",
				'mensagem' => "Nenhuma lista de evento encontrada."
				);
		}
		else {
			foreach ($item->getRecords() as $key => $value) {

				$sala = new SalaVirtual($value->getIdSalaVirtual());
				$pessoa = new Pessoa($sala->getIdPessoaPublicacao());

				$salaItem = array();

				$aSalaItem[] = array(
					'id' => $value->getId(),
					'id_sala_virtual' => $value->getIdSalaVirtual(),
					'id_tipo_itens_publicacao' => $value->getIdTipoItensPublicacao(),
					'titulo' => $value->getTitulo(),
					'titulo_sala_virtual' => $sala->getTitulo(),
					'descricao_interna' => $sala->getDescricaoInterna(),
					'descricao_aluno' => $sala->getDescricaoAluno(),
					'publicar_titulo' => $value->getPublicarTitulo(),
					'texto_artigo' => $value->getTextoArtigo(),
					'nome_pessoa_publicacao' => $pessoa->getNome(),
					'arquivo_download' => $value->getArquivoDownload(),
					'codigo_bjeto_video' => $value->getCodigoObjetoVideo(),
					'ativo' => $value->getAtivo()					
					);
			}
			$salaItem = array('error' => 0, 'detalhes' => $aSalaItem);
		}

		if ($full == false) {
			fJSON::output($salaItem);
		}
		else {
			return $aSalaItem;
		}
	}



	public function getAlunosString() {
		$request = $this->_slimApp->request()->params();

		$aSearch = array();
		$aSearch['nome~'] = $request['string'];

		if (array_key_exists('aluno', $request)) {
			$aSearch['aluno='] = 1;
		}  

		$pessoa = fRecordSet::build('Pessoa', $aSearch, array('nome' => 'asc')); 

		$aPessoa = array(); 

		if ($pessoa->count() > 0) {

			foreach ($pessoa->getRecords() as $key => $value) {

				$dataAssociacao = '';
				$dataCadastro = '';
				$dataDesligamento = '';
				$dataNascimento = '';

				if ($value->getDataAssociacao() != null) {
					$dataAssociacao = $value->getDataAssociacao()->format('d/m/Y');
				}
				if ($value->getDataCadastro() != null) {
					$dataCadastro = $value->getDataCadastro()->format('d/m/Y');
				}
				if ($value->getDataNascimento() != null) {
					$dataNascimento = $value->getDataNascimento()->format('d/m/Y');
				}
				if ($value->getDataDesligamento() != null) {
					$dataDesligamento = $value->getDataDesligamento()->format('d/m/Y');
				}

		$resultDocumentoPessoaRG = $this->getDocumentoPessoa($value->getId(), "", true, 1); //Lista Documentos da Pessoa

		if (strlen($resultDocumentoPessoaRG[0]["mensagem"]) > 0) {
			$rg = "";
		}else{
			$rg = $resultDocumentoPessoaRG[0]["numero"];
		}

		$resultDocumentoPessoaCPF = $this->getDocumentoPessoa($value->getId(), "", true, 2);

		if (strlen($resultDocumentoPessoaCPF[0]["mensagem"]) > 0) {
			$cpf = "";
		}else{
			$cpf = self::mask($resultDocumentoPessoaCPF[0]["numero"], '###.###.###-##');
		}

		$resultDocumentoPessoaRNE = $this->getDocumentoPessoa($value->getId(), "", true, 3);

		if (strlen($resultDocumentoPessoaRNE[0]["mensagem"]) > 0) {
			$rne = "";
		}else{
			$rne = $resultDocumentoPessoaRNE[0]["numero"];
		}

		$resultDocumentoPessoaPassaporte = $this->getDocumentoPessoa($value->getId(), "", true, 4);

		if (strlen($resultDocumentoPessoaPassaporte[0]["mensagem"]) > 0) {
			$passaporte = "";
		}else{
			$passaporte = $resultDocumentoPessoaPassaporte[0]["numero"];
		}

		$resultDocumentoPessoaCnpj = $this->getDocumentoPessoa($value->getId(), "", true, 5);

		if (strlen($resultDocumentoPessoaCnpj[0]["mensagem"]) > 0) {
			$cnpj = "";
		}else{
			$cnpj = self::mask($resultDocumentoPessoaCnpj[0]["numero"], '##.###.###/####-##');
		}

		$resultDocumentoPessoaIE = $this->getDocumentoPessoa($value->getId(), "", true, 6);

		if (strlen($resultDocumentoPessoaIE[0]["mensagem"]) > 0) {
			$inscricaoEstadual = "";
		}else{
			$inscricaoEstadual = $resultDocumentoPessoaIE[0]["numero"];
		}

		$resultDocumentoPessoaIdentificacaoInternacional = $this->getDocumentoPessoa($value->getId(), "", true, 7);

		if (strlen($resultDocumentoPessoaIdentificacaoInternacional[0]["mensagem"]) > 0) {
			$identificacao_internacional = "";
		}else{
			$identificacao_internacional = $resultDocumentoPessoaIdentificacaoInternacional[0]["numero"];
		}   
		
		$token = '';
		$login = '';
		$senha = '';

		$resultUsuario = $this->getUsuario(0, $value->getId(), true);
		if($resultUsuario['error'] == 0){
			$token = $resultUsuario['usuario']['0']['token'];
			$login = $resultUsuario['usuario']['0']['login'];
			$senha = $resultUsuario['usuario']['0']['senha'];
		}

		$aPessoa[] = array(
			'id' => $value->getId(),
			'nome' => $value->getNome(),
			'apelido' => $value->getApelido(),
			'nome_tradicao' => $value->getNomeTradicao(),
			'data_nascimento' => $dataNascimento,
			'nacionalidade' => $value->getNacionalidade(),
			'sexo' => $value->getSexo(),
			'empresa' => $value->getEmpresa(),
			'ocupacao' => $value->getOcupacao(),
			'login' => $login,
			'senha' => $senha,
			'email' => $value->getEmail(),
			'foto' => $value->getFoto(),
			'data_associacao' => $dataAssociacao,
			'token' => $token,
			'associado' => $value->getAssociado(),
			'ativo' => $value->getAtivo(),
			'data_cadastro' => $dataCadastro,                                        
			'rg' => $rg,
			'cpf' => $cpf,
			'rne' => $rne,
			'passaporte' => $passaporte,
			'identificacao_internacional' => $identificacao_internacional,
			'donatario' => $value->getDonatario(),
			'fornecedor' => $value->getFornecedor(),
			);
	};
}

if (count($aPessoa) == 0) {
	$aPessoa = array(
		'error' => "-1",
		'pessoa' => $aPessoa,
		'mensagem' => "Nenhuma pessoa encontrada."
		);
	fJSON::output($aPessoa);
	die;
}

$aPessoa = array(
	'pessoa' => $aPessoa
	);

fJSON::output($aPessoa);

}

	/*
	Módulo: Escola
	Descrição: Exibe as categorias de sala virtual
	Método: GET
	URL: http://localhost/sig/api/index.php/categoriasalavirtual/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSalaVirtualCategoria(){

		$this->acessoApi();
		
		$query = "SELECT * FROM `categoria_sala_virtual`";

		$categoria = $this->_getDb()->query($query);
		$aCategoria = array();

		foreach ($categoria as $key => $value){

			$aCategoria[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo']
				);
		}

		$categoria = $this->_getDb()->close();	

		if (count($aCategoria) == 0) {
			$aCategoria = array('error' => -1, 'mensagem' => "Nenhuma categoria encontrada.");
		} else {
			$aCategoria = array('error' => 0, 'categoria' => $aCategoria);
		}
		fJSON::output($aCategoria);
	}


	public function logoutAcademico() {
		header('Access-Control-Allow-Origin: *');
		header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
		header('Access-Control-Allow-Headers: Origin, Content-Type, Accept, Authorization, X-Request-With');
		header('Access-Control-Allow-Credentials: true');

		$host = $_SERVER['HTTP_HOST'];

		$req = $this->_slimApp->request();
		$url = '/sig/academico';

	//sigId::destroyUserInfo();
		fAuthorization::destroyUserInfo();
		fSession::destroy();
		fSession::close();
		fURL::redirect($url);

		$messagem['error'] = 0;
		$messagem['mensagem'] = $url;
		fJSON::output($messagem);
	}

	/*
	Módulo: Escola
	Descrição: Gera etiquetas de boleto
	Método: GET
	URL: http://localhost/sig/api/index.php/geraretiqueta
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getGerarEtiqueta($mes_ano, $id_tipo_carne, $id_responsavel = '') {

		$content = '';
		//$arquivo = md5(uniqid(rand(), true));//Cria um nome unico para o arquivo
		$arquivo = 'etiqueta';
		$aMesAno = explode('-', $mes_ano);
		$url = '../download/' .substr($mes_ano, 0, 7);
		$aTabela = array();

		
		$tabela = $this->sqlGerarBoleto($id_tipo_carne, 
										$aMesAno[0], 
										$aMesAno[1], 
										'', 
										'', 
										$id_responsavel);


		foreach ($tabela as $key => $value){	
			$aTabela[] = $value;
		}

		$a = 1;
		$b = 0;
		$fim = 3;

		foreach ($aTabela as $key => $value){	
			if($a == 1){
				$content.= '<div style="width:400px; height:100px; margin-right: 50px; margin-bottom: 20px;">
					<table border="0">
				<tr>';	
			}

			$content.= '<td width="233" style="font-size: 10px;">	
			' .$value['responsavel'] .'<br />
			' .$value['logradouro'] .', ' .$value['numero'] .' ' .$value['complemento'] .'<br />
			<b>' 
				.$value['codigo_postal'] .' '
				.$value['bairro'] .' '
				.$value['cidade'] .' '
				.$value['estado']
				.'</b>
			</td>';
			$b++;

			if($a == $fim || $b == count($aTabela)){
				$content.= '	</tr>
				</table></div>';
				$a = 1;
			}else{
				$a++;
			}
		}

		$tabela = $this->_getDb()->close();

		echo $content;
	}


	/*
	Módulo: Upload de arquivos	
	Método: POST
	URL: /uparquivo
	Data de Criação: 15/07/2015
	Autor: Fábio Roberto Haydn	
	*/

	public function upArquivos($id,$dir,$tipo) {

		$mensagem = array();		
		
		$target_dir = $_SERVER['DOCUMENT_ROOT'] . '/sig/img/'.$dir;
		//$target_dir = $_SERVER['DOCUMENT_ROOT'].'/sig/PHP/trunk/sig/img/'.$dir.'/'; //<-- Desenv FRH
		
		$extensao = explode('.', $_FILES['file']['name']);
		$date = new DateTime();
		$target_dir = $target_dir . $date->getTimestamp() . '.' . $extensao[1];

		if (move_uploaded_file($_FILES["file"]["tmp_name"], $target_dir)) {        

			switch ($tipo) {
			    case 0:				// Upload do Arquivo de CPF da tela de Falecidos
			    $tmp = new Falecido($id);
			    $tmp->setArquivoCpf($date->getTimestamp() . '.' . $extensao[1]);
			    $tmp->store();

			    $messagem['error'] = 0;
			    $messagem['mensagem'] = 'Arquivo submetido com sucesso';
			    $messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
			    break;
			    case 1:				// Upload do Arquivo de Documento da tela de Falecidos
			    $tmp = new Falecido($id);
			    $tmp->setArquivoDocumento($date->getTimestamp() . '.' . $extensao[1]);
			    $tmp->store();

			    $messagem['error'] = 0;
			    $messagem['mensagem'] = 'Arquivo submetido com sucesso';
			    $messagem['arquivo'] = $date->getTimestamp() . '.' . $extensao[1];
			    break;
			}
		}else{
			$messagem['error'] = -1;
			$messagem['mensagem'] = 'Houve algum erro ocorreu com o arquivo';
		}
		fJSON::output($messagem);
	}


		/*
	Módulo: Escola
	Descrição: Busca as séries
	Método: GET
	URL: http://localhost/sig/api/index.php/serie/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSerie($id_curso = ""){


		$this->acessoApi();

		if($id_curso == ""){
			$query = "SELECT id,primeira_serie,ultima_serie from curso;";
		}
		else{
			$query = "SELECT id,primeira_serie,ultima_serie from curso WHERE id = ".$id_curso;
		}

		$serie = $this->_getDb()->query($query);
		$aSerie = array();

		foreach ($serie as $key => $value){

			$aSerie[] = $value;
		}

		$serie = $this->_getDb()->close();	

		if (count($aSerie) == 0) {
			$aSerie = array('error' => -1, 'mensagem' => "Nenhuma serie encontrada.");
		} else {
			$aSerie = array('error' => 0, 'serie' => $aSerie);
		}
		fJSON::output($aSerie);
	}



	/*
	Módulo: Escola
	Descrição: Busca os professores
	Método: GET
	URL: http://localhost/sig/api/index.php/professor/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getProfessor($id_curso = 0, $id_disciplina = 0){
		$this->acessoApi();

		$search = '';
		if($id_curso > 0){
			$search.= " and cp.id_curso = ".$id_curso;
		}
		if($id_disciplina > 0){
			$search.= " and cp.id_disciplina = ".$id_disciplina;
		}

		$query = "SELECT distinct
					p.id,p.nome 
				  FROM pessoa p 
				  INNER JOIN curso_professor cp ON p.id = cp.id_pessoa_professor AND p.professor=1 
				  WHERE 1
				  	 " .$search;

		$professor = $this->_getDb()->query($query);
		$aProfessor = array();

		foreach ($professor as $key => $value){
			$aProfessor[] = $value;
		}

		$professor = $this->_getDb()->close();	

		if (count($aProfessor) == 0) {
			$aProfessor = array('error' => -1, 'mensagem' => "Nenhum Professor encontrado.");
		} else {
			$aProfessor = array('error' => 0, 'professor' => $aProfessor);
		}
		fJSON::output($aProfessor);
	}


	/*
	Módulo: Escola
	Descrição: Carregar os cursos dependendo do tipo de usuário logado
	Método: GET
	URL: http://localhost/sig/api/index.php/listacombocursos
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaComboCurso($ano = ''){

		$this->acessoApi();

		$user = fSession::get('user');
		$user_id = $user['user']['id'];

		if($ano == ""){
			if(isset($user['user']['ano']))
			{
				$year = $user['user']['ano'];
			}else{ $year = date("Y"); }
		}
		else{
			$year = $ano;
		}


		$search = '';
		if(isset($user['user']['tipoUsuario'])){
			if($user['user']['tipoUsuario'] == 'professor'){
				$search = "AND cp.id_pessoa_professor = " . $user_id;
			}
		}

		$query = "SELECT DISTINCT 
						c.id,c.nome 
					 FROM curso c 
						 INNER JOIN curso_professor cp ON c.id = cp.id_curso 
						 INNER JOIN curso_complemento cc ON c.id = cc.id_curso
						 INNER JOIN etapa e ON e.id = cc.id_etapa
					 WHERE e.ano = ".$year ."
					 " .$search;

		$curso = $this->_getDb()->query($query);
		$aCurso = array();

		foreach ($curso as $key => $value){

			$aCurso[] = $value;
		}

		$curso = $this->_getDb()->close();	

		if (count($aCurso) == 0) {
			$aCurso = array('error' => -1, 'mensagem' => "Nenhuma ítem encontrado.");
		} else {
			$aCurso = array('error' => 0, 'cursos' => $aCurso);
		}

		fJSON::output($aCurso);
	}

	/*
	Módulo: Administrador
	Descrição: Mescla arquivos pdf
	Método: GET
	URL: http://localhost/sig/api/index.php/mesclararquivo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/07/2015
	Autor: Fábio da Silva
	Versão: 1.0
	*/

	public function getMesclaArquivo($full = false) {

		//include_once("pdfConcat.php");
		// $pdf = new concat_pdf();
		// $pdf->setFiles(array("../download/2015-06/288.pdf","../download/2015-06/288.pdf"));
		// $pdf->concat();
		// $pdf->Output("../download/2015-06/newpdf.pdf", "F");
		$url = '../download/2015-06/';
		$file = array($url .'288.pdf', 
			$url .'288.pdf');

		$file = implode(' ', $file);
		shell_exec('gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=novo.pdf ' .$file);
	}


	/*
	Módulo: Escola
	Descrição: Lista as turmas de um curso
	Método: GET
	URL: http://localhost/sig/api/index.php/listacomboturmas/<id_turma>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaComboTurmas($id_curso, $id_serie, $ano = ""){

		$this->acessoApi();

		$user = fSession::get('user');

		if(isset($user['user']['ano']))
		{			
			$year = $user['user']['ano'];
			$query = "select t.id,t.codigo,t.nome from turma t INNER JOIN etapa e ON t.id_etapa = e.id ".
			"WHERE e.ano = ".$year." AND t.id_curso = ".$id_curso." AND t.serie = ".$id_serie;			
		}
		else{
			if($ano == ""){ $year = date('Y'); }else{ $year = $ano; }		
			$query = "select t.id,t.codigo,t.nome from turma t INNER JOIN etapa e ON t.id_etapa = e.id ".
			"WHERE e.ano = ".$year." AND t.id_curso = ".$id_curso." AND t.serie = ".$id_serie;			
		}

		$turma = $this->_getDb()->query($query);
		$aTurma = array();

		foreach ($turma as $key => $value){

			$aTurma[] = $value;
		}

		$turma = $this->_getDb()->close();	

		if (count($aTurma) == 0) {
			$aTurma = array('error' => -1, 'mensagem' => "Nenhuma turma encontrada.");
		} else {
			$aTurma = array('error' => 0, 'turmas' => $aTurma);
		}

		fJSON::output($aTurma);
	}



	/*
	Módulo: Escola
	Descrição: Lista as disciplinas de um curso
	Método: GET
	URL: http://localhost/sig/api/index.php/listacombodisciplinas/<id_curso>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getListaComboDisciplinas($id_curso){

		$this->acessoApi();

		$user = fSession::get('user');

		$search = '';
		if(isset($user['user']['idTipoUsuario'])){
			if($user['user']['idTipoUsuario'] == 2){
				 $search.= " AND cp.id_pessoa_professor = ".$user['user']['id'];
			}
		}

		$query = "SELECT
					distinct
					d.id,d.nome 
				  from disciplina d 
				  LEFT OUTER JOIN curso_professor cp ON cp.id_disciplina = d.id 
				  where cp.id_curso = ".$id_curso ."
				  	" .$search;


		$disciplina = $this->_getDb()->query($query);
		$aDisciplina = array();

		foreach ($disciplina as $key => $value){

			$aDisciplina[] = $value;
		}

		$disciplina = $this->_getDb()->close();	

		if (count($aDisciplina) == 0) {
			$aDisciplina = array('error' => -1, 'mensagem' => "Nenhuma disciplina encontrada.");
		} else {
			$aDisciplina = array('error' => 0, 'disciplina' => $aDisciplina);
		}

		fJSON::output($aDisciplina);
	}


	/*
	Módulo: Escola
	Descrição: Lista o grid de disciplinas
	Método: GET
	URL: http://localhost/sig/api/index.php/griddisciplinas/<id_curso>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getGridDisciplinas($id_curso, $ano = 0, $serie = 0, $id_turma = 0, $id_disciplina = 0, $id_professor = 0){

		$this->acessoApi();

		$user = fSession::get('user');

		$query = '';
		$querySerie = '';
		$queryTurma = '';
		$queryDisc = '';
		$queryProf = '';

		if($user['user']['idTipoUsuario'] == 2){
			$flag = "AND p.professor=1 ";
			$queryProf = " AND cp.id_pessoa_professor = ". $user['user']['id'];
		}
		else if($id_professor != 0){
			$flag = "";
			$queryProf = " AND cp.id_pessoa_professor = ".$id_professor;
		}
		else{
			$flag = "";
			$queryProf = "";
		}

		if($ano <= 0){
			$ano = date('Y');
		}

		$select = "SELECT 
						d.id as id_disciplina, d.nome as disciplina, 
						p.nome as professor, p.id as id_professor, 
						cp.id_curso,
						t.nome as turma, t.id as id_turma 
					FROM curso_professor cp 
					INNER JOIN disciplina d ON cp.id_disciplina = d.id 
					INNER JOIN pessoa p ON cp.id_pessoa_professor = p.id ".$flag."
					INNER JOIN curso c ON cp.id_curso = c.id 
					INNER JOIN turma t ON c.id = t.id_curso 
					INNER JOIN etapa e ON t.id_etapa = e.id 
					WHERE c.id = ".$id_curso." AND e.ano = ".$ano;

		$and = $queryProf . " ORDER BY d.nome asc;";

		if($serie != 0){						
			$querySerie = " AND cp.serie = ".$serie;			
		}
		if($id_turma != 0){			
			$queryTurma = " AND t.id = ".$id_turma;
		}
		if($id_disciplina != 0){
			$queryDisc = " AND cp.id_disciplina = ".$id_disciplina;
		}

		$query = $select.$querySerie.$queryTurma.$queryDisc.$and;

		$disciplina = $this->_getDb()->query($query);
		$aDisciplina = array();

		foreach ($disciplina as $key => $value){

			$aDisciplina[] = $value;
		}

		$disciplina = $this->_getDb()->close();	

		if (count($aDisciplina) == 0) {
			$aDisciplina = array('error' => -1, 'mensagem' => "Nenhuma disciplina encontrada.");
		} else {
			$aDisciplina = array('error' => 0, 'disciplina' => $aDisciplina);
		}

		fJSON::output($aDisciplina);
	}

	/*
	Módulo: Administrador
	Descrição: Obter 'proprietario%responsavel'
	Método: GET
	URL: http://localhost/sig/api/index.php/getresponsaveljazigo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 21/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getResponsavelJazigo($id_pessoa = "", $full = false) {

		try{	
			$retorno = '';	
			$sqlq = "SELECT p.nome, IFNULL((select nome from pessoa where id=p.id_pessoa_responsavel_proprietario),'') responsavel FROM pessoa p WHERE p.id=".$id_pessoa;
			
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $ch => $val){ $retorno = $val['nome'].'%'.$val['responsavel']; }
			$rs = $this->_getDb()->close();

			// Retorno OK
			$arrMensagem = array('error' => 0, 'proprietario_responsavel' => $retorno);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {

			// Retorno KO
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro: " . $e);
			fJSON::output($arrMensagem);
		}
	}

	/*
	Módulo: Administrador
	Descrição: Gerar Relatório Sintético/Analítico de Eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/getrelatorioevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getRelatorioEvento($tipo_relatorio = 0, $tipo_evento = "", $nome_evento = "", $data_ini = "", $data_fim = "", $full = false) {

		// $tipo_relatorio = 0: Sintético, 1: Analítico

		try{	
			$retorno = '';	

			$sqls = "	SELECT 
			e.id, 
			te.descricao 							tipo_evento, 						
			e.title 								evento, 
			date_format(e.start,'%d/%m/%Y-%h:%i') 	data,
			ifnull(e.valor,0) 						valor, 
			count(ef.id) 							presenca, 
			ifnull((e.valor * count(ef.id)),0) 		valor_arrecadado
			FROM evento e 
			LEFT OUTER JOIN evento_frequencia ef ON e.id = ef.id_evento
			INNER JOIN tipo_evento te ON e.id_tipo_evento = te.id
			%W
			GROUP BY e.id, te.descricao,e.start, e.title,e.valor";

			$sqla = "	SELECT 
			te.descricao 			 			  	tipo_evento,
			e.title 				 			  	evento, 
			date_format(e.start,'%d/%m/%Y-%h:%i') 	data,						
			ifnull(e.valor,'') 		 				valor, 
			sum(1) 					 				presenca, 
			ifnull(p.nome,'Anônimo') 				pessoa, 
			ifnull(
				case when p.associado 	=1 then 'Associado' 	else
				case when p.beneficiario=1 then 'Beneficiário' 	else
				case when p.funcionario =1 then 'Funcionario' 	else
				case when p.fornecedor 	=1 then 'Fornecedor' 	else
				case when p.donatario 	=1 then 'Donatário' 	else
				case when p.associado 	=1 then 'Associado' 	end end end end end end,'') tipo_pessoa,
ifnull((select nome from pessoa where id=ef.id_pessoa_pagante),'') pessoa_pagante 
from evento e 						
left outer join evento_frequencia ef on e.id = ef.id_evento
inner join tipo_evento te on e.id_tipo_evento = te.id
left outer join pessoa p on p.id = ef.id_pessoa
%W
group by te.descricao, e.title, e.id, e.start, e.valor, p.nome
order by e.start, e.title";

$tipo_evento = urldecode($tipo_evento);
$nome_evento = urldecode($nome_evento);
$tipo_evento = ($tipo_evento!='Todos') ? $tipo_evento : '';
$nome_evento = ($nome_evento!='Todos') ? $nome_evento : '';

$data_ini 	 = urldecode($data_ini);
$data_fim 	 = urldecode($data_fim);

						//Montar a condição WHERE de acordo com os parâmetros enviados
if($tipo_evento!=''			   ){ $B1=true; $C1= "te.descricao like '%".$tipo_evento."%'"; }else{ $B1=false; $C1="";}
if($nome_evento!=''			   ){ $B2=true; $C2= "e.title like '%".$nome_evento."%'"; }else{ $B2=false; $C2="";}
if($data_ini!=''&&$data_fim!=''){ $B3=true; $C3= "replace(substring(e.start,1,10),'-','') between '".$data_ini."' and '".$data_fim."'"; }else{ $B3=false; $C3="";} 

						// Montar cláusula WHERE
if($B1||$B2||$B3){

	$c = '%W %C1 %E1 %C2 %E2 %C3';
	$c=str_replace("%W", ' WHERE ', $c);

	if($B1&&$B2){ $c=str_replace("%E1", ' AND ', $c); };
	if($B2&&$B3){ $c=str_replace("%E2", ' AND ', $c); };

	if($B1){ $c=str_replace("%C1", $C1, $c); };
	if($B2){ $c=str_replace("%C2", $C2, $c); };
	if($B3){ $c=str_replace("%C3", $C3, $c); };

	$c=str_replace("%W",  '', $c);
	$c=str_replace("%C1", '', $c);
	$c=str_replace("%C2", '', $c);
	$c=str_replace("%C3", '', $c);
	$c=str_replace("%E1", '', $c);
	$c=str_replace("%E2", '', $c);

	$condicao=$c;

	$sql = ($tipo_relatorio==0) ? $sqls : $sqla;
	$sql = str_replace("%W", $condicao, $sql);
}else{
	$sql = str_replace("%W", '', $sql);
}

						// Montar o recordset
$retorno = array();
$rs = $this->_getDb()->query($sql);

						// Montar objeto de retorno
foreach ($rs as $ch => $val){ $retorno[] = $val; };

						//Fechar Recordset
$rs = $this->_getDb()->close();

						// Retorno OK (Sem registros)
if (count($retorno) == 0) { 
	$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado.");
	fJSON::output($retorno);
	die();
}

if (!$full){ 
							// Retorno OK (JSON)
	$retorno = array( 'error' => 0, 'retorno_relatorio' => $retorno);
	fJSON::output($retorno);

}else{ 
							//Retorno OK (Objeto)
	return $retorno; 
}
}
catch (fValidationException $e) {

					// Retorno KO
	$arrMensagem = array('error' => -1, 'mensagem' => "Erro: " . $e);
	fJSON::output($arrMensagem);
}
}


	/*
	Módulo: Administrador
	Descrição: Gerar Relatório PDF Sintético/Analítico de Eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/gerarrelatoriopdf/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function gerarRelatorioPDF($parm_tipo_relatorio, $parm_tipo_evento, $parm_nome_evento, $parm_data_ini, $parm_data_fim){

		//LEGENDA:
		// $parm_tipo_relatorio = 0 --> SINTÉTICO
		// $parm_tipo_relatorio = 1 --> ANALÍTICO

		// Rotinas para relatório SINTÉTICO
		$aRelatorioEvento = $this->getRelatorioEvento($parm_tipo_relatorio, $parm_tipo_evento, $parm_nome_evento, $parm_data_ini, $parm_data_fim, true);
		
		$buffer  = '<meta charset=UTF-8><html><head>';

		// Estilos
		$buffer .= '<style type="text/css">
		table{ font-family: Arial;font-size: 12px;}
		table tr td{ border-top: none; border-left:none; border-right: none; border-color: #eaeaea;}
		.titulo{ padding: 10px; font-size: 15px; font-weight: bold;	background-color: #337ab7; color: #fff;}
		.bold{ font-weight: bold; color: #000000; background-color: #EEEEEE; text-align:center;}
		.total{	background-color: #6EB2DA; color: #fff;}
	</style>';		

		// Título
	$buffer .= '</head><body><table width=1024px border=1><tr><td align="center" colspan=8 class="titulo">RELAT&Oacute;RIO %N DE EVENTOS</td></tr>';
	$tmp = ($parm_tipo_relatorio==0) ? 'SINT&Eacute;TICO' : 'ANAL&Iacute;TICO';
	$buffer = str_replace('%N', $tmp, $buffer);


	if($parm_tipo_relatorio==0)
	{
			// Título das colunas (SINTÉTICO)
		$buffer .= '<tr><td align="center" class="bold">TIPO DO EVENTO</td>
		<td align="center" class="bold">EVENTO</td>
		<td align="center" class="bold">DATA</td>
		<td align="center" class="bold">VALOR</td>
		<td align="center" class="bold">PRESENÇA</td>
		<td align="center" class="bold">VALOR ARRECADADO</td></tr>';
	}		

	$tmp_tipo='';

	foreach ($aRelatorioEvento as $reg) {

		if($parm_tipo_relatorio==0)
		{
				// Registros (SINTÉTICO)
			$buffer .= '<tr><td align=left>'  .$reg['tipo_evento'] 		.'</td>
			<td align=left>'  .$reg['evento'] 			.'</td>
			<td align=center>'.$reg['data'] 			.'</td>
			<td align=center>'.$reg['valor'] 			.'</td>
			<td align=center>'.$reg['presenca'] 		.'</td>
			<td align=center>'.$reg['valor_arrecadado'] .'</td></tr>';
		}else{

				// Registros (ANALÍTICO)
			if($tmp_tipo!=$reg['tipo_evento'])
			{
				$buffer .= ($tmp_tipo!='') ? '<tr><td>&nbsp;</td></tr><tr><td>&nbsp;</td></tr>': '';
				$buffer .= '<tr><td align="left" class="bold">TIPO DO EVENTO:	</td><td align=left>'	.$reg['tipo_evento'].'</td></tr>
				<tr><td align="left" class="bold">EVENTO:			</td><td align=left>'	.$reg['evento']		.'</td></tr>
				<tr><td align="left" class="bold">DATA: 			</td><td align=left>'	.$reg['data']		.'</td></tr>

				<tr><td>&nbsp;</td></tr>
				<tr><td align="center" class="bold">NOME</td><td align="center" class="bold">TIPO</td></tr>';

				$tmp_tipo = $reg['tipo_evento'];
			}

			$buffer .= '<tr><td align="left">'.$reg['pessoa'].'</td>
			<td align="left">%P%A</td></tr>';

			$pp = $reg['pessoa_pagante'];
			$tp = $reg['tipo_pessoa'];
			$p  = $reg['pessoa'];
			$pr = $reg['presenca'];

			$tmp = ($pp!='') ? $tp.'<br><b>Associado Pagante:</b>'.$pp : $tp;
			$buffer = str_replace('%A', $tmp, $buffer);

			$tmp = ($p=='Anônimo') ? $pr : '';
			$buffer = str_replace('%P', $tmp, $buffer);				
		}				
	}

	$buffer .= '</table></body></html>';

	try
	{
		$tmp = 'Relatorio_';
		$tmp.= ($parm_tipo_relatorio==0) ? 'sintetico' : 'analitico';
		$tmp.= '.pdf';

	  		$pag = ($parm_tipo_relatorio==0) ? 'P' : 'L'; // P:Portrait, L:Landscape

	  		$html2pdf = new HTML2PDF($pag, 'A4', 'fr', true, 'UTF-8', 3);
	  		$html2pdf->pdf->SetDisplayMode('fullpage');
	  		$html2pdf->writeHTML($buffer);
	  		$html2pdf->Output($tmp,'D');
	  	}
	  	catch(HTML2PDF_exception $e){ echo $e; exit; }
	  }

	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/carregarevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/

	public function carregarEvento($id = "", $full = false) {

		$campos = array('id','description','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "evento";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	} 
	/*
	Módulo: Mesquita
	Descrição: Obter Lista de Tipos de Eventos para uso no Relatório de Eventos
	Método: GET
	URL: http://localhost/sig/api/index.php/carregartipoevento/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarTipoEvento($id = "", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "tipo_evento";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);

			foreach ($rs as $key => $value){

				$registro = array();
				foreach ($campos as $campo) {
					$registro = array_merge($registro, array($campo=>$value[$campo]));
				}					
				$retorno[] = $registro;
			}
			
			$rs = $this->_getDb()->close();

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, $tabela => $retorno );
			fJSON::output($retorno);
		}
	} 


	/*
	Módulo: Escola
	Descrição: Obter Lista de Turma e alunos
	Método: GET
	URL: http://localhost/sig/api/index.php/turmaaluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function sqlTurmaAluno($id_turma = 0, $campo) {
		//SQL utilizado no metodo getTurmaAluno()
		$sql = 'SELECT 
		' .$campo .'
		FROM turma tur
		INNER JOIN matricula mat on mat.id_turma = tur.id
		INNER JOIN pessoa pes on pes.id = mat.id_aluno';

		if ($id_turma > 0) {
			$sql.= ' where tur.id = '. $id_turma;
		}

		$sql.= ' ORDER BY nome ASC';

		return $sql;
	}

	public function getTurmaAluno($id_turma = 0, $full = false,$quantidade_aulas="") {

		$cpo_aluno = 'tur.id as id_turma, tur.id_curso, tur.nome as turma,
		mat.id as id_matricula,
		pes.id as id_pessoa, pes.codigo, pes.nome, pes.sexo, pes.foto';
		
		$sql = $this->sqlTurmaAluno($id_turma, $cpo_aluno);//Sql unico com a troca so dos campos para não ter que fazer dois iguais
														   //Pois o metodo vai uma vez no banco para trazer todos os alunos matriculados 
														   //Depois vai buscar todas as turmas dos alunos matriculados
		$db_aluno = $this->_getDb()->query($sql);

		$aChildren = array();
		$num = array();
		foreach ($db_aluno as $key => $value){
			if (array_key_exists($value['id_turma'], $num)) {
				//Verifica se o array existe para acrecentar o numero da chamada conforme a turma 
				//o array contem o numero de chada conforme a turma
				$num[$value['id_turma']]['chamada']++;
			}else{
				$num[$value['id_turma']]['chamada'] = 1;
			}

			/*$query2 = "SELECT `quantidade_aulas` FROM aulas WHERE id_turma = " .$id_turma;
			$qtdAulas = $this->_getDb()->query($query2);

			foreach($qtdAulas as $key2 => $value2){
				$quantidadeAulas = $value2['quantidade_aulas'];
			}*/

			$quantidadeAulas = $quantidade_aulas;
			
			$atribuir = array(
				'quantidade_aula' => $quantidadeAulas,
				'numero' => $num[$value['id_turma']]['chamada']
			);

			$aChildren[$value['id_turma']][] = array_merge($value, 
				$atribuir);
		}

		$db_aluno = $this->_getDb()->close();

		$cpo_turma = 'distinct
		tur.id as id_turma, tur.nome';

		$sql = $this->sqlTurmaAluno($id_turma, $cpo_turma); // retorno ao banco de dados para buscar as turmas

		$db = $this->_getDb()->query($sql);
		
		$aDb = array();
		foreach ($db as $key => $value){
			$atribuir = array(
				'alunos' => $aChildren[$value['id_turma']]
				);
			
			$aDb[] = array_merge($value,
								 $atribuir);// Mescla os dois array principais (turma e aluno) conforme a turma 
											// é onde coloca o aluno dentro da turma
		}

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhuma turma encontrada!"
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'turma_aluno' => $aDb
				);
		}

		if ($full == false) {
			//A variavel Full traz se falso o JSON
			//neste caso ela traz a mesma estrutura caso verdadeira mas em formato array
			$db = $this->_getDb()->close();
			fJSON::output($aDb);
		} else {
			$db = $this->_getDb()->close();
			return $aDb;
		}	
	}

	/*
	Módulo: Escola
	Descrição: Exibe as Ocorrências de Aulas
	Método: GET
	URL: http://localhost/sig/api/index.php/ocorrenciasaula/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 23/07/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	*/

	public function getOcorrenciasAula(){

		$this->acessoApi();
		
		$query = "SELECT * FROM `ocorrencia_aula`";

		$ocorrencia = $this->_getDb()->query($query);
		$aOcorrencia = array();

		foreach ($ocorrencia as $key => $value){

			$aOcorrencia[] = array(
				'id' => $value['id'],
				'descricao' => $value['descricao'],
				'ativo' => $value['ativo']
				);
		}

		$ocorrencia = $this->_getDb()->close();	

		if (count($aOcorrencia) == 0) {
			$aOcorrencia = array('error' => -1, 'mensagem' => "Nenhuma ocorrência encontrada.");
		} else {
			$aOcorrencia = array('error' => 0, 'ocorrencia' => $aOcorrencia);
		}
		fJSON::output($aOcorrencia);
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de Alunos conforme parcelas
	Método: GET
	URL: http://localhost/sig/api/index.php/parcelaresponsavel/<id_parcela>/<id_responsavel>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 15/07/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getParcelaAluno($id_aluno=0, $full = false) {

		$sql = "SELECT distinct
					alu.nome as aluno, alu.codigo,
					cur.nome as curso,
					par.id, par.id_aluno, par.id_status_parcela, par.ano, par.mes, 
					coalesce(par.numero_documento, '') as numero_documento, 
					par.data_vencimento, par.valor_bruto,
					par.valor_liquido, (par.valor_bruto - par.valor_liquido) as valor_desconto,
					res_alu.id_pessoa as id_responsavel,
					tip_car.descricao as tipo_carne, 
					'' as data_pagamento, '' as valor_pago, '' as boleto
				FROM parcela par
				INNER JOIN pessoa alu on alu.id = par.id_aluno and alu.aluno = 1
				INNER JOIN responsavel_aluno res_alu on res_alu.id_pessoa_aluno = par.id_aluno and res_alu.responsavel_financeiro = 1
				INNER JOIN tipo_carne tip_car on tip_car.id = par.id_tipo_carne
				INNER JOIN curso cur on cur.id = par.id_curso";

		if ($id_aluno > 0) {
			$sql.= " WHERE par.id_aluno = " .$id_aluno;
		}

		$db = $this->_getDb()->query($sql);
		$dbResult = $db;
		$db = $this->_getDb()->close();

		if ($full == false) {

			$aDb = array();		
			foreach ($dbResult as $key => $value) {
				if(strlen($value['mes']) == 1){
					$value['mes'] = "0" .$value['mes'];
				}

				$value['data_vencimento_formatada'] = implode('/', array_reverse(explode('-',substr($value['data_vencimento'], 0, 10))));
				$boleto = 'download/' .$value['ano'] .'-' .$value['mes'] .'/' .$value['id_responsavel'] .'.pdf';
				if(file_exists('../' .$boleto)){
					$value['boleto'] = $boleto;	
				}
				
				
				$aDb[] = $value;
			}

			if (count($aDb) == 0) {
				$aDb[] = array('error' => -1, 'mensagem' => "Nenhuma parcela encontrada.");
				fJSON::output($aDb);
				die;
			}

			$aDb = array(
				'error' => 0,
				'parcela_aluno' => $aDb
				);          

			fJSON::output($aDb);
		}
		else {
			return $aDb;
		}
	}

	/*
	Módulo: Escola
	Descrição: Busca Aulas
	Método: GET
	URL: http://localhost/sig/api/index.php/aulas/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getAulas($id="", $id_turma="",$fase="",$id_disciplina="",$id_pessoa_professor=""){

		$this->acessoApi();

		if($id > 0){
			$query = "SELECT * FROM aulas WHERE id = ".$id;
		}
		else{
			$query = "SELECT * FROM aulas ".
			"WHERE id_turma = ".$id_turma . " AND fase=" . $fase . " AND id_disciplina=" . $id_disciplina . " AND id_pessoa_professor=" . $id_pessoa_professor . " ORDER BY dia_mes";
		}	

		$aulas = $this->_getDb()->query($query);
		$aAulas = array();

		foreach ($aulas as $key => $value){

			$dia_mes = $value['dia_mes'];
			$dia_mes = explode('-', $dia_mes);
			$dia_mes = $dia_mes[2].'/'.$dia_mes[1].'/'.$dia_mes[0];

			$value['dia_mes'] = $dia_mes;

			$aAulas[] = $value;
		}

		$aulas = $this->_getDb()->close();	

		if (count($aAulas) == 0) {
			$aAulas = array('error' => -1, 'mensagem' => "Nenhuma aula encontrada.");
		} else {
			$aAulas = array('error' => 0, 'aulas' => $aAulas);
		}
		fJSON::output($aAulas);
	}



	/*
	Módulo: Escola
	Descrição: Cadastra conteúdo de aula
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrasalavirtual
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function postCadastrarConteudoAulas() {

		$data = json_decode(file_get_contents("php://input"));

		$user = fSession::get('user');

		$user_id = $user['user']['id'];

		$data_conteudo = explode('/', $data->dia_mes);
		$data_conteudo = $data_conteudo[2].'-'.$data_conteudo[1].'-'.$data_conteudo[0];

		if (property_exists($data, 'id')) {
			$conteudo = new Aulas($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "	Aula alterada com sucesso!";
			$alteracao=1;
		}else{
			$conteudo = new Aulas();
			$mensagem = "Aula incluída com sucesso!";
			$alteracao=0;
		}

		try {

			if(property_exists($data, 'id_turma')){
				$conteudo->setIdTurma($data->id_turma);
			}

			if(property_exists($data, 'id_disciplina')){
				$conteudo->setIdDisciplina($data->id_disciplina);
			}

			if(property_exists($data, 'id_pessoa_professor')){
				$conteudo->setIdPessoaProfessor($data->id_pessoa_professor);
			}

			if(property_exists($data, 'fase')){
				$conteudo->setFase($data->fase);
			}

			if (property_exists($data, 'dia_mes')){
				$conteudoAnt = '';
				if($alteracao==1){
					$conteudoAnt = $conteudo->getDiaMes();
				}
				$conteudo->setDiaMes($data_conteudo);
				$this->setAuditoria('Conteúdo Aulas', 'Data', $conteudoAnt, $data->dia_mes);
			}

			if (property_exists($data, 'quantidade_aulas')){
				$conteudoAnt = '';
				if($alteracao==1){
					$conteudoAnt = $conteudo->getQuantidadeAulas();
				}
				$conteudo->setQuantidadeAulas($data->quantidade_aulas);
				$this->setAuditoria('Conteúdo Aulas', 'Quantidade Aulas', $conteudoAnt, $data->quantidade_aulas);
			}

			if (property_exists($data, 'conteudo')){
				$conteudoAnt = '';
				if($alteracao==1){
					$conteudoAnt = $conteudo->getConteudo();
				}
				$conteudo->setConteudo($data->conteudo);
				$this->setAuditoria('Conteúdo Aulas', 'Conteúdo', $conteudoAnt, $data->conteudo);
			}

			if (property_exists($data, 'tarefa_casa')){
				$conteudoAnt = '';
				if($alteracao==1){
					$conteudoAnt = $conteudo->getTarefaCasa();
				}
				$conteudo->setTarefaCasa($data->tarefa_casa);
				$this->setAuditoria('Conteúdo Aulas', 'Tarefa', $conteudoAnt, $data->tarefa_casa);
			}


			$data_cadastro = date('Y-m-d H:i:s');
			$conteudo->setDataCadastro($data_cadastro);
			$conteudo->setAtivo(1);

			if ($alteracao!=1) {
				$aSearch = array();

				$aSearch['dia_mes='] = $data_conteudo;
				$aSearch['id_turma='] = $data->id_turma;
				$aSearch['id_disciplina='] = $data->id_disciplina;
				$aSearch['id_pessoa_professor='] = $data->id_pessoa_professor;
				$aSearch['fase='] = $data->fase;		
				$countConteudo = fRecordset::build('Aulas', $aSearch);

				if($countConteudo->count() > 0){
					$arrMensagem = array('error' => -1, 'mensagem' => "Erro na inclusão. Aula já cadastrada");
					fJSON::output($arrMensagem);
					die();            
				}else{
					$conteudo->store();
				}     
			} else {
				$conteudo->store();
			}

			$id_conteudo = $conteudo->getId();

			$arrMensagem = array('error' => 0, 'id_conteudo' => $id_conteudo, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


		/*
	Módulo: Escola
	Descrição: Excluir conteúdo de uma aula
	Método: POST
	URL: http://localhost/sig/api/index.php/excluirconteudoaula/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function excluirConteudoAula() {
		$data = json_decode(file_get_contents("php://input"));
		try {
			$aulas = new Aulas($data->id);
			$aulas->delete();
			$arrMensagem = array('error' => 0, 'mensagem' => "Aula excluida com sucesso");
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getListaAulasTurma($id=""){

		$this->acessoApi();
		$query = "SELECT id_turma, quantidade_aulas FROM aulas WHERE id = ".$id;

		$aulas = $this->_getDb()->query($query);

		$id_turma = '';

		foreach ($aulas as $key => $value){
			$id_turma = $value['id_turma'];
			$quantidade_aulas = $value['quantidade_aulas'];
		}
		$aTurma = $this->getTurmaAluno($id_turma, true,$quantidade_aulas);

		$aulas = $this->_getDb()->close();	

		if (count($aTurma) == 0) {
			$aTurma = array('error' => -1, 'mensagem' => "Nenhuma aula encontrada.");
		} else {
			$aTurma = array('error' => 0, 'aulas' => $aTurma);
		}
		fJSON::output($aTurma);
	}



	/*
	Módulo: Escola
	Descrição: Cadastra na tabela nota
	Método: POST
	URL: http://localhost/sig/api/index.php/notaavaliacao
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/07/2015
	Autor: Fabio
	Versão: 1.0
	*/
	public function postNotaAvaliacao() {

		$data = json_decode(file_get_contents("php://input"));

		$mensagem = "As notas foram salvas com sucesso!";
		$alteracao=0;

		try {

			foreach ($data as $key => $value){
				$aSearch = array();
				$aSearch['fase='] = $value->fase;
				$aSearch['id_aluno='] = $value->id_aluno;
				$aSearch['id_componente_formula='] = $value->id_componente_formula;
				$aSearch['id_componente='] = $value->id_componente;
				$aSearch['id_curso='] = $value->id_curso;
				$aSearch['id_turma='] = $value->id_turma;
				$aSearch['id_disciplina='] = $value->id_disciplina;
				$countNota = fRecordset::build('Nota', $aSearch);

				if($countNota->count() > 0){
					$nota = new Nota($countNota[0]->getId());
				}else{
					$nota = new Nota();
				}

				if(property_exists($value, 'fase')){
					$nota->setFase($value->fase);
				}
				if(property_exists($value, 'id_aluno')){
					$nota->setIdAluno($value->id_aluno);
				}
				if(property_exists($value, 'id_componente_formula')){
					$nota->setIdComponenteFormula($value->id_componente_formula);
				}
				if(property_exists($value, 'id_componente')){
					$nota->setIdComponente($value->id_componente);
				}
				if(property_exists($value, 'id_curso')){
					$nota->setIdCurso($value->id_curso);
				}
				if(property_exists($value, 'id_turma')){
					$nota->setIdTurma($value->id_turma);
				}
				if(property_exists($value, 'id_disciplina')){
					$nota->setIdDisciplina($value->id_disciplina);
				}
				if(property_exists($value, 'nota')){
					$nota->setNota($value->nota);
				}

				$nota->store();
			}

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	/*	
	Módulo: Escola
	Descrição: Busca Notas
	Método: GET
	URL: http://localhost/sig/api/index.php/notaavaliacao/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/07/2015
	Autor: fabio S da Silva
	Versão: 1.0
	*/

	public function getNotaAvaliacao($id_curso="", $id_turma="", $fase="", $full=false){
		$this->acessoApi();
		$search = '';

		if($id_curso != "" && $id_turma != "" && $fase != ""){
			$search = " WHERE id_curso = " .$id_curso ." 
			and id_turma = " .$id_turma ." 
			and fase = '" .$fase ."'";
		}		

		$query = "SELECT 
		* 
		FROM nota " .$search;

		$db = $this->_getDb()->query($query);
		$aDb = array();

		foreach ($db as $key => $value){
			$aDb[] = $value;
		}

		if (count($aDb) == 0) {
			$aDb = array('error' => -1, 'mensagem' => "Nenhuma nota encontrada.");
		} else {
			$aDb = array('error' => 0, 'nota_avaliacao' => $aDb);
		}
		
		if ($full == false) {
			$db = $this->_getDb()->close();
			fJSON::output($aDb);
		} else {
			$db = $this->_getDb()->close();
			return $aDb;
		}	
	}

	/*	
	Módulo: Escola
	Descrição: Busca Notas Detalhe
	Método: GET
	URL: http://localhost/sig/api/index.php/notadetalhe/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/07/2015
	Autor: fabio S da Silva
	Versão: 1.0
	*/

	public function getNotaDetalhe($id_curso=0, $id_turma=0, $full=false){
		$this->acessoApi();
		$search = '';

		if($id_curso > 0){
			$search.= " and cur.id = " .$id_curso;
		}		

		if($id_turma > 0){
			$search.= " and tur.id = " .$id_turma;
		}		

		$query = "SELECT 
		distinct
		cur.id as id_curso,
		cur.nome as curso,
		com_det.id_componente_formula,
		com_for.id as id_componente,
		com_for.id_arredondamento,
		com_for.descricao as componente,
		com_for.abreviatura,
		com_for.ordem,
		com_for.recuperacao,
		com_for.fase,
		com_for.formula,
		com_for.valor_minimo_aprovacao,
		com_for.valor_maximo
		FROM componente_detalhe com_det
		INNER JOIN componente com_for on com_for.id = com_det.id_componente_formula
		INNER JOIN curso_nota cur_not on cur_not.id_componente = com_for.id
		INNER JOIN curso cur on cur.id = cur_not.id_curso
		INNER JOIN turma tur on tur.id_curso = cur.id
		WHERE com_for.ativo = 1
		" .$search ."

		UNION

		SELECT 
		distinct
		null as id_curso,
		'' as curso,
		com_det.id_componente_formula,
		com_ite.id as id_componente,
		com_ite.id_arredondamento,
		com_ite.descricao as componente,
		com_ite.abreviatura,
		com_ite.ordem,
		com_ite.recuperacao,
		com_ite.fase,
		com_ite.formula,
		com_ite.valor_minimo_aprovacao,
		com_ite.valor_maximo
		FROM componente_detalhe com_det
		INNER JOIN componente com_ite on com_ite.id = com_det.id_componente_item
		WHERE com_ite.ativo = 1

		ORDER BY ordem ASC";

		$db = $this->_getDb()->query($query);
		
		$aComponente = array();
		$aComponenteDetalhe = array();
		foreach ($db as $key => $value){
			if($value['formula'] != null){
				$aComponente[] = $value;	
				$aComponenteDetalhe[$value['id_componente_formula']] = array();
			}else{
				$aComponenteDetalhe[$value['id_componente_formula']][] = $value;
			}
		}

		$aDb = array();

		foreach ($aComponente as $key => $value){
			$value['componente_detalhe'] = $aComponenteDetalhe[$value['id_componente_formula']];
			$aDb[] = $value;
		}

		if (count($aDb) == 0) {
			$aDb = array('error' => -1, 'mensagem' => "Nenhuma nota encontrada.");
		} else {
			$aDb = array('error' => 0, 'nota_detalhe' => $aDb);
		}
		
		if ($full == false) {
			$db = $this->_getDb()->close();
			fJSON::output($aDb);
		} else {
			$db = $this->_getDb()->close();
			return $aDb;
		}	
	}

	public function delDonatario() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id_pessoa='] = $data;

		$aSearch2 = array();
		$aSearch2['id_pessoa_beneficiario='] = $data;

	//Deleta Todos os Documentos do Beneficiario na tabela de Documento
		$resultDocumento = fRecordSet::build('Documento', $aSearch);
		foreach ($resultDocumento->getRecords() as $key => $value) {
			$documento = new Documento($value->getId());
			$documento->delete();
		}    

	//Deleta Todos os Telefones do Beneficiario na tabela de Documento
		$resultTelefone = fRecordSet::build('Telefone', $aSearch);
		foreach ($resultTelefone->getRecords() as $key => $value) {
			$telefone = new Telefone($value->getId());
			$telefone->delete();
		} 

		$resultBeneficiario = fRecordSet::build('Beneficiario', $aSearch2);
		foreach ($resultBeneficiario->getRecords() as $key => $value) {
			$beneficiario = new Beneficiario($value->getId());    
			$beneficiario->delete();		 
		}

	//Deleta o Beneficiario da Tabela de Pessoa
		$pessoa = new Pessoa($data);    
		$pessoa->delete();


		$mensagem = "Donatário excluído com sucesso!";        

		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();        

	}

	/*
	Módulo: Acadêmico
	Descrição: Obter Lista de Turmas por Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/carregarcursoturma/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarCursoTurma($id_curso = "", $full = false) {

		$campos = array('c.id id_curso','c.nome curso','t.id id_turma','t.nome turma');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "curso c INNER JOIN turma t ON c.id = t.id_curso";
		$condicao = ($id_curso!="") ? "WHERE c.id = ".$id_curso : "";
		$ordem 	  = "c.nome,t.nome";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$retorno1 = array();

		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){ 
			if(!array_key_exists($value['id_curso'], $retorno1)){
				$retorno1[$value['id_curso']] = array();
			}
			$retorno1[$value['id_curso']][] = $value; 
		}

		foreach ($rs as $key => $value){ 
			$verifica = $this->search_array($retorno, 'id_curso', $value['id_curso']);//Verifica se ja existe o registro, para não repetir
			if(count($verifica) == 0){
				$t = array(
					'turmas' => $retorno1[$value['id_curso']]
					);

				$retorno[] =  array_merge ($value, $t);
			}
		}

		$rs = $this->_getDb()->close();
		
		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}

	/*
	Módulo: Escola
	Descrição: Cadastrar Comunicado
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastrarcomunicado/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 29/07/2015
	Autor: Fabio Roberto Haydn
	*/
	public function cadastrarComunicado() {

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {			
			$rs = new Comunicado($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$msg = "Comunicado alterado com sucesso!";
			$alt = 1;
			$id = $data->id;
		}else{			
			$rs = new Comunicado();
			$msg = "Comunicado incluído com sucesso!";
			$alt = 0;
			$id = "";
		}

		try {		
			
			if (property_exists($data, 'descricao')){
				$rs->setDescricao($data->descricao);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getDescricao(); }
				$this->setAuditoria('Comunicado', 'descricao', $tmp, $data->descricao, $id);
			}
			if (property_exists($data, 'data_envio')){
				
				$rs->setDataEnvio($data->data_envio);
			}
			if (property_exists($data, 'destino')){
				$rs->setDestino($data->destino);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getDestino(); }
				$this->setAuditoria('Comunicado', 'destino', $tmp, $data->destino, $id);
			}
			if (property_exists($data, 'email_resposta')){
				$rs->setEmailResposta($data->email_resposta);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getEmailResposta(); }
				$this->setAuditoria('Comunicado', 'email_resposta', $tmp, $data->email_resposta, $id);
			}
			if (property_exists($data, 'exibir_turma')){
				$rs->setExibirTurma($data->exibir_turma);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getExibirTurma(); }
				$this->setAuditoria('Comunicado', 'exibir_turma', $tmp, $data->exibir_turma, $id);
			}
			if (property_exists($data, 'publicado')){
				$rs->setPublicado($data->publicado);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getPublicado(); }
				$this->setAuditoria('Comunicado', 'publicado', $tmp, $data->publicado, $id);
			}
			if (property_exists($data, 'comunicado')){
				$rs->setComunicado($data->texto);
				$tmp = '';
				if($alt==1){ $tmp = $rs->getComunicado(); }
				$this->setAuditoria('Comunicado', 'comunicado', $tmp, $data->texto, $id);
			}					

			/* ---FRH - Rotina para controle de existentes ----------------------------------------- */
			
			if($alt != 1){

				$aSearch = array();
				$aSearch['descricao='] 	= $data->descricao;

				$ct = fRecordset::build('Comunicado',$aSearch);

				if($ct->count() > 0){
					$msg = array('error' => -1, 'mensagem' => "Registro existente");
					fJSON::output($msg);
					die();
				}

			}else{

				// Apagar registros em comunicado_turma para gravar os novos logo abaixo
				$pesq = array();
				$pesq['id_comunicado='] = $data->id;
				$rsct_p = fRecordSet::build('ComunicadoTurma', $pesq);
				foreach ($rsct_p->getRecords() as $key => $value) {
					$rsct_d = new ComunicadoTurma($value->getId());
					$rsct_d->delete();
				}
			}

			$rs->store(); 
			$id_comunicado = $rs->getId();

			foreach ($data->id_turmas as $value) {
				$rsct = new ComunicadoTurma();
				$rsct->setIdComunicado($id_comunicado);
				$rsct->setIdTurma($value);
				$rsct->store();
			}

			/* ------------------------------------------------------------------------------------------------- */
			
			$msg = array('error' => 0, 'id' => $id_comunicado, 'mensagem' => $msg);
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro:".$e);
			fJSON::output($msg);
			die();
		}
	}

	/*
	Módulo: Acadêmico
	Descrição: Obter Lista de Turmas por Curso
	Método: GET
	URL: http://localhost/sig/api/index.php/carregarcursoturma/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/07/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarComunicado($id = "", $full = false) {

		$campos = array('ct.id_turma','c.id','c.descricao','c.data_envio','c.destino','c.email_resposta','c.exibir_turma','c.publicado','c.comunicado texto');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "comunicado c INNER JOIN comunicado_turma ct ON c.id = ct.id_comunicado";
		$condicao = ($id!="") ? "WHERE c.id = ".$id : "";
		$ordem 	  = "c.id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$retorno1 = array();

		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){ 
			if(!array_key_exists($value['id'], $retorno1)){
				$retorno1[$value['id']] = array();
			}
			$retorno1[$value['id']][] = $value; 
		}

		foreach ($rs as $key => $value){ 
			$verifica = $this->search_array($retorno, 'id', $value['id']);//Verifica se ja existe o registro, para não repetir
			if(count($verifica) == 0){
				$t = array(
					'comunicado_turma' => $retorno1[$value['id']]
					);

				$retorno[] =  array_merge ($value, $t);
			}
		}

		$rs = $this->_getDb()->close();
		
		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}

		/*
	Módulo: Escola
	Descrição: Marca falta dos alunos
	Método: POST
	URL: http://localhost/sig/api/index.php/salvafaltaaluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function salvaFaltaAluno() {

		$data = json_decode(file_get_contents("php://input"));
		//$falta = new FaltaAluno($data->id_aluno);

		$aSearch = array();

		$aSearch['id_aulas='] = $data->id_aulas;
		$aSearch['id_aluno='] = $data->id_aluno;

		$aFaltas = fRecordset::build('FaltaAluno', $aSearch);

		if(count($aFaltas) > 0){
			foreach ($aFaltas as $key => $value) {
				$falta = new FaltaAluno($value->getId());
				$falta->delete();
			}
			try{
				if(property_exists($data, 'qtd')){
					for($i = 0; $i < $data->qtd; $i++){
						$falta = new FaltaAluno();
						if(property_exists($data, 'id_aulas')){
							$falta->setIdAulas($data->id_aulas);
						}
						if(property_exists($data, 'id_aluno')){
							$falta->setIdAluno($data->id_aluno);
						}
						$falta->store();						
					}
					$id_falta_aluno = $falta->getIdAluno();
					$arrMensagem = array('error' => 0, 'id_falta_aluno' => $id_falta_aluno, 'tipo' => 'info', 'mensagem' => 'Falta alterada com sucesso.');
					fJSON::output($arrMensagem);
					die();
				}

			}
			catch (fValidationException $e){
				$error = $this->errorMessage("Erro na inclusão",$e);
				$arrMensagem = array('error' => -1, 'mensagem' => $error);
				fJSON::output($arrMensagem);
				die();
			}
		}
		else{			
			try{
				if(property_exists($data, 'qtd')){
					for($i = 0; $i < $data->qtd; $i++){
						$falta = new FaltaAluno();
						if(property_exists($data, 'id_aulas')){
							$falta->setIdAulas($data->id_aulas);
						}
						if(property_exists($data, 'id_aluno')){
							$falta->setIdAluno($data->id_aluno);
						}
						$falta->store();						
					}
					$id_falta_aluno = $falta->getIdAluno();
					$arrMensagem = array('error' => 0, 'id_falta_aluno' => $id_falta_aluno, 'tipo' => 'sucesso', 'mensagem' => 'Falta incluída com sucesso.');
					fJSON::output($arrMensagem);
					die();
				}

			}
			catch (fValidationException $e){
				$error = $this->errorMessage("Erro na inclusão",$e);
				$arrMensagem = array('error' => -1, 'mensagem' => $error);
				fJSON::output($arrMensagem);
				die();
			}
		}

		foreach ($aFaltas as $key => $value) {
			$falta->delete($value->getId());
		}
	}



		/*
	Módulo: Escola
	Descrição: Busca Aulas
	Método: GET
	URL: http://localhost/sig/api/index.php/aulas/<id>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getSelectFaltas($id_aula, $id_aluno){

		$this->acessoApi();

		$query = "select count(1) as quantidade_faltas from falta_aluno where id_aulas=".$id_aula." and id_aluno=".$id_aluno.";";

		$faltas = $this->_getDb()->query($query);
		$aFaltas = array();

		foreach ($faltas as $key => $value){

			$aFaltas[] = $value;
		}

		$faltas = $this->_getDb()->close();	

		if (count($aFaltas) == 0) {
			$aFaltas = array('error' => -1, 'mensagem' => "Nenhuma falta encontrada.");
		} else {
			$aFaltas = array('error' => 0, 'faltas' => $aFaltas);
		}
		fJSON::output($aFaltas);
	}




		/*
	Módulo: Escola
	Descrição: Salva as ocorrencias
	Método: POST
	URL: http://localhost/sig/api/index.php/salvaocorrenciaaluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function postOcorrenciaAluno() {

		$data = json_decode(file_get_contents("php://input"));

		try {

			$aSearch = array();
			$aSearch['id_aulas='] = $data->id_aula;
			$aSearch['id_aluno='] = $data->id_aluno;
			$aSearch['id_ocorrencia_aula='] = $data->id_ocorrencia_aula;
			$countOcorrencia = fRecordset::build('OcorrenciaAluno', $aSearch);

			if ($countOcorrencia->count() > 0) {
				$ocorrencia = new OcorrenciaAluno($countOcorrencia[0]->getId());
				$ocorrencia->delete();
				$id = '';
				$arrMensagem = array('error' => 0, 'id' => $id, 'tipo' => 'info', 'mensagem' => 'Ocorrencia removida com sucesso');
			}else{
				$ocorrencia = new OcorrenciaAluno();

				if(property_exists($data, 'id_aula')){
					$ocorrencia->setIdAulas($data->id_aula);
				}
				if(property_exists($data, 'id_aluno')){
					$ocorrencia->setIdAluno($data->id_aluno);
				}
				if(property_exists($data, 'id_ocorrencia_aula')){
					$ocorrencia->setIdOcorrenciaAula($data->id_ocorrencia_aula);
				}

				$ocorrencia->store();	

				$id = $ocorrencia->getId();
				$arrMensagem = array('error' => 0, 'id' => $id, 'tipo' => 'sucesso', 'mensagem' => 'Ocorrencia incluída com sucesso');
			}
			
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}



	public function getListaOcorrenciaAlunos($id=""){

		$this->acessoApi();
		$query = "SELECT * FROM ocorrencia_aluno WHERE id_aulas = ".$id." order by id_ocorrencia_aula";

		$ocorrencia = $this->_getDb()->query($query);

		$aOcorrencia = array();

		foreach ($ocorrencia as $key => $value){
			$aOcorrencia[$value['id_aluno']]['ocorrencia'][] = $value;
			$aOcorrencia[$value['id_aluno']]['ocorrencias'][$value['id_ocorrencia_aula']] = true;
		}

		$ocorrencia = $this->_getDb()->close();	

		if (count($aOcorrencia) == 0) {
			$aOcorrencia = array('error' => -1, 'mensagem' => "Nenhuma ocorrencia.");
		} else {
			$aOcorrencia = array('error' => 0, 'ocorrencias' => $aOcorrencia);
		}
		fJSON::output($aOcorrencia);
	}


	/*
	Módulo: Acadêmico
	Descrição: Cadastrar Atribuição
	Método: GET
	URL: http://localhost/sig/api/index.php/cadastraratribuicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function cadastrarAtribuicao(){

		$userSes = fSession::get('user');
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {			
			$rs = new SalaVirtualAtribuicao($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$msg = "Alterada com sucesso!";
			$alt = 1;
			$id = $data->id;
		}else{			
			$rs = new SalaVirtualAtribuicao();
			$msg = "Incluída com sucesso!";
			$alt = 0;
			$id = "";
		}

		try {
			
			if (property_exists($data, 'id_sala_virtual')){ $rs->setIdSalaVirtual($data->id_sala_virtual);	};
			if (property_exists($data, 'curso'			)){ $rs->setIdCurso($data->curso); 					};
			if (property_exists($data, 'serie'			)){ $rs->setIdSerie($data->serie); 					};
			if (property_exists($data, 'turma'			)){ $rs->setIdTurma($data->turma); 					};
			if (property_exists($data, 'disciplina'		)){ $rs->setIdDisciplina($data->disciplina); 		};

			$rs->store(); 
			$id_atribuicao = $rs->getId();

			$pesq = array();
			$pesq['id_atribuicao='] = $id_atribuicao;
			$rsct_p = fRecordSet::build('SalaVirtualAtribuicaoItem', $pesq);
			foreach ($rsct_p->getRecords() as $key => $value) {
				$rsct_d = new SalaVirtualAtribuicaoItem($value->getId());
				$rsct_d->delete();
			}

			foreach ($data->sala_virtual_atribuicao_item as $value) {
				$rsct = new SalaVirtualAtribuicaoItem();				
				$rsct->setIdAtribuicao($id_atribuicao);
				$rsct->setIdTurma($value->id_turma);
				$rsct->setIdDisciplina($value->id_disciplina);
				$rsct->store();
			}

			/* ------------------------------------------------------------------------------------------------- */
			
			$msg = array('error' => 0, 'id' => $id_atribuicao, 'mensagem' => $msg);
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro:".$e);
			fJSON::output($msg);
			die();
		}
	}

	/*
	Módulo: Acadêmico
	Descrição: Carregar Atribuição
	Método: GET
	URL: http://localhost/sig/api/index.php/carregaratribuicao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarAtribuicao($id_sala_virtual = "", $full = false){

		$campos = array('sva.id','sva.id_sala_virtual','sva.id_curso','sva.id_turma','sva.id_serie','sva.id_disciplina','svai.id_turma','svai.id_disciplina');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "sala_virtual_atribuicao sva INNER JOIN sala_virtual_atribuicao_item svai ON sva.id = svai.id_atribuicao";
		$condicao = ($id_sala_virtual!="") ? "WHERE sva.id_sala_virtual = ".$id_sala_virtual : "";
		$ordem 	  = "sva.id_sala_virtual";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();
		$retorno1 = array();

		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){ 
			if(!array_key_exists($value['id'], $retorno1)){
				$retorno1[$value['id']] = array();
			}
			$retorno1[$value['id']][] = $value; 
		}

		foreach ($rs as $key => $value){ 
			$verifica = $this->search_array($retorno, 'id', $value['id']);//Verifica se ja existe o registro, para não repetir
			if(count($verifica) == 0){
				$t = array(
					'sala_virtual_atribuicao_item' => $retorno1[$value['id']]
					);

				$retorno[] =  array_merge ($value, $t);
			}
		}

		$rs = $this->_getDb()->close();
		
		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}



	/*
	Módulo: Acadêmico
	Descrição: Carregar Sala Virtual
	Método: GET
	URL: http://localhost/sig/api/index.php/carregarsalavirtual/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarSalaVirtual($id_sala_virtual = "", $full = false){

		$campos = array('id_categoria_sala_virtual','titulo','descricao_interna','descricao_aluno','data_publicacao','data_entrega','publicado');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "sala_virtual";
		$condicao = ($id_sala_virtual!="") ? "WHERE id = ".$id_sala_virtual : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();		
		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){ $retorno[] = $value; }

		$rs = $this->_getDb()->close();
		
		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}
	/*
	Módulo: Acadêmico
	Descrição: Carregar Atribuição
	Método: GET
	URL: http://localhost/sig/api/index.php/carregarsalavirtualitem/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function carregarSalaVirtualItem($id_sala_virtual = "", $full = false){

		$campos = array('titulo','id_tipo_itens_publicacao','publicar_titulo','texto_artigo','codigo_objeto_video');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "sala_virtual_item";
		$condicao = ($id_sala_virtual!="") ? "WHERE id_sala_virtual = ".$id_sala_virtual : "";
		$ordem 	  = "id_sala_virtual";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();		
		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){ $retorno[] = $value; }

		$rs = $this->_getDb()->close();
		
		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}

	/*
	Módulo: Acadêmico
	Descrição: Cadastrar Avaliação Descritiva (Módulo Acadêmico -> Diário de Classe -> ícone lápis)
	Método: POST
	URL: http://localhost/sig/api/index.php/cadastraravaliacaodescritiva/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function cadastrarAvaliacaoDescritiva(){
		
		$data = json_decode(file_get_contents("php://input"));

		try {

			print_r($data);die;

			$ida 		= $data->id_aluno;
			$idc 		= $data->id_curso;
			$idt 		= $data->id_turma;
			$fase 		= $data->fase[0]->fase; 
			$avaliacao 	= $data->avaliacao;

			$pesq = array();
			$pesq['id_aluno='] = $ida;
			$pesq['id_curso='] = $idc;
			$pesq['id_turma='] = $idt;
			$pesq['fase='] 	   = $fase;
			
			$rsct_p = fRecordSet::build('AvaliacaoDescritiva', $pesq);
			foreach ($rsct_p->getRecords() as $key => $value) {
				$rsct_d = new AvaliacaoDescritiva($value->getId());
				$rsct_d->delete();
			}
			
			$rs = new AvaliacaoDescritiva();
			$rs->setIdAluno($ida);
			$rs->setIdCurso($idc);
			$rs->setIdTurma($idt);
			$rs->setFase($fase);
			$rs->setAvaliacao($avaliacao);
			$rs->store();

			$id_avaliacao_descritiva = $rs->getId();

			$msg = array('error' => 0, 'id' => $id_avaliacao_descritiva, 'mensagem' => 'Avaliação salva com sucesso!');
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro:".$e);
			fJSON::output($msg);
			die();
		}

	}
	
	/*
	Módulo: Acadêmico
	Descrição: Carregar Avaliação Descritiva (Módulo Acadêmico -> Diário de Classe -> ícone lápis)
	Método: GET
	URL: http://localhost/sig/api/index.php/carregaravaliacaodescritiva/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function carregarAvaliacaoDescritiva($id = "", $full = false){


		$sqlq= "SELECT
		p.foto foto,
		p.nome aluno,
		c.nome curso,
		t.nome turma,
		CONCAT(m.serie,'º Série') serie,
		ad.avaliacao,
		ad.fase,
		c.id id_curso,
		t.id id_turma
		FROM pessoa p
		LEFT JOIN matricula m ON p.id=m.id_aluno
		LEFT JOIN curso c ON m.id_curso=c.id
		LEFT JOIN turma t ON m.id_turma=t.id
		LEFT JOIN etapa e ON e.ano = YEAR(CURDATE())
		LEFT JOIN avaliacao_descritiva ad ON p.id=ad.id_aluno
		WHERE p.id = ".$id." ORDER BY ad.fase;";	
		
		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}


	/*
	Módulo: Acadêmico
	Descrição: Carregar Dados extras do usuário Logado
	Método: GET
	URL: http://localhost/sig/api/index.php/carregardadosusuario/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function carregarDadosUsuario($id_pessoa = "", $full = false){

		$sqlq= "SELECT 
		p.nome, 
		f.descricao funcao,
		e.nome entidade, 
		e.logradouro,
		e.numero,
		e.bairro,
		e.complemento,
		e.cidade,
		e.estado,
		e.codigo_postal cep,
		e.logotipo,
		e.telefone
		FROM pessoa p 
		LEFT JOIN entidade_pessoa ep ON ep.id_pessoa=p.id
		LEFT JOIN entidade e ON ep.id_entidade=e.id
		LEFT JOIN funcao f ON p.id_funcao = f.id
		WHERE p.id = ".$id_pessoa.";";
		
		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}
	/*
	Módulo: Acadêmico
	Descrição: Carregar Dados extras do usuário Logado
	Método: GET
	URL: http://localhost/sig/api/index.php/carregardadosanoletivo/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function carregarDadosAnoLetivo($full = false){

		$sqlq= "SELECT 
		e.id, 
		e.ano, 
		e.descricao, 
		se.descricao situacao 
		FROM etapa e 
		LEFT JOIN situacao_etapa se ON se.id=e.id_situacao_etapa
		WHERE e.ano = Year(now());";
		
		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}

	/*
	Módulo: Escola
	Descrição: Salva as ocorrencias
	Método: POST
	URL: http://localhost/sig/api/index.php/salvaocorrenciaaluno

	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function postAvaliacaoPeriodicaAluno() {

		$data = json_decode(file_get_contents("php://input"));

		try {

			$aSearch = array();
			$aSearch['id_turma='] = $data->id_turma;
			$aSearch['id_aluno='] = $data->id_aluno;
			$aSearch['id_disciplina='] = $data->id_disciplina;
			$aSearch['id_tipo_avaliacao_periodica='] = $data->id_tipo_avaliacao_periodica;
			$aSearch['fase='] = $data->fase;
			$countAvaliacao = fRecordset::build('AvaliacaoPeriodicaAluno', $aSearch);

			if ($countAvaliacao->count() > 0) {
				$avaliacao = new AvaliacaoPeriodicaAluno($countAvaliacao[0]->getId());
				$avaliacao->delete();
				$id = '';
			}else{
				$avaliacao = new AvaliacaoPeriodicaAluno();

				if(property_exists($data, 'id_turma')){
					$avaliacao->setIdTurma($data->id_turma);
				}

				if(property_exists($data, 'id_aluno')){
					$avaliacao->setIdAluno($data->id_aluno);
				}

				if(property_exists($data, 'id_disciplina')){
					$avaliacao->setIdDisciplina($data->id_disciplina);
				}

				if(property_exists($data, 'id_tipo_avaliacao_periodica')){
					$avaliacao->setIdTipoAvaliacaoPeriodica($data->id_tipo_avaliacao_periodica);
				}

				if(property_exists($data, 'fase')){
					$avaliacao->setFase($data->fase);
				}

				$avaliacao->store();	

				$id = $avaliacao->getId();
			}
			

			$arrMensagem = array('error' => 0, 'id' => $id, 'mensagem' => 'Avaliacao incluída com sucesso');
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getAvaliacaoPeriodicaAluno($turma="", $disciplina="", $fase=""){

		$this->acessoApi();
		$query = "SELECT * FROM avaliacao_periodica_aluno WHERE id_turma = ".$turma." AND id_disciplina = ".$disciplina." AND fase = ".$fase." order by id_tipo_avaliacao_periodica";

		$avaliacao = $this->_getDb()->query($query);

		$aOcorrencia = array();

		foreach ($avaliacao as $key => $value){
			$aAvaliacao[$value['id_aluno']]['ocorrencia'][] = $value;
			$aAvaliacao[$value['id_aluno']]['ocorrencias'][$value['id_tipo_avaliacao_periodica']] = true;
		}

		$avaliacao = $this->_getDb()->close();	

		if (count($aAvaliacao) == 0) {
			$aAvaliacao = array('error' => -1, 'mensagem' => "Nenhuma avaliacao.");
		} else {
			$aAvaliacao = array('error' => 0, 'ocorrencias' => $aAvaliacao);
		}
		fJSON::output($aAvaliacao);
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de curso Turma e alunos componente
	Método: GET
	URL: http://localhost/sig/api/index.php/cursoturmaalunocomponente/<id_curso>/<id_turma>/<fase>/<id_aluno>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/08/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getCursoTurmaAlunoComponente($id_curso = 0, $id_turma = 0, $fase = 0,  $id_aluno = 0, $full = false) {
		$search = "";

		if($id_curso > 0){
			$search.= " and cur.id = " .$id_curso;
		}

		if($id_turma > 0){
			$search.= " and tur.id = " .$id_turma;
		}
		
		if($fase > 0){
			$search_fase = " and notava.fase = '" .$fase ."'";
		}

		if($id_aluno > 0){
			$search.= " and pes.id = " .$id_aluno;
		}

		$sql = "SELECT 
		distinct
		cur.id as id_curso, cur.nome as curso,
		tur.id as id_turma, tur.nome as turma,
		pes.id as id_aluno, pes.nome as aluno,
		com.id as id_componente, com.id_arredondamento, com.descricao as componente, com.codigo, 
		com.abreviatura, com.formula,
		com.recuperacao,
		notava.nota
		FROM matricula mat
		INNER JOIN pessoa pes on pes.id = mat.id_aluno and aluno = 1
		INNER JOIN curso cur on cur.id = mat.id_curso
		INNER JOIN turma tur on tur.id_curso = mat.id_curso and tur.id = mat.id_turma
		INNER JOIN curso_nota curnot on curnot.id_curso = cur.id
		INNER JOIN componente com on com.id = curnot.id_componente and com.formula is not null
		LEFT JOIN nota notava on notava.id_aluno = pes.id and notava.id_curso = cur.id 
		and notava.id_turma = tur.id and notava.id_componente_formula = com.id 
		" .$search_fase ."
		WHERE pes.ativo = 1		
		" .$search;

		//and notava.id_componente is null

		echo $sql;
		die;

		$db = $this->_getDb()->query($sql);
		
		$aCurso = array();
		$aTurma = array();
		$aAluno = array();
		$aComponente = array();
		foreach ($db as $key => $value){
			$index = array_search($value['id_curso'], array_column($aCurso, 'id_curso'));
			if($index === false){
				$aCurso[] = array(
					'id_curso' => $value['id_curso'],
					'curso' => $value['curso'],
					'turmas' => array(),
					);	
			}
			
			if(!array_key_exists($value['id_curso'], $aTurma)){
				$aTurma[$value['id_curso']] = array();	
				$aAluno[$value['id_curso']] = array();	
				$aComponente[$value['id_curso']] = array();
			}
			
			$index = array_search($value['id_turma'], array_column($aTurma[$value['id_curso']], 'id_turma'));
			if($index === false){
				$aTurma[$value['id_curso']][] = array(
					'id_turma' => $value['id_turma'],
					'turma' => $value['turma'],
					'alunos' => array(),
					);
			}

			if(!array_key_exists($value['id_turma'], $aAluno[$value['id_curso']])){
				$aAluno[$value['id_curso']][$value['id_turma']] = array();
				$aComponente[$value['id_curso']][$value['id_turma']] = array();
			}

			$index = array_search($value['id_aluno'], array_column($aAluno[$value['id_curso']][$value['id_turma']], 'id_aluno'));
			if($index === false){
				$aAluno[$value['id_curso']][$value['id_turma']][] = array(
					'id_aluno' => $value['id_aluno'],
					'aluno' => $value['aluno'],
					'componentes' => array(),
					);
			}
			
			$aComponente[$value['id_curso']][$value['id_turma']][$value['id_aluno']][] = array(
				'id_componente' => $value['id_componente'],
				'id_arredondamento' => $value['id_arredondamento'],
				'componente' => $value['aluno'],
				'codigo' => $value['codigo'],
				'abreviatura' => $value['abreviatura'],
				'formula' => $value['formula'],
				'nota' => $value['nota'],
				'recuperacao' => $value['recuperacao'],
				);
		}
		
		// var_dump($aComponente);
		// die;

		$aDb = array();

		foreach ($aCurso as $kCurso => $vCurso){
			foreach ($aTurma[$vCurso['id_curso']] as $kTurma => $vTurma){
				foreach ($aAluno[$vCurso['id_curso']][$vTurma['id_turma']] as $kAluno => $vAluno){
					$aAluno[$vCurso['id_curso']][$vTurma['id_turma']][$kAluno]['componentes'] = $aComponente[$vCurso['id_curso']][$vTurma['id_turma']][$vAluno['id_aluno']];
				}
				$aTurma[$vCurso['id_curso']][$kTurma]['alunos'] = $aAluno[$vCurso['id_curso']][$vTurma['id_turma']];
			}

			$aDb[$kCurso] = $vCurso;
			$aDb[$kCurso]['turmas'] = $aTurma[$vCurso['id_curso']];
		}

		// var_dump($aDb);
		// die();

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhum aluno encontrada!"
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'curso_turma_aluno_componente' => $aDb
				);
		}

		if ($full == false) {
			//A variavel Full traz se falso o JSON
			//neste caso ela traz a mesma estrutura caso verdadeira mas em formato array
			$db = $this->_getDb()->close();
			fJSON::output($aDb);
		} else {
			$db = $this->_getDb()->close();
			return $aDb;
		}	
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de componente detalhe
	Método: GET
	URL: http://localhost/sig/api/index.php/componentedetalhe/<id_componente>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/08/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getComponenteDetalhe($id_componente = 0, $full = false) {
		$search = "";

		if($id_componente > 0){
			$search.= " and comdel.id_componente_formula = " .$id_componente;
		}

		$sql = "SELECT 
		distinct
		comdel.id_componente_formula,
		com.id as id_componente, com.descricao as componente, com.abreviatura, com.ordem,
		com.fase, com.valor_minimo_aprovacao, com.valor_maximo, com.ordem
		FROM componente_detalhe comdel
		INNER JOIN componente com on com.id = comdel.id_componente_item
		WHERE com.ativo = 1
		" .$search;
		
		
		$db = $this->_getDb()->query($sql);
		
		$aDb = array();

		foreach ($db as $key => $value){
			$aDb[] = $value;
		}

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhum componente encontrado!"
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'componente_detalhe' => $aDb
				);
		}

		if ($full == false) {
			//A variavel Full traz se falso o JSON
			//neste caso ela traz a mesma estrutura caso verdadeira mas em formato array
			$db = $this->_getDb()->close();
			fJSON::output($aDb);
		} else {
			$db = $this->_getDb()->close();
			return $aDb;
		}	
	}


	/*
	Módulo: SIG/Escola
	Descrição: Cadastrar Histórico
	Método: POST
	URL: http://localhost/sig/api/index.php/historico/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function postHistorico(){
		
		$data = json_decode(file_get_contents("php://input"));

		if (property_exists($data, 'id')) {			
			
			$pesq1 = array();
			$pesq1['id='] = $data->id;

			$rsct_p1 = fRecordSet::build('Historico', $pesq1);
			foreach ($rsct_p1->getRecords() as $key => $value) {
				$rsct_d1 = new Historico($value->getId());
				$rsct_d1->delete();
			}

			$pesq2 = array();
			$pesq2['id_historico='] = $data->id;

			$rsct_p2 = fRecordSet::build('HistoricoItem', $pesq2);
			foreach ($rsct_p2->getRecords() as $key => $value) {
				$rsct_d2 = new HistoricoItem($value->getId());
				$rsct_d2->delete();
			}
		}

		try {

			$rsh  = new Historico();

			if (property_exists($data, 'aluno'				)){ $rsh->setIdAluno($data->aluno->id);						};
			if (property_exists($data, 'id_etapa'			)){ $rsh->setIdEtapa($data->id_etapa);						};
			if (property_exists($data, 'id_curso'			)){ $rsh->setIdCurso($data->id_curso); 						};
			if (property_exists($data, 'id_estabelecimento'	)){ $rsh->setIdEstabelecimento($data->id_estabelecimento);	};
			if (property_exists($data, 'id_turma'			)){ $rsh->setIdTurma($data->id_turma); 						};
			if (property_exists($data, 'serie'				)){ $rsh->setSerie($data->serie); 		  					};			

			$rsh->store(); 
			$id_historico = $rsh->getId();

			$mtFases = array($data->fase01,$data->fase02,$data->fase03,$data->fase04);

			foreach ($mtFases as $fase) {

				$mt = array_merge($fase->comum,$fase->diversificado);

				foreach ($mt as $reg) {
					
					$rshi = new HistoricoItem();					
					$rshi->setIdHistorico($id_historico);					
					if (property_exists($reg, 'id_disciplina'		)){ $rshi->setIdDisciplina($reg->id_disciplina);		 };
					if (property_exists($reg, 'id_etapa'	 	  	)){ $rshi->setIdEtapa($reg->id_etapa);					 };
					if (property_exists($reg, 'id_historico_parte'	)){ $rshi->setIdHistoricoParte($reg->id_historico_parte);};
					if (property_exists($reg, 'fase'		 		)){ $rshi->setFase($reg->fase); 						 };
					if (property_exists($reg, 'nota'		 		)){ $rshi->setNota($reg->nota);		 		 		 	 };
					if (property_exists($reg, 'falta'		 		)){ $rshi->setFalta($reg->falta); 						 };					
					if (property_exists($reg, 'carga_horaria'		)){ $rshi->setCargaHoraria($reg->carga_horaria);		 };	

					$rshi->store();
				}
			}
			
			$msg = array('error' => 0, 'id_historico' => $id_historico, 'mensagem' => 'Histórico salvo com sucesso!');
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro:".$e);
			fJSON::output($msg);
			die();
		}
	}
	
	/*
	Módulo: SIG/Escola
	Descrição: Carregar Histórico
	Método: GET
	URL: http://localhost/sig/api/index.php/historico/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/08/2015
	Autor: Fábio Roberto Haydn	
	*/
	public function getHistorico($id_aluno = 0, $full = false){

		$sqlq= "SELECT 
		e.nome entidade,
		p.nome aluno, 
		tc.descricao curso, c.id,
		t.nome turma, 
		t.serie, 
		(SELECT nome FROM pessoa pc WHERE c.id_pessoa_coordenador=pc.id) coordenador,
		d.nome disciplina,
		a.quantidade_aulas qtd_aulas,
		SUM(1) falta,
		n.nota,
		n.fase,
		etp.ano ano_letivo
		FROM curso c
		LEFT JOIN tipo_curso tc ON c.id_tipo_curso=tc.id
		LEFT JOIN turma t ON c.id=t.id_curso
		LEFT JOIN etapa etp ON etp.id=t.id_etapa
		LEFT JOIN matricula m ON c.id=m.id_curso
		LEFT JOIN pessoa p ON m.id_aluno=p.id
		LEFT JOIN entidade_pessoa ep ON ep.id_pessoa=p.id
		LEFT JOIN entidade e ON ep.id_entidade=e.id
		LEFT JOIN falta_aluno fa ON p.id=fa.id_aluno
		LEFT JOIN aulas a ON a.id=fa.id_aulas
		LEFT JOIN disciplina d ON d.id=a.id_disciplina
		LEFT JOIN nota n ON n.id_aluno=p.id AND n.id_curso=c.id AND n.id_turma=t.id AND n.id_disciplina=d.id
		%W 
		GROUP BY d.id";
		
		$cond = ($id_aluno>0) ? "WHERE p.id=".$id : "";
		$sqlq = str_replace("%W", $cond, $sqlq);	

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if ($full == false) {

			if (count($retorno) == 0) {
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro encontrado!");
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, "retorno" => $retorno );			
			fJSON::output($retorno);

		} else { return $retorno; }
	}



	/*
	Módulo: SIG
	Descrição: Carregar Histórico
	Método: GET
	URL: http://localhost/sig/api/index.php/matriculadisciplina/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/08/2015
	Autor: Fábio da Silva
	*/

	public function getMatriculaDisciplina($id_aluno = 0, $full = false){
		$search = '';

		if($id_aluno > 0){
			$search.= " and mat.id_aluno = " .$id_aluno;
		}
		
		$sql= "SELECT 
					distinct
					dis.id as id_disciplina, dis.nome as disciplina,
					n.id_disciplina as id_disciplina_nota, n.fase as fase_nota,
					sitser.descricao as situacao_serie, 
					sum(n.nota) as nota, com.recuperacao,
					(SELECT count(id) FROM falta_aluno
					 WHERE id_aulas = aul.id and id_aluno = mat.id_aluno) as total_faltas,
					(SELECT count(id) FROM aulas
					 WHERE id_disciplina = dis.id and id_turma = mat.id_turma) as total_aulas
				FROM etapa eta
					INNER JOIN matricula mat on mat.id_etapa = eta.id
					INNER JOIN curso cur on cur.id = mat.id_curso
					INNER JOIN curso_professor curpro on curpro.id_curso = cur.id
					INNER JOIN disciplina dis on dis.id = curpro.id_disciplina
					INNER JOIN curso_nota curnot on curnot.id_curso = cur.id
					INNER JOIN situacao_serie sitser on sitser.id = mat.id_situacao_serie	
					LEFT JOIN aulas aul on aul.id_disciplina = dis.id and aul.id_turma = mat.id_turma
					LEFT JOIN componente com on com.id = curnot.id_componente
					LEFT JOIN nota n on n.id_componente_formula = com.id and n.id_componente is null  
						and n.id_disciplina = dis.id and n.id_aluno = mat.id_aluno
				WHERE dis.ativo = 1 and eta.ativo = 1 and eta.id = 1
					" .$search ."
				GROUP BY
					id_disciplina, disciplina,
					id_disciplina_nota, fase_nota
				ORDER BY 
					disciplina,
					fase_nota
				ASC";
		
		$db = $this->_getDb()->query($sql);

		$aDb = array();
		$aDisciplina = array();
		$aFase = array();
		foreach ($db as $key => $value){ 
			$aDisciplina[$value['id_disciplina']] = $value; 
			$aFase[$value['id_disciplina']][] = $value;
		}

		foreach ($aDisciplina as $key => $value){ 
			$aMontaFase = array();
			$arrFase = array();

			if(array_key_exists($value['id_disciplina'], $aFase)){
				$arrFase = $aFase[$value['id_disciplina']];
			}

			$nota = 0;
			$recuperacao = null;
			foreach ($arrFase as $key1 => $value1){ 
				if($value1["recuperacao"] == 1){
					$recuperacao = $value1["nota"];
				}else{
					if($value1["fase_nota"] != null && $value1["nota"] != null){
						$aMontaFase[] = array(
			                "fase" => $value1["fase_nota"],
			                "nota" => $value1["nota"]
						);	

						$nota = $nota + $value1["nota"];
					}
				}
			}

			$num = count($aMontaFase);

			$media_anual = ($nota > 0)? $nota / $num : null;
			$frequencia = ($value1["total_faltas"] <= $value1["total_aulas"])? $value1["total_aulas"] - $value1["total_faltas"] : null;
			$media_final = null;

			
			if($media_anual != null && $recuperacao != null ){
				$media_final = ($recuperacao + $media_anual) / 2;
			}else{
				if($media_anual != null){
					$media_final = $media_anual;
				}
			}

			$aDb[] = array(
				"id_disciplina" => $value["id_disciplina"],
	            "disciplina" => $value["disciplina"],
	            "fases" => $aMontaFase,
	            "media_anual" => $media_anual,
	            "recuperacao" => $recuperacao,
	            "media_final" => $media_final,
	            "total_faltas" => $value["total_faltas"],
	            "frequencia" => $frequencia,
	            "situacao_serie" => $value["situacao_serie"],
			);
		}


		if (count($aDb) == 0) {
			$aDb = array(	'error' => -1, 'mensagem' => "Nenhum item encontrado!");
			fJSON::output($aDb);
			die();
		}

		if ($full == false) {
			$db = $this->_getDb()->close();
			$aDb = array( 'error' => 0, "matricula_disciplina" => $aDb );
			fJSON::output($aDb);
		} else { 
			$db = $this->_getDb()->close();
			return $aDb; 
		}
	}

	/*
	Módulo: SIG/Escola
	Descrição: Obter Etapas para tela de Cadastro de Histórico
	Método: GET
	URL: http://localhost/sig/api/index.php/getstringetapa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function getStringEtapa($id = "", $full = false) {

		$campos = array('id','ano','descricao');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "etapa";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $key => $value){ $retorno[] = $value; }
			$rs = $this->_getDb()->close();	

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);
		}
	} 

	/*
	Módulo: SIG/Escola
	Descrição: Obter Etapas para tela de Cadastro de Histórico
	Método: GET
	URL: http://localhost/sig/api/index.php/gethistoricoparte/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0	
	*/
	public function getHistoricoParte($id = "", $full = false) {

		$campos = array('id','descricao','ativo');

		$consulta = "SELECT %S FROM %F %W ORDER BY %O";
		$tabela   = "historico_parte";
		$condicao = ($id!="") ? "WHERE id = ".$id : "";
		$ordem 	  = "id";

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao 			, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		if ($full == false) {

			$retorno = array();
			$rs = $this->_getDb()->query($sqlq);		
			foreach ($rs as $key => $value){ $retorno[] = $value; }
			$rs = $this->_getDb()->close();	

			if (count($retorno) == 0) { 
				$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
				fJSON::output($retorno);
				die();
			}

			$retorno = array( 'error' => 0, 'retorno' => $retorno );
			fJSON::output($retorno);
		}
	}


	/*
	Módulo: Importacao
	Descrição: Importar pessoas de um excel
	Método: GET
	URL: http://localhost/sig/api/index.php/importarpessoa/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/08/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 18/08/2015
	*/
	public function getRegistroCampo($sql) {
		//Retorna todos o registro do campo conforme o SQL
		$db = $this->_getDb()->query($sql);		

		$aDb = array();
		foreach ($db as $key => $value){ 
			$aDb[] = $value; 
		}

		return $aDb;
	}

	/*public function objPessoa($data, $l){
		// Monta o objeto pessoa para enviar ao $this->postPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$estadoCivil = $this->getRegistroCampo("SELECT * FROM estado_civil WHERE descricao = '" .$data->val($l, 3) ."'");

		$dataNascimento = '';
		if($data->val($l, 4) != '' || $data->val($l, 4) != null){
			$objDate = new DateTime($data->val($l, 4));
			$objDate->setTimezone(new DateTimeZone('GMT'));
			$dataNascimento = $objDate->format('D M Y H:i:s');
		}

		$arrPessoa = array(
			'nome' 					=> utf8_encode($data->val($l, 1)),
			'data_nascimento' 		=> $dataNascimento,
			'data_nascimento1' 		=> $dataNascimento,
			'email' 				=> utf8_encode($data->val($l, 19)),
			'id_estado_civil' 		=> (count($estadoCivil) > 0) ? $estadoCivil[0]['id'] : null,
			'sexo' 					=> strtoupper(substr($data->val($l, 2), 0, 1)), //Pega so a primeira letra, e converte para maiusculo
			'falecido'				=> 0,
			'associado'				=> 1,
			'beneficiario'			=> 0,
			'parentesco'			=> 0,
			'funcionario'			=> 0,
			'proprietario'			=> 0,
			'donatario'				=> 0,
			'aluno'					=> 0,
			'id_tipo_pessoa'		=> 1,
			'ativo'					=> 1,
			'tipocadastro'			=> 1,
		);

		if($data->val($l, 7) != ''){
			$arrPessoa['telefone_celular'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $data->val($l, 7)))));
		}
		if($data->val($l, 6) != ''){
			$arrPessoa['telefone_comercial'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $data->val($l, 6)))));
		}
		if($data->val($l, 5) != ''){
			$arrPessoa['telefone_residencial'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $data->val($l, 5)))));
		}
		if($data->val($l, 15) != ''){// Verifica se o RG não esta vazio
			$arrPessoa['id_tipo_documento'] = 1;
			$arrPessoa['numero_documento'] = $data->val($l, 15);
		}

		$cpfCnpj = str_replace('.', '', $data->val($l, 18));
		$cpfCnpj = str_replace('-', '', $cpfCnpj);
		$cpfCnpj = str_replace('/', '', $cpfCnpj);

		switch (strlen($cpfCnpj)) {// escolhe o tipo de pessoa, caso CPF (Pessoa Fisica), caso CNPJ (Pessoa Juridica)
		    case 11:
		    	$arrPessoa['cpf'] = $cpfCnpj;
		        break;
		    case 14:
		    	$arrPessoa['cnpj'] = $cpfCnpj;
		        $arrPessoa['id_tipo_pessoa'] = 2;
		        break;
		}
		
		$objPessoa = (object) $arrPessoa;

		return $objPessoa;
	}*/


	public function objPessoa($nome, $dt_nascimento, $email, $estado_civil, $sexo, $falecido, $associado, $beneficiario, $parentesco, $funcionario, $proprietario, $donatario, $aluno, $responsavel, $tipocadastro, $telefone_celular, $telefone_comercial, $telefone_residencial, $numero_documento, $id_tipo_documento, $cpf_cnpj){

		// Monta o objeto pessoa para enviar ao $this->postPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$estadoCivil = $this->getRegistroCampo("SELECT * FROM estado_civil WHERE descricao = '" .$estado_civil ."'");

		$dataNascimento = '';
		if($dt_nascimento != '' || $dt_nascimento != null){
			$dt = implode('-', array_reverse(explode('/', trim($dt_nascimento))));
			$objDate = new DateTime($dt);
			$objDate->setTimezone(new DateTimeZone('GMT'));
			$dataNascimento = $objDate->format('D M Y H:i:s');
		}

		$arrPessoa = array(
			'nome' 					=> utf8_encode($nome),
			'data_nascimento' 		=> $dataNascimento,
			'data_nascimento1' 		=> $dataNascimento,
			'email' 				=> utf8_encode($email),
			'id_estado_civil' 		=> (count($estadoCivil) > 0) ? $estadoCivil[0]['id'] : null,
			'sexo' 					=> strtoupper(substr($sexo, 0, 1)), //Pega so a primeira letra, e converte para maiusculo
			'falecido'				=> $falecido,
			'associado'				=> $associado,
			'beneficiario'			=> $beneficiario,
			'parentesco'			=> $parentesco,
			'funcionario'			=> $funcionario,
			'proprietario'			=> $proprietario,
			'donatario'				=> $donatario,
			'aluno'					=> $aluno,
			'responsavel'			=> $responsavel,
			'id_tipo_pessoa'		=> 1,
			'ativo'					=> 1,
			'tipocadastro'			=> $tipocadastro,
		);

		if($telefone_celular != ''){
			$arrPessoa['telefone_celular'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $telefone_celular))));
		}
		if($telefone_comercial != ''){
			$arrPessoa['telefone_comercial'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $telefone_comercial))));
		}
		if($telefone_residencial != ''){
			$arrPessoa['telefone_residencial'] = str_replace('-', '', str_replace(' ', '', str_replace('(', '', str_replace(')', '', $telefone_residencial))));
		}
		if($numero_documento != ''){// Verifica se o RG não esta vazio
			$arrPessoa['id_tipo_documento'] = $id_tipo_documento;
			$arrPessoa['numero_documento'] = $numero_documento;
		}

		$cpfCnpj = str_replace('.', '', $cpf_cnpj);
		$cpfCnpj = str_replace('-', '', $cpfCnpj);
		$cpfCnpj = str_replace('/', '', $cpfCnpj);

		switch (strlen($cpfCnpj)) {// escolhe o tipo de pessoa, caso CPF (Pessoa Fisica), caso CNPJ (Pessoa Juridica)
		    case 11:
		    	$arrPessoa['cpf'] = $cpfCnpj;
		        break;
		    case 14:
		    	$arrPessoa['cnpj'] = $cpfCnpj;
		        $arrPessoa['id_tipo_pessoa'] = 2;
		        break;
		}
		
		$objPessoa = (object) $arrPessoa;

		return $objPessoa;
	}
	/*
	public function objEnderecoPessoa($id_pessoa, $data, $l) {
		// Monta o objeto endereco para enviar ao $this->postEnderecoPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );

		$arrEndereco = array(
			'idTipoEndereco'=> 1,
			'idPais'		=> 33,
			'id_pessoa'		=> $id_pessoa,
			'logradouro'	=> utf8_encode($data->val($l, 8)),
			'numero'		=> $data->val($l, 9),
			'bairro'		=> utf8_encode($data->val($l, 11)),
			'complemento'	=> utf8_encode($data->val($l, 10)),
			'cep'			=> str_replace('-', '', $data->val($l, 12)),
			'cidade'		=> utf8_encode($data->val($l, 13)),
			'estado'		=> utf8_encode($data->val($l, 14)),
			'principal'		=> 1,
			'ativo'			=> 1,
		);

		$objEndereco = (object) $arrEndereco;

		return $objEndereco;
	}*/

	public function objEndereco($id_pessoa, $logradouro, $numero, $bairro, $complemento, $cep, $cidade, $estado) {
		// Monta o objeto endereco para enviar ao $this->postEnderecoPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );

		$arrEndereco = array(
			'idTipoEndereco'=> 1,
			'idPais'		=> 33,
			'id_pessoa'		=> $id_pessoa,
			'logradouro'	=> utf8_encode($logradouro),
			'numero'		=> $numero,
			'bairro'		=> utf8_encode($bairro),
			'complemento'	=> utf8_encode($complemento),
			'cep'			=> str_replace('-', '', $cep),
			'cidade'		=> utf8_encode($cidade),
			'estado'		=> utf8_encode($estado),
			'principal'		=> 1,
			'ativo'			=> 1,
		);

		$objEndereco = (object) $arrEndereco;

		return $objEndereco;
	}

	public function objContribuicaoPessoa($id_pessoa, $data, $l){
		$valor = str_replace('R', '', $data->val($l, 21));
		$valor = str_replace('$', '', $valor);
		$valor = str_replace('.', '', $valor);
		$valor = number_format($valor, 2, '.', '');

		$arrContribuicaoPessoa = array(
			'id_pessoa' 	=> $id_pessoa,
			'dia' 			=> $data->val($l, 20),
			'valor' 		=> $valor,
			'isento' 		=> 0,
			'carteira'		=> 1,
			'numero_meses' 	=> 12,
		);



		$objContribuicaoPessoa = (object) $arrContribuicaoPessoa;

		return $objContribuicaoPessoa;
	}

	public function postImportarPessoa() {
		$data = json_decode(file_get_contents("php://input"));	
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$arquivo = new Spreadsheet_Excel_Reader("../importacao/associados/" .$data->arquivo);
 		
 		$arrResultado = array();

		$totalLinhas = $data->posicao + $data->pacote;

		for ($l = $data->posicao; $totalLinhas > $l; $l++) {
			$id_pessoa = null;
			$resultado = false;

			if($arquivo->val($l, 1) != ''){
				$verificaPessoa = $this->getRegistroCampo("SELECT * FROM pessoa WHERE nome = '" .utf8_encode(trim($arquivo->val($l, 1))) ."'");

				$objPessoa = $this->objPessoa($arquivo->val($l, 1), $arquivo->val($l, 4), $arquivo->val($l, 19), 
											  $arquivo->val($l, 3), $arquivo->val($l, 2), 0, 
											  1, 0, 0, 
											  0, 0, 0, 
											  1, 0, 1, $arquivo->val($l, 7), 
											  $arquivo->val($l, 6), $arquivo->val($l, 5), $arquivo->val($l, 15), 
											  1, $arquivo->val($l, 18));

				$cpf = '';
				if(property_exists($objPessoa, 'cpf')){
					if($objPessoa->cpf != ''){
						$cpf = "(numero = '" .$objPessoa->cpf ."' and id_tipo_documento = 2) ";
					}
				}
				$cnpj = '';
				if(property_exists($objPessoa, 'cnpj')){
					if($objPessoa->cnpj != ''){
						$cnpj = "(numero = '" .$objPessoa->cnpj ."' and id_tipo_documento = 5) ";
					}
				}
				$ou = '';
				if($cpf != '' && $cnpj != ''){
					$ou = ' or ';
				}

				if($cpf != '' || $cnpj != ''){
					$verificaDocumento = $this->getRegistroCampo("SELECT * FROM documento WHERE " .$cpf .$ou .$cnpj);
				}else{
					$verificaDocumento = array();					
				}

				if(count($verificaPessoa) == 0 && count($verificaDocumento) == 0){
					
					$pessoa = $this->postPessoa($objPessoa, true);
					
					if($pessoa['error'] == 0 ){
						$id_pessoa = $pessoa['id_pessoa'];
						$resultado = true;	

						if($arquivo->val($l, 8) != '' && $arquivo->val($l, 9) != '' && $arquivo->val($l, 12) != ''){
							$objEndereco = $this->objEndereco($id_pessoa, 
															  $arquivo->val($l, 8), 
															  $arquivo->val($l, 9), 
															  $arquivo->val($l, 11), 
															  $arquivo->val($l, 10), 
															  $arquivo->val($l, 12), 
															  $arquivo->val($l, 13), 
															  $arquivo->val($l, 14));
				
							$this->postEnderecoPessoa($objEndereco, true);
						}else{
							$resultado = null;	
						}

						if($arquivo->val($l, 21) != '' && $arquivo->val($l, 20) != ''){
							$objContribuicaoPessoa = $this->objContribuicaoPessoa($id_pessoa, $arquivo, $l);
							$this->postContribuicaoPessoa($objContribuicaoPessoa, true);
						}else{
							$resultado = null;	
						}
					}
				}
			}

			$arrResultado[] = array(
				'id_pessoa' => $id_pessoa,
				'nome' => utf8_encode($arquivo->val($l, 1)),
				'resultado' => $resultado,
			);
		}

		//var_dump(count($arrResultado));

		$arrResultado = array(
			'error' => 0,
			'importar_pessoa' => $arrResultado,
		);

		fJSON::output($arrResultado);
	}

	/*
	Módulo: SIG
	Descrição: Obter lista de pasta de um diretorio
	Método: GET
	URL: http://localhost/sig/api/index.php/lerpasta/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 20/08/2015
	Autor: Fábio da Silva
	Versão: 1.0	
	*/
	public function getLerPasta($pasta = '', $full = false){
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$url = '../importacao/' .$pasta;
		$diretorio = dir($url);

		$aTodosArquivos = array();

		while(($arquivo = $diretorio->read()) !== false){
			if($arquivo != '.' && $arquivo != '..'){
				$arquivoExl = new Spreadsheet_Excel_Reader($url .'/' .$arquivo);
				$aTodosArquivos[] = array(
					'nome' => $arquivo,
					'linhas' => $arquivoExl->rowcount(),
				);
			}
		}

		$aTodosArquivos = array(
			'error' => 0,
			'ler_pasta' => $aTodosArquivos,
		);

		$diretorio->close();

		if($full == false){
			fJSON::output($aTodosArquivos);
		}else{
			return $aTodosArquivos;
		}
	}

	/*
	Módulo: Cemitério
	Descrição: Modifica Ativo=0 na tabela Lotes (somente se não tiver Jazigo Associado)
	Método: POST
	URL: http://localhost/sig/api/index.php/delcemiteriolote/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delCemiterioLote() {

		$data = json_decode(file_get_contents("php://input"));
		$idLote = $data->id_lote;

		$sqlq = "SELECT IFNULL(SUM(1),0) reg FROM unidade_armazenagem WHERE id_lote=".$idLote;

		$retorno = array();		

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();


		if ($retorno[0]['reg']==0){ 

			try {

				$aSearch = array();
				$aSearch['id='] = $idLote;
				$rsLote = fRecordSet::build('Lote', $aSearch);				
				$rsLote[0]->delete();

				$msg = array('error' => 0, 'retorno' => 'Lote excluído com sucesso!');
				fJSON::output($msg);
				die();
			}
			catch (fValidationException $e) {
				$msg = array('error' => -1, 'retorno' => "Erro ao excluir o Lote!");
				fJSON::output($msg);
				die();
			}
		}else{

			$msg = array('error' => -2, 'retorno' => "Lote contém um Jazigo associado!");
			fJSON::output($msg);
			die();
		}
	}
	/*
	Módulo: Cemitério
	Descrição: Modifica Ativo=0 na tabela quadra (somente se não tiver lote Associado)
	Método: POST
	URL: http://localhost/sig/api/index.php/delcemiterioquadra/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delCemiterioQuadra() {

		$data = json_decode(file_get_contents("php://input"));
		$idQuadra = $data->id_quadra;

		$sqlq = "SELECT IFNULL(SUM(1),0) reg FROM lote WHERE id_quadra=".$idQuadra;

		$retorno = array();		

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if ($retorno[0]['reg']==0){ 

			try {

				$aSearch = array();
				$aSearch['id='] = $idQuadra;
				$rsQuadra = fRecordSet::build('Quadra', $aSearch);				
				$rsQuadra[0]->delete();

				$msg = array('error' => 0, 'retorno' => 'Quadra excluída com sucesso!');
				fJSON::output($msg);
				die();
			}
			catch (fValidationException $e) {
				$msg = array('error' => -1, 'retorno' => "Erro ao excluir a Quadra!");
				fJSON::output($msg);
				die();
			}
		}else{

			$msg = array('error' => -2, 'retorno' => "Quadra contém um Lote associado!");
			fJSON::output($msg);
			die();
		}
	}

	public function getRecebimentoString() {

		$request = $this->_slimApp->request()->params();		
		$like = $request['string'];

		$consulta = "SELECT %S FROM %F %W GROUP BY %G ORDER BY %O";

		$campos   = array('p.id','p.nome');		
		$tabela   = "pessoa p";
		$condicao = ($like!='') ? "WHERE p.nome LIKE '%%L%'" : "";
		$grupo 	  = "p.nome";
		$ordem 	  = "p.id";
		
		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao				, $sqlq);
		$sqlq = str_replace("%L", $like 				, $sqlq);
		$sqlq = str_replace("%G", $grupo 				, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'pessoa' => $retorno );
		fJSON::output($retorno);		
	}

	public function delDoacao() {

		/*if (array_key_exists('todos', $request)) {
			if ($request['todos']==1) {
				$aSearch = array();
				$aSearch['nome~'] = $request['string'];      
			}
		}*/

		$data = json_decode(file_get_contents("php://input"));

		$id = $data;

		$sql = "DELETE FROM movimentacao_doacao WHERE id_doacao = " . $data;

		$rd = $this->_getDb()->query($sql);

		$doacao = new Doacao($id);

		$doacao->delete();	

		$mensagem = "Doação excluída com sucesso!";        

		$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
		fJSON::output($arrMensagem);
		die();        
	}

	/*
	Módulo: Importacao
	Descrição: Importar alunos de um excel
	Método: GET
	URL: http://localhost/sig/api/index.php/importaraluno/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 27/08/2015
	Autor: Fabio da Silva
	Versão: 1.0
	Data de Alteração: 27/08/2015
	*/
	
	public function objAluno($data, $l){
		// Monta o objeto pessoa para enviar ao $this->postPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		
		$estadoCivil = $this->getRegistroCampo("SELECT * FROM estado_civil WHERE descricao = '" .utf8_encode($data->val($l, 8)) ."'");
		
		$dataNascimento = '';

		if($data->val($l, 6) != '' || $data->val($l, 6) != null){
			$dt = implode('-', array_reverse(explode('/', trim($data->val($l, 6)))));
			$objDate = new DateTime($dt);
			$objDate->setTimezone(new DateTimeZone('GMT'));
			$dataNascimento = $objDate->format('D M Y H:i:s');
		}

		$arrAluno = array(
			'nome' 				=> utf8_encode($data->val($l, 3)),
			'codigo'			=> utf8_encode($data->val($l, 1)),
			'data_nascimento'	=> $dataNascimento,
			'naturalidade'		=> utf8_encode($data->val($l, 15)),
			'estado_nascimento' => str_replace('-', '', utf8_encode($data->val($l, 16))),
			'nacionalidade'		=> utf8_encode($data->val($l, 4)),
			'id_estado_civil'	=> (count($estadoCivil) > 0) ? $estadoCivil[0]['id'] : null,
			'falecido'			=> 0,
			'associado'			=> 0,
			'beneficiario'		=> 0,
			'parentesco'		=> 0,
			'funcionario'		=> 0,
			'proprietario'		=> 0,
			'donatario'			=> 0,
			'aluno'				=> 1,
			'ativo'				=> 1,
		);

		if($data->val($l, 10) != ''){
			$arrAluno['rg'] = utf8_encode($data->val($l, 10));
		}

		if($data->val($l, 13) != ''){
			$arrAluno['rg_escolar'] = utf8_encode($data->val($l, 13));
		}

		if($data->val($l, 11) != ''){
			$arrPessoa['cpf'] = str_replace('-', '', str_replace('.', '', utf8_encode($data->val($l, 11))));
		}

		if($data->val($l, 9) != ''){
			$arrAluno['certidaonascimento'] = utf8_encode($data->val($l, 9));
		}
		
		$objAluno = (object) $arrAluno;

		return $objAluno;
	}

	public function postImportarTelefone($id_pessoa, $fone, $tipo = null) {
		//Pega o valor do campo dividido por (/) e inclui no banco conforme tipo
		$resultado = true;

		$arrFone = explode('/', $fone);
		foreach ($arrFone as $key => $value) {
			$numero = str_replace(' ', '', str_replace('-', '', str_replace('.', '', $value)));

			if($numero != ''){
				if($tipo == null){
					switch (strlen($numero)) {
						case 8:
							$tipo = 1;//residencial
							break;
						case 9:
							$tipo = 3;//celular
							break;
					}
				}

				$telefone = $this->postTelefone($id_pessoa, $tipo, '011'.$numero);
				
				if($telefone['error'] == '-1'){
					$resultado = false;	
				}
			}
		}

		return $resultado;
	}

	public function postImportarAluno() {
		$data = json_decode(file_get_contents("php://input"));	
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$arquivo = new Spreadsheet_Excel_Reader("../importacao/alunos/" .$data->arquivo);
 		
 		$arrResultado = array();

		$totalLinhas = $data->posicao + $data->pacote;

		for ($l = $data->posicao; $totalLinhas > $l; $l++) {
			$resultado = false;
			$id_aluno = '';

			$objAluno = $this->objAluno($arquivo, $l);
			
			$verificaAluno = array();
			if($objAluno->nome != ''){
				$verificaAluno = $this->getRegistroCampo("SELECT * FROM pessoa WHERE nome = '" .$objAluno->nome ."'");

				if(count($verificaAluno) > 0){
					$id_aluno = $verificaAluno[0]['id'];
				}
			}

			$verificaDocumento = array();
			if(property_exists($objAluno, 'cpf')){
				if($objAluno->cpf != ''){
					$verificaDocumento = $this->getRegistroCampo("SELECT * FROM documento WHERE numero = '" .$objAluno->cpf ."' and id_tipo_documento = 2 ");

					if(count($verificaDocumento) > 0){
						$id_aluno = $verificaDocumento[0]['id_pessoa'];
					}
				}
			}

			if(count($verificaAluno) == 0 && count($verificaDocumento) == 0){
				$aluno = $this->postAluno($objAluno, true);

				if($aluno['error'] == 0){
					$id_aluno = $aluno['id'];
					$resultado = true;	
					
					if($arquivo->val($l, 1) != ''){
						$urlFoto = str_replace('/', '', $arquivo->val($l, 1)) .'.JPG';
						$pessoaAluno = new Pessoa($id_aluno);
						$pessoaAluno->setFoto($urlFoto);
						$pessoaAluno->store();
					}
				}
			}else{
				//Caso o aluno ja tenha sido cadastrado ele altera alguns campos
				$pessoaAluno = new Pessoa($id_aluno);
				$urlFoto = str_replace('/', '', $arquivo->val($l, 1)) .'.JPG';
				$pessoaAluno->setFoto($urlFoto);
				$pessoaAluno->setAluno(1);
				$pessoaAluno->store();

				$resultado = null;
			}

			if($arquivo->val($l, 17) != '' && $arquivo->val($l, 18) != '' && $arquivo->val($l, 23) != ''){
				$objEndereco = $this->objEndereco($id_aluno, 
												  $arquivo->val($l, 17), 
												  $arquivo->val($l, 18), 
												  $arquivo->val($l, 20), 
												  $arquivo->val($l, 19), 
												  $arquivo->val($l, 23), 
												  $arquivo->val($l, 21), 
												  $arquivo->val($l, 22));

				$endereco = $this->postEnderecoPessoa($objEndereco, true);

				if($endereco['error'] == '-1'){
					$resultado = false;
				}
			}

			$telefone = $this->postImportarTelefone($id_aluno, $arquivo->val($l, 24));

			if($telefone == false){
				$resultado = false;
			}

			$arrResultado[] = array(
				'id_aluno' 	=> $id_aluno,
				'nome' 		=> utf8_encode($arquivo->val($l, 3)),
				'resultado' => $resultado,
			);
		}

		//var_dump(count($arrResultado));

		$arrResultado = array(
			'error' => 0,
			'importar_aluno' => $arrResultado,
		);

		fJSON::output($arrResultado);
	}


	/*
	Módulo: Importacao
	Descrição: Importar alunos de um excel
	Método: GET
	URL: http://localhost/sig/api/index.php/importarresponsavel/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	
	public function objResponsavel($id_pessoa_aluno, $id_pessoa, $nome, $dtNascimento, $estado_civil, $sexo, $email, $cpf, $telefone_celular, $id_tipo_responsavel, $responsavel_financeiro, $responsavel_pedagogico){
		// Monta o objeto pessoa para enviar ao $this->postPessoa()
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		
		$estadoCivil = $this->getRegistroCampo("SELECT * FROM estado_civil WHERE descricao = '" .utf8_encode($estado_civil) ."'");
		
		$arrResponsavel = array(
			'id_pessoa_aluno'		 => utf8_encode($id_pessoa_aluno),
			'id_pessoa'				 => utf8_encode($id_pessoa),
			'nome'					 => utf8_encode($nome),
			'id_estado_civil'		 => (count($estadoCivil) > 0) ? $estadoCivil[0]['id'] : null,
			'sexo'					 => strtoupper(substr($sexo, 0, 1)), //Pega so a primeira letra, e converte para maiusculo,
			'email'					 => utf8_encode($email),
			'id_tipo_responsavel'	 => utf8_encode($id_tipo_responsavel),
			'responsavel_financeiro' => utf8_encode($responsavel_financeiro),
			'responsavel_pedagogico' => utf8_encode($responsavel_pedagogico),
			'ativo'					 => 1,
		);

		if($dtNascimento != '' || $dtNascimento != null){
			$dt = implode('-', array_reverse(explode('/', trim($dtNascimento))));
			$objDate = new DateTime($dt);
			$objDate->setTimezone(new DateTimeZone('GMT'));
			$dataNascimento = $objDate->format('D M Y H:i:s');

			$arrResponsavel['data_nascimento'] = $dataNascimento;
		}

		if($cpf != ''){
			$arrResponsavel['cpf'] = str_replace('-', '', str_replace('.', '', utf8_encode($cpf)));
		}
		
		if($telefone_celular != ''){
			$arrResponsavel['telefone_celular'] = str_replace(' ', '', str_replace(')', '', str_replace('(', '', str_replace('-', '', str_replace('.', '', utf8_encode($telefone_celular))))));
		}
		
		$objResponsavel = (object) $arrResponsavel;

		return $objResponsavel;
	}

	public function postImportarResponsavel() {
		$data = json_decode(file_get_contents("php://input"));	
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$arquivo = new Spreadsheet_Excel_Reader("../importacao/responsavel/" .$data->arquivo);
 		
 		$arrResultado = array();

		$totalLinhas = $data->posicao + $data->pacote;

		for ($l = $data->posicao; $totalLinhas > $l; $l++) {
			$resultadoPai = false;
			$resultadoMae = false;
			
			$error = array();

			$id_responsavel = '';
			$id_aluno = '';
			$id_mae = '';
			$id_pai = '';

			$aluno = $this->getRegistroCampo("SELECT * FROM pessoa 
											  WHERE nome = '" .utf8_encode($arquivo->val($l, 1)) ."'");

			if(count($aluno) > 0){
				$id_aluno = $aluno[0]['id'];
			
				if($arquivo->val($l, 2) != ''){
					$pai = $this->getRegistroCampo("SELECT * FROM pessoa 
													WHERE nome = '" .utf8_encode($arquivo->val($l, 2)) ."'");
					if(count($pai) == 0){
						$objPai = $this->objPessoa($arquivo->val($l, 2), $arquivo->val($l, 11), $arquivo->val($l, 10), 
												   $arquivo->val($l, 3), 'Masculino', 0, 
												   0, 0, 0, 
												   0, 0, 0, 
												   0, 1, 11, 
												   '', '', '', 
												   '', '', '');

						$pai = $this->postPessoa($objPai, true);

						$id_pai = $pai['id_pessoa'];

						$resultadoPai = null;
					}else{
						$id_pai = $pai[0]['id'];
					}

					$error['id_pai'] = $id_pai;

					if($id_pai != '' && $id_pai != null){
						$objResponsavel = $this->objResponsavel($id_aluno, $id_pai, $arquivo->val($l, 2), 
																$arquivo->val($l, 11), $arquivo->val($l, 3), 'Masculino', 
																$arquivo->val($l, 10), '', '', 
																1, 0, 0);

						$resultPai = $this->postResponsavelPessoa($objResponsavel, true);

						if($resultPai['error'] == 0){
							$resultadoPai = true;
						}

						$error['id_responsavel_pai'] = $resultPai;
					}
				}

				if($arquivo->val($l, 13) != ''){
					$mae = $this->getRegistroCampo("SELECT * FROM pessoa 
													WHERE nome = '" .utf8_encode($arquivo->val($l, 13)) ."'");
					
					if(count($mae) == 0 && $arquivo->val($l, 13) != ''){
						$objMae = $this->objPessoa($arquivo->val($l, 13), '', '', 
												   $arquivo->val($l, 14), 'Feminino', 0, 
												   0, 0, 0, 
												   0, 0, 0, 
												   0, 1, 11, 
												   '', '', '', 
												   '', '', '');

						$mae = $this->postPessoa($objMae, true);

						$id_mae = $mae['id_pessoa'];

						$resultadoMae = null;
					}else{
						$id_mae = $mae[0]['id'];
					}

					$error['id_mae'] = $id_mae;

					if($id_mae != '' && $id_mae != null){
						$objResponsavel = $this->objResponsavel($id_aluno, $id_mae, $arquivo->val($l, 13), 
																'', $arquivo->val($l, 14), 'Feminino', 
																'', '', '', 
																2, 0, 0);

						$resultMae = $this->postResponsavelPessoa($objResponsavel, true);

						if($resultMae['error'] == 0){
							$resultadoMae = true;
						}

						$error['id_responsavel_mae'] = $resultMae;
					}	
				}
			}
			

			$arrResultado[] = array(
				'id_aluno' 	=> $id_aluno,
				'nome' 		=> utf8_encode($arquivo->val($l, 1)),
				'resultado_pai' => $resultadoPai,
				'resultado_mae' => $resultadoMae,
				'error' => $error,
			);
		}

		//var_dump(count($arrResultado));

		$arrResultado = array(
			'error' => 0,
			'importar_aluno' => $arrResultado,
		);

		fJSON::output($arrResultado);
	}


	/*
	Módulo: Importacao
	Descrição: Importar alunos de um excel
	Método: GET
	URL: http://localhost/sig/api/index.php/importarresponsavel/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	public function responsavelFinanceiroPedagogico($tipo, $id_aluno, $id_pessoa, $email, $estado_civil, $sexo){
		$result = false;

		$pessoa = new Pessoa($id_pessoa);
					
		if($email != '' || $email != null){
			$pessoa->setEmail($email);
		}

		if($sexo != '' || $sexo != null){
			$pessoa->setSexo(strtoupper(substr($sexo, 0, 1)));
		}

		if($estado_civil != '' || $estado_civil != null){
			$estadoCivil = $this->getRegistroCampo("SELECT * FROM estado_civil 
													WHERE descricao = '" .utf8_encode($estado_civil) ."'");
			if(count($estadoCivil) > 0){
				$pessoa->setIdEstadoCivil($estadoCivil[0]['id']);	
			}
		}

		$pessoa->store();

		$id_responsavel = $pessoa->getId();

		$verificaResponsavelAluno = $this->getRegistroCampo("SELECT * FROM responsavel_aluno
										   	   		 WHERE id_pessoa = " .$id_responsavel ."
										   	   			and id_pessoa_aluno = " .$id_aluno);

		if(count($verificaResponsavelAluno) > 0){
			$responsavelAluno = new ResponsavelAluno($verificaResponsavelAluno[0]['id']);
			if($tipo == 'FINANCEIRO'){
				$responsavelAluno->setResponsavelFinanceiro(1);
			}

			if($tipo == 'PEDAGOGICO'){
				$responsavelAluno->setResponsavelPedagogico(1);
			}
			
			$responsavelAluno->store();

			$result = true;
		}

		return $result;
	}

	public function postImportarComplementarResponsavel() {
		$data = json_decode(file_get_contents("php://input"));	
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$arquivo = new Spreadsheet_Excel_Reader("../importacao/complementar_responsavel/" .$data->arquivo);
 		
 		$arrResultado = array();

		$totalLinhas = $data->posicao + $data->pacote;

		for ($l = $data->posicao; $totalLinhas > $l; $l++) {
			$resultadoFinanceiro = false;
			$resultadoPedagogico = false;

			$id_aluno = '';
			$id_responsavel_financeiro = '';
			$id_responsavel_pedagogico = '';

			$aluno = $this->getRegistroCampo("SELECT * FROM pessoa 
											  WHERE nome = '" .utf8_encode($arquivo->val($l, 1)) ."'");

			if(count($aluno) > 0){
				$id_aluno = $aluno[0]['id'];

				$financeiro = $this->getRegistroCampo("SELECT * FROM pessoa 
													   WHERE nome = '" .utf8_encode($arquivo->val($l, 2)) ."'");

				if(count($financeiro) > 0){
					$resultFinanceiro = $this->responsavelFinanceiroPedagogico('FINANCEIRO', 
																			   $id_aluno, 
																			   $financeiro[0]['id'], 
																			   $arquivo->val($l, 6), 
																			   $arquivo->val($l, 3),
																			   '');
					$resultadoFinanceiro = $resultFinanceiro;
				}

				$pedagogico = $this->getRegistroCampo("SELECT * FROM pessoa 
													   WHERE nome = '" .utf8_encode($arquivo->val($l, 9)) ."'");

				if(count($pedagogico) > 0){
					$resultPedagogico = $this->responsavelFinanceiroPedagogico('PEDAGOGICO', 
																			   $id_aluno, 
																			   $pedagogico[0]['id'], 
																			   $arquivo->val($l, 13), 
																			   $arquivo->val($l, 10),
																			   $arquivo->val($l, 16));

					$resultadoPedagogico = $resultPedagogico;
				}

			}

			$arrResultado[] = array(
				'id_aluno' 			   => $id_aluno,
				'nome' 				   => utf8_encode($arquivo->val($l, 1)),
				'resultado_financeiro' => $resultadoFinanceiro,
				'resultado_pedagogico' => $resultadoPedagogico,
			);
		}

		//var_dump(count($arrResultado));

		$arrResultado = array(
			'error' => 0,
			'importar_aluno' => $arrResultado,
		);

		fJSON::output($arrResultado);
	}


	/*
	Módulo: Escola
	Descrição: Obter Lista de Conversões
	Método: GET
	URL: http://localhost/sig/api/index.php/conversoes/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getConversoes($id="", $full = false) 
	{
		$consulta = "SELECT %S FROM %F %J %W ORDER BY %O";
		$tabela   = "conversoes";
		$alias 	  = " c";
		$join 	  = "LEFT JOIN religiao r ON r.id = c.id_religiao ";
		$join 	 .= "LEFT JOIN tipo_documento t ON t.id = c.id_tipo_documento";
		$condicao = ($id!="") ? "WHERE c.id = ".$id : "";
		$ordem 	  = "c.id";

		$cmps = array();
		$sqld = "DESC ".strtolower($tabela);

		$rs = $this->_getDb()->query($sqld);
		foreach ($rs as $ch => $val){ $cmps[] = $alias.'.'.$val['Field']; }
		$rs = $this->_getDb()->close();				

		$cmps[] = 'r.descricao religiao_descricao';
		$cmps[] = 't.descricao tipodocumento_descricao';

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $cmps), $sqlq);
		$sqlq = str_replace("%F", $tabela.$alias 	 , $sqlq);
		$sqlq = str_replace("%J", $join 			 , $sqlq);
		$sqlq = str_replace("%W", $condicao 		 , $sqlq);
		$sqlq = str_replace("%O", $ordem 			 , $sqlq);
				
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ 		

			$dt = new DateTime($value['data_nascimento']);			
			$dt = $dt->format('d/m/Y');
			$value['data_nascimento'] = $dt;

			$dt = new DateTime($value['data_conversao']);			
			$dt = $dt->format('d/m/Y');
			$value['data_conversao'] = $dt;

			$retorno[] = $value;
		}
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error'=>0, 'retorno'=>$retorno );
		if($full==false){ fJSON::output($retorno); }else{ return $retorno; }
	}
	
	/*
	Módulo: Escola
	Descrição: Cadastrar Conversões
	Método: POST
	URL: http://localhost/sig/api/index.php/conversoes/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function postConversoes() 
	{
		$data = json_decode(file_get_contents("php://input"));
		$this->postGeral('conversoes',$data);
	}


	/*
	Módulo: Escola
	Descrição: FUNÇÃO DE POST GENÉRICA (PARÂMETROS: TABELA,DADOS-DO-POST)
	Método: POST
	URL: SOMENTE INTERNO A SIG 
	PROTÓTIPO PARA CHAMAR A FUNÇÃO:

		public function postNomeFuncao() 
		{
			$data = json_decode(file_get_contents("php://input"));
			$this->postGeral('nome_da_tabela',$data);
		}

	Autenticação: Não
	Resposta: JSON
	Data de Criação: 31/08/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function postGeral($tabela,$data) 
	{	

		$cls='';
		$tabela = strtolower($tabela);
		$mt = explode('_',$tabela);
		foreach ($mt as $v) {
    		$cls.=ucfirst($v);
		}	

		if (property_exists($data, 'id')) {
			$tab = new $cls($data->id);
			$aSearch = array();
			$aSearch['id='] = $data->id;
			$mensagem = "Registro alterado com sucesso!";
			$alt=true;
		}
		else{
			$tab = new $cls();
			$mensagem = "Registro incluído com sucesso!";
			$alt=false;
		}

		try {
			
			$cmps = array();
			$set = array();
			$get = array();

			$sqld = "DESC ".$tabela;

			$rs = $this->_getDb()->query($sqld);
			foreach ($rs as $ch => $val){ $cmps[] = $val['Field']; }
			$rs = $this->_getDb()->close();

			$mt = array();

			foreach ($cmps as $cmp){ 
				$td = array();
				$exp = explode("_", $cmp);
				foreach ($exp as $pt){ $td[] = ucfirst($pt); }
				$imp = implode('',$td);

				if(property_exists($data, $cmp)){					

					$get = 'get'.$imp;
					$set = 'set'.$imp;					

					if($alt){ $this->setAuditoria($tabela, $cmp, $data->$cmp, $tab->$get()); }
					$tab->$set($data->$cmp);
				}
			}			
			$tab->store();

			$id = $tab->getId();
			$msg = array('error' => 0, 'id' => $id, 'mensagem' => $mensagem);
			return $msg;
			die();
			
		}
		catch (fValidationException $e) {			
			$msg = array('error' => -1, 'mensagem' => 'Erro '.$e->getMessage());
			return $msg;
			die();
		}		
	}

	/*
	Módulo: Escola
	Descrição: Excluir registro na tabela "conversoes"
	Método: GET
	URL: http://localhost/sig/api/index.php/delconversoes/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/07/2015
	Autor: Fábio Roberto Haydn	
	*/

	public function delConversoes() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;
		
		$Conversao = fRecordSet::build('Conversoes', $aSearch);
		$mensagem = "Registro excluído com sucesso!";        

		try {

			$Conversao[0]->delete();		

			$msg = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($msg);
			die();
		}
	}



	/*
	Módulo: Escola
	Descrição: Lista todos os cursos a partir de uma etapa
	Método: GET
	URL: http://localhost/sig/api/index.php/cursoetapa/<id_etapa>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 04/07/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function delJazigo() {

		$id_ua = json_decode(file_get_contents("php://input"));

		$userSes = fSession::get('user');
		$id_gaveta = '';
		$tmp = array();

		try {

			$sqlq = 'SELECT id FROM gaveta WHERE id_unidade_armazenagem='.$id_ua;

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $tmp[] = $value['id']; }
			$rs = $this->_getDb()->close();	

			$sqlq1 = 'DELETE FROM gaveta WHERE id_unidade_armazenagem='.$id_ua;
			$rsd01 = $this->_getDb()->query($sqlq1);			
			$rsd01 = $this->_getDb()->close();

			if(count($tmp)>0){

				$id_gavetas = implode(",", $tmp);

				$sqlq2 = 'DELETE FROM unidade_armazenagem_movimentacao WHERE id_gaveta IN('.$id_gavetas.')';
				$rsd02 = $this->_getDb()->query($sqlq2);			
				$rsd02 = $this->_getDb()->close();
			}

			$sqlq3 = 'DELETE FROM unidade_armazenagem_pessoa WHERE id_unidade_armazenagem='.$id_ua;
			$rsd03 = $this->_getDb()->query($sqlq3);			
			$rsd03 = $this->_getDb()->close();

			$sqlq4 = 'DELETE FROM unidade_armazenagem WHERE id='.$id_ua;
			$rsd04 = $this->_getDb()->query($sqlq4);			
			$rsd04 = $this->_getDb()->close();			

			$this->setAuditoria('Jazigo', 'Excluído Registro ID:', $id_ua, '');

			$msg = array('error' => 0, 'mensagem' => 'Excluído com sucesso!');
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro na inclusão");
			fJSON::output($msg);
			die();
		}
	}

	public function getCursoEtapa($id_etapa){
		$this->acessoApi();

		$query = "SELECT curso.nome, curso.id FROM curso INNER JOIN curso_complemento ON curso_complemento.id_etapa = ".$id_etapa." AND curso_complemento.id_curso = curso.id";

		$curso = $this->_getDb()->query($query);
		$aCurso = array();

		foreach ($curso as $key => $value){

		$aCurso[] = array(
			'id' => $value['id'],
			'nome' => $value['nome']
			);
		}

		$curso = $this->_getDb()->close();

		if (count($aCurso) == 0) {
			$aCurso = array('error' => -1, 'mensagem' => "Nenhum aluno encontrado.");
		} else {
			$aCurso = array('error' => 0, 'curso' => $aCurso);
		}

		fJSON::output($aCurso);		
	}

	/*
	Módulo: Escola
	Descrição: Obter Lista de Transferência
	Método: GET
	URL: http://localhost/sig/api/index.php/transferencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/09/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function getTransferencia($id='',$full = false) 
	{
		$userSes = fSession::get('user');

		$consulta = "SELECT %S, 
					 COALESCE(CONCAT(CASE WHEN c.id_moeda = 1 THEN 'R$' ELSE '$' END,REPLACE(valor,'.',',')),'') moeda, 
					 COALESCE((SELECT descricao from conta_bancaria where id=c.id_conta_bancaria),'') conta_bancaria, 
					 COALESCE((SELECT descricao from conta_bancaria where id=c.id_conta_bancaria_destino),'') conta_bancaria_destino
		 			 FROM %F WHERE %W ORDER BY %O";

		$tabela   = "caixa c";
		$ordem 	  = "c.id";
		$condicao = "c.id_transferido>0 and c.id_situacao=2 ";
		$condicao.= "AND (SELECT id_entidade FROM conta_bancaria WHERE id=c.id_conta_bancaria) = ".$userSes['user']['idTipoEntidade'];
		$condicao.= ($id!='') ? " AND c.id=".$id : "";

		$campos = array();
		$sqld = "DESC caixa;";

		$rs = $this->_getDb()->query($sqld);

			foreach ($rs as $ch => $val)
			{ 
				$ct=0;
				$ct+=(strpos($val['Type'],'int')!==false);
				$ct+=(strpos($val['Type'],'decimal')!==false);
				$ct+=(strpos($val['Type'],'tinyint')!==false);			

				$campos[] = "COALESCE(c.".$val['Field'].",".(($ct>0) ? 0 : "''").") ".$val['Field']; 
			}

		$rs = $this->_getDb()->close();

		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);		
		$sqlq = str_replace("%W", $condicao				, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }	
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela: ".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error'=>0, 'retorno'=>$retorno );
		if($full==false){ fJSON::output($retorno); }else{ return $retorno; }
	}

	/*
	Módulo: Escola
	Descrição: Apagar registro de Transferência Bancária
	Método: POST
	URL: http://localhost/sig/api/index.php/transferencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/09/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/
	public function delTransferencia($full = false) 
	{	
		$data = json_decode(file_get_contents("php://input"));

		if($data->id>0){

			$sqlq=" SELECT c.id FROM caixa c WHERE c.id_transferido>0 and c.id_situacao in(2,6) AND COALESCE(c.id_conta_bancaria_destino,0)>0 AND (c.id=".$data->id." OR c.id_transferido=".$data->id.");";

			$mtid = array();

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $mtid[] = $value['id']; }
			$rs = $this->_getDb()->close();

			try{

				foreach ($mtid as $idv){

					$sqld = 'DELETE FROM caixa WHERE id='.$idv;

					$rsd = $this->_getDb()->query($sqld);
					$rsd = $this->_getDb()->close();
				}

				$msg = array('error' => 0, 'mensagem' => 'Registro excluído com sucesso!');
				fJSON::output($msg);
				die();
			}
			catch (fValidationException $e) {
				$msg = array('error' => -1, 'mensagem' => "Erro na inclusão");
				fJSON::output($msg);
				die();
			}
		}
	}

	/*
	Módulo: Doação
	Descrição: Caixa (Despesas / Recebimentos / Transferências)
	Método: POST
	URL: http://localhost/sig/api/index.php/transferencia/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/11/2015
	Autor: Fabio Roberto Haydn	
	*/

	public function postTransferencia() 
	{
		try{

			$data = json_decode(file_get_contents("php://input"));					
						
			$dt_pago = new stdClass();
			$dt_pago->ativo						= $data->ativo;
			$dt_pago->data_lancamento			= $data->data_lancamento;
			$dt_pago->data_pagamento			= $data->data_pagamento;
			$dt_pago->data_vencimento			= $data->data_vencimento;
			$dt_pago->descricao					= $data->descricao;
			$dt_pago->dia						= $data->dia;
			$dt_pago->id_categoria				= $data->id_categoria;
			$dt_pago->id_conta_bancaria			= $data->id_conta_bancaria;
			$dt_pago->id_conta_bancaria_destino = $data->id_conta_bancaria_destino;
			$dt_pago->id_forma_pagamento		= $data->id_forma_pagamento;
			$dt_pago->id_moeda					= $data->id_moeda;
			$dt_pago->id_pessoa					= $data->id_pessoa;
			$dt_pago->valor						= $data->valor;
			$dt_pago->valor_final				= $data->valor_final;

			$dt_pago->id_situacao 		 		= $data->id_situacao_P;
			$dt_pago->id_tipo_lancamento 		= $data->id_tipo_lancamento_P;
			
			$retorno = $this->postGeral('caixa',$dt_pago);
			$id_pago = $retorno['id'];

			$dt_receb = new stdClass();
			$dt_receb->ativo					 = $data->ativo;
			$dt_receb->data_lancamento			 = $data->data_lancamento;
			$dt_receb->data_pagamento			 = $data->data_pagamento;
			$dt_receb->data_vencimento			 = $data->data_vencimento;
			$dt_receb->descricao				 = $data->descricao;
			$dt_receb->dia						 = $data->dia;
			$dt_receb->id_categoria				 = $data->id_categoria;
			$dt_receb->id_conta_bancaria		 = $data->id_conta_bancaria_destino; //inverter para constar certo nos GRIDs
			$dt_receb->id_conta_bancaria_destino = $data->id_conta_bancaria;
			$dt_receb->id_forma_pagamento		 = $data->id_forma_pagamento;
			$dt_receb->id_moeda					 = $data->id_moeda;
			$dt_receb->id_pessoa				 = $data->id_pessoa;
			$dt_receb->valor					 = $data->valor;
			$dt_receb->valor_final				 = $data->valor_final;

			$dt_receb->id_transferido 			 = $id_pago;
			$dt_receb->id_situacao 				 = $data->id_situacao_R;
			$dt_receb->id_tipo_lancamento		 = $data->id_tipo_lancamento_R;

			$retorno = $this->postGeral('caixa',$dt_receb);
			$id_receb = $retorno['id'];

			$dt_pago->id						 = $id_pago;
			$dt_pago->id_transferido 			 = $id_receb;
		
			fJSON::output($this->postGeral('caixa',$dt_pago));
		}
		catch (fValidationException $e) {
			$error = $this->errorMessage("Erro na inclusão",$e);
			$arrMensagem = array('error' => -1, 'mensagem' => $error);
			fJSON::output($arrMensagem);			
		}
	}



	public function carregaEtapaCurso($id_curso='', $id_etapa=''){

		$this->acessoApi();
		$aTurma = array();
		$query = "SELECT id, nome FROM turma WHERE id_curso = ".$id_curso." AND id_etapa = " . $id_etapa;

		$db = $this->_getDb()->query($query);

		foreach ($db as $key => $value){
			$aTurma[] = $value;
		}

		$db = $this->_getDb()->close();	

		if (count($aTurma) == 0) {
			$aTurma = array('error' => -1, 'mensagem' => 'Nenhuma turma encontrada.');
		} else {
			$aTurma = array('error' => 0, 'turmas' => $aTurma);
		}
		fJSON::output($aTurma);
	}


	/*
	Módulo: Mesquita
	Descrição: consultar todas as pessoas 
	Método: GET
	URL: http://localhost/sig/api/index.php/consultapessoas/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/
	
	public function getConsultaPessoas($full = false) {
		$sql = "SELECT 
					pes.id, pes.nome, pes.id_tipo_pessoa, 
					CASE pes.id_tipo_pessoa 
						WHEN 2 THEN 'Pessoa Jurídica'
						ELSE 'Pessoa Física' 
					END as tipo_pessoa,
					pes.associado, pes.beneficiario, pes.parentesco, pes.funcionario, pes.proprietario, 
					pes.responsavel, pes.donatario, pes.responsavel_proprietario, pes.fornecedor, pes.aluno, 
					pes.professor, pes.padrinho
				FROM pessoa pes
				ORDER BY nome ASC";

		$db = $this->_getDb()->query($sql);		

		$aDb = array();
		foreach ($db as $key => $value){ 
			$value['associado'] = (bool) $value['associado'];
			$value['beneficiario'] = (bool) $value['beneficiario'];
			$value['parentesco'] = (bool) $value['parentesco'];
			$value['funcionario'] = (bool) $value['funcionario'];
			$value['proprietario'] = (bool) $value['proprietario'];
			$value['responsavel'] = (bool) $value['responsavel'];
			$value['donatario'] = (bool) $value['donatario'];
			$value['responsavel_proprietario'] = (bool) $value['responsavel_proprietario'];
			$value['fornecedor'] = (bool) $value['fornecedor'];
			$value['aluno'] = (bool) $value['aluno'];
			$value['professor'] = (bool) $value['professor'];
			$value['padrinho'] = (bool) $value['padrinho'];

			$aDb[] = $value;
		}

		$db = $this->_getDb()->close();

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhuma pessoa encontrada."
			);
		}else{
			$aDb = array(
				'error' => 0, 
				'pessoas' => $aDb
			);
		}

		if($full == false) {
			fJSON::output($aDb);
		}else{
			return $aDb;
		}
	}


	/*
	Módulo: Geral
	Descrição: Altera o tipo de pessoa
	Método: POST
	URL: http://localhost/sig/api/index.php/updatepessoas/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 05/11/2014
	Autor: Fabio S. da Silva
	*/

	public function updatePessoas(){
		
		$data = json_decode(file_get_contents("php://input"));	
		// var_dump($data);
		try{

			if(property_exists($data, 'id') && property_exists($data, 'camp') && property_exists($data, 'label')){
				$pessoa = new Pessoa($data->id);
				
				$get = 'get'.$data->camp;
				$set = 'set'.$data->camp;

				$valor_antigo = $pessoa->$get(); 
				// $valor_novo = $valor_antigo; 
				
				if($valor_antigo == 0){
					$valor_novo = 1;	
				}else{
					$valor_novo = 0;	
				}
				// var_dump($valor_novo);
				$this->setAuditoria($data->label, $data->camp, $valor_antigo, $valor_novo);
				
				$pessoa->$set($valor_novo);
				$mensagem = $data->label ." alterado com sucesso!";
			}
			//print_r($pessoa);

			$pessoa->store();
			
			$arrMensagem = array(
				'error' => 0, 
				'mensagem' => $mensagem
			);

			fJSON::output($arrMensagem);

		} catch (fExpectedException $e) {
			$arrMensagem = array(
				'error' => -1, 
				'mensagem' => "Erro: " .$e
			);

			fJSON::output($arrMensagem);
			die();
		}
	}


	/*
	Módulo: Relatorio
	Descrição: Gerar Relatório entrada e saida
	Método: GET
	URL: http://localhost/sig/api/index.php/relatorioentredasaida/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/09/2015
	Autor: Fábio S. da Silva
	Versão: 1.0
	*/

	public function relatorioModelo($titulo, $data, $corpo, $formato = 0, $n_coluna_titulo = 0){
		$userSes = fSession::get('user');
		
		$entidade = $this->getRegistroCampo("SELECT logotipo FROM entidade WHERE id_tipo_entidade = " .$userSes['user']['idTipoEntidade']);

		$logotipo = 'http://' .$_SERVER['HTTP_HOST'] .'/sig/img/logotipos/' .$entidade[0]['logotipo'];

		if($formato == 1){
			$filename = "../template_relatorio_pdf.html";
		}else{
			$filename = "../template_relatorio_xls.html";
		}
		
		$handle = fopen ($filename, "r");
		$conteudo = fread ($handle, filesize ($filename));
		fclose ($handle);

		$conteudo = str_replace('{{titulo}}', $titulo, $conteudo);
		$conteudo = str_replace('{{data}}', $data, $conteudo);		
		$conteudo = str_replace('{{corpo}}', $corpo, $conteudo);
		$conteudo = str_replace('{{logotipo}}', $logotipo, $conteudo);
		$conteudo = str_replace('{{n_coluna_titulo}}', $n_coluna_titulo, $conteudo);

		return $conteudo;
	}

	// public function relatorioEntradaSaida($data_inicio = '', $data_final = '', $id_conta_bancaria = '', $formato = 0){
	// 	$userSes = fSession::get('user');

	// 	$fitroContaBancaria = '';
	// 	if($id_conta_bancaria != ''){
	// 		$fitroContaBancaria = " and c.id_conta_bancaria = " .$id_conta_bancaria;
	// 	}
		
	// 	$aData = explode('-', $data_final);

	// 	$mes = date("m", mktime(0,0,0, $aData[1]-1, '01', $aData[0]));

	// 	$dtInicio = $aData[0] .'-' .$mes .'-01';

	// 	$ultimoDia = date("t", mktime(0,0,0, $mes, '01', $aData[0]));

	// 	$dtFinal = $aData[0] .'-' .$mes .'-' .$ultimoDia;

	// 	$sql = "select 
	// 				sum(x.valor_final) as entrada	
	// 			from(select 
	// 					coalesce(c.data_vencimento,c.data_pagamento) data_pagamento,	
	// 					c.valor_final, s.descricao situacao, tl.descricao lancamento, c.id_situacao, c.id_tipo_lancamento
	// 				from caixa c
	// 					LEFT JOIN conta_bancaria cb on cb.id = c.id_conta_bancaria
	// 					left join situacao s on c.id_situacao=s.id
	// 					left join tipo_lancamento tl on c.id_tipo_lancamento=tl.id
	// 				where cb.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
	// 					" .$fitroContaBancaria ."
	// 					and c.id_situacao in (2,6) 
	// 					and c.id_tipo_lancamento in (1, 7)
	// 					and c.ativo = 1)x
	// 			where x.data_pagamento < '" .$data_inicio ."'";


	// 			// and cai.data_pagamento between '" .$dtInicio ."' and '".$dtFinal."'"

	// 	$dbEntrada = $this->_getDb()->query($sql);

	// 	$sql = "select 
	// 				sum(x.valor_final) as saida
	// 			from(select 
	// 					coalesce(c.data_vencimento,c.data_pagamento) data_pagamento,	
	// 					c.valor_final, s.descricao situacao, tl.descricao lancamento, c.id_situacao, c.id_tipo_lancamento
	// 				from caixa c
	// 					LEFT JOIN conta_bancaria cb on cb.id = c.id_conta_bancaria
	// 					left join situacao s on c.id_situacao=s.id
	// 					left join tipo_lancamento tl on c.id_tipo_lancamento=tl.id
	// 				where cb.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
	// 					" .$fitroContaBancaria ."
	// 					and c.id_situacao = 2 
	// 					and c.id_tipo_lancamento in (2,3,4,5)
	// 					and c.ativo = 1)x
	// 			where x.data_pagamento < '" .$data_inicio ."'";

	// 			// and cai.data_pagamento between '" .$dtInicio ."' and '".$dtFinal."'"

	// 	$dbSaida = $this->_getDb()->query($sql);
		
	// 	foreach ($dbEntrada as $value) {
	// 		$valorEntrada = $value['entrada'];
	// 	}

	// 	foreach ($dbSaida as $value) {
	// 		$valorSaida = $value['saida'];
	// 	}

	// 	$saldoMesAnterior = $valorEntrada - $valorSaida;

	// 	$sql = "select 
	// 				x.*
	// 			from(select 
	// 					c.id, coalesce(c.data_vencimento,c.data_pagamento) data_pagamento,	
	// 					c.valor_final, c.descricao, c.id_tipo_lancamento
	// 				from caixa c
	// 					LEFT JOIN conta_bancaria cb on cb.id = c.id_conta_bancaria
	// 					left join situacao s on c.id_situacao=s.id
	// 					left join tipo_lancamento tl on c.id_tipo_lancamento=tl.id
	// 				where cb.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
	// 					" .$fitroContaBancaria ."
	// 					and c.id_situacao in (2, 6) 
	// 					and c.id_tipo_lancamento in (1,2,3,4,5,7)
	// 					and c.ativo = 1)x
	// 			where x.data_pagamento between '" .$data_inicio ."' and '" .$data_final ."'
	// 			ORDER BY 
	// 				data_pagamento,id
	// 			ASC";


	// 	$db = $this->_getDb()->query($sql);

	// 	$buffer = ' <table border="0" width="100%"> 
	// 					<tr class="cabecalho">
	// 						<td align="left"><strong>DATA</strong></td>
	// 						<td align="left"><strong>DISCRIMINAÇÃO</strong></td>
	// 						<td align="right"><strong>ENTRADA</strong></td>
	// 						<td align="right"><strong>SAIDA</strong></td>
	// 						<td align="right"><strong>SALDO</strong></td>
	// 						<td align="right"></td>
	// 					</tr>
	// 					<tr class="zebrado_par">					
	// 						<td>' .implode('/', array_reverse(explode('-', $data_inicio))) .'</td>
	// 						<td>Saldo Mês Anterior</td>
	// 						<td align="right">--</td>
	// 						<td align="right">--</td>
	// 						<td align="right">R$ ' .number_format($saldoMesAnterior, 2, ',', '.') .'</td>					
	// 						<td align="right"></td>
	// 					</tr>';

	// 	$saldo = $saldoMesAnterior;
	// 	$a = 1;

	// 	$primeira_linha = 7;
	// 	$segunda_linha = 8;

	// 	foreach ($db as $value) {
	// 		$entrada = 0.00;
	// 		$saida = 0.00;
			
	// 		if($value['id_tipo_lancamento'] == 1 || $value['id_tipo_lancamento'] == 7){
	// 			$entrada = number_format($value['valor_final'], 2, '.', '');
	// 		}

	// 		if($value['id_tipo_lancamento'] == 2 || $value['id_tipo_lancamento'] == 3 || $value['id_tipo_lancamento'] == 5 || $value['id_tipo_lancamento'] == 4){
	// 			$saida = number_format($value['valor_final'], 2, '.', '');
	// 		}

	// 		if(($a%2) == 0){
	// 			$classContador = 'zebrado_par';
	// 		}else{
	// 			$classContador = 'zebrado_impar';
	// 		}

			
	// 		$entradaViews = 'R$ ' .number_format($entrada, 2, ',', '.');
	// 		$saidaViews = 'R$ ' .number_format($saida, 2, ',', '.');
			
	// 		$saldo = $saldo + $entrada -  $saida;

	// 		if($formato == 1){
	// 			$saldoViews = 'R$ ' .number_format($saldo, 2, ',', '.');
	// 		}else{
	// 			$saldoViews = '=E'.$primeira_linha .'+c'.$segunda_linha.'-d'.$segunda_linha;	
	// 		}

	// 		$buffer .= '<tr class="' .$classContador .'">					
	// 						<td>' .implode('/', array_reverse(explode('-', $value['data_pagamento']))) .'</td>
	// 						<td>' .$value['descricao'] .'</td>
	// 						<td align="right">' .$entradaViews .'</td>
	// 						<td align="right">' .$saidaViews .'</td>
	// 						<td align="right">' .$saldoViews .'</td>					
	// 					</tr>';

	// 		$a++;
	// 		$primeira_linha++;
	// 		$segunda_linha++;

	// 	}
		
	// 	$buffer .= '
	// 			<tr height="40" valign="bottom">
	// 				<td colspan="4" align="center">
	// 					<strong>SALDO A TRANSPORTAR</strong>
	// 				</td>
	// 				<td align="right">
	// 					<strong>';
	// 	if($formato == 1){
	// 		$buffer .= number_format($saldo, 2, ',', '.');
	// 	}else{
	// 		$buffer .= '=E' .($segunda_linha-1);
	// 	}
						
	// 	$buffer .= '	</strong>
	// 				</td>
	// 			</tr>
	// 			<tr>
	// 				<td colspan="5">&nbsp;</td>
	// 			</tr>
	// 			<tr>
	// 				<td colspan="5">&nbsp;</td>
	// 			</tr>
	// 			<tr>
	// 				<td colspan="5" align="right">
	// 					_____________________________
	// 				</td>
	// 			</tr>
	// 			<tr>
	// 				<td colspan="5" align="right">
	// 					' .$userSes['user']['nome'] .'
	// 				</td>
	// 			</tr>
	// 		</table>
	// 		';
		
	// 	$db = $this->_getDb()->close();

	// 	setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
	// 	date_default_timezone_set('America/Sao_Paulo');
	// 	$data = strftime('%A, %d de %B de %Y', strtotime('today'));
		

	// 	$conteudo = $this->relatorioModelo('Relatório de controle de caixa', 
	// 									   utf8_encode($data), 
	// 									   $buffer,
	// 									   $formato,
	// 									   4);

	// 	if($formato == 1){
	// 		echo $conteudo;
	// 	}else{
	// 		echo $conteudo;

	// 		header("Content-type: charset=UTF-8");
	// 		header("Content-type: application/vnd.ms-excel;");
	// 		header("Content-type: application/force-download");
	// 		header('Content-Disposition: attachment; filename=entrada_saida.xls');
	// 		header("Pragma: no-cache");	
	// 	}
		
	// }

	public function relatorioEntradaSaida($data_inicio = '', $data_final = '', $id_conta_bancaria = '', $formato = 0){
		$userSes = fSession::get('user');

		$fitroContaBancaria = '';
		if($id_conta_bancaria != ''){
			$fitroContaBancaria = " and cai.id_conta_bancaria = " .$id_conta_bancaria;
		}
		
		$aData = explode('-', $data_final);

		$mes = date("m", mktime(0,0,0, $aData[1]-1, '01', $aData[0]));

		$dtInicio = $aData[0] .'-' .$mes .'-01';

		$ultimoDia = date("t", mktime(0,0,0, $mes, '01', $aData[0]));

		$dtFinal = $aData[0] .'-' .$mes .'-' .$ultimoDia;



		/*$sql = "SELECT sum(cai.valor_final) as entrada 
				FROM caixa cai 
				INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
				WHERE cai.id_tipo_lancamento in (1,7) and 
				cai.id_situacao in (2,6) and 
				cai.data_vencimento <= '".$dtFinal."' and 
				cai.ativo=1";*/

		$sql = "SELECT 
					(SELECT COALESCE(sum(cai.valor_final), 0) as ent
					FROM caixa cai 
					INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
					WHERE cai.id_tipo_lancamento in (1,7) 
					and cai.id_situacao in (2,6) 
					and cai.data_vencimento <= '".$dtFinal."'
					" .$fitroContaBancaria ."
					and cai.ativo=1) as saldo_entrada,
					(SELECT COALESCE(sum(cai.valor_final), 0) as trans_ent
					FROM caixa cai 
					INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria_destino = con_ban.id 
						and cai.id_conta_bancaria is not null
					WHERE cai.id_tipo_lancamento = 6 
					and cai.data_vencimento <= '".$dtFinal."' 
					" .$fitroContaBancaria ."
					and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ."
					and cai.ativo=1) as saldo_transferencia_entrada
				";

		$dbEntrada = $this->_getDb()->query($sql);

		/*$sql = "SELECT sum(cai.valor_final) as saida from caixa cai
			    INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ."
				where cai.id_tipo_lancamento in (2,3,4,5) 
					and cai.id_situacao=2 
					" .$fitroContaBancaria ."
					and cai.ativo=1
					and cai.data_pagamento <= '".$dtFinal."'";
		*/

		$sql = "SELECT 
					(SELECT sum(cai.valor_final) as saida from caixa cai
				    INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ."
					 where cai.id_tipo_lancamento in (2,3,4,5) 
						and cai.id_situacao = 2 
						and cai.ativo = 1
						" .$fitroContaBancaria ."
						and cai.data_pagamento <= '".$dtFinal."') as saldo_saida,
					(SELECT COALESCE(sum(cai.valor_final), 0) as trans_ent
					 FROM caixa cai 
					 INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria_destino = con_ban.id 
						and cai.id_conta_bancaria is not null
					 WHERE cai.id_tipo_lancamento = 6 
					 	and cai.data_vencimento <= '".$dtFinal."' 
					 	" .$fitroContaBancaria ."
						and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ." 
						and cai.ativo=1) as saldo_transferencia_saida";

		$dbSaida = $this->_getDb()->query($sql);
		
		foreach ($dbEntrada as $value) {
			$valorEntrada = $value['saldo_entrada'] + $value['saldo_transferencia_entrada'];
		}

		foreach ($dbSaida as $value) {
			$valorSaida = $value['saldo_saida'] + $value['saldo_transferencia_saida'];
		}

		$saldoMesAnterior = $valorEntrada - $valorSaida;

		$sql = "SELECT
					distinct 
					cai.id, cai.id_tipo_lancamento, data_pagamento, cai.descricao,	cai.valor_final
				FROM caixa cai  
				INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ."
				WHERE cai.id_tipo_lancamento not in (6,7) and cai.id_situacao in (2,6)
					" .$fitroContaBancaria ."
					and data_pagamento between '" .$data_inicio ."' and '" .$data_final ."'
					and cai.ativo=1
				UNION ALL 
				SELECT
					distinct 
					cai.id, cai.id_tipo_lancamento, data_vencimento as data_pagamento , cai.descricao,	cai.valor_final
				FROM caixa cai  
				INNER JOIN conta_bancaria con_ban on cai.id_conta_bancaria = con_ban.id and con_ban.id_entidade = " .$userSes['user']['entidadePessoa'] ."
				WHERE cai.id_tipo_lancamento= 7 and cai.id_situacao in (2,6)
					" .$fitroContaBancaria ."
					and cai.data_vencimento between '" .$data_inicio ."' and '" .$data_final ."'
					and cai.ativo=1
				ORDER BY 
					data_pagamento,id
				ASC";


		$db = $this->_getDb()->query($sql);

		$buffer = ' <table border="0" width="100%"> 
						<tr class="cabecalho">
							<td align="left"><strong>DATA</strong></td>
							<td align="left"><strong>DISCRIMINAÇÃO</strong></td>
							<td align="right"><strong>ENTRADA</strong></td>
							<td align="right"><strong>SAIDA</strong></td>
							<td align="right"><strong>SALDO</strong></td>
						</tr>
						<tr class="zebrado_par">					
							<td>' .implode('/', array_reverse(explode('-', $data_inicio))) .'</td>
							<td>Saldo Mês Anterior</td>
							<td align="right">--</td>
							<td align="right">--</td>
							<td align="right">R$ ' .number_format($saldoMesAnterior, 2, ',', '.') .'</td>					
						</tr>';

		$saldo = $saldoMesAnterior;
		$a = 1;

		$primeira_linha = 7;
		$segunda_linha = 8;

		foreach ($db as $value) {
			$entrada = 0.00;
			$saida = 0.00;
			
			if($value['id_tipo_lancamento'] == 1 || $value['id_tipo_lancamento'] == 7){
				$entrada = number_format($value['valor_final'], 2, '.', '');
			}

			if($value['id_tipo_lancamento'] == 2 || $value['id_tipo_lancamento'] == 3 || $value['id_tipo_lancamento'] == 5 || $value['id_tipo_lancamento'] == 4){
				$saida = number_format($value['valor_final'], 2, '.', '');
			}

			if(($a%2) == 0){
				$classContador = 'zebrado_par';
			}else{
				$classContador = 'zebrado_impar';
			}

			$entradaViews = 'R$ ' .number_format($entrada, 2, ',', '.');
			$saidaViews = 'R$ ' .number_format($saida, 2, ',', '.');

			if ($entrada == 0) {
				$entradaViews = '';
			}

			if ($saida == 0) {
				$saidaViews = '';
			}
			
			$saldo = $saldo + $entrada -  $saida;

			if($formato == 1){
				$saldoViews = 'R$ ' .number_format($saldo, 2, ',', '.');
			}else{
				$saldoViews = '=E'.$primeira_linha .'+c'.$segunda_linha.'-d'.$segunda_linha;	
			}

			$buffer .= '<tr class="' .$classContador .'">					
							<td>' .implode('/', array_reverse(explode('-', $value['data_pagamento']))) .'</td>
							<td>' .$value['descricao'] .'</td>
							<td style="white-space: nowrap;" align="right">' .$entradaViews .'</td>
							<td style="white-space: nowrap;" align="right">' .$saidaViews .'</td>
							<td style="white-space: nowrap;" align="right">' .$saldoViews .'</td>					
						</tr>';

			$a++;
			$primeira_linha++;
			$segunda_linha++;

		}
		
		$buffer .= '
				<tr height="40" valign="bottom">
					<td colspan="4" align="center">
						<strong>SALDO A TRANSPORTAR</strong>
					</td>
					<td align="right">
						<strong>';
		if($formato == 1){
			$buffer .= number_format($saldo, 2, ',', '.');
		}else{
			$buffer .= '=E' .($segunda_linha-1);
		}
						
		$buffer .= '	</strong>
					</td>
				</tr>
				<tr>
					<td colspan="5">&nbsp;</td>
				</tr>
				<tr>
					<td colspan="5">&nbsp;</td>
				</tr>
				<tr>
					<td colspan="5" align="right">
						_____________________________
					</td>
				</tr>
				<tr>
					<td colspan="5" align="right">
						' .$userSes['user']['nome'] .'
					</td>
				</tr>
			</table>
			';
		
		$db = $this->_getDb()->close();

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));
		

		$conteudo = $this->relatorioModelo('Relatório de controle de caixa', 
										   utf8_encode($data), 
										   $buffer,
										   $formato,
										   4);

		if($formato == 1){
			echo $conteudo;
		}else{
			echo $conteudo;

			header("Content-type: charset=UTF-8");
			header("Content-type: application/vnd.ms-excel;");
			header("Content-type: application/force-download");
			header('Content-Disposition: attachment; filename=entrada_saida.xls');
			header("Pragma: no-cache");	
		}
		
	}

/*
	Módulo: Cemiterio
	Descrição: Deleta um falecido
	Método: GET
	URL: http://localhost/sig/api/index.php/falecido/<id_falecido>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/09/2015
	Autor: Ricardo Bruno
	Versão: 1.0
	*/

	public function delFalecido() {

		$data = json_decode(file_get_contents("php://input"));

		$userSes = fSession::get('user');
		$id_falecido = $data->id_falecido;
		$id_gaveta = $data->id_gaveta;
		$tmp = array();

		try {

			$sqlq4 = 'DELETE FROM unidade_armazenagem_movimentacao WHERE id_falecido='.$id_falecido;
			$rsd04 = $this->_getDb()->query($sqlq4);			
			$rsd04 = $this->_getDb()->close();				

			$sqlq3 = 'DELETE FROM unidade_armazenagem_pessoa WHERE id_pessoa='.$id_falecido;
			$rsd03 = $this->_getDb()->query($sqlq3);			
			$rsd03 = $this->_getDb()->close();


			$sqlq5 = 'DELETE FROM falecido_causa_mortis WHERE id_falecido='.$id_falecido;
			$rsd05 = $this->_getDb()->query($sqlq5);			
			$rsd05 = $this->_getDb()->close();	

			$sqlq6 = 'DELETE FROM falecido WHERE id='.$id_falecido;
			$rsd06 = $this->_getDb()->query($sqlq6);			
			$rsd06 = $this->_getDb()->close();									

			$this->setAuditoria('Falecido', 'Excluído Registro ID:', $id_falecido, '');

			$query = 'UPDATE gaveta SET id_status_gaveta = 1 WHERE id = ' . $id_gaveta;
			$rs = $this->_getDb()->query($query);
			$rs = $this->_getDb()->close();

			$msg = array('error' => 0, 'retorno' => 'Falecido excluído com sucesso!');
			fJSON::output($msg);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'retorno' => "Erro na inclusão");
			fJSON::output($msg);
			die();
		}
	}

	public function getLogotipoEntidade(){
		$usuario = fSession::get('user');
		$id = $usuario['user']['id'];

		$query = "SELECT logotipo FROM entidade WHERE id = " . $id;

		$rs = $this->_getDb()->query($query);

		$logo = '';

		foreach($rs as $key => $value){
			$logo = "<img width='10%' src='http://".$_SERVER['HTTP_HOST']."/sig/img/logotipos/".$value['logotipo']."'>";
		}

		return $logo;
	}


	/*
	Módulo: Geral
	Descrição: grava file em session
	Método: GET
	URL: http://localhost/sig/api/index.php/uploadcommumfile
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function uploadCommumFile() {
		foreach($_FILES as $key => $value){
			$temp = $key;
			break;
		}

		$filename = $_FILES[$temp];

		$handle = fopen ($filename['tmp_name'], "r");
		
		$filename['code'] = fread ($handle, filesize ($filename['tmp_name']));

		fSession::set('file', $filename);

		fclose ($handle);

		echo $_FILES[$temp]['tmp_name'];
	}

	public function saveFile($endereco) {
		$file = $this->infoFile();

		$ext =  substr($file['name'], -4);

		$name = uniqid(time()) .$ext;

		$url = $endereco .'/' .$name;

		$fp = fopen($url, "a");

		$escreve = fwrite($fp, $file['code']);
 		
		fclose($fp);

		$file['new_name'] = $url;

		if($escreve){
			$file['result'] = true;
		}else{
			$file['result'] = false;
		}

		fSession::set('file', '');
		
		return $file;
	}

	public function infoFile() {
 		$conteudo = fSession::get('file');
		
		return $conteudo;
	}

	/*
	Módulo: Geral
	Descrição: grava file em session
	Método: GET
	URL: http://localhost/sig/api/index.php/baixaboleto
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 22/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postBaixaBoleto() {
		$data = json_decode(file_get_contents("php://input"));

		try{
			$aBoleto = array();

			foreach ($data as $key => $value) {

				$aSearch = array();
				$aSearch['id_status_parcela='] = 3;
				$aSearch['numero_documento='] = $value->nosso_numero;
				$objParcela = fRecordSet::build('Parcela', $aSearch);
				
				$status = false;
				$titular = '';
				foreach ($objParcela as $keyParcela => $valParcela) {
					$objParcela[$keyParcela]->setIdStatusParcela(4);
					$objParcela[$keyParcela]->store();
					$status = true;

					$sql = "SELECT 
								nome 
							FROM responsavel_aluno res
							INNER JOIN pessoa pes on pes.id = res.id_pessoa and res.responsavel_financeiro = 1
							WHERE res.id_pessoa_aluno = " .$objParcela[$keyParcela]->getIdAluno();

					$pessoas = $this->_getDb()->query($sql);
					foreach ($pessoas as $keyPessoa => $valPessoa){
						$titular = $valPessoa['nome'];
					}
					$pessoas = $this->_getDb()->close();
				}

				$aSearch = array();
				$aSearch['numero_documento='] = $value->nosso_numero;
				$objCaixa = fRecordSet::build('Caixa', $aSearch);
					
				foreach ($objCaixa as $key => $value) {
					$objCaixa[$key]->setIdSituacao(2);
					$objCaixa[$key]->setJuros($value->juros_mora);
					$objCaixa[$key]->setDesconto($value->desconto);
					$objCaixa[$key]->setDataPagamento($value->data_juros_mora);
					$objCaixa[$key]->store();

					$aSearch = array();
					$aSearch['nosso_numero='] = $objCaixa[$key]->getNumeroDocumento();
					$objCaixa = fRecordSet::build('Parcela', $aSearch);
					foreach ($objParcela as $key1 => $value1) {
						$objParcela[$key1]->setIdStatusParcela(4);
						$objParcela[$key1]->store();
					}
				}

				$aBoleto[] = array(
					'nosso_numero'	   => $value->nosso_numero,
					'titular'	   	   => $titular,
					'vencimento'	   => $value->vencimento,
					'valor_titulo'	   => $value->valor_titulo,
					'cod_juros_mora'   => $value->cod_juros_mora,
					'data_juros_mora'  => $value->data_juros_mora,
					'juros_mora' 	   => $value->juros_mora,
					'cod_desconto'	   => $value->cod_desconto,
					'data_desconto'    => $value->data_desconto,
					'desconto'		   => $value->desconto,
					'valor_abatimento' => $value->valor_abatimento,
					'status'		   => $status,
				);
			}

			$aBoleto = array(
				'error' => 0, 
				'baixa_boleto' => $aBoleto
			);

			fJSON::output($aBoleto);
			die();
		}
		catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro na baixa");
			fJSON::output($msg);
			die();
		}
	}

	/*
	Módulo: Geral
	Descrição: Retorna os boletos para ser dada baixa atravez de um arquivo
	Método: GET
	URL: http://localhost/sig/api/index.php/baixaboleto
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 24/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function getBaixaBoleto($full = false) {
		$file = $this->saveFile('../baixa_pagamento/boleto/');
		$lines = file ($file['new_name']);

		$aBoleto = array();

		for($a = 2; $a <= (count($lines)-4); $a++){
			$aBoleto[] = array(
				'nosso_numero'	   => trim(substr($lines[$a], 63, 11)),
				'vencimento'	   => trim(substr($lines[$a], 78, 8)),
				'valor_titulo'	   => trim(substr($lines[$a], 86, 13)),
				'cod_juros_mora'   => trim(substr($lines[$a], 118, 1)),
				'data_juros_mora'  => trim(substr($lines[$a], 119, 8)),
				'juros_mora' 	   => trim(substr($lines[$a], 127, 13)),
				'cod_desconto'	   => trim(substr($lines[$a], 142, 1)),
				'data_desconto'    => trim(substr($lines[$a], 143, 1)),
				'desconto'		   => trim(substr($lines[$a], 151, 13)),
				'valor_abatimento' => trim(substr($lines[$a], 181, 13)),
			);
		}
		
		$aBoleto = array(
			'error' => 0, 
			'baixa_boleto' => $aBoleto
		);

		if($full == false){
			fJSON::output($aBoleto);
			die();
		}else{
			return $aBoleto;
		}
		
	}


	/*
	Módulo: Financeiro
	Descrição: Copiar Parametros de cobrança
	Método: GET
	URL: http://localhost/sig/api/index.php/copiarparametrocobranca
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/09/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postCopiarParametroCobranca() {
		$data = json_decode(file_get_contents("php://input"));

		try{
			$sql = "SELECT * FROM parametro_cobranca WHERE id = '" .$data->id ."'";
			$parametro = $this->_getDb()->query($sql);			

			$aParametro = array();
			foreach ($parametro as $key => $value) {
				unset($value['id']);
				$value['mes_ano'] = substr(str_replace("/", "-",$data->data), 0, 7);

				$dt_vencimento = explode(" ",$value['data_vencimento']);
				$dt_vencimento = explode('-', $dt_vencimento[0]);
				$aMesAno = explode('-', $value['mes_ano']);
				$value['data_vencimento'] = date('Y-m-d', mktime(0, 0, 0, $aMesAno[1], $dt_vencimento[2], $aMesAno[0]));

				$aParametro = (object) $value;
			}

			$parametro = $this->_getDb()->close();

			if(count($aParametro) > 0){
				$aParametro = $this->postParametroCobranca($aParametro, true);	

				if($aParametro['error'] == 0){
					$sql = "SELECT * FROM parametro_cobranca_ocorrencia 
							WHERE id_parametro_cobranca = '" .$data->id ."'";

					$parametroOcorrencia = $this->_getDb()->query($sql);							

					$aParametroOcorrencia = array();
					foreach ($parametroOcorrencia as $key => $value) {
						$id_parametro_cobranca_ocorrencia_antigo = $value['id'];
						unset($value['id']);
						$value['id_parametro_cobranca'] = $aParametro['id'];

						$aParametroOcorrencia = (object) $value;

						$aParametroOcorrencia = $this->postParametroCobrancaOcorrencia($aParametroOcorrencia, true);
						
						if($aParametroOcorrencia['error'] == 0){
							$sql = "SELECT * FROM cobranca_preco
							WHERE id_parametro_cobranca_ocorrencia = '" .$id_parametro_cobranca_ocorrencia_antigo ."'";

							$cobrancaPreco = $this->_getDb()->query($sql);							

							$aCobrancaPreco = array();
							foreach ($cobrancaPreco as $key1 => $value1) {

								unset($value1['id']);
								$value1['id_prametro_cobranca_ocorrencia'] = $aParametroOcorrencia['id'];
								$aCobrancaPreco = (object) $value1;

								$aCobrancaPreco = $this->postCobrancaPreco($aCobrancaPreco, true);
							}

							$cobrancaPreco = $this->_getDb()->close();
						}
					}

					$parametroOcorrencia = $this->_getDb()->close();

					$aParametro['mensagem'] = 'Parametro de cobrança copiado com sucesso!';
				}
			}

			fJSON::output($aParametro);
			die();
		}catch (fValidationException $e) {
			$msg = array('error' => -1, 'mensagem' => "Erro na baixa");
			fJSON::output($msg);
			die();
		}
	}


	/*
	Módulo: Importar financeiro
	Descrição: Importar dados da planilha para a tabela caixa
	Método: POST
	URL: http://localhost/sig/api/index.php/importarfinanceiro
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 01/08/2015
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postImportarFinanceiro() {
		$data = json_decode(file_get_contents("php://input"));	
		
		setlocale( LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese' );
		$arquivo = new Spreadsheet_Excel_Reader("../importacao/associados/" .$data->arquivo);
 		
 		$arrResultado = array();

		$totalLinhas = $data->posicao + $data->pacote;

		for ($l = $data->posicao; $totalLinhas > $l; $l++) {
			$id_pessoa = null;
			$resultado = false;

			if($arquivo->val($l, 1) != ''){
				$verificaPessoa = $this->getRegistroCampo("SELECT * FROM pessoa WHERE nome = '" .utf8_encode(trim($arquivo->val($l, 1))) ."'");

				$objPessoa = $this->objPessoa($arquivo->val($l, 1), $arquivo->val($l, 4), $arquivo->val($l, 19), 
											  $arquivo->val($l, 3), $arquivo->val($l, 2), 0, 
											  1, 0, 0, 
											  0, 0, 0, 
											  1, 0, 1, $arquivo->val($l, 7), 
											  $arquivo->val($l, 6), $arquivo->val($l, 5), $arquivo->val($l, 15), 
											  1, $arquivo->val($l, 18));

				$cpf = '';
				if(property_exists($objPessoa, 'cpf')){
					if($objPessoa->cpf != ''){
						$cpf = "(numero = '" .$objPessoa->cpf ."' and id_tipo_documento = 2) ";
					}
				}
				$cnpj = '';
				if(property_exists($objPessoa, 'cnpj')){
					if($objPessoa->cnpj != ''){
						$cnpj = "(numero = '" .$objPessoa->cnpj ."' and id_tipo_documento = 5) ";
					}
				}
				$ou = '';
				if($cpf != '' && $cnpj != ''){
					$ou = ' or ';
				}

				if($cpf != '' || $cnpj != ''){
					$verificaDocumento = $this->getRegistroCampo("SELECT * FROM documento WHERE " .$cpf .$ou .$cnpj);
				}else{
					$verificaDocumento = array();					
				}

				if(count($verificaPessoa) == 0 && count($verificaDocumento) == 0){
					
					$pessoa = $this->postPessoa($objPessoa, true);
					
					if($pessoa['error'] == 0 ){
						$id_pessoa = $pessoa['id_pessoa'];
						$resultado = true;	

						if($arquivo->val($l, 8) != '' && $arquivo->val($l, 9) != '' && $arquivo->val($l, 12) != ''){
							$objEndereco = $this->objEndereco($id_pessoa, 
															  $arquivo->val($l, 8), 
															  $arquivo->val($l, 9), 
															  $arquivo->val($l, 11), 
															  $arquivo->val($l, 10), 
															  $arquivo->val($l, 12), 
															  $arquivo->val($l, 13), 
															  $arquivo->val($l, 14));
				
							$this->postEnderecoPessoa($objEndereco, true);
						}else{
							$resultado = null;	
						}

						if($arquivo->val($l, 21) != '' && $arquivo->val($l, 20) != ''){
							$objContribuicaoPessoa = $this->objContribuicaoPessoa($id_pessoa, $arquivo, $l);
							$this->postContribuicaoPessoa($objContribuicaoPessoa, true);
						}else{
							$resultado = null;	
						}
					}
				}
			}

			$arrResultado[] = array(
				'id_pessoa' => $id_pessoa,
				'nome' => utf8_encode($arquivo->val($l, 1)),
				'resultado' => $resultado,
			);
		}

		//var_dump(count($arrResultado));

		$arrResultado = array(
			'error' => 0,
			'importar_pessoa' => $arrResultado,
		);

		fJSON::output($arrResultado);
	}

	/*
	Módulo: Todos
	Descrição: Extrator de dados
	Método: get	
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 06/10/2015	
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function getExtrair($tipo=0, $tabela='', $condicao='', $ordem='', $data='') 
	{
		if($tipo!=3)
		{
			setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
			date_default_timezone_set('America/Sao_Paulo');

			// tipo=0 -> HTML Grid
			// tipo=1 -> Criar DUMP de inserts

			$insert = 'insert into '.$tabela.' (@C) values ';
			$consulta = "SELECT @S FROM @F @W @O";

			$td_cab='<tr>';
			$ct=0;
			$td='';
			$tr='';
			$cmp_str='';
			$in_val='';
			$cmp = array();
			$cmp_insert = array();
			$cmp_arr = array();
			$sqld = "DESC ".$tabela.";";

			$rs = $this->_getDb()->query($sqld);

			foreach ($rs as $ch => $val)
			{ 
				$ct++;
				$i=0;
				$i+=(strpos($val['Type'],'int')!==false);
				$i+=(strpos($val['Type'],'decimal')!==false);
				$i+=(strpos($val['Type'],'tinyint')!==false);			

				$cmp_insert[] = "COALESCE(".$val['Field'].",".(($i>0) ? 0 : "''").") ".$val['Field']; 
				$cmp_array[] = array($val['Field'],(($i>0) ? 'int' : 'char'));
				$cmp_str.= $val['Field'].',';
				$cmp_arr[] = $val['Field'];
				$td_cab.='<td><b>'.$val['Field'].'</b></td>';								
			}
			
			$td_cab.='</tr>';
			$rs = $this->_getDb()->close();

			$insert = str_replace("@C", $cmp_str, $insert);

			$sqlq = $consulta;
			$sqlq = str_replace("@S", implode(",", $cmp_insert)	, $sqlq);
			$sqlq = str_replace("@F", $tabela 					, $sqlq);
			$sqlq = str_replace("@W", (($condicao!='') ? 'where '.$condicao : ''), $sqlq);
			$sqlq = str_replace("@O", $ordem 					, $sqlq);

			$retorno = array();

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $k1 => $reg)
			{
				$i=0;
				$id=0;				
				$tr.="<tr>";

				foreach ($reg as $cmp => $val)
				{					
					$tr.="<td>".utf8_decode($val)."</td>";
					$in_val[$k1][] = (($cmp_array[$i][1]=='int') ? $val : "'".$val."'")."\n\r";
					if($i==0){ $id = $val; }
					$i++;
				}				
				$tr.="</tr>";
			}	
			$rs = $this->_getDb()->close();
		}

		switch($tipo){

			case 0:
					echo($insert);
					$valores='';
					$j=1;
					$totr = count($in_val);

					foreach ($in_val as $reg)
					{						
						$k=1;
						$totc = count($reg);

						foreach ($reg as $cmp)
						{ 
							$valores.= $cmp; 
							if($k<$totc){$valores.=",";}	
							$k++; 
						}
						
						echo("(".utf8_decode($valores).")");

						$valores='';
						if($j<$totr){echo(",");}						
						$j++;
					}
			break;
			case 1:
					$html ="<html><body><table border=1>".$td_cab." @T @R </table></body></html>";
					$html = str_replace("@T", $td, $html);
					$html = str_replace("@R", $tr, $html);					

					echo($html);
			break;
			case 3:					
					if($data=='')
					{ 
						$data = json_decode(file_get_contents("php://input"));
						$this->postGeral($tabela,$data);
					}
			break;
		}
	}

	/*
	Módulo: Todos
	Descrição: executar sql
	Método: POST	
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 13/10/2015	
	Autor: Fabio da Silva
	Versão: 1.0
	*/

	public function postExecutar(){
		$data = json_decode(file_get_contents("php://input"));	

		try{
			foreach ($data as $key => $value) {

				$rs = $this->_getDb()->query($value);

				$rs = $this->_getDb()->close();
			}
			
			$arrMensagem = array(
				'error' => 0, 
				'mensagem' => "Dados executado!"
			);
			
			fJSON::output($arrMensagem);
		}catch (fValidationException $e) {
			$arrMensagem = array(
				'error' => -1, 
				'mensagem' => "Erro na inclusão: " . $e
			);

			fJSON::output($arrMensagem);
		}
	}
	
	/*
	Módulo: Todos
	Descrição: Relatório de Matrícula
	Método: get
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/10/2015	
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function relatorioMatricula($id_etapa = 0, $formato = 0){

		$userSes = fSession::get('user');

		$consulta = "SELECT x.descricao, x.curso, x.turma, x.total
					 FROM(SELECT 
					 c.nome as curso,
					 e.descricao, 
					 COALESCE(t.nome,CASE WHEN c.nome IS NULL THEN 'total geral' ELSE 'Total' END) turma, 
					 COUNT(*) total					 
					 FROM matricula m
					 LEFT JOIN pessoa p ON p.id=m.id_aluno
					 LEFT JOIN curso c ON c.id=m.id_curso
					 LEFT JOIN turma t ON t.id=m.id_turma
					 LEFT JOIN etapa e ON e.id=t.id_etapa
					 WHERE m.id_entidade = ".$userSes['user']['entidadePessoa']."
					 AND m.id_etapa = ".$id_etapa."
					 GROUP BY c.nome, t.nome WITH ROLLUP)x";

		$sqlq = $consulta;	

		$buffer = " <table width=100%>
					<tr><td colspan=3>@E</td></tr>
					<tr><td width='33%'>Curso</td><td width='33%'>Turma</td><td width='33%'>Total de Alunos</td></tr>
					<tr><td colspan=3><hr></td></tr>";

		$ct=0;
		$etapa='';
		$registro = array();
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $reg){ 

			$etapa = $reg['descricao'];
			if(strtolower($reg['turma'])=='total'){

				$buffer.="<tr style='background-color:#ccc'><td colspan='2'>Total</td><td>".$reg['total']."</td></tr>";
				$ct=0;				

			}else if(strtolower($reg['turma'])=='total geral'){

				$buffer.="<tr><td colspan='2'>Total Geral</td><td>".$reg['total']."</td></tr>";
			}else{	

				$buffer.="<tr><td>".(($ct==0) ? $reg['curso'] : '&nbsp;')."</td><td>".$reg['turma']."</td><td>".$reg['total']."</td></tr>"; 
				$ct++;
			}
		}
		$rs = $this->_getDb()->close();

		$buffer.= "</table>";

		$buffer = str_replace("@E", "Etapa: ".$etapa, $buffer);

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));		

		$conteudo = $this->relatorioModelo('Relatório de Matrículas', 
										   utf8_encode($data), 
										   $buffer,
										   1);		
		echo $conteudo;		
	}

	/*
	Módulo: Todos
	Descrição: Relatório de Matrícula
	Método: get
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/10/2015	
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function relatorioFamilia($id_turma = 0, $formato = 0){

		$userSes = fSession::get('user');

		$consulta = "SELECT x.responsavel, x.aluno, x.turma
					 FROM(SELECT 
					 COALESCE(p.nome,'') responsavel, 
					 (SELECT nome FROM pessoa WHERE id=ra.id_pessoa_aluno) aluno,
					 COALESCE(t.nome,'') turma
					 FROM responsavel_aluno ra 
					 LEFT JOIN pessoa p on p.id=ra.id_pessoa
					 LEFT JOIN matricula m on m.id_aluno=ra.id_pessoa_aluno
					 LEFT JOIN turma t on t.id=m.id_turma
					 WHERE ra.responsavel_financeiro=1 @T)x
					 GROUP BY  x.responsavel, x.aluno, x.turma
					 ORDER BY x.responsavel, x.aluno";

		$consulta = str_replace("@T", (($id_turma>0) ? " AND t.id = ".$id_turma : ''), $consulta);		
		$sqlq = $consulta;	

		$buffer = " <table width=100%>
					<tr><td width='33%'>Responsável Financeiro</td><td width='33%'>Aluno</td><td width='33%'>Turma</td></tr>
					<tr><td colspan=3><hr></td></tr>";

		$ct=0;
		$resp='';
		$registro = array();
		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $reg){ 

			if($resp==$reg['responsavel']){ $prn = false; }else{ $prn = true; $resp = $reg['responsavel']; } 
			
			$buffer.="<tr><td>".(($prn) ? '<b>'.$resp.'</b>' : '')."</td><td>".$reg['aluno']."</td><td>".$reg['turma']."</td></tr>";

			$resp = $reg['responsavel'];
		}
		$rs = $this->_getDb()->close();

		$buffer.= "</table>";

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));		

		$conteudo = $this->relatorioModelo('Relatório de Família', 
										   utf8_encode($data), 
										   $buffer,
										   1);
		echo $conteudo;		
	}

	/*
	Módulo: Todos
	Descrição: Relatório de Matrícula
	Método: get
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/10/2015	
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function getGraficoAlunoTurma($id_etapa="", $id_curso="", $id_turma="", $id_aluno="") {
		
		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));		
		
		$sqls = "SELECT t.serie serie, e.descricao etapa, c.nome curso, c.id id_curso, t.id id_turma
				 FROM matricula m 
				 LEFT JOIN turma t ON m.id_turma = t.id 
				 LEFT JOIN etapa e ON e.id = m.id_etapa
				 LEFT JOIN curso c ON c.id = m.id_curso
				 WHERE m.id_etapa = ".$id_etapa;

		$sqls.= ($id_curso!="") ? " AND m.id_curso = ".$id_curso : '';
		$sqls.= ($id_turma!="") ? " AND m.id_turma = ".$id_turma : '';		
		$sqls.= ($id_aluno!="") ? " AND m.id_aluno = ".$id_aluno : '';
		$sqls.= " GROUP BY t.serie, e.descricao, c.nome, c.id, t.id
				  ORDER BY c.id, t.id";		

		$rss = $this->_getDb()->query($sqls);
		foreach ($rss as $ks => $regs)
		{ 
			$sqlt = "SELECT t.id turma, t.nome nome_turma 
					 FROM matricula m 
					 LEFT JOIN turma t ON m.id_turma = t.id 
					 WHERE t.serie = ".$regs['serie']." AND m.id_curso=".$regs['id_curso']." AND t.id=".$regs['id_turma']." GROUP BY t.nome";

			$rst = $this->_getDb()->query($sqlt);

			$conteudo="<html><body onload='window.print()'>";

			foreach ($rst as $kt => $regt)
			{				
				$buffer ='';
				$buffer.="<table width='100%' style='border:none;' border='0'><tr><td><b>Etapa:</b>".$regs['etapa']."</td><td><b>Curso:</b>".$regs['curso']."</td><td><b>Turma:</b>".$regt['nome_turma']."</td></tr></table>";
				$buffer.="<table><tr><td><b>Código</b></td><td><b>Nome</b></td><td><b>Observação</b></td></tr>";

				$sqld= "SELECT c.nome as curso, p.nome as aluno, p.codigo, p.foto 
						FROM matricula m 						
						LEFT JOIN curso c ON m.id_curso = c.id 						
						LEFT JOIN pessoa p ON m.id_aluno = p.id 
						WHERE m.id_turma = ".$regt['turma']." ORDER BY c.nome, p.nome, p.codigo";

				$rsd = $this->_getDb()->query($sqld);
				foreach ($rsd as $kd => $regd)
				{					
					$buffer.="<tr><td>".$regd['codigo']."</td><td>".$regd['aluno']."</td><td>__________________________________</td></tr>";
				}
								
				$xxx = $this->relatorioModelo('Alunos para Reunião', utf8_encode($data), $buffer."</table>", 1);
				$conteudo.= "<div style='page-break-before: always'>".$xxx."</div>";
			}

			$conteudo.='</body></html>';
			echo $conteudo;
		}
		$rss = $this->_getDb()->close();		
	}

	/*
	Módulo: Cemitério
	Descrição: Lista todos os falecidos que não tem gaveta vinculada
	Método: GET
	URL: http://localhost/sig/api/index.php/falecidogaveta
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 14/10/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getFalecidoGaveta($full = false) {

		$query = "SELECT * FROM falecido WHERE id_gaveta IS NULL";

		$rs = $this->_getDb()->query($query);

		if ($full == false) {

			$aFalecidos = array();

			foreach ($rs as $key => $value) {

				$aFalecidos[] = $value;
			}

			if (count($aFalecidos) == 0) {
				$aFalecidos[] = array(
					'mensagem' => "Nenhum falecido encontrado."
					);
			}

			fJSON::output($aFalecidos);
		}else{
			return $aFalecidos;
		}
	}

	public function getAvisoVencimentoGaveta($full = false){
		$aFalecidos = array();	
		$query = "select g.*, f.nome as nome_falecido, ua.id as id_unidade, ua.id_lote as id_lote_unidade, l.id as id_lote, l.descricao as descricao_lote from gaveta g 
                 INNER JOIN falecido f on f.id_gaveta = g.id and f.data_exumacao is null
                 INNER JOIN unidade_armazenagem ua on ua.id = g.id_unidade_armazenagem
                 INNER JOIN lote l on l.id = ua.id_lote
                 where g.data_vencimento <= CURRENT_DATE() and g.data_vencimento <> '0000-00-00'";

		$rs = $this->_getDb()->query($query);

		$aVencidos = array();

		foreach ($rs as $key => $value) {
			$value['data_vencimento'] = self::formataData($value['data_vencimento']);
			$aVencidos[] = $value;
		}


		$query = "select g.*, f.nome as nome_falecido, ua.id as id_unidade, ua.id_lote as id_lote_unidade, l.id as id_lote, l.descricao as descricao_lote from gaveta g
				INNER JOIN falecido f on f.id_gaveta = g.id and f.data_exumacao is null
				INNER JOIN unidade_armazenagem ua on ua.id = g.id_unidade_armazenagem
				INNER JOIN lote l on l.id = ua.id_lote
				where g.data_vencimento BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)";

		$rs = $this->_getDb()->query($query);

		$aVencer = array();

		foreach ($rs as $key => $value) {
			$value['data_vencimento'] = self::formataData($value['data_vencimento']);
			$aVencer[] = $value;
		}

		$aFalecidos[] = array(
		'vencidos' => $aVencidos,
		'vencer' => $aVencer
		);

		if ($full == false) {
			fJSON::output($aFalecidos);
		}else{
			return $aFalecidos;
		}	
	}

	/*
	Módulo: Relatorio
	Descrição: Gerar Relatório entrada e saida
	Método: GET
	URL: http://localhost/sig/api/index.php/relatorioassociados/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 11/09/2015
	Autor: Fábio S. da Silva
	Versão: 1.0
	*/
	private function unique_mult_array($array, $key){
	    $temp_array = array();
	    $i = 0;
	    $key_array = array();
	    
	    foreach($array as $val){
	        if(!in_array($val[$key],$key_array)){
	            $key_array[$i] = $val[$key];
	            $temp_array[$i] = $val;
	            $i++;
	        }
	    }
	    return $temp_array;
	}

	public function relatorioPessoaEnderecoContatoDocumento($tipo = 0, $data_inicio = '', $data_final = '', $formato = 0){
		$userSes = fSession::get('user');

		switch ($tipo) {
		    case 0:
		    	//associado
		        $search = "WHERE p.associado = 1 
		        				and p.data_associacao BETWEEN '" .$data_inicio ."' and '" .$data_final ."'";
		        $titulo = 'Relatório de Associados';

		        break;
		    case 1:
		    	//Funcionario
		        $search = "WHERE p.data_cadastro BETWEEN '" .$data_inicio ."' and '" .$data_final ."'";
		        $titulo = 'Relatório de Funcionario';

		        break;
		}
		
		/*$aData = explode('-', $data_final);

		$mes = date("m", mktime(0,0,0, $aData[1]-1, '01', $aData[0]));

		$dtInicio = $aData[0] .'-' .$mes .'-01';

		$ultimoDia = date("t", mktime(0,0,0, $mes, '01', $aData[0]));

		$dtFinal = $aData[0] .'-' .$mes .'-' .$ultimoDia;*/

		$sql = "SELECT distinct
					p.id, p.nome,
					ec.descricao as estado_civil,
					e.id as id_endereco, e.logradouro, e.numero, e.bairro, e.complemento,	e.cidade, e.estado, e.codigo_postal as cep,	e.principal as endereco_principal, e.ativo as endereco_ativo, 
					te.descricao as tipo_endereco,
					t.id as id_telefone, t.ddd, t.numero as telefone, t.ramal, t.principal as telefone_principal, t.ativo as telefone_ativo,  tt.descricao as tipo_telefone,
					d.id as id_documento, d.numero as documento, d.estado_emissor, d.data_emissao, d.complemento,  d.ativo as documento_ativo, td.descricao as tipo_documento, oe.descricao as orgao_emissor
				FROM pessoa p
				INNER JOIN estado_civil ec on p.id_estado_civil = ec.id
				LEFT JOIN endereco e on p.id = e.id_pessoa
				LEFT JOIN tipo_endereco te on e.id_tipo_endereco = te.id
				LEFT JOIN telefone t on p.id = t.id_pessoa
				LEFT JOIN tipo_telefone tt on t.id_tipo_telefone = tt.id
				LEFT JOIN documento d on p.id = d.id_pessoa
				LEFT JOIN tipo_documento td on d.id_tipo_documento = td.id
				LEFT JOIN orgao_emissor oe on d.id_orgao_emissor = oe.id
				" .$search ."
				ORDER BY nome, cep, telefone, documento, id ASC";

		$db = $this->_getDb()->query($sql);

		$buffer = ' 
					<style>
					table td{
						font-size: 8px;
					}
					</style>
					<table border="0" cellspacing="0" cellpadding="3" width="100%"> 
						<tr class="cabecalho">
							<td style="white-space: nowrap;"><strong>NOME</strong></td>
							<td style="white-space: nowrap;"><strong>TIPO DE ENDEREÇO</strong></td>
							<td style="white-space: nowrap;"><strong>ENDEREÇO</strong></td>
							<td style="white-space: nowrap;"><strong>TIPO TELEFONE</strong></td>
							<td style="white-space: nowrap;"><strong>TELEFONE</strong></td>
							<td style="white-space: nowrap;"><strong>TIPO DE DOC.</strong></td>
							<td style="white-space: nowrap;"><strong>DOCUMENTO</strong></td>
						</tr>
						';
		$aDb = array();
		$aNome = array();
		$aEndereco = array();
		$aTelefone = array();
		$aDocumento = array();
		foreach($db as $key => $value) {
			$aNome[$value['id']] = array(
				'id' => $value['id'],
				'nome' => $value['nome']
			);

			if(!array_key_exists($value['id'], $aEndereco)){
				$aEndereco[$value['id']] = array();							
			}
			$aEndereco[$value['id']][] = array(
				'id_endereco' => $value['id_endereco'],
				'logradouro' => $value['logradouro'],
				'numero' => $value['numero'],
				'complemento' => $value['complemento'],
				'bairro' => $value['cidade'],
				'estado' => $value['estado'],
				'cep' => $value['cep'],
				'tipo_endereco' => $value['tipo_endereco']
			);

			if(!array_key_exists($value['id'], $aTelefone)){
				$aTelefone[$value['id']] = array();							
			}
			$aTelefone[$value['id']][] = array(
				'id_telefone' => $value['id_telefone'],
				'ddd' => $value['ddd'],
				'telefone' => $value['telefone'],
				'tipo_telefone' => $value['tipo_telefone'],
				'ramal' => $value['ramal']
			);

			if(!array_key_exists($value['id'], $aDocumento)){
				$aDocumento[$value['id']] = array();							
			}
			$aDocumento[$value['id']][] = array(
				'id_documento' => $value['id_documento'],
				'tipo_documento' => $value['tipo_documento'],
				'documento' => $value['documento']
			);
		}

		foreach($aNome as $key => $value) {
			$arr = array();

			$arr['telefones']  = $this->unique_mult_array($aTelefone[$value['id']], 'id_telefone');
			$arr['enderecos']  = $this->unique_mult_array($aEndereco[$value['id']], 'id_endereco');
			$arr['documentos'] = $this->unique_mult_array($aDocumento[$value['id']], 'id_documento');

			$aDb[] = array_merge($value, $arr);
		}

		foreach($aDb as $key => $value) {
			if(($key%2) == 0){
				$classContador = 'zebrado_par';
			}else{
				$classContador = 'zebrado_impar';
			}

			$numEndereco = count($value['enderecos']);
			$numTelefone = count($value['telefones']);
			$numDocumento = count($value['documentos']);
			$num = max($numEndereco, $numTelefone, $numDocumento);
			for($a = 0; $num > $a; $a++){
				$nome = '';	
				if($a == 0){
					$nome = $value['nome'];	
				}
				
				$tipo_endereco = '';
				$endereco = '';
				if (array_key_exists($a, $value['enderecos'])) {
					$e = $value['enderecos'][$a];
					if ($e['cep'] != '') {
						$tipo_endereco = $e['tipo_endereco'];
						$endereco = $e['logradouro'];
						$endereco = $e['logradouro'] .', ' .$e['numero'] .' - ' .$e['complemento']
									.' - ' .$e['bairro'] .' - ' .$e['cidade'] .' - ' .$e['estado']
									.' - ' .$e['cep'];

						$endereco = str_replace('-  -', '-', $endereco);
					}

				}

				$tipo_telefone = '';
				$telefone = '';
				if (array_key_exists($a, $value['telefones'])) {
					$t = $value['telefones'][$a];
					if ($t['telefone'] != '') {
						$tipo_telefone = $t['tipo_telefone'];
						$telefone = '(' .$t['ddd'] .') ' .$t['telefone'] .' ' .$t['ramal'];
					}
				}

				$tipo_documento = '';
				$documento = '';
				if (array_key_exists($a, $value['documentos'])) {
					$tipo_documento = $value['documentos'][$a]['tipo_documento'];
					$documento = $value['documentos'][$a]['documento'];
				}

				

				$buffer .= '<tr class="' .$classContador .'">
							<td>' .$nome.'</td>
							<td>' .$tipo_endereco .'</td>
							<td>' .$endereco .'</td>
							<td>' .$tipo_telefone .'</td>
							<td>' .$telefone .'</td>
							<td>' .$tipo_documento .'</td>
							<td>' .$documento .'</td>
						</tr>';
			}
		}
						
		$buffer .= '
			</table>
			';
		
		$db = $this->_getDb()->close();

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));
		

		$conteudo = $this->relatorioModelo($titulo, 
										   utf8_encode($data), 
										   $buffer,
										   $formato,
										   4);

		if($formato == 1){
			echo $conteudo;
		}else{
			echo $conteudo;

			header("Content-type: charset=UTF-8");
			header("Content-type: application/vnd.ms-excel;");
			header("Content-type: application/force-download");
			header('Content-Disposition: attachment; filename=entrada_saida.xls');
			header("Pragma: no-cache");	
		}
		
	}

	/*
	Módulo: Cemitério
	Descrição: Apaga registro de bolsa
	Método: GET
	URL: http://localhost/sig/api/index.php/delbolsa/id
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 28/10/2015
	Autor: Fábio Roberto Haydn	
	*/
	
	public function delBolsa() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$bolsa = fRecordSet::build('Bolsa', $aSearch);

		$mensagem = "Bolsa excluída com sucesso!";        

		try {		
			$bolsa[0]->delete();		

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na Exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getGraficoFinanceiroEntidade($id_entidade){
		$sql = "select x.tipo, 
				sum(x.m01) janeiro,
				sum(x.m02) fevereiro,
				sum(x.m03) marco,
				sum(x.m04) abril,
				sum(x.m05) maio,
				sum(x.m06) junho,
				sum(x.m07) julho,
				sum(x.m08) agosto,
				sum(x.m09) setembro,
				sum(x.m10) outubro,
				sum(x.m11) novembro,
				sum(x.m12) dezembro
				from(SELECT 
				CASE WHEN c.id_tipo_lancamento in(1,7) THEN 'entrada' ELSE 
				CASE WHEN c.id_tipo_lancamento in(2,3,4,5) then 'saida' ELSE 'transferencia' END END tipo,
				CASE WHEN c.id_tipo_lancamento=7 THEN c.data_vencimento ELSE c.data_pagamento END data,

				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 0 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 0 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH))) THEN c.valor_final END m01,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH))) THEN c.valor_final END m02,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH))) THEN c.valor_final END m03,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH))) THEN c.valor_final END m04,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH))) THEN c.valor_final END m05,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH))) THEN c.valor_final END m06,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH))) THEN c.valor_final END m07,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH))) THEN c.valor_final END m08,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH))) THEN c.valor_final END m09,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH))) THEN c.valor_final END m10,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH))) THEN c.valor_final END m11,
				case when (c.data_pagamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 12 MONTH))  OR
				 c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 12 MONTH))) THEN c.valor_final END m12

				FROM caixa c
				LEFT JOIN conta_bancaria cb ON c.id_conta_bancaria=cb.id
				LEFT JOIN situacao s ON s.id=c.id_situacao
				LEFT JOIN tipo_lancamento tl ON tl.id=c.id_tipo_lancamento

				WHERE 
				cb.id_entidade=".$id_entidade." 
				AND c.id_situacao in(2,6)
				AND c.ativo=1

				)x GROUP BY x.tipo";

		$db = $this->_getDb()->query($sql);		

		$aDb = array();
		
		foreach ($db as $key => $value){
			$aDb[] = $value;
		}

		$db = $this->_getDb()->close();

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhuma pessoa encontrada."
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'entidade' => $aDb
				);
		}

		$full='';
		if($full == false) {
			fJSON::output($aDb);
		}else{
			return $aDb;
		}
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Alunos em bloqueio de matrícula
	Método: GET
	URL: http://localhost/sig/api/index.php/bloqueioaluno/<id_aluno>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/10/2015
	Autor: Fábio Roberto Haydn
	*/

	public function getAlunoBloqueio($id = 0, $full = false) {

		$sqlq = "SELECT 
				 ab.id, 
				 ab.id_tipo_bloqueio, 
				 tb.descricao, 
				 ab.id_aluno, 
				 ab.complemento, 
				 COALESCE(DATE_FORMAT(ab.data_inicio,'%Y-%m-%dT12:00:00Z'),'') data_inicio_validade,
				 COALESCE(DATE_FORMAT(ab.data_fim,'%Y-%m-%dT12:00:00Z'),'') data_final_validade,
				 COALESCE(DATE_FORMAT(ab.data_inicio,'%d/%m/%Y'),'') data_inicio_validade_grid,
				 COALESCE(DATE_FORMAT(ab.data_fim,'%d/%m/%Y'),'') data_final_validade_grid,
				 ab.ativo
				 FROM aluno_bloqueio ab 
				 LEFT JOIN tipo_bloqueio tb on tb.id=ab.id_tipo_bloqueio
				 WHERE 1 ".(($id>0) ? " AND ab.id_aluno=".$id : "");			

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma registro encontrado."	);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'bloqueioaluno' => $retorno );
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Geral
	Descrição: Obter Lista de Alunos em bloqueio de matrícula
	Método: POST
	URL: http://localhost/sig/api/index.php/bloqueioaluno/<id_aluno>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 30/10/2015
	Autor: Fábio Roberto Haydn
	*/

	public function postAlunoBloqueio() 
	{

		$data = json_decode(file_get_contents("php://input"));		

		$dt = new DateTime($data->data_inicio_validade);
		$dt = $dt->format('Y-m-d');
		$dtini = $dt;

		$dt = new DateTime($data->data_final_validade);
		$dt = $dt->format('Y-m-d');
		$dtfim = $dt;


		if(!property_exists($data,'id')){

			$sqlq = "SELECT id FROM aluno_bloqueio WHERE id_aluno = ".$data->id_aluno." AND data_inicio BETWEEN '".$dtini."' AND '".$dtfim."'";

			$resp = false;

			$rs = $this->_getDb()->query($sqlq);
			foreach ($rs as $key => $value){ $resp = (count($value)>0) ? true : false; }
			$rs = $this->_getDb()->close();	

		}else{ $resp=false; }


		if(!$resp){
			$retorno = $this->postGeral('aluno_bloqueio',$data);
		}else{
			$retorno = array('error'=>-1, 'mensagem' => 'Aluno já tem um bloqueio nessa data!' );
		}
		
		fJSON::output($retorno);		
	}

	/*
	Módulo: Cemitério
	Descrição: Apagar registro de Bloqueio de Aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/delbloqueio/id
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/11/2015
	Autor: Fábio Roberto Haydn	
	*/
	
	public function delBloqueio() {

		$data = json_decode(file_get_contents("php://input"));

		$aSearch = array();
		$aSearch['id='] = $data->id;

		$bloqueio = fRecordSet::build('AlunoBloqueio', $aSearch);

		$mensagem = "Registro excluído com sucesso!";        

		try {		
			$bloqueio[0]->delete();		

			$arrMensagem = array('error' => 0, 'mensagem' => $mensagem);
			fJSON::output($arrMensagem);
			die();
		}
		catch (fValidationException $e) {
			$arrMensagem = array('error' => -1, 'mensagem' => "Erro na Exclusão");
			fJSON::output($arrMensagem);
			die();
		}
	}


	public function getGraficoAlunoMensalistaBolsista(){
		$sql = "select sum(x.mensalista) mensalista, sum(x.bolsista) bolsista
				from(select 
				case when id not in (select id_aluno from bolsa) then 1 else 0 end 'mensalista',
				case when id in (select id_aluno from bolsa) then 1 else 0 end 'bolsista'
				from 
				pessoa 
				where 
				aluno=1)x";

		$db = $this->_getDb()->query($sql);		

		$aDb = array();
		
		foreach ($db as $key => $value){
			$aDb[] = $value;
		}

		$db = $this->_getDb()->close();

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhuma pessoa encontrada."
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'alunos' => $aDb
				);
		}

		$full='';
		if($full == false) {
			fJSON::output($aDb);
		}else{
			return $aDb;
		}
	}


public function getGraficoJazigoCemiterio(){
	$sql = "select 
			sum(1) total,
			sum(case when id_status_gaveta=2 then 1 else 0 end) ocupados,
			sum(case when id_status_gaveta=1 then 1 else 0 end) livres
			from gaveta";

	$db = $this->_getDb()->query($sql);		

	$aDb = array();
	
	foreach ($db as $key => $value){
		$aDb[] = $value;
	}

	$db = $this->_getDb()->close();

	if (count($aDb) == 0) {
		$aDb = array(
			'error' => -1, 
			'mensagem' => "Nenhuma pessoa encontrada."
			);
	}else{
		$aDb = array(
			'error' => 0, 
			'jazigo' => $aDb
			);
	}

	$full='';
	if($full == false) {
		fJSON::output($aDb);
	}else{
		return $aDb;
	}
}

public function getGraficoMesquitaDoacoes(){
		$sql = "select 
				coalesce(sum(x.m01),0) janeiro,
				coalesce(sum(x.m02),0) fevereiro,
				coalesce(sum(x.m03),0) marco,
				coalesce(sum(x.m04),0) abril,
				coalesce(sum(x.m05),0) maio,
				coalesce(sum(x.m06),0) junho,
				coalesce(sum(x.m07),0) julho,
				coalesce(sum(x.m08),0) agosto,
				coalesce(sum(x.m09),0) setembro,
				coalesce(sum(x.m10),0) outubro,
				coalesce(sum(x.m11),0) novembro,
				coalesce(sum(x.m12),0) dezembro
				from(SELECT 
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 0 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) THEN c.valor_final END M01,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) THEN c.valor_final END M02,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) THEN c.valor_final END M03,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) THEN c.valor_final END M04,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) THEN c.valor_final END M05,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) THEN c.valor_final END M06,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) THEN c.valor_final END M07,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) THEN c.valor_final END M08,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) THEN c.valor_final END M09,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) THEN c.valor_final END M10,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) THEN c.valor_final END M11,
				case when c.data_vencimento BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 12 MONTH)) THEN c.valor_final END M12

				FROM caixa c

				WHERE 
				c.id_tipo_lancamento=7 and c.id_situacao=6
				AND c.ativo=1)x";

	$db = $this->_getDb()->query($sql);		

	$aDb = array();
	
	foreach ($db as $key => $value){
		$aDb[] = $value;
	}

	$db = $this->_getDb()->close();

	if (count($aDb) == 0) {
		$aDb = array(
			'error' => -1, 
			'mensagem' => "Nenhuma pessoa encontrada."
			);
	}else{
		$aDb = array(
			'error' => 0, 
			'jazigo' => $aDb
			);
	}

	$full='';
	if($full == false) {
		fJSON::output($aDb);
	}else{
		return $aDb;
	}
}

	public function getGraficoPagantesInadimplentes($id_entidade){

		$sql = "SELECT
				sum(x.m01_p) janeiro_p,
				sum(x.m02_p) fevereiro_p,
				sum(x.m03_p) marco_p,
				sum(x.m04_p) abril_p,
				sum(x.m05_p) maio_p,
				sum(x.m06_p) junho_p,
				sum(x.m07_p) julho_p,
				sum(x.m08_p) agosto_p,
				sum(x.m09_p) setembro_p,
				sum(x.m10_p) outubro_p,
				sum(x.m11_p) novembro_p,
				sum(x.m12_p) dezembro_p,

				sum(x.m01_i) janeiro_i,
				sum(x.m02_i) fevereiro_i,
				sum(x.m03_i) marco_i,
				sum(x.m04_i) abril_i,
				sum(x.m05_i) maio_i,
				sum(x.m06_i) junho_i,
				sum(x.m07_i) julho_i,
				sum(x.m08_i) agosto_i,
				sum(x.m09_i) setembro_i,
				sum(x.m10_i) outubro_i,
				sum(x.m11_i) novembro_i,
				sum(x.m12_i) dezembro_i

				FROM(SELECT 

				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 0 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m01_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m02_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m03_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m04_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m05_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m06_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m07_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m08_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m09_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m10_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m11_p,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 12 MONTH)) AND c.id_situacao in(2,6) THEN c.valor_final END m12_p,

				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 0 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) AND c.id_situacao in(1,3,4) THEN c.valor_final END m01_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 1 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m02_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 2 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m03_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 3 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m04_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 4 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m05_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 5 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m06_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 6 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m07_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 7 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m08_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 8 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m09_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 9 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m10_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 10 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) AND c.id_situacao in(1,3,4) THEN  c.valor_final END m11_i,
				case when c.data_lancamento  BETWEEN (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 11 MONTH)) and (DATE_ADD(DATE_FORMAT(NOW(),'%Y-01-01'), INTERVAL 12 MONTH)) AND c.id_situacao in(1,3,4) THEN c.valor_final END m12_i

				from caixa c
				left join contribuicao co on co.id_pessoa = c.id_pessoa 
				where 
				(select id_entidade from conta_bancaria where id=c.id_conta_bancaria)=".$id_entidade."
				)x";

		$db = $this->_getDb()->query($sql);		

		$aDb = array();
	
		foreach ($db as $key => $value){
			$aDb[] = $value;
		}

		if (count($aDb) == 0) {
			$aDb = array(
				'error' => -1, 
				'mensagem' => "Nenhum registro encontrado."
				);
		}else{
			$aDb = array(
				'error' => 0, 
				'pessoas' => $aDb
				);
		}

		$full='';
		if($full == false) {
			fJSON::output($aDb);
		}else{
			return $aDb;
		}

	}

	/*
	Módulo: Todos
	Descrição: Relatório de Despesas a vencer
	Método: get
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/10/2015	
	Autor: Fabio Roberto Haydn
	Versão: 1.0
	*/

	public function relatorioDespesa($id_conta_bancaria=0, $data_inicio='', $data_fim='', $formato = 0){

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));		

		$data_inicio = ($data_inicio=='') ? 'curdate()' : "'".$data_inicio."'";
		$data_fim = ($data_fim=='') ? 'curdate()' : "'".$data_fim."'";
		
		$userSes = fSession::get('user');

		$sqlq = "SELECT 
				 tl.descricao tipo_lancamento, cb.descricao conta_bancaria, c.data_vencimento, c.descricao, CONCAT(m.simbolo, c.valor) valor
				 FROM caixa c 
				 LEFT JOIN tipo_lancamento tl ON tl.id=c.id_tipo_lancamento
				 LEFT JOIN conta_bancaria cb ON cb.id=c.id_conta_bancaria
				 LEFT JOIN moeda m ON m.id=c.id_moeda
				 WHERE id_tipo_lancamento IN(2,3,4,5) 
				 AND data_vencimento BETWEEN ".$data_inicio." AND ".$data_fim." 
				 AND data_pagamento IS not NULL ORDER BY conta_bancaria";

		$ctl=1;
		$cb='inicio';
		$dv='';
		$prn_cb = false;
		$prn_dv = false;
		$buffer='';
		$registro = array();
		$rs = $this->_getDb()->query($sqlq);		

		$conteudo="<html><body onload='window.print()'>";
		$cab = "<table width=100%>
			    <tr><td>Despesa</td><td>Data de Vencimento</td><td>Valor</td></tr>
			    <tr><td colspan=5><hr></td></tr>";

		foreach ($rs as $key => $reg){ 

			$prn_cb = ($cb==$reg['conta_bancaria']) ? false : true;
			$prn_dv = ($dv==$reg['data_vencimento']) ? false : true;					

			if($prn_cb && $cb!='inicio'){

				$xxx = $this->relatorioModelo('Relatório de Despesas',utf8_encode($data),$cab.$buffer.'</table>',1);
				$conteudo.= "<div style='page-break-before: always'>".$xxx."</div>";
				$buffer='';
			}

			$buffer.="	<tr><td colspan='3'><b>".(($prn_cb) ? $reg['conta_bancaria'] : '')."</b></td></tr>".(($prn_cb) ? "<tr><td colspan=5>&nbsp;</td></tr>" : "")."
						<tr><td width='60%'>".$reg['descricao']."</td><td width='20%'>".(($prn_dv) ? $reg['data_vencimento'] : '')."</td><td width='20%'>".$reg['valor']."</td></tr>";

			$cb = $reg['conta_bancaria']; 
			$dv = $reg['data_vencimento'];
			$ctl++;
		}
		$rs = $this->_getDb()->close();

		$xxx = $this->relatorioModelo('Relatório de Despesas',utf8_encode($data),$cab.$buffer.'</table>',1);
		$conteudo.= "<div style='page-break-before: always'>".$xxx."</div>";

		$conteudo.='</body></html>';
		echo $conteudo;		
	}

	/*
	Módulo: Administrador
	Descrição: Etapa / Curso X id_aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/etapacursoturmaaluno/id_aluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/11/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	*/

	public function getEtapaCursoTurmaAluno($id_aluno = 0, $full = false) {

		$sqlq = "SELECT 
				 e.id id_etapa,
				 e.descricao etapa,
				 c.id id_curso,
				 c.nome curso,
				 t.id id_turma,
				 t.nome turma
				 FROM matricula m
				 LEFT JOIN turma t ON t.id=m.id_turma
				 LEFT JOIN etapa e ON e.id=m.id_etapa
				 LEFT JOIN curso c ON c.id=m.id_curso @W";
				 	
		$sqlq = ($id_aluno>0) ? str_replace("@W", "WHERE m.id_aluno=".$id_aluno, $sqlq) : "";

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}



	/*
	Módulo: Acadêmico
	Descrição: Lista todos os dados de um aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/etapacursoturmaaluno/id_aluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/11/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/
	public function getAlunoAll() {

	$user = fSession::get('user');
	$id_aluno = $user['user']['id'];

	$sqlq = "SELECT
			pessoa.id,
			pessoa.nome,
			matricula.id_curso,
			matricula.id_turma,
			matricula.serie,
			matricula.id_etapa,
			curso.nome AS curso_nome,
			curso.abreviatura,
			pessoa.data_nascimento,
			pessoa.sexo,
			pessoa.foto,
			pessoa.nome_mae,
			pessoa.nome_pai,
			pessoa.codigo,
			turma.nome AS nome_turma,
			turma.abreviatura AS turma_abreviatura,
			curso.codigo_curso,
			etapa.descricao AS etapa_descricao,
			matricula.id AS id_matricula
			FROM
			pessoa
			INNER JOIN matricula ON matricula.id_aluno = pessoa.id
			INNER JOIN curso ON matricula.id_curso = curso.id
			INNER JOIN turma ON matricula.id_turma = turma.id
			INNER JOIN etapa ON etapa.id = turma.id_etapa
			WHERE
			pessoa.id = " . $id_aluno;
			 	

	$retorno = array();

	$rs = $this->_getDb()->query($sqlq);
	foreach ($rs as $key => $value){ $retorno[] = $value; }
	$rs = $this->_getDb()->close();

	if (count($retorno) == 0) { 
		$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
	}else{
		$retorno = array( 'error' => 0, 'retorno' => $retorno );	
	}
	
	if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
}


/*
	Módulo: Acadêmico
	Descrição: Lista a sala virtual baseada em um aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/etapacursoturmaaluno/id_aluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/11/2015
	Autor: Daiel Swater
	Versão: 1.0
	*/

public function exibeMesExtenso($n){
	$mes = '';
	switch($n){
		case 1: $mes = "Janeiro"; break;
		case 2: $mes = "Fevereiro"; break;
		case 3: $mes = "Março"; break;
		case 4: $mes = "Abril"; break;
		case 5: $mes = "Maio"; break;
		case 6: $mes = "Junho"; break;
		case 7: $mes = "Julho"; break;
		case 8: $mes = "Agosto"; break;
		case 9: $mes = "Setembro"; break;
		case 10: $mes = "Outubro"; break;
		case 11: $mes = "Novembro"; break;
		case 12: $mes = "Dezembro"; break;
	}
	return $mes;
}


public function getSalaVirtualAluno($id_turma, $id_curso, $serie, $categoria = 0, $disciplina = 0){

	$and = "";

	if($categoria > 0){
		$and = " AND sala_virtual.id_categoria_sala_virtual = " . $categoria;
	}
	if($disciplina > 0){
		$and = " AND sala_virtual_atribuicao.id_disciplina = " . $disciplina;
	}

	$sqlq = "SELECT
			sala_virtual.titulo as titulo_sala_virtual,
			sala_virtual.descricao_interna,
			sala_virtual.descricao_aluno,
			sala_virtual.data_publicacao,
			sala_virtual.data_entrega,
			sala_virtual.id AS id_sala_virtual,
			sala_virtual_atribuicao.id AS id_sala_virtual_atribuicao,
			pessoa.id AS id_pessoa,
			pessoa.nome,
			disciplina.nome AS nome_disciplina,
			disciplina.nome_abreviado,
			turma.id AS id_turma,
			turma.codigo AS codigo_turma,
			turma.nome AS nome_turma,
			turma.abreviatura,
			curso.id AS id_curso,
			curso.nome AS nome_curso,
			curso.abreviatura AS curso_abreviatura,
			curso.codigo_curso,
			sala_virtual_atribuicao.id_disciplina,
			categoria_sala_virtual.descricao,
			sala_virtual_item.titulo,
			sala_virtual_item.texto_artigo,
			sala_virtual_item.codigo_objeto_video,
			sala_virtual_item.arquivo_download
			FROM
			sala_virtual
			INNER JOIN sala_virtual_atribuicao ON sala_virtual_atribuicao.id_sala_virtual = sala_virtual.id
			INNER JOIN pessoa ON pessoa.id = sala_virtual.id_pessoa_publicacao
			INNER JOIN disciplina ON disciplina.id = sala_virtual_atribuicao.id_disciplina
			INNER JOIN turma ON turma.id = sala_virtual_atribuicao.id_turma
			INNER JOIN curso ON curso.id = sala_virtual_atribuicao.id_curso
			INNER JOIN categoria_sala_virtual ON categoria_sala_virtual.id = sala_virtual.id_categoria_sala_virtual
			INNER JOIN sala_virtual_item ON sala_virtual_item.id_sala_virtual = sala_virtual.id
			WHERE
			sala_virtual_atribuicao.id_turma = ".$id_turma." AND
			sala_virtual_atribuicao.id_curso = ".$id_curso." AND
			sala_virtual_atribuicao.id_serie = ".$serie.$and;

	$retorno = array();

	$rs = $this->_getDb()->query($sqlq);
	foreach ($rs as $key => $value){
		$mes = explode('-', $value['data_publicacao']);
		$mesExtenso = $this->exibeMesExtenso($mes[1]);
		$value['mes_publicacao'] = $mesExtenso;
		$value['dia_publicacao'] = $mes[2];

		$mes = explode('-', $value['data_entrega']);
		$mesExtenso = $this->exibeMesExtenso($mes[1]);
		$value['mes_entrega'] = $mesExtenso;
		$value['dia_entrega'] = $mes[2];
		$retorno[] = $value;

	}
	$rs = $this->_getDb()->close();

	if (count($retorno) == 0) { 
		$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
	}
	else{
		$retorno = array( 'error' => 0, 'retorno' => $retorno );	
	}
	
	if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
}

	/*
	Módulo: Relatorio
	Descrição: Gerar Relatório inadimplente
	Método: GET
	URL: http://localhost/sig/api/index.php/relatorioinadimplente/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 17/11/2015
	Autor: Fábio S. da Silva
	Versão: 1.0
	*/

	public function relatorioInadimplente($id_pessoa = 0){
		$userSes = fSession::get('user');
		
		if($id_pessoa > 0){
			$search.= 'and c.id_pessoa = ' .$id_pessoa;	
		}
		
		$sql = "SELECT 
					c.id,		c.id_pessoa,	p.nome,	
					c.id_conta_bancaria, c.id_categoria, ct.descricao as categoria,	
					c.descricao, c.data_vencimento,	c.valor,
					c.data_lancamento as competencia, c.id_forma_pagamento, f.descricao as forma_pagamento,
					c.id_situacao, s.descricao as situacao
				FROM caixa c
				INNER JOIN pessoa p on p.id = c.id_pessoa
				INNER JOIN conta_bancaria cb on cb.id = c.id_conta_bancaria
				INNER JOIN categoria ct on ct.id = c.id_categoria
				INNER JOIN forma_pagamento f on f.id = c.id_forma_pagamento
				INNER JOIN situacao s on s.id = c.id_situacao
				WHERE c.ativo = 1 and c.id_situacao in(1,3,4) and c.id_tipo_lancamento = 1
					and c.data_vencimento < curdate() " .$search ." 
					and cb.id_entidade = " .$userSes['user']['entidadePessoa'] ."
				ORDER BY nome, data_vencimento ASC";

		$db = $this->_getDb()->query($sql);
		

		$buffer = ' <table border="0" width="100%"> 
						<tr class="cabecalho">
							<td align="left"><strong>NOME</strong></td>
							<td align="left"><strong>DESCRIÇÃO</strong></td>
							<td align="left"><strong>CATEGORIA</strong></td>
							<td align="right"><strong>VENCIMENTO</strong></td>
							<td align="right"><strong>VALOR</strong></td>
						</tr>
						';
		$aNome = array();
		$a=0;
		foreach ($db as $key => $value) {
			$aNome[$key] = $value['nome'];

			$nome = $value['nome'];
			if (array_key_exists($key-1, $aNome)) {
				if($nome == $aNome[$key-1]){
					$nome = '';
				}else{
					$a++;
				}
			}

			if(($a%2) == 0){
				$classContador = 'zebrado_par';
			}else{
				$classContador = 'zebrado_impar';
			}
			
			$buffer .= '<tr class="' .$classContador .'">					
							<td>' .$nome .'</td>
							<td>' .$value['descricao'] .'</td>
							<td style="white-space: nowrap;">' .$value['categoria'] .'</td>
							<td style="white-space: nowrap;" align="right">' .implode('/', array_reverse(explode('-', $value['data_vencimento']))) .'</td>
							<td style="white-space: nowrap;" align="right">R$ ' .number_format($value['valor'], 2, ',', '.') .'</td>					
						</tr>';
		}
		
						
		$buffer .= '
			</table>
			';
		
		$db = $this->_getDb()->close();

		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');
		$data = strftime('%A, %d de %B de %Y', strtotime('today'));
		

		$conteudo = $this->relatorioModelo('Relatório de inadimplentes', 
										   utf8_encode($data), 
										   $buffer,
										   1);

		echo $conteudo;
	}

	/*
	Módulo: Acadêmico
	Descrição: Lista os comunicados gerais de uma turma
	Método: GET
	URL: http://localhost/sig/api/index.php/etapacursoturmaaluno/id_aluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 03/11/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getComunicadoTurma($id_turma){
		$sqlq = "SELECT
				comunicado.id,
				comunicado.descricao,
				comunicado.data_envio,
				comunicado.exibir_turma,
				comunicado.comunicado,
				turma.nome,
				turma.codigo,
				turma.abreviatura,
				turma.serie
				FROM
				comunicado
				INNER JOIN comunicado_turma ON comunicado_turma.id_comunicado = comunicado.id
				INNER JOIN turma ON turma.id = comunicado_turma.id_turma
				WHERE
	            id_turma = " .$id_turma;

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){ fJSON::output($retorno); }else{ return $retorno; };
	}

	/*
	Módulo: Acadêmico
	Descrição: Pega as faltas e presenças de um aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/etapacursoturmaaluno/id_aluno
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 16/11/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/


	public function getFaltaAluno(){
		$user = fSession::get('user');
		$id_aluno = $user['user']['id'];

		$sqlq = "SELECT DISTINCT
				aulas.fase,
				aulas.dia_mes,
				aulas.quantidade_aulas,
				disciplina.nome,
				Count(falta_aluno.id_aulas  = aulas.id) as total_faltas
				FROM
				aulas
				INNER JOIN disciplina ON disciplina.id = aulas.id_disciplina
				INNER JOIN falta_aluno ON falta_aluno.id_aulas = aulas.id
				WHERE
				falta_aluno.id_aluno = ".$id_aluno."
				GROUP BY
				aulas.fase,
				aulas.dia_mes,
				aulas.quantidade_aulas,
				disciplina.nome ORDER BY nome asc
				";

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){
			$data = self::formataData($value['dia_mes']);
			$value['dia_mes'] = $data;		
			$retorno[] = $value;
		}

		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		};
	}

	/*
	Módulo: Administrador
	Descrição: Formata data (dd/mm/yyyy ou mm/yyyy ou dd-mm-yyyy ou mm-yyyy) para padrão MYSQL (yyyy-mm-ddTHH:mm:ss)
	Método: POST	
	Autenticação: Não
	Resposta: STRING
	Data de Criação: 17/11/2015
	Autor: Fábio Roberto Haydn
	Versão: 1.0
	Protótipo:
		$tipo -> str 'date' para 'mm/yyyy' ou str 'datetime' para 'dd/mm/yyyy'
		
		$dia -> Forçar um dia caso seja necessário (e.g. Em campos componentes de intervalos de datas)
		Primeiro dia do mês: $this->formataDataMysql('01','datetime',xxx)
	*/
	
	public static function formataDataMysql($data,$tipo='date',$dia='01'){

		$mtB = explode("/",$data);
		$mtT = explode("-",$data);				

		$cmtB = count($mtB);
		$cmtT = count($mtT);
		$cmt  = ($cmtB>0) ? $cmtB : $cmtT;
		$mt   = ($cmtB>0) ? $mtB  : $mtT ;
		$aDia = array($dia);
		$tm   = array('T12:00:00');

		switch ($tipo) {
			case 'date':
				if($cmt>0){
					switch ($cmt) {
						case 2:
								return implode("-", array_merge(array_reverse($mt),$aDia));
						break;
						
						case 3:
								return implode("-", array_reverse($mt));
						break;
					}
				}
			break;
			
			case 'datetime':
				if($cmt>0){
					switch ($cmt) {
						case 2:
								return implode("-", array_merge(array_merge(array_reverse($mt),$aDia)),$tm);
						break;
						
						case 3: 
								return implode("-", array_merge(array_reverse($mt)),$tm);
						break;
					}
				}
			break;
		}		
	}

	/*
	Módulo: Acadêmico
	Descrição: Lista todas as disciplinas de um aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/getdisciplinaaluno/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 18/11/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/


	public function getDisciplinaAluno(){
		$user = fSession::get('user');
		$id_aluno = $user['user']['id'];

		$sqlq = "SELECT DISTINCT
				disciplina.nome,
				disciplina.id
				FROM
				disciplina
				INNER JOIN curso_professor ON disciplina.id = curso_professor.id_disciplina
				INNER JOIN matricula ON curso_professor.id_curso = matricula.id_curso
				WHERE
				matricula.id_aluno = " . $id_aluno;

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);

		foreach ($rs as $key => $value){	
			$retorno[] = $value;
		}

		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}
		
		if($full == false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		};
	}


	private function paginaImpressao($corpo){
		$userSes = fSession::get('user');

		$filename = "../template_pagina.html";
		
		$handle = fopen ($filename, "r");
		$conteudo = fread ($handle, filesize ($filename));
		fclose ($handle);

		$conteudo = str_replace('{{corpo}}', $corpo, $conteudo);

		return $conteudo;
	}

	/*
	Módulo: Escola
	Descrição: Baixa os arquivos de boletos
	Método: GET
	URL: http://localhost/sig/api/index.php/visualizararquivoboleto/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 25/11/2015
	Autor: Fabio S. da Silva
	Versão: 1.0
	*/
	public function getVisualizarArquivoBoleto($mes_ano, $id_responsavel = '') {
		setlocale(LC_ALL, 'pt_BR', 'pt_BR.utf-8', 'pt_BR.utf-8', 'portuguese');
		date_default_timezone_set('America/Sao_Paulo');

		$path = "../download/" .$mes_ano ."/"; 
		$dir = dir($path); 
		$conteudo = '';
		if($id_responsavel == ''){
			while($file = $dir->read()){ 
			  if($file != '.' && $file != '..' && $file != 'etiqueta.pdf'){
			    $url = $path. $file;

			    $file_open = fopen($url, "r");
				$html = fread($file_open, filesize($url));
				fclose($file_open);

				$conteudo.= $this->paginaImpressao(utf8_encode($html));
			  }
			}	
		}else{
			$url = $path. $id_responsavel .'.html';

		    $file_open = fopen($url, "r");
			$html = fread($file_open, filesize($url));
			fclose($file_open);

			$conteudo = $this->paginaImpressao(utf8_encode($html));
		}
		
		echo $conteudo;
	}


	/*
	Módulo: Geral
	Descrição: Obter listagem de Tipo_lancamento X Situacao
	Método: GET
	URL: http://localhost/sig/api/index.php/tipolancamentosituacao/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 26/11/2015
	Autor: Fábio Roberto Haydn
	*/

	public function tipoLancamentoSituacao($id_tipo_lancamento = 0, $full = false) {

		$sqlq = "SELECT tls.id_situacao id, s.descricao
				 FROM tipo_lancamento_situacao tls 
				 LEFT JOIN situacao s ON s.id = tls.id_situacao";

		if($id_tipo_lancamento>0){ $sqlq .= " WHERE id_tipo_lancamento = ".$id_tipo_lancamento; }

		$retorno = array();

		$rs = $this->_getDb()->query($sqlq);
		foreach ($rs as $key => $value){ $retorno[] = $value; }			
		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhuma registro encontrado."	);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'situacao' => $retorno );
		if(!$full){fJSON::output($retorno); }else{ return $retorno; };
	}


	/*
	Módulo: Geral
	Descrição: Alterar o status da situação na movimentação para PAGO
	Método: GET
	URL: http://localhost/sig/api/index.php/updatesituacaomobimentacao/<id_movimentacao>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 02/12/2015
	Autor: Daniel Swater
	*/

	public function updateSituacaoMovimentacao($id, $full = false){

		$sql = "update caixa set id_situacao = 2 where id = " . $id;

		$retorno = array();

		$rs = $this->_getDb()->query($sql);

		$retorno = array( 'error' => 0, 'mensagem' => "Status alterado com sucesso!" );	
		
		if($full == false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		}
	}


	/*
	Módulo: Financeiro
	Descrição: Muda o status das parcelas de boleto gerado p/ parcela gerada
	Método: GET
	URL: http://localhost/sig/api/index.php/updateparcela/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 08/12/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function postUpdateParcela(){
		$data = json_decode(file_get_contents("php://input"));

		if(property_exists($data, 'id')){
			$parcela = new Parcela($data->id);
		}
		
		//print_r($data);
		//die;
		try{
			if(property_exists($data, 'data_vencimento_formatada')){
				$data_vencimento = self::formataDataMysql($data->data_vencimento_formatada);
				$parcela->setDataVencimento($data_vencimento);
			}
			if(property_exists($data, 'valor_bruto')){
				$parcela->setValorBruto($data->valor_bruto);
			}
			if(property_exists($data, 'valor_liquido')){
				$parcela->setValorLiquido($data->valor_liquido);
			}

			$parcela->store();
			$id = $parcela->getId();

			if(property_exists($data,'id_status_parcela') && property_exists($data,'numero_documento')){
				if($data->id_status_parcela == 1 && $data->numero_documento != ''){
					$sql = "UPDATE caixa SET ativo = 0 
							WHERE numero_documento = '" .$data->numero_documento ."'";
					$rs = $this->_getDb()->query($sql); 
					
					$sql = "SELECT * FROM parcela 
							WHERE numero_documento = '" .$data->numero_documento ."'";
					$rsParcela = $this->_getDb()->query($sql);
					
					foreach ($rsParcela as $key => $value) {
						$sql = "UPDATE parcela SET 
									id_status_parcela = 1,
									numero_documento = NULL
								WHERE id = " .$value['id'];

						$rs = $this->_getDb()->query($sql);
					}
				}
			}

			$retorno = array('error' => 0, 'mensagem' => "Parcela atualizada com sucessos.");
			
		}
		catch(fNoRowsException $e){
			$retorno = array('error' => -1, 'mensagem' => "Ocorreu um erro ao atualizar: ".$e->getMessage());
		}
		
		fJSON::output($retorno);
	}

	
	/*
	Módulo: Acadêmico
	Descrição: Lista todas as disciplinas de um aluno
	Método: GET
	URL: http://localhost/sig/api/index.php/fase/
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 09/12/2015
	Autor: Fabio S. da Silva
	Versão: 1.0
	*/

	public function getFase($ano = false, $full = false){
		if($ano == false){
			$ano = date('Y');	
		}

		$sql = "SELECT 
					df.fase, df.descricao
				FROM etapa e
				INNER JOIN duracao_fases df ON df.id_etapa = e.id
				WHERE e.ano = '" .$ano ."'
				GROUP BY 
					fase";

		$rs = $this->_getDb()->query($sql);

		$retorno = array();
		foreach ($rs as $key => $value){
			$retorno[] = $value;
		}

		$rs = $this->_getDb()->close();

		if (count($retorno) == 0) { 
			$retorno = array('error' => -1, 'mensagem' => "Nenhuma registro encontrado.");
		}else{
			$retorno = array( 'error' => 0, 'retorno' => $retorno );	
		}

		if($full == false){
			fJSON::output($retorno);
		}
		else{
			return $retorno;
		}
	}


		/*
	Módulo: Mesquita
	Descrição: Obter Lista de Falecidos por nome
	Método: GET
	URL: http://localhost/sig/api/index.php/stringfalecido/<stringfalecido>
	Autenticação: Não
	Resposta: JSON
	Data de Criação: 10/12/2015
	Autor: Daniel Swater
	Versão: 1.0
	*/

	public function getFalecidoString($falecido = "", $full = false) {

		$request = $this->_slimApp->request()->params();		
		$like = $request['string'];

		$consulta = "SELECT %S FROM %F %W GROUP BY %G ORDER BY %O";

		$campos   = array('f.id','f.nome');		
		$tabela   = "falecido f";
		$condicao = ($like!='') ? "WHERE f.nome LIKE '%%L%'" : "";
		$grupo 	  = "f.nome";
		$ordem 	  = "f.id";
		
		$sqlq = $consulta;
		$sqlq = str_replace("%S", implode(",", $campos) , $sqlq);
		$sqlq = str_replace("%F", $tabela 				, $sqlq);
		$sqlq = str_replace("%W", $condicao				, $sqlq);
		$sqlq = str_replace("%L", $like 				, $sqlq);
		$sqlq = str_replace("%G", $grupo 				, $sqlq);
		$sqlq = str_replace("%O", $ordem 				, $sqlq);
		
		$retorno = array();
		$rs = $this->_getDb()->query($sqlq);		
		foreach ($rs as $key => $value){ $retorno[] = $value; }
		$rs = $this->_getDb()->close();	

		if (count($retorno) == 0) { 
			$retorno[] = array(	'error' => -1, 'mensagem' => "Nenhum registro na tabela:".$tabela);
			fJSON::output($retorno);
			die();
		}

		$retorno = array( 'error' => 0, 'pessoa' => $retorno );
		fJSON::output($retorno);	
	} 

} //Fecha Classe SIG